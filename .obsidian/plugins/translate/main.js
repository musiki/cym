/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/handlers/fasttext/fasttext_wasm.js
var require_fasttext_wasm = __commonJS({
  "src/handlers/fasttext/fasttext_wasm.js"(exports, module2) {
    var FastTextModule = function() {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(FastTextModule2) {
        FastTextModule2 = FastTextModule2 || {};
        var Module = typeof FastTextModule2 !== "undefined" ? FastTextModule2 : {};
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function(resolve, reject) {
          readyPromiseResolve = resolve;
          readyPromiseReject = reject;
        });
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_main")) {
          Object.defineProperty(Module["ready"], "_main", { configurable: true, get: function() {
            abort("You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_main", { configurable: true, set: function() {
            abort("You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_malloc")) {
          Object.defineProperty(Module["ready"], "_malloc", { configurable: true, get: function() {
            abort("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_malloc", { configurable: true, set: function() {
            abort("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_free")) {
          Object.defineProperty(Module["ready"], "_free", { configurable: true, get: function() {
            abort("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_free", { configurable: true, set: function() {
            abort("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackSave")) {
          Object.defineProperty(Module["ready"], "_stackSave", { configurable: true, get: function() {
            abort("You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackSave", { configurable: true, set: function() {
            abort("You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackRestore")) {
          Object.defineProperty(Module["ready"], "_stackRestore", { configurable: true, get: function() {
            abort("You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackRestore", { configurable: true, set: function() {
            abort("You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackAlloc")) {
          Object.defineProperty(Module["ready"], "_stackAlloc", { configurable: true, get: function() {
            abort("You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackAlloc", { configurable: true, set: function() {
            abort("You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___data_end")) {
          Object.defineProperty(Module["ready"], "___data_end", { configurable: true, get: function() {
            abort("You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___data_end", { configurable: true, set: function() {
            abort("You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___wasm_call_ctors")) {
          Object.defineProperty(Module["ready"], "___wasm_call_ctors", { configurable: true, get: function() {
            abort("You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___wasm_call_ctors", { configurable: true, set: function() {
            abort("You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_fflush")) {
          Object.defineProperty(Module["ready"], "_fflush", { configurable: true, get: function() {
            abort("You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_fflush", { configurable: true, set: function() {
            abort("You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___errno_location")) {
          Object.defineProperty(Module["ready"], "___errno_location", { configurable: true, get: function() {
            abort("You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___errno_location", { configurable: true, set: function() {
            abort("You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___cxa_is_pointer_type")) {
          Object.defineProperty(Module["ready"], "___cxa_is_pointer_type", { configurable: true, get: function() {
            abort("You are getting ___cxa_is_pointer_type on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___cxa_is_pointer_type", { configurable: true, set: function() {
            abort("You are setting ___cxa_is_pointer_type on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___cxa_can_catch")) {
          Object.defineProperty(Module["ready"], "___cxa_can_catch", { configurable: true, get: function() {
            abort("You are getting ___cxa_can_catch on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___cxa_can_catch", { configurable: true, set: function() {
            abort("You are setting ___cxa_can_catch on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "__ZSt18uncaught_exceptionv")) {
          Object.defineProperty(Module["ready"], "__ZSt18uncaught_exceptionv", { configurable: true, get: function() {
            abort("You are getting __ZSt18uncaught_exceptionv on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "__ZSt18uncaught_exceptionv", { configurable: true, set: function() {
            abort("You are setting __ZSt18uncaught_exceptionv on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_setThrew")) {
          Object.defineProperty(Module["ready"], "_setThrew", { configurable: true, get: function() {
            abort("You are getting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_setThrew", { configurable: true, set: function() {
            abort("You are setting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_emscripten_main_thread_process_queued_calls")) {
          Object.defineProperty(Module["ready"], "_emscripten_main_thread_process_queued_calls", { configurable: true, get: function() {
            abort("You are getting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_emscripten_main_thread_process_queued_calls", { configurable: true, set: function() {
            abort("You are setting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "onRuntimeInitialized")) {
          Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, get: function() {
            abort("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, set: function() {
            abort("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        var moduleOverrides = {};
        var key;
        for (key in Module) {
          if (Module.hasOwnProperty(key)) {
            moduleOverrides[key] = Module[key];
          }
        }
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = function(status, toThrow) {
          throw toThrow;
        };
        var ENVIRONMENT_IS_WEB = false;
        var ENVIRONMENT_IS_WORKER = false;
        var ENVIRONMENT_IS_NODE = false;
        var ENVIRONMENT_IS_SHELL = false;
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
        if (Module["ENVIRONMENT"]) {
          throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
        }
        var scriptDirectory = "";
        function locateFile(path) {
          if (Module["locateFile"]) {
            return Module["locateFile"](path, scriptDirectory);
          }
          return scriptDirectory + path;
        }
        var read_, readAsync, readBinary, setWindowTitle;
        var nodeFS;
        var nodePath;
        if (ENVIRONMENT_IS_NODE) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = require("path").dirname(scriptDirectory) + "/";
          } else {
            scriptDirectory = __dirname + "/";
          }
          read_ = function shell_read(filename, binary) {
            if (!nodeFS)
              nodeFS = require("fs");
            if (!nodePath)
              nodePath = require("path");
            filename = nodePath["normalize"](filename);
            return nodeFS["readFileSync"](filename, binary ? null : "utf8");
          };
          readBinary = function readBinary2(filename) {
            var ret = read_(filename, true);
            if (!ret.buffer) {
              ret = new Uint8Array(ret);
            }
            assert(ret.buffer);
            return ret;
          };
          if (process["argv"].length > 1) {
            thisProgram = process["argv"][1].replace(/\\/g, "/");
          }
          arguments_ = process["argv"].slice(2);
          process["on"]("uncaughtException", function(ex) {
            if (!(ex instanceof ExitStatus)) {
              throw ex;
            }
          });
          process["on"]("unhandledRejection", abort);
          quit_ = function(status) {
            process["exit"](status);
          };
          Module["inspect"] = function() {
            return "[Emscripten Module object]";
          };
        } else if (ENVIRONMENT_IS_SHELL) {
          if (typeof read != "undefined") {
            read_ = function shell_read(f) {
              return read(f);
            };
          }
          readBinary = function readBinary2(f) {
            var data;
            if (typeof readbuffer === "function") {
              return new Uint8Array(readbuffer(f));
            }
            data = read(f, "binary");
            assert(typeof data === "object");
            return data;
          };
          if (typeof scriptArgs != "undefined") {
            arguments_ = scriptArgs;
          } else if (typeof arguments != "undefined") {
            arguments_ = arguments;
          }
          if (typeof quit === "function") {
            quit_ = function(status) {
              quit(status);
            };
          }
          if (typeof print !== "undefined") {
            if (typeof console === "undefined")
              console = /** @type{!Console} */
              {};
            console.log = /** @type{!function(this:Console, ...*): undefined} */
            print;
            console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */
            typeof printErr !== "undefined" ? printErr : print;
          }
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = self.location.href;
          } else if (document.currentScript) {
            scriptDirectory = document.currentScript.src;
          }
          if (_scriptDir) {
            scriptDirectory = _scriptDir;
          }
          if (scriptDirectory.indexOf("blob:") !== 0) {
            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
          } else {
            scriptDirectory = "";
          }
          {
            read_ = function shell_read(url) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, false);
              xhr.send(null);
              return xhr.responseText;
            };
            if (ENVIRONMENT_IS_WORKER) {
              readBinary = function readBinary2(url) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.responseType = "arraybuffer";
                xhr.send(null);
                return new Uint8Array(
                  /** @type{!ArrayBuffer} */
                  xhr.response
                );
              };
            }
            readAsync = function readAsync2(url, onload, onerror) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, true);
              xhr.responseType = "arraybuffer";
              xhr.onload = function xhr_onload() {
                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                  onload(xhr.response);
                  return;
                }
                onerror();
              };
              xhr.onerror = onerror;
              xhr.send(null);
            };
          }
          setWindowTitle = function(title) {
            document.title = title;
          };
        } else {
          throw new Error("environment detection error");
        }
        var out = Module["print"] || console.log.bind(console);
        var err = Module["printErr"] || console.warn.bind(console);
        for (key in moduleOverrides) {
          if (moduleOverrides.hasOwnProperty(key)) {
            Module[key] = moduleOverrides[key];
          }
        }
        moduleOverrides = null;
        if (Module["arguments"])
          arguments_ = Module["arguments"];
        if (!Object.getOwnPropertyDescriptor(Module, "arguments"))
          Object.defineProperty(Module, "arguments", { configurable: true, get: function() {
            abort("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (Module["thisProgram"])
          thisProgram = Module["thisProgram"];
        if (!Object.getOwnPropertyDescriptor(Module, "thisProgram"))
          Object.defineProperty(Module, "thisProgram", { configurable: true, get: function() {
            abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (Module["quit"])
          quit_ = Module["quit"];
        if (!Object.getOwnPropertyDescriptor(Module, "quit"))
          Object.defineProperty(Module, "quit", { configurable: true, get: function() {
            abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        assert(typeof Module["memoryInitializerPrefixURL"] === "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["pthreadMainPrefixURL"] === "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["cdInitializerPrefixURL"] === "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["filePackagePrefixURL"] === "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["read"] === "undefined", "Module.read option was removed (modify read_ in JS)");
        assert(typeof Module["readAsync"] === "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
        assert(typeof Module["readBinary"] === "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
        assert(typeof Module["setWindowTitle"] === "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
        assert(typeof Module["TOTAL_MEMORY"] === "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
        if (!Object.getOwnPropertyDescriptor(Module, "read"))
          Object.defineProperty(Module, "read", { configurable: true, get: function() {
            abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "readAsync"))
          Object.defineProperty(Module, "readAsync", { configurable: true, get: function() {
            abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "readBinary"))
          Object.defineProperty(Module, "readBinary", { configurable: true, get: function() {
            abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "setWindowTitle"))
          Object.defineProperty(Module, "setWindowTitle", { configurable: true, get: function() {
            abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";
        var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";
        var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";
        var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";
        var STACK_ALIGN = 16;
        function alignMemory(size, factor) {
          if (!factor)
            factor = STACK_ALIGN;
          return Math.ceil(size / factor) * factor;
        }
        function getNativeTypeSize(type) {
          switch (type) {
            case "i1":
            case "i8":
              return 1;
            case "i16":
              return 2;
            case "i32":
              return 4;
            case "i64":
              return 8;
            case "float":
              return 4;
            case "double":
              return 8;
            default: {
              if (type[type.length - 1] === "*") {
                return 4;
              } else if (type[0] === "i") {
                var bits = Number(type.substr(1));
                assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                return bits / 8;
              } else {
                return 0;
              }
            }
          }
        }
        function warnOnce(text2) {
          if (!warnOnce.shown)
            warnOnce.shown = {};
          if (!warnOnce.shown[text2]) {
            warnOnce.shown[text2] = 1;
            err(text2);
          }
        }
        function convertJsFunctionToWasm(func, sig) {
          if (typeof WebAssembly.Function === "function") {
            var typeNames = {
              "i": "i32",
              "j": "i64",
              "f": "f32",
              "d": "f64"
            };
            var type = {
              parameters: [],
              results: sig[0] == "v" ? [] : [typeNames[sig[0]]]
            };
            for (var i = 1; i < sig.length; ++i) {
              type.parameters.push(typeNames[sig[i]]);
            }
            return new WebAssembly.Function(type, func);
          }
          var typeSection = [
            1,
            // id: section,
            0,
            // length: 0 (placeholder)
            1,
            // count: 1
            96
            // form: func
          ];
          var sigRet = sig.slice(0, 1);
          var sigParam = sig.slice(1);
          var typeCodes = {
            "i": 127,
            // i32
            "j": 126,
            // i64
            "f": 125,
            // f32
            "d": 124
            // f64
          };
          typeSection.push(sigParam.length);
          for (var i = 0; i < sigParam.length; ++i) {
            typeSection.push(typeCodes[sigParam[i]]);
          }
          if (sigRet == "v") {
            typeSection.push(0);
          } else {
            typeSection = typeSection.concat([1, typeCodes[sigRet]]);
          }
          typeSection[1] = typeSection.length - 2;
          var bytes = new Uint8Array([
            0,
            97,
            115,
            109,
            // magic ("\0asm")
            1,
            0,
            0,
            0
            // version: 1
          ].concat(typeSection, [
            2,
            7,
            // import section
            // (import "e" "f" (func 0 (type 0)))
            1,
            1,
            101,
            1,
            102,
            0,
            0,
            7,
            5,
            // export section
            // (export "f" (func 0 (type 0)))
            1,
            1,
            102,
            0,
            0
          ]));
          var module3 = new WebAssembly.Module(bytes);
          var instance28 = new WebAssembly.Instance(module3, {
            "e": {
              "f": func
            }
          });
          var wrappedFunc = instance28.exports["f"];
          return wrappedFunc;
        }
        var freeTableIndexes = [];
        var functionsInTableMap;
        function addFunctionWasm(func, sig) {
          var table = wasmTable;
          if (!functionsInTableMap) {
            functionsInTableMap = /* @__PURE__ */ new WeakMap();
            for (var i = 0; i < table.length; i++) {
              var item = table.get(i);
              if (item) {
                functionsInTableMap.set(item, i);
              }
            }
          }
          if (functionsInTableMap.has(func)) {
            return functionsInTableMap.get(func);
          }
          var ret;
          if (freeTableIndexes.length) {
            ret = freeTableIndexes.pop();
          } else {
            ret = table.length;
            try {
              table.grow(1);
            } catch (err2) {
              if (!(err2 instanceof RangeError)) {
                throw err2;
              }
              throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
            }
          }
          try {
            table.set(ret, func);
          } catch (err2) {
            if (!(err2 instanceof TypeError)) {
              throw err2;
            }
            assert(typeof sig !== "undefined", "Missing signature argument to addFunction");
            var wrapped = convertJsFunctionToWasm(func, sig);
            table.set(ret, wrapped);
          }
          functionsInTableMap.set(func, ret);
          return ret;
        }
        function removeFunctionWasm(index) {
          functionsInTableMap.delete(wasmTable.get(index));
          freeTableIndexes.push(index);
        }
        function addFunction(func, sig) {
          assert(typeof func !== "undefined");
          return addFunctionWasm(func, sig);
        }
        function removeFunction(index) {
          removeFunctionWasm(index);
        }
        function makeBigInt(low, high, unsigned) {
          return unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;
        }
        var tempRet0 = 0;
        var setTempRet0 = function(value) {
          tempRet0 = value;
        };
        var getTempRet0 = function() {
          return tempRet0;
        };
        function getCompilerSetting(name) {
          throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work";
        }
        var GLOBAL_BASE = 1024;
        var wasmBinary;
        if (Module["wasmBinary"])
          wasmBinary = Module["wasmBinary"];
        if (!Object.getOwnPropertyDescriptor(Module, "wasmBinary"))
          Object.defineProperty(Module, "wasmBinary", { configurable: true, get: function() {
            abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        var noExitRuntime;
        if (Module["noExitRuntime"])
          noExitRuntime = Module["noExitRuntime"];
        if (!Object.getOwnPropertyDescriptor(Module, "noExitRuntime"))
          Object.defineProperty(Module, "noExitRuntime", { configurable: true, get: function() {
            abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (typeof WebAssembly !== "object") {
          abort("no native wasm support detected");
        }
        function setValue(ptr, value, type, noSafe) {
          type = type || "i8";
          if (type.charAt(type.length - 1) === "*")
            type = "i32";
          switch (type) {
            case "i1":
              HEAP8[ptr >> 0] = value;
              break;
            case "i8":
              HEAP8[ptr >> 0] = value;
              break;
            case "i16":
              HEAP16[ptr >> 1] = value;
              break;
            case "i32":
              HEAP32[ptr >> 2] = value;
              break;
            case "i64":
              tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
              break;
            case "float":
              HEAPF32[ptr >> 2] = value;
              break;
            case "double":
              HEAPF64[ptr >> 3] = value;
              break;
            default:
              abort("invalid type for setValue: " + type);
          }
        }
        function getValue(ptr, type, noSafe) {
          type = type || "i8";
          if (type.charAt(type.length - 1) === "*")
            type = "i32";
          switch (type) {
            case "i1":
              return HEAP8[ptr >> 0];
            case "i8":
              return HEAP8[ptr >> 0];
            case "i16":
              return HEAP16[ptr >> 1];
            case "i32":
              return HEAP32[ptr >> 2];
            case "i64":
              return HEAP32[ptr >> 2];
            case "float":
              return HEAPF32[ptr >> 2];
            case "double":
              return HEAPF64[ptr >> 3];
            default:
              abort("invalid type for getValue: " + type);
          }
          return null;
        }
        var wasmMemory;
        var wasmTable = new WebAssembly.Table({
          "initial": 1356,
          "maximum": 1356,
          "element": "anyfunc"
        });
        var ABORT = false;
        var EXITSTATUS = 0;
        function assert(condition, text2) {
          if (!condition) {
            abort("Assertion failed: " + text2);
          }
        }
        function getCFunc(ident) {
          var func = Module["_" + ident];
          assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
          return func;
        }
        function ccall(ident, returnType, argTypes, args, opts) {
          var toC = {
            "string": function(str) {
              var ret2 = 0;
              if (str !== null && str !== void 0 && str !== 0) {
                var len = (str.length << 2) + 1;
                ret2 = stackAlloc(len);
                stringToUTF8(str, ret2, len);
              }
              return ret2;
            },
            "array": function(arr) {
              var ret2 = stackAlloc(arr.length);
              writeArrayToMemory(arr, ret2);
              return ret2;
            }
          };
          function convertReturnValue(ret2) {
            if (returnType === "string")
              return UTF8ToString(ret2);
            if (returnType === "boolean")
              return Boolean(ret2);
            return ret2;
          }
          var func = getCFunc(ident);
          var cArgs = [];
          var stack = 0;
          assert(returnType !== "array", 'Return type should not be "array".');
          if (args) {
            for (var i = 0; i < args.length; i++) {
              var converter = toC[argTypes[i]];
              if (converter) {
                if (stack === 0)
                  stack = stackSave();
                cArgs[i] = converter(args[i]);
              } else {
                cArgs[i] = args[i];
              }
            }
          }
          var ret = func.apply(null, cArgs);
          ret = convertReturnValue(ret);
          if (stack !== 0)
            stackRestore(stack);
          return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
          return function() {
            return ccall(ident, returnType, argTypes, arguments, opts);
          };
        }
        var ALLOC_NORMAL = 0;
        var ALLOC_STACK = 1;
        var ALLOC_NONE = 2;
        function allocate(slab, types, allocator, ptr) {
          var zeroinit, size;
          if (typeof slab === "number") {
            zeroinit = true;
            size = slab;
          } else {
            zeroinit = false;
            size = slab.length;
          }
          var singleType = typeof types === "string" ? types : null;
          var ret;
          if (allocator == ALLOC_NONE) {
            ret = ptr;
          } else {
            ret = [
              _malloc2,
              stackAlloc
            ][allocator](Math.max(size, singleType ? 1 : types.length));
          }
          if (zeroinit) {
            var stop;
            ptr = ret;
            assert((ret & 3) == 0);
            stop = ret + (size & ~3);
            for (; ptr < stop; ptr += 4) {
              HEAP32[ptr >> 2] = 0;
            }
            stop = ret + size;
            while (ptr < stop) {
              HEAP8[ptr++ >> 0] = 0;
            }
            return ret;
          }
          if (singleType === "i8") {
            if (slab.subarray || slab.slice) {
              HEAPU8.set(
                /** @type {!Uint8Array} */
                slab,
                ret
              );
            } else {
              HEAPU8.set(new Uint8Array(slab), ret);
            }
            return ret;
          }
          var i = 0, type, typeSize, previousType;
          while (i < size) {
            var curr = slab[i];
            type = singleType || types[i];
            if (type === 0) {
              i++;
              continue;
            }
            assert(type, "Must know what type to store in allocate!");
            if (type == "i64")
              type = "i32";
            setValue(ret + i, curr, type);
            if (previousType !== type) {
              typeSize = getNativeTypeSize(type);
              previousType = type;
            }
            i += typeSize;
          }
          return ret;
        }
        var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
        function UTF8ArrayToString(heap, idx, maxBytesToRead) {
          var endIdx = idx + maxBytesToRead;
          var endPtr = idx;
          while (heap[endPtr] && !(endPtr >= endIdx))
            ++endPtr;
          if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
            return UTF8Decoder.decode(heap.subarray(idx, endPtr));
          } else {
            var str = "";
            while (idx < endPtr) {
              var u0 = heap[idx++];
              if (!(u0 & 128)) {
                str += String.fromCharCode(u0);
                continue;
              }
              var u1 = heap[idx++] & 63;
              if ((u0 & 224) == 192) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
              }
              var u2 = heap[idx++] & 63;
              if ((u0 & 240) == 224) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
              } else {
                if ((u0 & 248) != 240)
                  warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!");
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
              }
              if (u0 < 65536) {
                str += String.fromCharCode(u0);
              } else {
                var ch = u0 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
              }
            }
          }
          return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
          return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
          if (!(maxBytesToWrite > 0))
            return 0;
          var startIdx = outIdx;
          var endIdx = outIdx + maxBytesToWrite - 1;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
              var u1 = str.charCodeAt(++i);
              u = 65536 + ((u & 1023) << 10) | u1 & 1023;
            }
            if (u <= 127) {
              if (outIdx >= endIdx)
                break;
              heap[outIdx++] = u;
            } else if (u <= 2047) {
              if (outIdx + 1 >= endIdx)
                break;
              heap[outIdx++] = 192 | u >> 6;
              heap[outIdx++] = 128 | u & 63;
            } else if (u <= 65535) {
              if (outIdx + 2 >= endIdx)
                break;
              heap[outIdx++] = 224 | u >> 12;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            } else {
              if (outIdx + 3 >= endIdx)
                break;
              if (u >= 2097152)
                warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");
              heap[outIdx++] = 240 | u >> 18;
              heap[outIdx++] = 128 | u >> 12 & 63;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            }
          }
          heap[outIdx] = 0;
          return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
          assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        function lengthBytesUTF8(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343)
              u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
            if (u <= 127)
              ++len;
            else if (u <= 2047)
              len += 2;
            else if (u <= 65535)
              len += 3;
            else
              len += 4;
          }
          return len;
        }
        function AsciiToString(ptr) {
          var str = "";
          while (1) {
            var ch = HEAPU8[ptr++ >> 0];
            if (!ch)
              return str;
            str += String.fromCharCode(ch);
          }
        }
        function stringToAscii(str, outPtr) {
          return writeAsciiToMemory(str, outPtr, false);
        }
        var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
        function UTF16ToString(ptr, maxBytesToRead) {
          assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
          var endPtr = ptr;
          var idx = endPtr >> 1;
          var maxIdx = idx + maxBytesToRead / 2;
          while (!(idx >= maxIdx) && HEAPU16[idx])
            ++idx;
          endPtr = idx << 1;
          if (endPtr - ptr > 32 && UTF16Decoder) {
            return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
          } else {
            var i = 0;
            var str = "";
            while (1) {
              var codeUnit = HEAP16[ptr + i * 2 >> 1];
              if (codeUnit == 0 || i == maxBytesToRead / 2)
                return str;
              ++i;
              str += String.fromCharCode(codeUnit);
            }
          }
        }
        function stringToUTF16(str, outPtr, maxBytesToWrite) {
          assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
          assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 2)
            return 0;
          maxBytesToWrite -= 2;
          var startPtr = outPtr;
          var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
          for (var i = 0; i < numCharsToWrite; ++i) {
            var codeUnit = str.charCodeAt(i);
            HEAP16[outPtr >> 1] = codeUnit;
            outPtr += 2;
          }
          HEAP16[outPtr >> 1] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF16(str) {
          return str.length * 2;
        }
        function UTF32ToString(ptr, maxBytesToRead) {
          assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
          var i = 0;
          var str = "";
          while (!(i >= maxBytesToRead / 4)) {
            var utf32 = HEAP32[ptr + i * 4 >> 2];
            if (utf32 == 0)
              break;
            ++i;
            if (utf32 >= 65536) {
              var ch = utf32 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            } else {
              str += String.fromCharCode(utf32);
            }
          }
          return str;
        }
        function stringToUTF32(str, outPtr, maxBytesToWrite) {
          assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
          assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 4)
            return 0;
          var startPtr = outPtr;
          var endPtr = startPtr + maxBytesToWrite - 4;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343) {
              var trailSurrogate = str.charCodeAt(++i);
              codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
            }
            HEAP32[outPtr >> 2] = codeUnit;
            outPtr += 4;
            if (outPtr + 4 > endPtr)
              break;
          }
          HEAP32[outPtr >> 2] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF32(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343)
              ++i;
            len += 4;
          }
          return len;
        }
        function allocateUTF8(str) {
          var size = lengthBytesUTF8(str) + 1;
          var ret = _malloc2(size);
          if (ret)
            stringToUTF8Array(str, HEAP8, ret, size);
          return ret;
        }
        function allocateUTF8OnStack(str) {
          var size = lengthBytesUTF8(str) + 1;
          var ret = stackAlloc(size);
          stringToUTF8Array(str, HEAP8, ret, size);
          return ret;
        }
        function writeStringToMemory(string, buffer2, dontAddNull) {
          warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
          var lastChar, end;
          if (dontAddNull) {
            end = buffer2 + lengthBytesUTF8(string);
            lastChar = HEAP8[end];
          }
          stringToUTF8(string, buffer2, Infinity);
          if (dontAddNull)
            HEAP8[end] = lastChar;
        }
        function writeArrayToMemory(array, buffer2) {
          assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
          HEAP8.set(array, buffer2);
        }
        function writeAsciiToMemory(str, buffer2, dontAddNull) {
          for (var i = 0; i < str.length; ++i) {
            assert(str.charCodeAt(i) === str.charCodeAt(i) & 255);
            HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
          }
          if (!dontAddNull)
            HEAP8[buffer2 >> 0] = 0;
        }
        var PAGE_SIZE = 16384;
        var WASM_PAGE_SIZE = 65536;
        function alignUp(x, multiple) {
          if (x % multiple > 0) {
            x += multiple - x % multiple;
          }
          return x;
        }
        var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
          buffer = buf;
          Module["HEAP8"] = HEAP8 = new Int8Array(buf);
          Module["HEAP16"] = HEAP16 = new Int16Array(buf);
          Module["HEAP32"] = HEAP32 = new Int32Array(buf);
          Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
          Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
          Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
          Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
          Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var STATIC_BASE = 1024, STACK_BASE = 5281232, STACKTOP = STACK_BASE, STACK_MAX = 38352, DYNAMIC_BASE = 5281232;
        assert(STACK_BASE % 16 === 0, "stack must start aligned");
        assert(DYNAMIC_BASE % 16 === 0, "heap must start aligned");
        var TOTAL_STACK = 5242880;
        if (Module["TOTAL_STACK"])
          assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");
        var INITIAL_INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
        if (!Object.getOwnPropertyDescriptor(Module, "INITIAL_MEMORY"))
          Object.defineProperty(Module, "INITIAL_MEMORY", { configurable: true, get: function() {
            abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
        assert(
          typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== void 0 && Int32Array.prototype.set !== void 0,
          "JS engine does not provide full typed array support"
        );
        if (Module["wasmMemory"]) {
          wasmMemory = Module["wasmMemory"];
        } else {
          wasmMemory = new WebAssembly.Memory({
            "initial": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE,
            "maximum": 2147483648 / WASM_PAGE_SIZE
          });
        }
        if (wasmMemory) {
          buffer = wasmMemory.buffer;
        }
        INITIAL_INITIAL_MEMORY = buffer.byteLength;
        assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
        assert(65536 % WASM_PAGE_SIZE === 0);
        updateGlobalBufferAndViews(buffer);
        function writeStackCookie() {
          assert((STACK_MAX & 3) == 0);
          HEAPU32[(STACK_MAX >> 2) + 1] = 34821223;
          HEAPU32[(STACK_MAX >> 2) + 2] = 2310721022;
          HEAP32[0] = 1668509029;
        }
        function checkStackCookie() {
          var cookie1 = HEAPU32[(STACK_MAX >> 2) + 1];
          var cookie2 = HEAPU32[(STACK_MAX >> 2) + 2];
          if (cookie1 != 34821223 || cookie2 != 2310721022) {
            abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " " + cookie1.toString(16));
          }
          if (HEAP32[0] !== 1668509029)
            abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
        }
        (function() {
          var h16 = new Int16Array(1);
          var h8 = new Int8Array(h16.buffer);
          h16[0] = 25459;
          if (h8[0] !== 115 || h8[1] !== 99)
            throw "Runtime error: expected the system to be little-endian!";
        })();
        function abortFnPtrError(ptr, sig) {
          abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
        }
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATMAIN__ = [];
        var __ATEXIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        var runtimeExited = false;
        function preRun() {
          if (Module["preRun"]) {
            if (typeof Module["preRun"] == "function")
              Module["preRun"] = [Module["preRun"]];
            while (Module["preRun"].length) {
              addOnPreRun(Module["preRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
          checkStackCookie();
          assert(!runtimeInitialized);
          runtimeInitialized = true;
          if (!Module["noFSInit"] && !FS.init.initialized)
            FS.init();
          TTY.init();
          callRuntimeCallbacks(__ATINIT__);
        }
        function preMain() {
          checkStackCookie();
          FS.ignorePermissions = false;
          callRuntimeCallbacks(__ATMAIN__);
        }
        function exitRuntime() {
          checkStackCookie();
          runtimeExited = true;
        }
        function postRun() {
          checkStackCookie();
          if (Module["postRun"]) {
            if (typeof Module["postRun"] == "function")
              Module["postRun"] = [Module["postRun"]];
            while (Module["postRun"].length) {
              addOnPostRun(Module["postRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
          __ATPRERUN__.unshift(cb);
        }
        function addOnInit(cb) {
          __ATINIT__.unshift(cb);
        }
        function addOnPreMain(cb) {
          __ATMAIN__.unshift(cb);
        }
        function addOnExit(cb) {
        }
        function addOnPostRun(cb) {
          __ATPOSTRUN__.unshift(cb);
        }
        assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        var Math_abs = Math.abs;
        var Math_cos = Math.cos;
        var Math_sin = Math.sin;
        var Math_tan = Math.tan;
        var Math_acos = Math.acos;
        var Math_asin = Math.asin;
        var Math_atan = Math.atan;
        var Math_atan2 = Math.atan2;
        var Math_exp = Math.exp;
        var Math_log = Math.log;
        var Math_sqrt = Math.sqrt;
        var Math_ceil = Math.ceil;
        var Math_floor = Math.floor;
        var Math_pow = Math.pow;
        var Math_imul = Math.imul;
        var Math_fround = Math.fround;
        var Math_round = Math.round;
        var Math_min = Math.min;
        var Math_max = Math.max;
        var Math_clz32 = Math.clz32;
        var Math_trunc = Math.trunc;
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        var runDependencyTracking = {};
        function getUniqueRunDependency(id) {
          var orig = id;
          while (1) {
            if (!runDependencyTracking[id])
              return id;
            id = orig + Math.random();
          }
        }
        function addRunDependency(id) {
          runDependencies++;
          if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
          }
          if (id) {
            assert(!runDependencyTracking[id]);
            runDependencyTracking[id] = 1;
            if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
              runDependencyWatcher = setInterval(function() {
                if (ABORT) {
                  clearInterval(runDependencyWatcher);
                  runDependencyWatcher = null;
                  return;
                }
                var shown = false;
                for (var dep in runDependencyTracking) {
                  if (!shown) {
                    shown = true;
                    err("still waiting on run dependencies:");
                  }
                  err("dependency: " + dep);
                }
                if (shown) {
                  err("(end of list)");
                }
              }, 1e4);
            }
          } else {
            err("warning: run dependency added without ID");
          }
        }
        function removeRunDependency(id) {
          runDependencies--;
          if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
          }
          if (id) {
            assert(runDependencyTracking[id]);
            delete runDependencyTracking[id];
          } else {
            err("warning: run dependency removed without ID");
          }
          if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
              clearInterval(runDependencyWatcher);
              runDependencyWatcher = null;
            }
            if (dependenciesFulfilled) {
              var callback = dependenciesFulfilled;
              dependenciesFulfilled = null;
              callback();
            }
          }
        }
        Module["preloadedImages"] = {};
        Module["preloadedAudios"] = {};
        function abort(what) {
          if (Module["onAbort"]) {
            Module["onAbort"](what);
          }
          what += "";
          err(what);
          ABORT = true;
          EXITSTATUS = 1;
          var output = "abort(" + what + ") at " + stackTrace();
          what = output;
          var e = new WebAssembly.RuntimeError(what);
          readyPromiseReject(e);
          throw e;
        }
        var memoryInitializer = null;
        function hasPrefix(str, prefix) {
          return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
          return hasPrefix(filename, dataURIPrefix);
        }
        var fileURIPrefix = "file://";
        function isFileURI(filename) {
          return hasPrefix(filename, fileURIPrefix);
        }
        function createExportWrapper(name, fixedasm) {
          return function() {
            var displayName = name;
            var asm2 = fixedasm;
            if (!fixedasm) {
              asm2 = Module["asm"];
            }
            assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
            assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
            if (!asm2[name]) {
              assert(asm2[name], "exported native function `" + displayName + "` not found");
            }
            return asm2[name].apply(null, arguments);
          };
        }
        var wasmBinaryFile = "fasttext_wasm.wasm";
        if (!isDataURI(wasmBinaryFile)) {
          wasmBinaryFile = locateFile(wasmBinaryFile);
        }
        function getBinary() {
          try {
            if (wasmBinary) {
              return new Uint8Array(wasmBinary);
            }
            if (readBinary) {
              return readBinary(wasmBinaryFile);
            } else {
              throw "both async and sync fetching of the wasm failed";
            }
          } catch (err2) {
            abort(err2);
          }
        }
        function getBinaryPromise() {
          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
              if (!response["ok"]) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
              }
              return response["arrayBuffer"]();
            }).catch(function() {
              return getBinary();
            });
          }
          return Promise.resolve().then(getBinary);
        }
        function createWasm() {
          var info = {
            "env": asmLibraryArg,
            "wasi_snapshot_preview1": asmLibraryArg
          };
          function receiveInstance(instance28, module3) {
            var exports3 = instance28.exports;
            Module["asm"] = exports3;
            removeRunDependency("wasm-instantiate");
          }
          addRunDependency("wasm-instantiate");
          var trueModule = Module;
          function receiveInstantiatedSource(output) {
            assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
            trueModule = null;
            receiveInstance(output["instance"]);
          }
          function instantiateArrayBuffer(receiver) {
            return getBinaryPromise().then(function(binary) {
              return WebAssembly.instantiate(binary, info);
            }).then(receiver, function(reason) {
              err("failed to asynchronously prepare wasm: " + reason);
              abort(reason);
            });
          }
          async function instantiateAsync() {
            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
            !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
              let path = `${app.vault.configDir}/plugins/translate/models/fasttext/fasttext_wasm.wasm`;
              if (!await app.vault.adapter.exists(path))
                abort("Could not find fasttext_wasm.wasm in the vault");
              let file = await app.vault.adapter.readBinary(path);
              if (!file)
                abort("fasttext_wasm.wasm is empty");
              let result = WebAssembly.instantiate(file, info);
              return result.then(receiveInstantiatedSource, function(reason) {
                err("wasm streaming compile failed: " + reason);
                err("falling back to ArrayBuffer instantiation");
                return instantiateArrayBuffer(receiveInstantiatedSource);
              });
            } else {
              return instantiateArrayBuffer(receiveInstantiatedSource);
            }
          }
          if (Module["instantiateWasm"]) {
            try {
              var exports2 = Module["instantiateWasm"](info, receiveInstance);
              return exports2;
            } catch (e) {
              err("Module.instantiateWasm callback failed with error: " + e);
              return false;
            }
          }
          instantiateAsync();
          return {};
        }
        var tempDouble;
        var tempI64;
        var ASM_CONSTS = {};
        __ATINIT__.push({ func: function() {
          ___wasm_call_ctors();
        } });
        function abortStackOverflow(allocSize) {
          abort("Stack overflow! Attempted to allocate " + allocSize + " bytes on the stack, but stack has only " + (STACK_MAX - stackSave() + allocSize) + " bytes available!");
        }
        function callRuntimeCallbacks(callbacks) {
          while (callbacks.length > 0) {
            var callback = callbacks.shift();
            if (typeof callback == "function") {
              callback(Module);
              continue;
            }
            var func = callback.func;
            if (typeof func === "number") {
              if (callback.arg === void 0) {
                wasmTable.get(func)();
              } else {
                wasmTable.get(func)(callback.arg);
              }
            } else {
              func(callback.arg === void 0 ? null : callback.arg);
            }
          }
        }
        function demangle(func) {
          warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
          return func;
        }
        function demangleAll(text2) {
          var regex = /\b_Z[\w\d_]+/g;
          return text2.replace(
            regex,
            function(x) {
              var y = demangle(x);
              return x === y ? x : y + " [" + x + "]";
            }
          );
        }
        function dynCallLegacy(sig, ptr, args) {
          assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
          if (args && args.length) {
            assert(args.length === sig.substring(1).replace(/j/g, "--").length);
          } else {
            assert(sig.length == 1);
          }
          if (args && args.length) {
            return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
          }
          return Module["dynCall_" + sig].call(null, ptr);
        }
        function dynCall(sig, ptr, args) {
          if (sig.indexOf("j") != -1) {
            return dynCallLegacy(sig, ptr, args);
          }
          return wasmTable.get(ptr).apply(null, args);
        }
        function jsStackTrace() {
          var error = new Error();
          if (!error.stack) {
            try {
              throw new Error();
            } catch (e) {
              error = e;
            }
            if (!error.stack) {
              return "(no stack trace available)";
            }
          }
          return error.stack.toString();
        }
        function stackTrace() {
          var js = jsStackTrace();
          if (Module["extraStackTrace"])
            js += "\n" + Module["extraStackTrace"]();
          return demangleAll(js);
        }
        function ___assert_fail(condition, filename, line, func) {
          abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
        }
        var ExceptionInfoAttrs = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
        function ___cxa_allocate_exception(size) {
          return _malloc2(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
        }
        function _atexit(func, arg) {
        }
        function ___cxa_atexit(a0, a1) {
          return _atexit(a0, a1);
        }
        function ExceptionInfo(excPtr) {
          this.excPtr = excPtr;
          this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
          this.set_type = function(type) {
            HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2] = type;
          };
          this.get_type = function() {
            return HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2];
          };
          this.set_destructor = function(destructor) {
            HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2] = destructor;
          };
          this.get_destructor = function() {
            return HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2];
          };
          this.set_refcount = function(refcount) {
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = refcount;
          };
          this.set_caught = function(caught) {
            caught = caught ? 1 : 0;
            HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] = caught;
          };
          this.get_caught = function() {
            return HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] != 0;
          };
          this.set_rethrown = function(rethrown) {
            rethrown = rethrown ? 1 : 0;
            HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] = rethrown;
          };
          this.get_rethrown = function() {
            return HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] != 0;
          };
          this.init = function(type, destructor) {
            this.set_type(type);
            this.set_destructor(destructor);
            this.set_refcount(0);
            this.set_caught(false);
            this.set_rethrown(false);
          };
          this.add_ref = function() {
            var value = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = value + 1;
          };
          this.release_ref = function() {
            var prev = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = prev - 1;
            assert(prev > 0);
            return prev === 1;
          };
        }
        function CatchInfo(ptr) {
          this.free = function() {
            _free2(this.ptr);
            this.ptr = 0;
          };
          this.set_base_ptr = function(basePtr) {
            HEAP32[this.ptr >> 2] = basePtr;
          };
          this.get_base_ptr = function() {
            return HEAP32[this.ptr >> 2];
          };
          this.set_adjusted_ptr = function(adjustedPtr) {
            var ptrSize = 4;
            HEAP32[this.ptr + ptrSize >> 2] = adjustedPtr;
          };
          this.get_adjusted_ptr = function() {
            var ptrSize = 4;
            return HEAP32[this.ptr + ptrSize >> 2];
          };
          this.get_exception_ptr = function() {
            var isPointer = ___cxa_is_pointer_type(
              this.get_exception_info().get_type()
            );
            if (isPointer) {
              return HEAP32[this.get_base_ptr() >> 2];
            }
            var adjusted = this.get_adjusted_ptr();
            if (adjusted !== 0)
              return adjusted;
            return this.get_base_ptr();
          };
          this.get_exception_info = function() {
            return new ExceptionInfo(this.get_base_ptr());
          };
          if (ptr === void 0) {
            this.ptr = _malloc2(8);
            this.set_adjusted_ptr(0);
          } else {
            this.ptr = ptr;
          }
        }
        var exceptionCaught = [];
        function exception_addRef(info) {
          err("addref " + info.excPtr);
          info.add_ref();
        }
        function ___cxa_begin_catch(ptr) {
          var catchInfo = new CatchInfo(ptr);
          var info = catchInfo.get_exception_info();
          if (!info.get_caught()) {
            info.set_caught(true);
            __ZSt18uncaught_exceptionv.uncaught_exceptions--;
          }
          info.set_rethrown(false);
          exceptionCaught.push(catchInfo);
          err("cxa_begin_catch " + [ptr, "stack", exceptionCaught]);
          exception_addRef(info);
          return catchInfo.get_exception_ptr();
        }
        function ___cxa_current_primary_exception() {
          if (!exceptionCaught.length) {
            return 0;
          }
          var catchInfo = exceptionCaught[exceptionCaught.length - 1];
          exception_addRef(catchInfo.get_exception_info());
          return catchInfo.get_base_ptr();
        }
        function ___cxa_free_exception(ptr) {
          try {
            return _free2(new ExceptionInfo(ptr).ptr);
          } catch (e) {
            err("exception during cxa_free_exception: " + e);
          }
        }
        var exceptionLast = 0;
        function exception_decRef(info) {
          err("decref " + info.excPtr);
          if (info.release_ref() && !info.get_rethrown()) {
            var destructor = info.get_destructor();
            if (destructor) {
              wasmTable.get(destructor)(info.excPtr);
            }
            ___cxa_free_exception(info.excPtr);
            err("decref freeing exception " + [info.excPtr, exceptionLast, "stack", exceptionCaught]);
          }
        }
        function ___cxa_decrement_exception_refcount(ptr) {
          if (!ptr)
            return;
          exception_decRef(new ExceptionInfo(ptr));
        }
        function ___cxa_end_catch() {
          _setThrew(0);
          assert(exceptionCaught.length > 0);
          var catchInfo = exceptionCaught.pop();
          err("cxa_end_catch popped " + [catchInfo, exceptionLast, "stack", exceptionCaught]);
          exception_decRef(catchInfo.get_exception_info());
          catchInfo.free();
          exceptionLast = 0;
        }
        function ___resumeException(catchInfoPtr) {
          var catchInfo = new CatchInfo(catchInfoPtr);
          var ptr = catchInfo.get_base_ptr();
          out("Resuming exception " + [ptr, exceptionLast]);
          if (!exceptionLast) {
            exceptionLast = ptr;
          }
          catchInfo.free();
          throw ptr;
        }
        var exceptionThrowBuf = 0;
        function ___cxa_find_matching_catch_2() {
          var thrown = exceptionLast;
          if (!thrown) {
            return (setTempRet0(0), 0) | 0;
          }
          var info = new ExceptionInfo(thrown);
          var thrownType = info.get_type();
          var catchInfo = new CatchInfo();
          catchInfo.set_base_ptr(thrown);
          if (!thrownType) {
            return (setTempRet0(0), catchInfo.ptr) | 0;
          }
          var typeArray = Array.prototype.slice.call(arguments);
          out("can_catch on " + [thrown]);
          if (!exceptionThrowBuf) {
            exceptionThrowBuf = _malloc2(4);
          }
          HEAP32[exceptionThrowBuf >> 2] = thrown;
          for (var i = 0; i < typeArray.length; i++) {
            var caughtType = typeArray[i];
            if (caughtType === 0 || caughtType === thrownType) {
              break;
            }
            if (___cxa_can_catch(caughtType, thrownType, exceptionThrowBuf)) {
              var adjusted = HEAP32[exceptionThrowBuf >> 2];
              if (thrown !== adjusted) {
                catchInfo.set_adjusted_ptr(adjusted);
              }
              out("  can_catch found " + [adjusted, caughtType]);
              return (setTempRet0(caughtType), catchInfo.ptr) | 0;
            }
          }
          return (setTempRet0(thrownType), catchInfo.ptr) | 0;
        }
        function ___cxa_find_matching_catch_3() {
          var thrown = exceptionLast;
          if (!thrown) {
            return (setTempRet0(0), 0) | 0;
          }
          var info = new ExceptionInfo(thrown);
          var thrownType = info.get_type();
          var catchInfo = new CatchInfo();
          catchInfo.set_base_ptr(thrown);
          if (!thrownType) {
            return (setTempRet0(0), catchInfo.ptr) | 0;
          }
          var typeArray = Array.prototype.slice.call(arguments);
          out("can_catch on " + [thrown]);
          if (!exceptionThrowBuf) {
            exceptionThrowBuf = _malloc2(4);
          }
          HEAP32[exceptionThrowBuf >> 2] = thrown;
          for (var i = 0; i < typeArray.length; i++) {
            var caughtType = typeArray[i];
            if (caughtType === 0 || caughtType === thrownType) {
              break;
            }
            if (___cxa_can_catch(caughtType, thrownType, exceptionThrowBuf)) {
              var adjusted = HEAP32[exceptionThrowBuf >> 2];
              if (thrown !== adjusted) {
                catchInfo.set_adjusted_ptr(adjusted);
              }
              out("  can_catch found " + [adjusted, caughtType]);
              return (setTempRet0(caughtType), catchInfo.ptr) | 0;
            }
          }
          return (setTempRet0(thrownType), catchInfo.ptr) | 0;
        }
        function ___cxa_increment_exception_refcount(ptr) {
          if (!ptr)
            return;
          exception_addRef(new ExceptionInfo(ptr));
        }
        function ___cxa_rethrow() {
          var catchInfo = exceptionCaught.pop();
          var info = catchInfo.get_exception_info();
          var ptr = catchInfo.get_base_ptr();
          if (!info.get_rethrown()) {
            exceptionCaught.push(catchInfo);
            info.set_rethrown(true);
          } else {
            catchInfo.free();
          }
          err("Compiled code RE-throwing an exception, popped " + [ptr, exceptionLast, "stack", exceptionCaught]);
          exceptionLast = ptr;
          throw ptr;
        }
        function ___cxa_rethrow_primary_exception(ptr) {
          if (!ptr)
            return;
          var catchInfo = new CatchInfo();
          catchInfo.set_base_ptr(ptr);
          var info = catchInfo.get_exception_info();
          exceptionCaught.push(catchInfo);
          info.set_rethrown(true);
          ___cxa_rethrow();
        }
        function ___cxa_throw(ptr, type, destructor) {
          err("Compiled code throwing an exception, " + [ptr, type, destructor]);
          var info = new ExceptionInfo(ptr);
          info.init(type, destructor);
          exceptionLast = ptr;
          if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
            __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
          } else {
            __ZSt18uncaught_exceptionv.uncaught_exceptions++;
          }
          throw ptr;
        }
        function ___cxa_uncaught_exceptions() {
          return __ZSt18uncaught_exceptionv.uncaught_exceptions;
        }
        function setErrNo(value) {
          HEAP32[___errno_location() >> 2] = value;
          return value;
        }
        function ___map_file(pathname, size) {
          setErrNo(63);
          return -1;
        }
        var PATH = { splitPath: function(filename) {
          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return splitPathRe.exec(filename).slice(1);
        }, normalizeArray: function(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
              parts.splice(i, 1);
            } else if (last === "..") {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up; up--) {
              parts.unshift("..");
            }
          }
          return parts;
        }, normalize: function(path) {
          var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
          path = PATH.normalizeArray(path.split("/").filter(function(p) {
            return !!p;
          }), !isAbsolute).join("/");
          if (!path && !isAbsolute) {
            path = ".";
          }
          if (path && trailingSlash) {
            path += "/";
          }
          return (isAbsolute ? "/" : "") + path;
        }, dirname: function(path) {
          var result = PATH.splitPath(path), root = result[0], dir = result[1];
          if (!root && !dir) {
            return ".";
          }
          if (dir) {
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        }, basename: function(path) {
          if (path === "/")
            return "/";
          path = PATH.normalize(path);
          path = path.replace(/\/$/, "");
          var lastSlash = path.lastIndexOf("/");
          if (lastSlash === -1)
            return path;
          return path.substr(lastSlash + 1);
        }, extname: function(path) {
          return PATH.splitPath(path)[3];
        }, join: function() {
          var paths = Array.prototype.slice.call(arguments, 0);
          return PATH.normalize(paths.join("/"));
        }, join2: function(l, r) {
          return PATH.normalize(l + "/" + r);
        } };
        var PATH_FS = { resolve: function() {
          var resolvedPath = "", resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path !== "string") {
              throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path) {
              return "";
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/";
          }
          resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
            return !!p;
          }), !resolvedAbsolute).join("/");
          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
        }, relative: function(from, to) {
          from = PATH_FS.resolve(from).substr(1);
          to = PATH_FS.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== "")
                break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== "")
                break;
            }
            if (start > end)
              return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split("/"));
          var toParts = trim(to.split("/"));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join("/");
        } };
        var TTY = { ttys: [], init: function() {
        }, shutdown: function() {
        }, register: function(dev, ops) {
          TTY.ttys[dev] = { input: [], output: [], ops };
          FS.registerDevice(dev, TTY.stream_ops);
        }, stream_ops: { open: function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        }, close: function(stream) {
          stream.tty.ops.flush(stream.tty);
        }, flush: function(stream) {
          stream.tty.ops.flush(stream.tty);
        }, read: function(stream, buffer2, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === void 0 && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === void 0)
              break;
            bytesRead++;
            buffer2[offset + i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        }, write: function(stream, buffer2, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        } }, default_tty_ops: { get_char: function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch (e) {
                if (e.toString().indexOf("EOF") != -1)
                  bytesRead = 0;
                else
                  throw e;
              }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString("utf-8");
              } else {
                result = null;
              }
            } else if (typeof window != "undefined" && typeof window.prompt == "function") {
              result = window.prompt("Input: ");
              if (result !== null) {
                result += "\n";
              }
            } else if (typeof readline == "function") {
              result = readline();
              if (result !== null) {
                result += "\n";
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        }, put_char: function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0)
              tty.output.push(val);
          }
        }, flush: function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        } }, default_tty1_ops: { put_char: function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0)
              tty.output.push(val);
          }
        }, flush: function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        } } };
        var MEMFS = { ops_table: null, mount: function(mount) {
          return MEMFS.createNode(null, "/", 16384 | 511, 0);
        }, createNode: function(parent, name, mode, dev) {
          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(63);
          }
          if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
              dir: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  lookup: MEMFS.node_ops.lookup,
                  mknod: MEMFS.node_ops.mknod,
                  rename: MEMFS.node_ops.rename,
                  unlink: MEMFS.node_ops.unlink,
                  rmdir: MEMFS.node_ops.rmdir,
                  readdir: MEMFS.node_ops.readdir,
                  symlink: MEMFS.node_ops.symlink
                },
                stream: {
                  llseek: MEMFS.stream_ops.llseek
                }
              },
              file: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: {
                  llseek: MEMFS.stream_ops.llseek,
                  read: MEMFS.stream_ops.read,
                  write: MEMFS.stream_ops.write,
                  allocate: MEMFS.stream_ops.allocate,
                  mmap: MEMFS.stream_ops.mmap,
                  msync: MEMFS.stream_ops.msync
                }
              },
              link: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  readlink: MEMFS.node_ops.readlink
                },
                stream: {}
              },
              chrdev: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: FS.chrdev_stream_ops
              }
            };
          }
          var node = FS.createNode(parent, name, mode, dev);
          if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null;
          } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
          } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
          }
          node.timestamp = Date.now();
          if (parent) {
            parent.contents[name] = node;
          }
          return node;
        }, getFileDataAsRegularArray: function(node) {
          if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i)
              arr.push(node.contents[i]);
            return arr;
          }
          return node.contents;
        }, getFileDataAsTypedArray: function(node) {
          if (!node.contents)
            return new Uint8Array(0);
          if (node.contents.subarray)
            return node.contents.subarray(0, node.usedBytes);
          return new Uint8Array(node.contents);
        }, expandFileStorage: function(node, newCapacity) {
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity)
            return;
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
          if (prevCapacity != 0)
            newCapacity = Math.max(newCapacity, 256);
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity);
          if (node.usedBytes > 0)
            node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
          return;
        }, resizeFileStorage: function(node, newSize) {
          if (node.usedBytes == newSize)
            return;
          if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
            return;
          }
          if (!node.contents || node.contents.subarray) {
            var oldContents = node.contents;
            node.contents = new Uint8Array(newSize);
            if (oldContents) {
              node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
            }
            node.usedBytes = newSize;
            return;
          }
          if (!node.contents)
            node.contents = [];
          if (node.contents.length > newSize)
            node.contents.length = newSize;
          else
            while (node.contents.length < newSize)
              node.contents.push(0);
          node.usedBytes = newSize;
        }, node_ops: { getattr: function(node) {
          var attr2 = {};
          attr2.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr2.ino = node.id;
          attr2.mode = node.mode;
          attr2.nlink = 1;
          attr2.uid = 0;
          attr2.gid = 0;
          attr2.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr2.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr2.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr2.size = node.link.length;
          } else {
            attr2.size = 0;
          }
          attr2.atime = new Date(node.timestamp);
          attr2.mtime = new Date(node.timestamp);
          attr2.ctime = new Date(node.timestamp);
          attr2.blksize = 4096;
          attr2.blocks = Math.ceil(attr2.size / attr2.blksize);
          return attr2;
        }, setattr: function(node, attr2) {
          if (attr2.mode !== void 0) {
            node.mode = attr2.mode;
          }
          if (attr2.timestamp !== void 0) {
            node.timestamp = attr2.timestamp;
          }
          if (attr2.size !== void 0) {
            MEMFS.resizeFileStorage(node, attr2.size);
          }
        }, lookup: function(parent, name) {
          throw FS.genericErrors[44];
        }, mknod: function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        }, rename: function(old_node, new_dir, new_name) {
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        }, unlink: function(parent, name) {
          delete parent.contents[name];
        }, rmdir: function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        }, readdir: function(node) {
          var entries = [".", ".."];
          for (var key2 in node.contents) {
            if (!node.contents.hasOwnProperty(key2)) {
              continue;
            }
            entries.push(key2);
          }
          return entries;
        }, symlink: function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
          node.link = oldpath;
          return node;
        }, readlink: function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        } }, stream_ops: { read: function(stream, buffer2, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes)
            return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) {
            buffer2.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++)
              buffer2[offset + i] = contents[position + i];
          }
          return size;
        }, write: function(stream, buffer2, offset, length, position, canOwn) {
          assert(!(buffer2 instanceof ArrayBuffer));
          if (buffer2.buffer === HEAP8.buffer) {
            canOwn = false;
          }
          if (!length)
            return 0;
          var node = stream.node;
          node.timestamp = Date.now();
          if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
            if (canOwn) {
              assert(position === 0, "canOwn must imply no weird position inside the file");
              node.contents = buffer2.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) {
              node.contents = buffer2.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) {
              node.contents.set(buffer2.subarray(offset, offset + length), position);
              return length;
            }
          }
          MEMFS.expandFileStorage(node, position + length);
          if (node.contents.subarray && buffer2.subarray) {
            node.contents.set(buffer2.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer2[offset + i];
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        }, llseek: function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        }, allocate: function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        }, mmap: function(stream, address, length, position, prot, flags) {
          assert(address === 0);
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          if (!(flags & 2) && contents.buffer === buffer) {
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = FS.mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr, allocated };
        }, msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            return 0;
          }
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
          return 0;
        } } };
        var ERRNO_MESSAGES = { 0: "Success", 1: "Arg list too long", 2: "Permission denied", 3: "Address already in use", 4: "Address not available", 5: "Address family not supported by protocol family", 6: "No more processes", 7: "Socket already connected", 8: "Bad file number", 9: "Trying to read unreadable message", 10: "Mount device busy", 11: "Operation canceled", 12: "No children", 13: "Connection aborted", 14: "Connection refused", 15: "Connection reset by peer", 16: "File locking deadlock error", 17: "Destination address required", 18: "Math arg out of domain of func", 19: "Quota exceeded", 20: "File exists", 21: "Bad address", 22: "File too large", 23: "Host is unreachable", 24: "Identifier removed", 25: "Illegal byte sequence", 26: "Connection already in progress", 27: "Interrupted system call", 28: "Invalid argument", 29: "I/O error", 30: "Socket is already connected", 31: "Is a directory", 32: "Too many symbolic links", 33: "Too many open files", 34: "Too many links", 35: "Message too long", 36: "Multihop attempted", 37: "File or path name too long", 38: "Network interface is not configured", 39: "Connection reset by network", 40: "Network is unreachable", 41: "Too many open files in system", 42: "No buffer space available", 43: "No such device", 44: "No such file or directory", 45: "Exec format error", 46: "No record locks available", 47: "The link has been severed", 48: "Not enough core", 49: "No message of desired type", 50: "Protocol not available", 51: "No space left on device", 52: "Function not implemented", 53: "Socket is not connected", 54: "Not a directory", 55: "Directory not empty", 56: "State not recoverable", 57: "Socket operation on non-socket", 59: "Not a typewriter", 60: "No such device or address", 61: "Value too large for defined data type", 62: "Previous owner died", 63: "Not super-user", 64: "Broken pipe", 65: "Protocol error", 66: "Unknown protocol", 67: "Protocol wrong type for socket", 68: "Math result not representable", 69: "Read only file system", 70: "Illegal seek", 71: "No such process", 72: "Stale file handle", 73: "Connection timed out", 74: "Text file busy", 75: "Cross-device link", 100: "Device not a stream", 101: "Bad font file fmt", 102: "Invalid slot", 103: "Invalid request code", 104: "No anode", 105: "Block device required", 106: "Channel number out of range", 107: "Level 3 halted", 108: "Level 3 reset", 109: "Link number out of range", 110: "Protocol driver not attached", 111: "No CSI structure available", 112: "Level 2 halted", 113: "Invalid exchange", 114: "Invalid request descriptor", 115: "Exchange full", 116: "No data (for no delay io)", 117: "Timer expired", 118: "Out of streams resources", 119: "Machine is not on the network", 120: "Package not installed", 121: "The object is remote", 122: "Advertise error", 123: "Srmount error", 124: "Communication error on send", 125: "Cross mount point (not really error)", 126: "Given log. name not unique", 127: "f.d. invalid for this operation", 128: "Remote address changed", 129: "Can   access a needed shared lib", 130: "Accessing a corrupted shared lib", 131: ".lib section in a.out corrupted", 132: "Attempting to link in too many libs", 133: "Attempting to exec a shared library", 135: "Streams pipe error", 136: "Too many users", 137: "Socket type not supported", 138: "Not supported", 139: "Protocol family not supported", 140: "Can't send after socket shutdown", 141: "Too many references", 142: "Host is down", 148: "No medium (in tape drive)", 156: "Level 2 not synchronized" };
        var ERRNO_CODES = { EPERM: 63, ENOENT: 44, ESRCH: 71, EINTR: 27, EIO: 29, ENXIO: 60, E2BIG: 1, ENOEXEC: 45, EBADF: 8, ECHILD: 12, EAGAIN: 6, EWOULDBLOCK: 6, ENOMEM: 48, EACCES: 2, EFAULT: 21, ENOTBLK: 105, EBUSY: 10, EEXIST: 20, EXDEV: 75, ENODEV: 43, ENOTDIR: 54, EISDIR: 31, EINVAL: 28, ENFILE: 41, EMFILE: 33, ENOTTY: 59, ETXTBSY: 74, EFBIG: 22, ENOSPC: 51, ESPIPE: 70, EROFS: 69, EMLINK: 34, EPIPE: 64, EDOM: 18, ERANGE: 68, ENOMSG: 49, EIDRM: 24, ECHRNG: 106, EL2NSYNC: 156, EL3HLT: 107, EL3RST: 108, ELNRNG: 109, EUNATCH: 110, ENOCSI: 111, EL2HLT: 112, EDEADLK: 16, ENOLCK: 46, EBADE: 113, EBADR: 114, EXFULL: 115, ENOANO: 104, EBADRQC: 103, EBADSLT: 102, EDEADLOCK: 16, EBFONT: 101, ENOSTR: 100, ENODATA: 116, ETIME: 117, ENOSR: 118, ENONET: 119, ENOPKG: 120, EREMOTE: 121, ENOLINK: 47, EADV: 122, ESRMNT: 123, ECOMM: 124, EPROTO: 65, EMULTIHOP: 36, EDOTDOT: 125, EBADMSG: 9, ENOTUNIQ: 126, EBADFD: 127, EREMCHG: 128, ELIBACC: 129, ELIBBAD: 130, ELIBSCN: 131, ELIBMAX: 132, ELIBEXEC: 133, ENOSYS: 52, ENOTEMPTY: 55, ENAMETOOLONG: 37, ELOOP: 32, EOPNOTSUPP: 138, EPFNOSUPPORT: 139, ECONNRESET: 15, ENOBUFS: 42, EAFNOSUPPORT: 5, EPROTOTYPE: 67, ENOTSOCK: 57, ENOPROTOOPT: 50, ESHUTDOWN: 140, ECONNREFUSED: 14, EADDRINUSE: 3, ECONNABORTED: 13, ENETUNREACH: 40, ENETDOWN: 38, ETIMEDOUT: 73, EHOSTDOWN: 142, EHOSTUNREACH: 23, EINPROGRESS: 26, EALREADY: 7, EDESTADDRREQ: 17, EMSGSIZE: 35, EPROTONOSUPPORT: 66, ESOCKTNOSUPPORT: 137, EADDRNOTAVAIL: 4, ENETRESET: 39, EISCONN: 30, ENOTCONN: 53, ETOOMANYREFS: 141, EUSERS: 136, EDQUOT: 19, ESTALE: 72, ENOTSUP: 138, ENOMEDIUM: 148, EILSEQ: 25, EOVERFLOW: 61, ECANCELED: 11, ENOTRECOVERABLE: 56, EOWNERDEAD: 62, ESTRPIPE: 135 };
        var FS = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, handleFSError: function(e) {
          if (!(e instanceof FS.ErrnoError))
            throw e + " : " + stackTrace();
          return setErrNo(e.errno);
        }, lookupPath: function(path, opts) {
          path = PATH_FS.resolve(FS.cwd(), path);
          opts = opts || {};
          if (!path)
            return { path: "", node: null };
          var defaults = {
            follow_mount: true,
            recurse_count: 0
          };
          for (var key2 in defaults) {
            if (opts[key2] === void 0) {
              opts[key2] = defaults[key2];
            }
          }
          if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(32);
          }
          var parts = PATH.normalizeArray(path.split("/").filter(function(p) {
            return !!p;
          }), false);
          var current = FS.root;
          var current_path = "/";
          for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
              break;
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
              if (!islast || islast && opts.follow_mount) {
                current = current.mounted.root;
              }
            }
            if (!islast || opts.follow) {
              var count = 0;
              while (FS.isLink(current.mode)) {
                var link = FS.readlink(current_path);
                current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                current = lookup.node;
                if (count++ > 40) {
                  throw new FS.ErrnoError(32);
                }
              }
            }
          }
          return { path: current_path, node: current };
        }, getPath: function(node) {
          var path;
          while (true) {
            if (FS.isRoot(node)) {
              var mount = node.mount.mountpoint;
              if (!path)
                return mount;
              return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
            }
            path = path ? node.name + "/" + path : node.name;
            node = node.parent;
          }
        }, hashName: function(parentid, name) {
          var hash2 = 0;
          for (var i = 0; i < name.length; i++) {
            hash2 = (hash2 << 5) - hash2 + name.charCodeAt(i) | 0;
          }
          return (parentid + hash2 >>> 0) % FS.nameTable.length;
        }, hashAddNode: function(node) {
          var hash2 = FS.hashName(node.parent.id, node.name);
          node.name_next = FS.nameTable[hash2];
          FS.nameTable[hash2] = node;
        }, hashRemoveNode: function(node) {
          var hash2 = FS.hashName(node.parent.id, node.name);
          if (FS.nameTable[hash2] === node) {
            FS.nameTable[hash2] = node.name_next;
          } else {
            var current = FS.nameTable[hash2];
            while (current) {
              if (current.name_next === node) {
                current.name_next = node.name_next;
                break;
              }
              current = current.name_next;
            }
          }
        }, lookupNode: function(parent, name) {
          var errCode = FS.mayLookup(parent);
          if (errCode) {
            throw new FS.ErrnoError(errCode, parent);
          }
          var hash2 = FS.hashName(parent.id, name);
          for (var node = FS.nameTable[hash2]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
              return node;
            }
          }
          return FS.lookup(parent, name);
        }, createNode: function(parent, name, mode, rdev) {
          var node = new FS.FSNode(parent, name, mode, rdev);
          FS.hashAddNode(node);
          return node;
        }, destroyNode: function(node) {
          FS.hashRemoveNode(node);
        }, isRoot: function(node) {
          return node === node.parent;
        }, isMountpoint: function(node) {
          return !!node.mounted;
        }, isFile: function(mode) {
          return (mode & 61440) === 32768;
        }, isDir: function(mode) {
          return (mode & 61440) === 16384;
        }, isLink: function(mode) {
          return (mode & 61440) === 40960;
        }, isChrdev: function(mode) {
          return (mode & 61440) === 8192;
        }, isBlkdev: function(mode) {
          return (mode & 61440) === 24576;
        }, isFIFO: function(mode) {
          return (mode & 61440) === 4096;
        }, isSocket: function(mode) {
          return (mode & 49152) === 49152;
        }, flagModes: { "r": 0, "rs": 1052672, "r+": 2, "w": 577, "wx": 705, "xw": 705, "w+": 578, "wx+": 706, "xw+": 706, "a": 1089, "ax": 1217, "xa": 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 }, modeStringToFlags: function(str) {
          var flags = FS.flagModes[str];
          if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str);
          }
          return flags;
        }, flagsToPermissionString: function(flag) {
          var perms = ["r", "w", "rw"][flag & 3];
          if (flag & 512) {
            perms += "w";
          }
          return perms;
        }, nodePermissions: function(node, perms) {
          if (FS.ignorePermissions) {
            return 0;
          }
          if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
            return 2;
          } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
            return 2;
          } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
            return 2;
          }
          return 0;
        }, mayLookup: function(dir) {
          var errCode = FS.nodePermissions(dir, "x");
          if (errCode)
            return errCode;
          if (!dir.node_ops.lookup)
            return 2;
          return 0;
        }, mayCreate: function(dir, name) {
          try {
            var node = FS.lookupNode(dir, name);
            return 20;
          } catch (e) {
          }
          return FS.nodePermissions(dir, "wx");
        }, mayDelete: function(dir, name, isdir) {
          var node;
          try {
            node = FS.lookupNode(dir, name);
          } catch (e) {
            return e.errno;
          }
          var errCode = FS.nodePermissions(dir, "wx");
          if (errCode) {
            return errCode;
          }
          if (isdir) {
            if (!FS.isDir(node.mode)) {
              return 54;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
              return 10;
            }
          } else {
            if (FS.isDir(node.mode)) {
              return 31;
            }
          }
          return 0;
        }, mayOpen: function(node, flags) {
          if (!node) {
            return 44;
          }
          if (FS.isLink(node.mode)) {
            return 32;
          } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== "r" || // opening for write
            flags & 512) {
              return 31;
            }
          }
          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
        }, MAX_OPEN_FDS: 4096, nextfd: function(fd_start, fd_end) {
          fd_start = fd_start || 0;
          fd_end = fd_end || FS.MAX_OPEN_FDS;
          for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
              return fd;
            }
          }
          throw new FS.ErrnoError(33);
        }, getStream: function(fd) {
          return FS.streams[fd];
        }, createStream: function(stream, fd_start, fd_end) {
          if (!FS.FSStream) {
            FS.FSStream = /** @constructor */
            function() {
            };
            FS.FSStream.prototype = {
              object: {
                get: function() {
                  return this.node;
                },
                set: function(val) {
                  this.node = val;
                }
              },
              isRead: {
                get: function() {
                  return (this.flags & 2097155) !== 1;
                }
              },
              isWrite: {
                get: function() {
                  return (this.flags & 2097155) !== 0;
                }
              },
              isAppend: {
                get: function() {
                  return this.flags & 1024;
                }
              }
            };
          }
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
          var fd = FS.nextfd(fd_start, fd_end);
          stream.fd = fd;
          FS.streams[fd] = stream;
          return stream;
        }, closeStream: function(fd) {
          FS.streams[fd] = null;
        }, chrdev_stream_ops: { open: function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          stream.stream_ops = device.stream_ops;
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        }, llseek: function() {
          throw new FS.ErrnoError(70);
        } }, major: function(dev) {
          return dev >> 8;
        }, minor: function(dev) {
          return dev & 255;
        }, makedev: function(ma, mi) {
          return ma << 8 | mi;
        }, registerDevice: function(dev, ops) {
          FS.devices[dev] = { stream_ops: ops };
        }, getDevice: function(dev) {
          return FS.devices[dev];
        }, getMounts: function(mount) {
          var mounts = [];
          var check = [mount];
          while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts);
          }
          return mounts;
        }, syncfs: function(populate, callback) {
          if (typeof populate === "function") {
            callback = populate;
            populate = false;
          }
          FS.syncFSRequests++;
          if (FS.syncFSRequests > 1) {
            err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
          }
          var mounts = FS.getMounts(FS.root.mount);
          var completed = 0;
          function doCallback(errCode) {
            assert(FS.syncFSRequests > 0);
            FS.syncFSRequests--;
            return callback(errCode);
          }
          function done(errCode) {
            if (errCode) {
              if (!done.errored) {
                done.errored = true;
                return doCallback(errCode);
              }
              return;
            }
            if (++completed >= mounts.length) {
              doCallback(null);
            }
          }
          ;
          mounts.forEach(function(mount) {
            if (!mount.type.syncfs) {
              return done(null);
            }
            mount.type.syncfs(mount, populate, done);
          });
        }, mount: function(type, opts, mountpoint) {
          if (typeof type === "string") {
            throw type;
          }
          var root = mountpoint === "/";
          var pseudo = !mountpoint;
          var node;
          if (root && FS.root) {
            throw new FS.ErrnoError(10);
          } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(10);
            }
            if (!FS.isDir(node.mode)) {
              throw new FS.ErrnoError(54);
            }
          }
          var mount = {
            type,
            opts,
            mountpoint,
            mounts: []
          };
          var mountRoot = type.mount(mount);
          mountRoot.mount = mount;
          mount.root = mountRoot;
          if (root) {
            FS.root = mountRoot;
          } else if (node) {
            node.mounted = mount;
            if (node.mount) {
              node.mount.mounts.push(mount);
            }
          }
          return mountRoot;
        }, unmount: function(mountpoint) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
          if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(28);
          }
          var node = lookup.node;
          var mount = node.mounted;
          var mounts = FS.getMounts(mount);
          Object.keys(FS.nameTable).forEach(function(hash2) {
            var current = FS.nameTable[hash2];
            while (current) {
              var next2 = current.name_next;
              if (mounts.indexOf(current.mount) !== -1) {
                FS.destroyNode(current);
              }
              current = next2;
            }
          });
          node.mounted = null;
          var idx = node.mount.mounts.indexOf(mount);
          assert(idx !== -1);
          node.mount.mounts.splice(idx, 1);
        }, lookup: function(parent, name) {
          return parent.node_ops.lookup(parent, name);
        }, mknod: function(path, mode, dev) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.mayCreate(parent, name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.mknod(parent, name, mode, dev);
        }, create: function(path, mode) {
          mode = mode !== void 0 ? mode : 438;
          mode &= 4095;
          mode |= 32768;
          return FS.mknod(path, mode, 0);
        }, mkdir: function(path, mode) {
          mode = mode !== void 0 ? mode : 511;
          mode &= 511 | 512;
          mode |= 16384;
          return FS.mknod(path, mode, 0);
        }, mkdirTree: function(path, mode) {
          var dirs = path.split("/");
          var d = "";
          for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i])
              continue;
            d += "/" + dirs[i];
            try {
              FS.mkdir(d, mode);
            } catch (e) {
              if (e.errno != 20)
                throw e;
            }
          }
        }, mkdev: function(path, mode, dev) {
          if (typeof dev === "undefined") {
            dev = mode;
            mode = 438;
          }
          mode |= 8192;
          return FS.mknod(path, mode, dev);
        }, symlink: function(oldpath, newpath) {
          if (!PATH_FS.resolve(oldpath)) {
            throw new FS.ErrnoError(44);
          }
          var lookup = FS.lookupPath(newpath, { parent: true });
          var parent = lookup.node;
          if (!parent) {
            throw new FS.ErrnoError(44);
          }
          var newname = PATH.basename(newpath);
          var errCode = FS.mayCreate(parent, newname);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.symlink(parent, newname, oldpath);
        }, rename: function(old_path, new_path) {
          var old_dirname = PATH.dirname(old_path);
          var new_dirname = PATH.dirname(new_path);
          var old_name = PATH.basename(old_path);
          var new_name = PATH.basename(new_path);
          var lookup, old_dir, new_dir;
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
          if (!old_dir || !new_dir)
            throw new FS.ErrnoError(44);
          if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(75);
          }
          var old_node = FS.lookupNode(old_dir, old_name);
          var relative = PATH_FS.relative(old_path, new_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(28);
          }
          relative = PATH_FS.relative(new_path, old_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(55);
          }
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {
          }
          if (old_node === new_node) {
            return;
          }
          var isdir = FS.isDir(old_node.mode);
          var errCode = FS.mayDelete(old_dir, old_name, isdir);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(10);
          }
          if (new_dir !== old_dir) {
            errCode = FS.nodePermissions(old_dir, "w");
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          try {
            if (FS.trackingDelegate["willMovePath"]) {
              FS.trackingDelegate["willMovePath"](old_path, new_path);
            }
          } catch (e) {
            err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
          FS.hashRemoveNode(old_node);
          try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
          } catch (e) {
            throw e;
          } finally {
            FS.hashAddNode(old_node);
          }
          try {
            if (FS.trackingDelegate["onMovePath"])
              FS.trackingDelegate["onMovePath"](old_path, new_path);
          } catch (e) {
            err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
        }, rmdir: function(path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, true);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
          }
          parent.node_ops.rmdir(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"])
              FS.trackingDelegate["onDeletePath"](path);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
          }
        }, readdir: function(path) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(54);
          }
          return node.node_ops.readdir(node);
        }, unlink: function(path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, false);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
          }
          parent.node_ops.unlink(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"])
              FS.trackingDelegate["onDeletePath"](path);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
          }
        }, readlink: function(path) {
          var lookup = FS.lookupPath(path);
          var link = lookup.node;
          if (!link) {
            throw new FS.ErrnoError(44);
          }
          if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(28);
          }
          return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
        }, stat: function(path, dontFollow) {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          var node = lookup.node;
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(63);
          }
          return node.node_ops.getattr(node);
        }, lstat: function(path) {
          return FS.stat(path, true);
        }, chmod: function(path, mode, dontFollow) {
          var node;
          if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {
            mode: mode & 4095 | node.mode & ~4095,
            timestamp: Date.now()
          });
        }, lchmod: function(path, mode) {
          FS.chmod(path, mode, true);
        }, fchmod: function(fd, mode) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chmod(stream.node, mode);
        }, chown: function(path, uid, gid, dontFollow) {
          var node;
          if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, {
            timestamp: Date.now()
            // we ignore the uid / gid for now
          });
        }, lchown: function(path, uid, gid) {
          FS.chown(path, uid, gid, true);
        }, fchown: function(fd, uid, gid) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chown(stream.node, uid, gid);
        }, truncate: function(path, len) {
          if (len < 0) {
            throw new FS.ErrnoError(28);
          }
          var node;
          if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.nodePermissions(node, "w");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
          });
        }, ftruncate: function(fd, len) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(28);
          }
          FS.truncate(stream.node, len);
        }, utime: function(path, atime, mtime) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
          });
        }, open: function(path, flags, mode, fd_start, fd_end) {
          if (path === "") {
            throw new FS.ErrnoError(44);
          }
          flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
          mode = typeof mode === "undefined" ? 438 : mode;
          if (flags & 64) {
            mode = mode & 4095 | 32768;
          } else {
            mode = 0;
          }
          var node;
          if (typeof path === "object") {
            node = path;
          } else {
            path = PATH.normalize(path);
            try {
              var lookup = FS.lookupPath(path, {
                follow: !(flags & 131072)
              });
              node = lookup.node;
            } catch (e) {
            }
          }
          var created = false;
          if (flags & 64) {
            if (node) {
              if (flags & 128) {
                throw new FS.ErrnoError(20);
              }
            } else {
              node = FS.mknod(path, mode, 0);
              created = true;
            }
          }
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (FS.isChrdev(node.mode)) {
            flags &= ~512;
          }
          if (flags & 65536 && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
          if (!created) {
            var errCode = FS.mayOpen(node, flags);
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          if (flags & 512) {
            FS.truncate(node, 0);
          }
          flags &= ~(128 | 512 | 131072);
          var stream = FS.createStream({
            node,
            path: FS.getPath(node),
            // we want the absolute path to the node
            flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
          }, fd_start, fd_end);
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
          if (Module["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles)
              FS.readFiles = {};
            if (!(path in FS.readFiles)) {
              FS.readFiles[path] = 1;
              err("FS.trackingDelegate error on read file: " + path);
            }
          }
          try {
            if (FS.trackingDelegate["onOpenFile"]) {
              var trackingFlags = 0;
              if ((flags & 2097155) !== 1) {
                trackingFlags |= FS.tracking.openFlags.READ;
              }
              if ((flags & 2097155) !== 0) {
                trackingFlags |= FS.tracking.openFlags.WRITE;
              }
              FS.trackingDelegate["onOpenFile"](path, trackingFlags);
            }
          } catch (e) {
            err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
          }
          return stream;
        }, close: function(stream) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (stream.getdents)
            stream.getdents = null;
          try {
            if (stream.stream_ops.close) {
              stream.stream_ops.close(stream);
            }
          } catch (e) {
            throw e;
          } finally {
            FS.closeStream(stream.fd);
          }
          stream.fd = null;
        }, isClosed: function(stream) {
          return stream.fd === null;
        }, llseek: function(stream, offset, whence) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(70);
          }
          if (whence != 0 && whence != 1 && whence != 2) {
            throw new FS.ErrnoError(28);
          }
          stream.position = stream.stream_ops.llseek(stream, offset, whence);
          stream.ungotten = [];
          return stream.position;
        }, read: function(stream, buffer2, offset, length, position) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(28);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
          if (!seeking)
            stream.position += bytesRead;
          return bytesRead;
        }, write: function(stream, buffer2, offset, length, position, canOwn) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(28);
          }
          if (stream.seekable && stream.flags & 1024) {
            FS.llseek(stream, 0, 2);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
          if (!seeking)
            stream.position += bytesWritten;
          try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"])
              FS.trackingDelegate["onWriteToFile"](stream.path);
          } catch (e) {
            err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
          }
          return bytesWritten;
        }, allocate: function(stream, offset, length) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(28);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(138);
          }
          stream.stream_ops.allocate(stream, offset, length);
        }, mmap: function(stream, address, length, position, prot, flags) {
          if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
            throw new FS.ErrnoError(2);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(2);
          }
          if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(43);
          }
          return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
        }, msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (!stream || !stream.stream_ops.msync) {
            return 0;
          }
          return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
        }, munmap: function(stream) {
          return 0;
        }, ioctl: function(stream, cmd, arg) {
          if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(59);
          }
          return stream.stream_ops.ioctl(stream, cmd, arg);
        }, readFile: function(path, opts) {
          opts = opts || {};
          opts.flags = opts.flags || "r";
          opts.encoding = opts.encoding || "binary";
          if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
          }
          var ret;
          var stream = FS.open(path, opts.flags);
          var stat = FS.stat(path);
          var length = stat.size;
          var buf = new Uint8Array(length);
          FS.read(stream, buf, 0, length, 0);
          if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0);
          } else if (opts.encoding === "binary") {
            ret = buf;
          }
          FS.close(stream);
          return ret;
        }, writeFile: function(path, data, opts) {
          opts = opts || {};
          opts.flags = opts.flags || "w";
          var stream = FS.open(path, opts.flags, opts.mode);
          if (typeof data === "string") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
          } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
          } else {
            throw new Error("Unsupported data type");
          }
          FS.close(stream);
        }, cwd: function() {
          return FS.currentPath;
        }, chdir: function(path) {
          var lookup = FS.lookupPath(path, { follow: true });
          if (lookup.node === null) {
            throw new FS.ErrnoError(44);
          }
          if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(54);
          }
          var errCode = FS.nodePermissions(lookup.node, "x");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          FS.currentPath = lookup.path;
        }, createDefaultDirectories: function() {
          FS.mkdir("/tmp");
          FS.mkdir("/home");
          FS.mkdir("/home/web_user");
        }, createDefaultDevices: function() {
          FS.mkdir("/dev");
          FS.registerDevice(FS.makedev(1, 3), {
            read: function() {
              return 0;
            },
            write: function(stream, buffer2, offset, length, pos) {
              return length;
            }
          });
          FS.mkdev("/dev/null", FS.makedev(1, 3));
          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
          FS.mkdev("/dev/tty", FS.makedev(5, 0));
          FS.mkdev("/dev/tty1", FS.makedev(6, 0));
          var random_device;
          if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
            var randomBuffer = new Uint8Array(1);
            random_device = function() {
              crypto.getRandomValues(randomBuffer);
              return randomBuffer[0];
            };
          } else if (ENVIRONMENT_IS_NODE) {
            try {
              var crypto_module = require("crypto");
              random_device = function() {
                return crypto_module["randomBytes"](1)[0];
              };
            } catch (e) {
            }
          } else {
          }
          if (!random_device) {
            random_device = function() {
              abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
            };
          }
          FS.createDevice("/dev", "random", random_device);
          FS.createDevice("/dev", "urandom", random_device);
          FS.mkdir("/dev/shm");
          FS.mkdir("/dev/shm/tmp");
        }, createSpecialDirectories: function() {
          FS.mkdir("/proc");
          FS.mkdir("/proc/self");
          FS.mkdir("/proc/self/fd");
          FS.mount({
            mount: function() {
              var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
              node.node_ops = {
                lookup: function(parent, name) {
                  var fd = +name;
                  var stream = FS.getStream(fd);
                  if (!stream)
                    throw new FS.ErrnoError(8);
                  var ret = {
                    parent: null,
                    mount: { mountpoint: "fake" },
                    node_ops: { readlink: function() {
                      return stream.path;
                    } }
                  };
                  ret.parent = ret;
                  return ret;
                }
              };
              return node;
            }
          }, {}, "/proc/self/fd");
        }, createStandardStreams: function() {
          if (Module["stdin"]) {
            FS.createDevice("/dev", "stdin", Module["stdin"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdin");
          }
          if (Module["stdout"]) {
            FS.createDevice("/dev", "stdout", null, Module["stdout"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdout");
          }
          if (Module["stderr"]) {
            FS.createDevice("/dev", "stderr", null, Module["stderr"]);
          } else {
            FS.symlink("/dev/tty1", "/dev/stderr");
          }
          var stdin = FS.open("/dev/stdin", "r");
          var stdout = FS.open("/dev/stdout", "w");
          var stderr = FS.open("/dev/stderr", "w");
          assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
          assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
          assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
        }, ensureErrnoError: function() {
          if (FS.ErrnoError)
            return;
          FS.ErrnoError = /** @this{Object} */
          function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = /** @this{Object} */
            function(errno2) {
              this.errno = errno2;
              for (var key2 in ERRNO_CODES) {
                if (ERRNO_CODES[key2] === errno2) {
                  this.code = key2;
                  break;
                }
              }
            };
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno];
            if (this.stack) {
              Object.defineProperty(this, "stack", { value: new Error().stack, writable: true });
              this.stack = demangleAll(this.stack);
            }
          };
          FS.ErrnoError.prototype = new Error();
          FS.ErrnoError.prototype.constructor = FS.ErrnoError;
          [44].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>";
          });
        }, staticInit: function() {
          FS.ensureErrnoError();
          FS.nameTable = new Array(4096);
          FS.mount(MEMFS, {}, "/");
          FS.createDefaultDirectories();
          FS.createDefaultDevices();
          FS.createSpecialDirectories();
          FS.filesystems = {
            "MEMFS": MEMFS
          };
        }, init: function(input, output, error) {
          assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
          FS.init.initialized = true;
          FS.ensureErrnoError();
          Module["stdin"] = input || Module["stdin"];
          Module["stdout"] = output || Module["stdout"];
          Module["stderr"] = error || Module["stderr"];
          FS.createStandardStreams();
        }, quit: function() {
          FS.init.initialized = false;
          var fflush = Module["_fflush"];
          if (fflush)
            fflush(0);
          for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
              continue;
            }
            FS.close(stream);
          }
        }, getMode: function(canRead, canWrite) {
          var mode = 0;
          if (canRead)
            mode |= 292 | 73;
          if (canWrite)
            mode |= 146;
          return mode;
        }, joinPath: function(parts, forceRelative) {
          var path = PATH.join.apply(null, parts);
          if (forceRelative && path[0] == "/")
            path = path.substr(1);
          return path;
        }, absolutePath: function(relative, base) {
          return PATH_FS.resolve(base, relative);
        }, standardizePath: function(path) {
          return PATH.normalize(path);
        }, findObject: function(path, dontResolveLastLink) {
          var ret = FS.analyzePath(path, dontResolveLastLink);
          if (ret.exists) {
            return ret.object;
          } else {
            setErrNo(ret.error);
            return null;
          }
        }, analyzePath: function(path, dontResolveLastLink) {
          try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
          } catch (e) {
          }
          var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
          };
          try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/";
          } catch (e) {
            ret.error = e.errno;
          }
          ;
          return ret;
        }, createFolder: function(parent, name, canRead, canWrite) {
          var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.mkdir(path, mode);
        }, createPath: function(parent, path, canRead, canWrite) {
          parent = typeof parent === "string" ? parent : FS.getPath(parent);
          var parts = path.split("/").reverse();
          while (parts.length) {
            var part = parts.pop();
            if (!part)
              continue;
            var current = PATH.join2(parent, part);
            try {
              FS.mkdir(current);
            } catch (e) {
            }
            parent = current;
          }
          return current;
        }, createFile: function(parent, name, properties, canRead, canWrite) {
          var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.create(path, mode);
        }, createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
          var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
          var mode = FS.getMode(canRead, canWrite);
          var node = FS.create(path, mode);
          if (data) {
            if (typeof data === "string") {
              var arr = new Array(data.length);
              for (var i = 0, len = data.length; i < len; ++i)
                arr[i] = data.charCodeAt(i);
              data = arr;
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, "w");
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
          }
          return node;
        }, createDevice: function(parent, name, input, output) {
          var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(!!input, !!output);
          if (!FS.createDevice.major)
            FS.createDevice.major = 64;
          var dev = FS.makedev(FS.createDevice.major++, 0);
          FS.registerDevice(dev, {
            open: function(stream) {
              stream.seekable = false;
            },
            close: function(stream) {
              if (output && output.buffer && output.buffer.length) {
                output(10);
              }
            },
            read: function(stream, buffer2, offset, length, pos) {
              var bytesRead = 0;
              for (var i = 0; i < length; i++) {
                var result;
                try {
                  result = input();
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
                if (result === void 0 && bytesRead === 0) {
                  throw new FS.ErrnoError(6);
                }
                if (result === null || result === void 0)
                  break;
                bytesRead++;
                buffer2[offset + i] = result;
              }
              if (bytesRead) {
                stream.node.timestamp = Date.now();
              }
              return bytesRead;
            },
            write: function(stream, buffer2, offset, length, pos) {
              for (var i = 0; i < length; i++) {
                try {
                  output(buffer2[offset + i]);
                } catch (e) {
                  throw new FS.ErrnoError(29);
                }
              }
              if (length) {
                stream.node.timestamp = Date.now();
              }
              return i;
            }
          });
          return FS.mkdev(path, mode, dev);
        }, createLink: function(parent, name, target, canRead, canWrite) {
          var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          return FS.symlink(target, path);
        }, forceLoadFile: function(obj) {
          if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
            return true;
          var success = true;
          if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
          } else if (read_) {
            try {
              obj.contents = intArrayFromString(read_(obj.url), true);
              obj.usedBytes = obj.contents.length;
            } catch (e) {
              success = false;
            }
          } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.");
          }
          if (!success)
            setErrNo(29);
          return success;
        }, createLazyFile: function(parent, name, url, canRead, canWrite) {
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = [];
          }
          LazyUint8Array.prototype.get = /** @this{Object} */
          function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
              return void 0;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset];
          };
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          };
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest();
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
              throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing)
              chunkSize = datalength;
            var doXHR = function(from, to) {
              if (from > to)
                throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength - 1)
                throw new Error("only " + datalength + " bytes available! programmer error!");
              var xhr2 = new XMLHttpRequest();
              xhr2.open("GET", url, false);
              if (datalength !== chunkSize)
                xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
              if (typeof Uint8Array != "undefined")
                xhr2.responseType = "arraybuffer";
              if (xhr2.overrideMimeType) {
                xhr2.overrideMimeType("text/plain; charset=x-user-defined");
              }
              xhr2.send(null);
              if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
                throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
              if (xhr2.response !== void 0) {
                return new Uint8Array(
                  /** @type{Array<number>} */
                  xhr2.response || []
                );
              } else {
                return intArrayFromString(xhr2.responseText || "", true);
              }
            };
            var lazyArray2 = this;
            lazyArray2.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum + 1) * chunkSize - 1;
              end = Math.min(end, datalength - 1);
              if (typeof lazyArray2.chunks[chunkNum] === "undefined") {
                lazyArray2.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray2.chunks[chunkNum] === "undefined")
                throw new Error("doXHR failed!");
              return lazyArray2.chunks[chunkNum];
            });
            if (usesGzip || !datalength) {
              chunkSize = datalength = 1;
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          };
          if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER)
              throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array();
            Object.defineProperties(lazyArray, {
              length: {
                get: (
                  /** @this{Object} */
                  function() {
                    if (!this.lengthKnown) {
                      this.cacheLength();
                    }
                    return this._length;
                  }
                )
              },
              chunkSize: {
                get: (
                  /** @this{Object} */
                  function() {
                    if (!this.lengthKnown) {
                      this.cacheLength();
                    }
                    return this._chunkSize;
                  }
                )
              }
            });
            var properties = { isDevice: false, contents: lazyArray };
          } else {
            var properties = { isDevice: false, url };
          }
          var node = FS.createFile(parent, name, properties, canRead, canWrite);
          if (properties.contents) {
            node.contents = properties.contents;
          } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
          }
          Object.defineProperties(node, {
            usedBytes: {
              get: (
                /** @this {FSNode} */
                function() {
                  return this.contents.length;
                }
              )
            }
          });
          var stream_ops = {};
          var keys = Object.keys(node.stream_ops);
          keys.forEach(function(key2) {
            var fn = node.stream_ops[key2];
            stream_ops[key2] = function forceLoadLazyFile() {
              if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(29);
              }
              return fn.apply(null, arguments);
            };
          });
          stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
              return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents[position + i];
              }
            } else {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents.get(position + i);
              }
            }
            return size;
          };
          node.stream_ops = stream_ops;
          return node;
        }, createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
          Browser.init();
          var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
          var dep = getUniqueRunDependency("cp " + fullname);
          function processData(byteArray) {
            function finish(byteArray2) {
              if (preFinish)
                preFinish();
              if (!dontCreateFile) {
                FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);
              }
              if (onload)
                onload();
              removeRunDependency(dep);
            }
            var handled = false;
            Module["preloadPlugins"].forEach(function(plugin) {
              if (handled)
                return;
              if (plugin["canHandle"](fullname)) {
                plugin["handle"](byteArray, fullname, finish, function() {
                  if (onerror)
                    onerror();
                  removeRunDependency(dep);
                });
                handled = true;
              }
            });
            if (!handled)
              finish(byteArray);
          }
          addRunDependency(dep);
          if (typeof url == "string") {
            Browser.asyncLoad(url, function(byteArray) {
              processData(byteArray);
            }, onerror);
          } else {
            processData(url);
          }
        }, indexedDB: function() {
          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        }, DB_NAME: function() {
          return "EM_FS_" + window.location.pathname;
        }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            out("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
          };
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0)
                onload();
              else
                onerror();
            }
            paths.forEach(function(path) {
              var putRequest = files.put(FS.analyzePath(path).object.contents, path);
              putRequest.onsuccess = function putRequest_onsuccess() {
                ok++;
                if (ok + fail == total)
                  finish();
              };
              putRequest.onerror = function putRequest_onerror() {
                fail++;
                if (ok + fail == total)
                  finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }, loadFilesFromDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = onerror;
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
              var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
            } catch (e) {
              onerror(e);
              return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0)
                onload();
              else
                onerror();
            }
            paths.forEach(function(path) {
              var getRequest = files.get(path);
              getRequest.onsuccess = function getRequest_onsuccess() {
                if (FS.analyzePath(path).exists) {
                  FS.unlink(path);
                }
                FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                ok++;
                if (ok + fail == total)
                  finish();
              };
              getRequest.onerror = function getRequest_onerror() {
                fail++;
                if (ok + fail == total)
                  finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }, mmapAlloc: function(size) {
          var alignedSize = alignMemory(size, 16384);
          var ptr = _malloc2(alignedSize);
          while (size < alignedSize)
            HEAP8[ptr + size++] = 0;
          return ptr;
        } };
        var SYSCALLS = { mappings: {}, DEFAULT_POLLMASK: 5, umask: 511, calculateAt: function(dirfd, path) {
          if (path[0] !== "/") {
            var dir;
            if (dirfd === -100) {
              dir = FS.cwd();
            } else {
              var dirstream = FS.getStream(dirfd);
              if (!dirstream)
                throw new FS.ErrnoError(8);
              dir = dirstream.path;
            }
            path = PATH.join2(dir, path);
          }
          return path;
        }, doStat: function(func, path, buf) {
          try {
            var stat = func(path);
          } catch (e) {
            if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
              return -54;
            }
            throw e;
          }
          HEAP32[buf >> 2] = stat.dev;
          HEAP32[buf + 4 >> 2] = 0;
          HEAP32[buf + 8 >> 2] = stat.ino;
          HEAP32[buf + 12 >> 2] = stat.mode;
          HEAP32[buf + 16 >> 2] = stat.nlink;
          HEAP32[buf + 20 >> 2] = stat.uid;
          HEAP32[buf + 24 >> 2] = stat.gid;
          HEAP32[buf + 28 >> 2] = stat.rdev;
          HEAP32[buf + 32 >> 2] = 0;
          tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
          HEAP32[buf + 48 >> 2] = 4096;
          HEAP32[buf + 52 >> 2] = stat.blocks;
          HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
          HEAP32[buf + 60 >> 2] = 0;
          HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
          HEAP32[buf + 68 >> 2] = 0;
          HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
          HEAP32[buf + 76 >> 2] = 0;
          tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
          return 0;
        }, doMsync: function(addr, stream, len, flags, offset) {
          var buffer2 = HEAPU8.slice(addr, addr + len);
          FS.msync(stream, buffer2, offset, len, flags);
        }, doMkdir: function(path, mode) {
          path = PATH.normalize(path);
          if (path[path.length - 1] === "/")
            path = path.substr(0, path.length - 1);
          FS.mkdir(path, mode, 0);
          return 0;
        }, doMknod: function(path, mode, dev) {
          switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
              break;
            default:
              return -28;
          }
          FS.mknod(path, mode, dev);
          return 0;
        }, doReadlink: function(path, buf, bufsize) {
          if (bufsize <= 0)
            return -28;
          var ret = FS.readlink(path);
          var len = Math.min(bufsize, lengthBytesUTF8(ret));
          var endChar = HEAP8[buf + len];
          stringToUTF8(ret, buf, bufsize + 1);
          HEAP8[buf + len] = endChar;
          return len;
        }, doAccess: function(path, amode) {
          if (amode & ~7) {
            return -28;
          }
          var node;
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
          if (!node) {
            return -44;
          }
          var perms = "";
          if (amode & 4)
            perms += "r";
          if (amode & 2)
            perms += "w";
          if (amode & 1)
            perms += "x";
          if (perms && FS.nodePermissions(node, perms)) {
            return -2;
          }
          return 0;
        }, doDup: function(path, flags, suggestFD) {
          var suggest = FS.getStream(suggestFD);
          if (suggest)
            FS.close(suggest);
          return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
        }, doReadv: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
              return -1;
            ret += curr;
            if (curr < len)
              break;
          }
          return ret;
        }, doWritev: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
              return -1;
            ret += curr;
          }
          return ret;
        }, varargs: void 0, get: function() {
          assert(SYSCALLS.varargs != void 0);
          SYSCALLS.varargs += 4;
          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
          return ret;
        }, getStr: function(ptr) {
          var ret = UTF8ToString(ptr);
          return ret;
        }, getStreamFromFD: function(fd) {
          var stream = FS.getStream(fd);
          if (!stream)
            throw new FS.ErrnoError(8);
          return stream;
        }, get64: function(low, high) {
          if (low >= 0)
            assert(high === 0);
          else
            assert(high === -1);
          return low;
        } };
        function ___sys_fcntl64(fd, cmd, varargs) {
          SYSCALLS.varargs = varargs;
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            switch (cmd) {
              case 0: {
                var arg = SYSCALLS.get();
                if (arg < 0) {
                  return -28;
                }
                var newStream;
                newStream = FS.open(stream.path, stream.flags, 0, arg);
                return newStream.fd;
              }
              case 1:
              case 2:
                return 0;
              case 3:
                return stream.flags;
              case 4: {
                var arg = SYSCALLS.get();
                stream.flags |= arg;
                return 0;
              }
              case 12: {
                var arg = SYSCALLS.get();
                var offset = 0;
                HEAP16[arg + offset >> 1] = 2;
                return 0;
              }
              case 13:
              case 14:
                return 0;
              case 16:
              case 8:
                return -28;
              case 9:
                setErrNo(28);
                return -1;
              default: {
                return -28;
              }
            }
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return -e.errno;
          }
        }
        function ___sys_ioctl(fd, op, varargs) {
          SYSCALLS.varargs = varargs;
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            switch (op) {
              case 21509:
              case 21505: {
                if (!stream.tty)
                  return -59;
                return 0;
              }
              case 21510:
              case 21511:
              case 21512:
              case 21506:
              case 21507:
              case 21508: {
                if (!stream.tty)
                  return -59;
                return 0;
              }
              case 21519: {
                if (!stream.tty)
                  return -59;
                var argp = SYSCALLS.get();
                HEAP32[argp >> 2] = 0;
                return 0;
              }
              case 21520: {
                if (!stream.tty)
                  return -59;
                return -28;
              }
              case 21531: {
                var argp = SYSCALLS.get();
                return FS.ioctl(stream, op, argp);
              }
              case 21523: {
                if (!stream.tty)
                  return -59;
                return 0;
              }
              case 21524: {
                if (!stream.tty)
                  return -59;
                return 0;
              }
              default:
                abort("bad ioctl syscall " + op);
            }
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return -e.errno;
          }
        }
        function syscallMunmap(addr, len) {
          if ((addr | 0) === -1 || len === 0) {
            return -28;
          }
          var info = SYSCALLS.mappings[addr];
          if (!info)
            return 0;
          if (len === info.len) {
            var stream = FS.getStream(info.fd);
            if (info.prot & 2) {
              SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
            }
            FS.munmap(stream);
            SYSCALLS.mappings[addr] = null;
            if (info.allocated) {
              _free2(info.malloc);
            }
          }
          return 0;
        }
        function ___sys_munmap(addr, len) {
          try {
            return syscallMunmap(addr, len);
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return -e.errno;
          }
        }
        function ___sys_open(path, flags, varargs) {
          SYSCALLS.varargs = varargs;
          try {
            var pathname = SYSCALLS.getStr(path);
            var mode = SYSCALLS.get();
            var stream = FS.open(pathname, flags, mode);
            return stream.fd;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return -e.errno;
          }
        }
        var tupleRegistrations = {};
        function runDestructors(destructors) {
          while (destructors.length) {
            var ptr = destructors.pop();
            var del = destructors.pop();
            del(ptr);
          }
        }
        function simpleReadValueFromPointer(pointer) {
          return this["fromWireType"](HEAPU32[pointer >> 2]);
        }
        var awaitingDependencies = {};
        var registeredTypes = {};
        var typeDependencies = {};
        var char_0 = 48;
        var char_9 = 57;
        function makeLegalFunctionName(name) {
          if (void 0 === name) {
            return "_unknown";
          }
          name = name.replace(/[^a-zA-Z0-9_]/g, "$");
          var f = name.charCodeAt(0);
          if (f >= char_0 && f <= char_9) {
            return "_" + name;
          } else {
            return name;
          }
        }
        function createNamedFunction(name, body) {
          name = makeLegalFunctionName(name);
          return new Function(
            "body",
            "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n'
          )(body);
        }
        function extendError(baseErrorType, errorName) {
          var errorClass = createNamedFunction(errorName, function(message) {
            this.name = errorName;
            this.message = message;
            var stack = new Error(message).stack;
            if (stack !== void 0) {
              this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
            }
          });
          errorClass.prototype = Object.create(baseErrorType.prototype);
          errorClass.prototype.constructor = errorClass;
          errorClass.prototype.toString = function() {
            if (this.message === void 0) {
              return this.name;
            } else {
              return this.name + ": " + this.message;
            }
          };
          return errorClass;
        }
        var InternalError = void 0;
        function throwInternalError(message) {
          throw new InternalError(message);
        }
        function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
          myTypes.forEach(function(type) {
            typeDependencies[type] = dependentTypes;
          });
          function onComplete(typeConverters2) {
            var myTypeConverters = getTypeConverters(typeConverters2);
            if (myTypeConverters.length !== myTypes.length) {
              throwInternalError("Mismatched type converter count");
            }
            for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
            }
          }
          var typeConverters = new Array(dependentTypes.length);
          var unregisteredTypes = [];
          var registered = 0;
          dependentTypes.forEach(function(dt, i) {
            if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
            } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                  onComplete(typeConverters);
                }
              });
            }
          });
          if (0 === unregisteredTypes.length) {
            onComplete(typeConverters);
          }
        }
        function __embind_finalize_value_array(rawTupleType) {
          var reg = tupleRegistrations[rawTupleType];
          delete tupleRegistrations[rawTupleType];
          var elements = reg.elements;
          var elementsLength = elements.length;
          var elementTypes = elements.map(function(elt) {
            return elt.getterReturnType;
          }).concat(elements.map(function(elt) {
            return elt.setterArgumentType;
          }));
          var rawConstructor = reg.rawConstructor;
          var rawDestructor = reg.rawDestructor;
          whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes2) {
            elements.forEach(function(elt, i) {
              var getterReturnType = elementTypes2[i];
              var getter = elt.getter;
              var getterContext = elt.getterContext;
              var setterArgumentType = elementTypes2[i + elementsLength];
              var setter = elt.setter;
              var setterContext = elt.setterContext;
              elt.read = function(ptr) {
                return getterReturnType["fromWireType"](getter(getterContext, ptr));
              };
              elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
                runDestructors(destructors);
              };
            });
            return [{
              name: reg.name,
              "fromWireType": function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                  rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
              },
              "toWireType": function(destructors, o) {
                if (elementsLength !== o.length) {
                  throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                  elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                  destructors.push(rawDestructor, ptr);
                }
                return ptr;
              },
              "argPackAdvance": 8,
              "readValueFromPointer": simpleReadValueFromPointer,
              destructorFunction: rawDestructor
            }];
          });
        }
        var structRegistrations = {};
        function __embind_finalize_value_object(structType) {
          var reg = structRegistrations[structType];
          delete structRegistrations[structType];
          var rawConstructor = reg.rawConstructor;
          var rawDestructor = reg.rawDestructor;
          var fieldRecords = reg.fields;
          var fieldTypes = fieldRecords.map(function(field) {
            return field.getterReturnType;
          }).concat(fieldRecords.map(function(field) {
            return field.setterArgumentType;
          }));
          whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes2) {
            var fields = {};
            fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes2[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes2[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                read: function(ptr) {
                  return getterReturnType["fromWireType"](
                    getter(getterContext, ptr)
                  );
                },
                write: function(ptr, o) {
                  var destructors = [];
                  setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
                  runDestructors(destructors);
                }
              };
            });
            return [{
              name: reg.name,
              "fromWireType": function(ptr) {
                var rv = {};
                for (var i in fields) {
                  rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
              },
              "toWireType": function(destructors, o) {
                for (var fieldName in fields) {
                  if (!(fieldName in o)) {
                    throw new TypeError('Missing field:  "' + fieldName + '"');
                  }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                  fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                  destructors.push(rawDestructor, ptr);
                }
                return ptr;
              },
              "argPackAdvance": 8,
              "readValueFromPointer": simpleReadValueFromPointer,
              destructorFunction: rawDestructor
            }];
          });
        }
        function getShiftFromSize(size) {
          switch (size) {
            case 1:
              return 0;
            case 2:
              return 1;
            case 4:
              return 2;
            case 8:
              return 3;
            default:
              throw new TypeError("Unknown type size: " + size);
          }
        }
        function embind_init_charCodes() {
          var codes = new Array(256);
          for (var i = 0; i < 256; ++i) {
            codes[i] = String.fromCharCode(i);
          }
          embind_charCodes = codes;
        }
        var embind_charCodes = void 0;
        function readLatin1String(ptr) {
          var ret = "";
          var c = ptr;
          while (HEAPU8[c]) {
            ret += embind_charCodes[HEAPU8[c++]];
          }
          return ret;
        }
        var BindingError = void 0;
        function throwBindingError(message) {
          throw new BindingError(message);
        }
        function registerType(rawType, registeredInstance, options) {
          options = options || {};
          if (!("argPackAdvance" in registeredInstance)) {
            throw new TypeError("registerType registeredInstance requires argPackAdvance");
          }
          var name = registeredInstance.name;
          if (!rawType) {
            throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
          }
          if (registeredTypes.hasOwnProperty(rawType)) {
            if (options.ignoreDuplicateRegistrations) {
              return;
            } else {
              throwBindingError("Cannot register type '" + name + "' twice");
            }
          }
          registeredTypes[rawType] = registeredInstance;
          delete typeDependencies[rawType];
          if (awaitingDependencies.hasOwnProperty(rawType)) {
            var callbacks = awaitingDependencies[rawType];
            delete awaitingDependencies[rawType];
            callbacks.forEach(function(cb) {
              cb();
            });
          }
        }
        function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
          var shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            "fromWireType": function(wt) {
              return !!wt;
            },
            "toWireType": function(destructors, o) {
              return o ? trueValue : falseValue;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": function(pointer) {
              var heap;
              if (size === 1) {
                heap = HEAP8;
              } else if (size === 2) {
                heap = HEAP16;
              } else if (size === 4) {
                heap = HEAP32;
              } else {
                throw new TypeError("Unknown boolean type size: " + name);
              }
              return this["fromWireType"](heap[pointer >> shift]);
            },
            destructorFunction: null
            // This type does not need a destructor
          });
        }
        function ClassHandle_isAliasOf(other) {
          if (!(this instanceof ClassHandle)) {
            return false;
          }
          if (!(other instanceof ClassHandle)) {
            return false;
          }
          var leftClass = this.$$.ptrType.registeredClass;
          var left = this.$$.ptr;
          var rightClass = other.$$.ptrType.registeredClass;
          var right = other.$$.ptr;
          while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
          }
          while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
          }
          return leftClass === rightClass && left === right;
        }
        function shallowCopyInternalPointer(o) {
          return {
            count: o.count,
            deleteScheduled: o.deleteScheduled,
            preservePointerOnDelete: o.preservePointerOnDelete,
            ptr: o.ptr,
            ptrType: o.ptrType,
            smartPtr: o.smartPtr,
            smartPtrType: o.smartPtrType
          };
        }
        function throwInstanceAlreadyDeleted(obj) {
          function getInstanceTypeName(handle) {
            return handle.$$.ptrType.registeredClass.name;
          }
          throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
        }
        var finalizationGroup = false;
        function detachFinalizer(handle) {
        }
        function runDestructor($$) {
          if ($$.smartPtr) {
            $$.smartPtrType.rawDestructor($$.smartPtr);
          } else {
            $$.ptrType.registeredClass.rawDestructor($$.ptr);
          }
        }
        function releaseClassHandle($$) {
          $$.count.value -= 1;
          var toDelete = 0 === $$.count.value;
          if (toDelete) {
            runDestructor($$);
          }
        }
        function attachFinalizer(handle) {
          if ("undefined" === typeof FinalizationGroup) {
            attachFinalizer = function(handle2) {
              return handle2;
            };
            return handle;
          }
          finalizationGroup = new FinalizationGroup(function(iter) {
            for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                console.warn("object already deleted: " + $$.ptr);
              } else {
                releaseClassHandle($$);
              }
            }
          });
          attachFinalizer = function(handle2) {
            finalizationGroup.register(handle2, handle2.$$, handle2.$$);
            return handle2;
          };
          detachFinalizer = function(handle2) {
            finalizationGroup.unregister(handle2.$$);
          };
          return attachFinalizer(handle);
        }
        function ClassHandle_clone() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
          } else {
            var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                value: shallowCopyInternalPointer(this.$$)
              }
            }));
            clone.$$.count.value += 1;
            clone.$$.deleteScheduled = false;
            return clone;
          }
        }
        function ClassHandle_delete() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          detachFinalizer(this);
          releaseClassHandle(this.$$);
          if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = void 0;
            this.$$.ptr = void 0;
          }
        }
        function ClassHandle_isDeleted() {
          return !this.$$.ptr;
        }
        var delayFunction = void 0;
        var deletionQueue = [];
        function flushPendingDeletes() {
          while (deletionQueue.length) {
            var obj = deletionQueue.pop();
            obj.$$.deleteScheduled = false;
            obj["delete"]();
          }
        }
        function ClassHandle_deleteLater() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          deletionQueue.push(this);
          if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
          this.$$.deleteScheduled = true;
          return this;
        }
        function init_ClassHandle() {
          ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
          ClassHandle.prototype["clone"] = ClassHandle_clone;
          ClassHandle.prototype["delete"] = ClassHandle_delete;
          ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
          ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
        }
        function ClassHandle() {
        }
        var registeredPointers = {};
        function ensureOverloadTable(proto, methodName, humanName) {
          if (void 0 === proto[methodName].overloadTable) {
            var prevFunc = proto[methodName];
            proto[methodName] = function() {
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
            };
            proto[methodName].overloadTable = [];
            proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
          }
        }
        function exposePublicSymbol(name, value, numArguments) {
          if (Module.hasOwnProperty(name)) {
            if (void 0 === numArguments || void 0 !== Module[name].overloadTable && void 0 !== Module[name].overloadTable[numArguments]) {
              throwBindingError("Cannot register public name '" + name + "' twice");
            }
            ensureOverloadTable(Module, name, name);
            if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
            }
            Module[name].overloadTable[numArguments] = value;
          } else {
            Module[name] = value;
            if (void 0 !== numArguments) {
              Module[name].numArguments = numArguments;
            }
          }
        }
        function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
          this.name = name;
          this.constructor = constructor;
          this.instancePrototype = instancePrototype;
          this.rawDestructor = rawDestructor;
          this.baseClass = baseClass;
          this.getActualType = getActualType;
          this.upcast = upcast;
          this.downcast = downcast;
          this.pureVirtualFunctions = [];
        }
        function upcastPointer(ptr, ptrClass, desiredClass) {
          while (ptrClass !== desiredClass) {
            if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
            }
            ptr = ptrClass.upcast(ptr);
            ptrClass = ptrClass.baseClass;
          }
          return ptr;
        }
        function constNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          return ptr;
        }
        function genericPointerToWireType(destructors, handle) {
          var ptr;
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
            } else {
              return 0;
            }
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          if (!this.isConst && handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          if (this.isSmartPointer) {
            if (void 0 === handle.$$.smartPtr) {
              throwBindingError("Passing raw pointer to smart pointer is illegal");
            }
            switch (this.sharingPolicy) {
              case 0:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
                }
                break;
              case 1:
                ptr = handle.$$.smartPtr;
                break;
              case 2:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  var clonedHandle = handle["clone"]();
                  ptr = this.rawShare(
                    ptr,
                    __emval_register(function() {
                      clonedHandle["delete"]();
                    })
                  );
                  if (destructors !== null) {
                    destructors.push(this.rawDestructor, ptr);
                  }
                }
                break;
              default:
                throwBindingError("Unsupporting sharing policy");
            }
          }
          return ptr;
        }
        function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          if (handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          return ptr;
        }
        function RegisteredPointer_getPointee(ptr) {
          if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
          }
          return ptr;
        }
        function RegisteredPointer_destructor(ptr) {
          if (this.rawDestructor) {
            this.rawDestructor(ptr);
          }
        }
        function RegisteredPointer_deleteObject(handle) {
          if (handle !== null) {
            handle["delete"]();
          }
        }
        function downcastPointer(ptr, ptrClass, desiredClass) {
          if (ptrClass === desiredClass) {
            return ptr;
          }
          if (void 0 === desiredClass.baseClass) {
            return null;
          }
          var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
          if (rv === null) {
            return null;
          }
          return desiredClass.downcast(rv);
        }
        function getInheritedInstanceCount() {
          return Object.keys(registeredInstances).length;
        }
        function getLiveInheritedInstances() {
          var rv = [];
          for (var k in registeredInstances) {
            if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
            }
          }
          return rv;
        }
        function setDelayFunction(fn) {
          delayFunction = fn;
          if (deletionQueue.length && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
        }
        function init_embind() {
          Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
          Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
          Module["flushPendingDeletes"] = flushPendingDeletes;
          Module["setDelayFunction"] = setDelayFunction;
        }
        var registeredInstances = {};
        function getBasestPointer(class_, ptr) {
          if (ptr === void 0) {
            throwBindingError("ptr should not be undefined");
          }
          while (class_.baseClass) {
            ptr = class_.upcast(ptr);
            class_ = class_.baseClass;
          }
          return ptr;
        }
        function getInheritedInstance(class_, ptr) {
          ptr = getBasestPointer(class_, ptr);
          return registeredInstances[ptr];
        }
        function makeClassHandle(prototype, record) {
          if (!record.ptrType || !record.ptr) {
            throwInternalError("makeClassHandle requires ptr and ptrType");
          }
          var hasSmartPtrType = !!record.smartPtrType;
          var hasSmartPtr = !!record.smartPtr;
          if (hasSmartPtrType !== hasSmartPtr) {
            throwInternalError("Both smartPtrType and smartPtr must be specified");
          }
          record.count = { value: 1 };
          return attachFinalizer(Object.create(prototype, {
            $$: {
              value: record
            }
          }));
        }
        function RegisteredPointer_fromWireType(ptr) {
          var rawPointer = this.getPointee(ptr);
          if (!rawPointer) {
            this.destructor(ptr);
            return null;
          }
          var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
          if (void 0 !== registeredInstance) {
            if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance["clone"]();
            } else {
              var rv = registeredInstance["clone"]();
              this.destructor(ptr);
              return rv;
            }
          }
          function makeDefaultHandle() {
            if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr
              });
            } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr
              });
            }
          }
          var actualType = this.registeredClass.getActualType(rawPointer);
          var registeredPointerRecord = registeredPointers[actualType];
          if (!registeredPointerRecord) {
            return makeDefaultHandle.call(this);
          }
          var toType;
          if (this.isConst) {
            toType = registeredPointerRecord.constPointerType;
          } else {
            toType = registeredPointerRecord.pointerType;
          }
          var dp = downcastPointer(
            rawPointer,
            this.registeredClass,
            toType.registeredClass
          );
          if (dp === null) {
            return makeDefaultHandle.call(this);
          }
          if (this.isSmartPointer) {
            return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr
            });
          } else {
            return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp
            });
          }
        }
        function init_RegisteredPointer() {
          RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
          RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
          RegisteredPointer.prototype["argPackAdvance"] = 8;
          RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
          RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
          RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
        }
        function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
          this.name = name;
          this.registeredClass = registeredClass;
          this.isReference = isReference;
          this.isConst = isConst;
          this.isSmartPointer = isSmartPointer;
          this.pointeeType = pointeeType;
          this.sharingPolicy = sharingPolicy;
          this.rawGetPointee = rawGetPointee;
          this.rawConstructor = rawConstructor;
          this.rawShare = rawShare;
          this.rawDestructor = rawDestructor;
          if (!isSmartPointer && registeredClass.baseClass === void 0) {
            if (isConst) {
              this["toWireType"] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            } else {
              this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            }
          } else {
            this["toWireType"] = genericPointerToWireType;
          }
        }
        function replacePublicSymbol(name, value, numArguments) {
          if (!Module.hasOwnProperty(name)) {
            throwInternalError("Replacing nonexistant public symbol");
          }
          if (void 0 !== Module[name].overloadTable && void 0 !== numArguments) {
            Module[name].overloadTable[numArguments] = value;
          } else {
            Module[name] = value;
            Module[name].argCount = numArguments;
          }
        }
        function getDynCaller(sig, ptr) {
          assert(sig.indexOf("j") >= 0, "getDynCaller should only be called with i64 sigs");
          var argCache = [];
          return function() {
            argCache.length = arguments.length;
            for (var i = 0; i < arguments.length; i++) {
              argCache[i] = arguments[i];
            }
            return dynCall(sig, ptr, argCache);
          };
        }
        function embind__requireFunction(signature, rawFunction) {
          signature = readLatin1String(signature);
          function makeDynCaller() {
            if (signature.indexOf("j") != -1) {
              return getDynCaller(signature, rawFunction);
            }
            return wasmTable.get(rawFunction);
          }
          var fp = makeDynCaller();
          if (typeof fp !== "function") {
            throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
          }
          return fp;
        }
        var UnboundTypeError = void 0;
        function getTypeName(type) {
          var ptr = ___getTypeName2(type);
          var rv = readLatin1String(ptr);
          _free2(ptr);
          return rv;
        }
        function throwUnboundTypeError(message, types) {
          var unboundTypes = [];
          var seen = {};
          function visit(type) {
            if (seen[type]) {
              return;
            }
            if (registeredTypes[type]) {
              return;
            }
            if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
            }
            unboundTypes.push(type);
            seen[type] = true;
          }
          types.forEach(visit);
          throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
        }
        function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
          name = readLatin1String(name);
          getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
          if (upcast) {
            upcast = embind__requireFunction(upcastSignature, upcast);
          }
          if (downcast) {
            downcast = embind__requireFunction(downcastSignature, downcast);
          }
          rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
          var legalFunctionName = makeLegalFunctionName(name);
          exposePublicSymbol(legalFunctionName, function() {
            throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
          });
          whenDependentTypesAreResolved(
            [rawType, rawPointerType, rawConstPointerType],
            baseClassRawType ? [baseClassRawType] : [],
            function(base) {
              base = base[0];
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
              } else {
                basePrototype = ClassHandle.prototype;
              }
              var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                  throw new BindingError("Use 'new' to construct " + name);
                }
                if (void 0 === registeredClass.constructor_body) {
                  throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (void 0 === body) {
                  throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
              });
              var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor }
              });
              constructor.prototype = instancePrototype;
              var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast
              );
              var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false
              );
              var pointerConverter = new RegisteredPointer(
                name + "*",
                registeredClass,
                false,
                false,
                false
              );
              var constPointerConverter = new RegisteredPointer(
                name + " const*",
                registeredClass,
                false,
                true,
                false
              );
              registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
              };
              replacePublicSymbol(legalFunctionName, constructor);
              return [referenceConverter, pointerConverter, constPointerConverter];
            }
          );
        }
        function heap32VectorToArray(count, firstElement) {
          var array = [];
          for (var i = 0; i < count; i++) {
            array.push(HEAP32[(firstElement >> 2) + i]);
          }
          return array;
        }
        function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
          assert(argCount > 0);
          var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          invoker = embind__requireFunction(invokerSignature, invoker);
          var args = [rawConstructor];
          var destructors = [];
          whenDependentTypesAreResolved([], [rawClassType], function(classType) {
            classType = classType[0];
            var humanName = "constructor " + classType.name;
            if (void 0 === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
            }
            if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
            }
            classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
            };
            whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                  throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
                }
                destructors.length = 0;
                args.length = argCount;
                for (var i = 1; i < argCount; ++i) {
                  args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
                }
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0]["fromWireType"](ptr);
              };
              return [];
            });
            return [];
          });
        }
        function new_(constructor, argumentList) {
          if (!(constructor instanceof Function)) {
            throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
          }
          var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
          });
          dummy.prototype = constructor.prototype;
          var obj = new dummy();
          var r = constructor.apply(obj, argumentList);
          return r instanceof Object ? r : obj;
        }
        function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
          var argCount = argTypes.length;
          if (argCount < 2) {
            throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
          }
          var isClassMethodFunc = argTypes[1] !== null && classType !== null;
          var needsDestructorStack = false;
          for (var i = 1; i < argTypes.length; ++i) {
            if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
              needsDestructorStack = true;
              break;
            }
          }
          var returns = argTypes[0].name !== "void";
          var argsList = "";
          var argsListWired = "";
          for (var i = 0; i < argCount - 2; ++i) {
            argsList += (i !== 0 ? ", " : "") + "arg" + i;
            argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
          }
          var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
          if (needsDestructorStack) {
            invokerFnBody += "var destructors = [];\n";
          }
          var dtorStack = needsDestructorStack ? "destructors" : "null";
          var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
          var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
          if (isClassMethodFunc) {
            invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
          }
          for (var i = 0; i < argCount - 2; ++i) {
            invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
            args1.push("argType" + i);
            args2.push(argTypes[i + 2]);
          }
          if (isClassMethodFunc) {
            argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
          }
          invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
          if (needsDestructorStack) {
            invokerFnBody += "runDestructors(destructors);\n";
          } else {
            for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
              var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
              if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
                args1.push(paramName + "_dtor");
                args2.push(argTypes[i].destructorFunction);
              }
            }
          }
          if (returns) {
            invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
          } else {
          }
          invokerFnBody += "}\n";
          args1.push(invokerFnBody);
          var invokerFunction = new_(Function, args1).apply(null, args2);
          return invokerFunction;
        }
        function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
          var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          methodName = readLatin1String(methodName);
          rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
          whenDependentTypesAreResolved([], [rawClassType], function(classType) {
            classType = classType[0];
            var humanName = classType.name + "." + methodName;
            if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
            }
            function unboundTypesHandler() {
              throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
            }
            var proto = classType.registeredClass.instancePrototype;
            var method = proto[methodName];
            if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
            } else {
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
            }
            whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
              if (void 0 === proto[methodName].overloadTable) {
                memberFunction.argCount = argCount - 2;
                proto[methodName] = memberFunction;
              } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
              return [];
            });
            return [];
          });
        }
        function validateThis(this_, classType, humanName) {
          if (!(this_ instanceof Object)) {
            throwBindingError(humanName + ' with invalid "this": ' + this_);
          }
          if (!(this_ instanceof classType.registeredClass.constructor)) {
            throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
          }
          if (!this_.$$.ptr) {
            throwBindingError("cannot call emscripten binding method " + humanName + " on deleted object");
          }
          return upcastPointer(
            this_.$$.ptr,
            this_.$$.ptrType.registeredClass,
            classType.registeredClass
          );
        }
        function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          fieldName = readLatin1String(fieldName);
          getter = embind__requireFunction(getterSignature, getter);
          whenDependentTypesAreResolved([], [classType], function(classType2) {
            classType2 = classType2[0];
            var humanName = classType2.name + "." + fieldName;
            var desc = {
              get: function() {
                throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
            };
            if (setter) {
              desc.set = function() {
                throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]);
              };
            } else {
              desc.set = function(v) {
                throwBindingError(humanName + " is a read-only property");
              };
            }
            Object.defineProperty(classType2.registeredClass.instancePrototype, fieldName, desc);
            whenDependentTypesAreResolved(
              [],
              setter ? [getterReturnType, setterArgumentType] : [getterReturnType],
              function(types) {
                var getterReturnType2 = types[0];
                var desc2 = {
                  get: function() {
                    var ptr = validateThis(this, classType2, humanName + " getter");
                    return getterReturnType2["fromWireType"](getter(getterContext, ptr));
                  },
                  enumerable: true
                };
                if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType2 = types[1];
                  desc2.set = function(v) {
                    var ptr = validateThis(this, classType2, humanName + " setter");
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType2["toWireType"](destructors, v));
                    runDestructors(destructors);
                  };
                }
                Object.defineProperty(classType2.registeredClass.instancePrototype, fieldName, desc2);
                return [];
              }
            );
            return [];
          });
        }
        var emval_free_list = [];
        var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
        function __emval_decref(handle) {
          if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
            emval_handle_array[handle] = void 0;
            emval_free_list.push(handle);
          }
        }
        function count_emval_handles() {
          var count = 0;
          for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              ++count;
            }
          }
          return count;
        }
        function get_first_emval() {
          for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              return emval_handle_array[i];
            }
          }
          return null;
        }
        function init_emval() {
          Module["count_emval_handles"] = count_emval_handles;
          Module["get_first_emval"] = get_first_emval;
        }
        function __emval_register(value) {
          switch (value) {
            case void 0: {
              return 1;
            }
            case null: {
              return 2;
            }
            case true: {
              return 3;
            }
            case false: {
              return 4;
            }
            default: {
              var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
              emval_handle_array[handle] = { refcount: 1, value };
              return handle;
            }
          }
        }
        function __embind_register_emval(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            "fromWireType": function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
            },
            "toWireType": function(destructors, value) {
              return __emval_register(value);
            },
            "argPackAdvance": 8,
            "readValueFromPointer": simpleReadValueFromPointer,
            destructorFunction: null
            // This type does not need a destructor
            // TODO: do we need a deleteObject here?  write a test where
            // emval is passed into JS via an interface
          });
        }
        function enumReadValueFromPointer(name, shift, signed) {
          switch (shift) {
            case 0:
              return function(pointer) {
                var heap = signed ? HEAP8 : HEAPU8;
                return this["fromWireType"](heap[pointer]);
              };
            case 1:
              return function(pointer) {
                var heap = signed ? HEAP16 : HEAPU16;
                return this["fromWireType"](heap[pointer >> 1]);
              };
            case 2:
              return function(pointer) {
                var heap = signed ? HEAP32 : HEAPU32;
                return this["fromWireType"](heap[pointer >> 2]);
              };
            default:
              throw new TypeError("Unknown integer type: " + name);
          }
        }
        function __embind_register_enum(rawType, name, size, isSigned) {
          var shift = getShiftFromSize(size);
          name = readLatin1String(name);
          function ctor() {
          }
          ctor.values = {};
          registerType(rawType, {
            name,
            constructor: ctor,
            "fromWireType": function(c) {
              return this.constructor.values[c];
            },
            "toWireType": function(destructors, c) {
              return c.value;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": enumReadValueFromPointer(name, shift, isSigned),
            destructorFunction: null
          });
          exposePublicSymbol(name, ctor);
        }
        function requireRegisteredType(rawType, humanName) {
          var impl = registeredTypes[rawType];
          if (void 0 === impl) {
            throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
          }
          return impl;
        }
        function __embind_register_enum_value(rawEnumType, name, enumValue) {
          var enumType = requireRegisteredType(rawEnumType, "enum");
          name = readLatin1String(name);
          var Enum = enumType.constructor;
          var Value = Object.create(enumType.constructor.prototype, {
            value: { value: enumValue },
            constructor: { value: createNamedFunction(enumType.name + "_" + name, function() {
            }) }
          });
          Enum.values[enumValue] = Value;
          Enum[name] = Value;
        }
        function _embind_repr(v) {
          if (v === null) {
            return "null";
          }
          var t2 = typeof v;
          if (t2 === "object" || t2 === "array" || t2 === "function") {
            return v.toString();
          } else {
            return "" + v;
          }
        }
        function floatReadValueFromPointer(name, shift) {
          switch (shift) {
            case 2:
              return function(pointer) {
                return this["fromWireType"](HEAPF32[pointer >> 2]);
              };
            case 3:
              return function(pointer) {
                return this["fromWireType"](HEAPF64[pointer >> 3]);
              };
            default:
              throw new TypeError("Unknown float type: " + name);
          }
        }
        function __embind_register_float(rawType, name, size) {
          var shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            "fromWireType": function(value) {
              return value;
            },
            "toWireType": function(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": floatReadValueFromPointer(name, shift),
            destructorFunction: null
            // This type does not need a destructor
          });
        }
        function integerReadValueFromPointer(name, shift, signed) {
          switch (shift) {
            case 0:
              return signed ? function readS8FromPointer(pointer) {
                return HEAP8[pointer];
              } : function readU8FromPointer(pointer) {
                return HEAPU8[pointer];
              };
            case 1:
              return signed ? function readS16FromPointer(pointer) {
                return HEAP16[pointer >> 1];
              } : function readU16FromPointer(pointer) {
                return HEAPU16[pointer >> 1];
              };
            case 2:
              return signed ? function readS32FromPointer(pointer) {
                return HEAP32[pointer >> 2];
              } : function readU32FromPointer(pointer) {
                return HEAPU32[pointer >> 2];
              };
            default:
              throw new TypeError("Unknown integer type: " + name);
          }
        }
        function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
          name = readLatin1String(name);
          if (maxRange === -1) {
            maxRange = 4294967295;
          }
          var shift = getShiftFromSize(size);
          var fromWireType = function(value) {
            return value;
          };
          if (minRange === 0) {
            var bitshift = 32 - 8 * size;
            fromWireType = function(value) {
              return value << bitshift >>> bitshift;
            };
          }
          var isUnsignedType = name.indexOf("unsigned") != -1;
          registerType(primitiveType, {
            name,
            "fromWireType": fromWireType,
            "toWireType": function(destructors, value) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
              }
              return isUnsignedType ? value >>> 0 : value | 0;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
            destructorFunction: null
            // This type does not need a destructor
          });
        }
        function __embind_register_memory_view(rawType, dataTypeIndex, name) {
          var typeMapping = [
            Int8Array,
            Uint8Array,
            Int16Array,
            Uint16Array,
            Int32Array,
            Uint32Array,
            Float32Array,
            Float64Array
          ];
          var TA = typeMapping[dataTypeIndex];
          function decodeMemoryView(handle) {
            handle = handle >> 2;
            var heap = HEAPU32;
            var size = heap[handle];
            var data = heap[handle + 1];
            return new TA(buffer, data, size);
          }
          name = readLatin1String(name);
          registerType(rawType, {
            name,
            "fromWireType": decodeMemoryView,
            "argPackAdvance": 8,
            "readValueFromPointer": decodeMemoryView
          }, {
            ignoreDuplicateRegistrations: true
          });
        }
        function __embind_register_std_string(rawType, name) {
          name = readLatin1String(name);
          var stdStringIsUTF8 = name === "std::string";
          registerType(rawType, {
            name,
            "fromWireType": function(value) {
              var length = HEAPU32[value >> 2];
              var str;
              if (stdStringIsUTF8) {
                var decodeStartPtr = value + 4;
                for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i;
                  if (i == length || HEAPU8[currentBytePtr] == 0) {
                    var maxRead = currentBytePtr - decodeStartPtr;
                    var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                    if (str === void 0) {
                      str = stringSegment;
                    } else {
                      str += String.fromCharCode(0);
                      str += stringSegment;
                    }
                    decodeStartPtr = currentBytePtr + 1;
                  }
                }
              } else {
                var a = new Array(length);
                for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                }
                str = a.join("");
              }
              _free2(value);
              return str;
            },
            "toWireType": function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
              }
              var getLength;
              var valueIsOfTypeString = typeof value === "string";
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                throwBindingError("Cannot pass non-string to std::string");
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                getLength = function() {
                  return lengthBytesUTF8(value);
                };
              } else {
                getLength = function() {
                  return value.length;
                };
              }
              var length = getLength();
              var ptr = _malloc2(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                stringToUTF8(value, ptr + 4, length + 1);
              } else {
                if (valueIsOfTypeString) {
                  for (var i = 0; i < length; ++i) {
                    var charCode = value.charCodeAt(i);
                    if (charCode > 255) {
                      _free2(ptr);
                      throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                    }
                    HEAPU8[ptr + 4 + i] = charCode;
                  }
                } else {
                  for (var i = 0; i < length; ++i) {
                    HEAPU8[ptr + 4 + i] = value[i];
                  }
                }
              }
              if (destructors !== null) {
                destructors.push(_free2, ptr);
              }
              return ptr;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": simpleReadValueFromPointer,
            destructorFunction: function(ptr) {
              _free2(ptr);
            }
          });
        }
        function __embind_register_std_wstring(rawType, charSize, name) {
          name = readLatin1String(name);
          var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
          if (charSize === 2) {
            decodeString = UTF16ToString;
            encodeString = stringToUTF16;
            lengthBytesUTF = lengthBytesUTF16;
            getHeap = function() {
              return HEAPU16;
            };
            shift = 1;
          } else if (charSize === 4) {
            decodeString = UTF32ToString;
            encodeString = stringToUTF32;
            lengthBytesUTF = lengthBytesUTF32;
            getHeap = function() {
              return HEAPU32;
            };
            shift = 2;
          }
          registerType(rawType, {
            name,
            "fromWireType": function(value) {
              var length = HEAPU32[value >> 2];
              var HEAP2 = getHeap();
              var str;
              var decodeStartPtr = value + 4;
              for (var i = 0; i <= length; ++i) {
                var currentBytePtr = value + 4 + i * charSize;
                if (i == length || HEAP2[currentBytePtr >> shift] == 0) {
                  var maxReadBytes = currentBytePtr - decodeStartPtr;
                  var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                  if (str === void 0) {
                    str = stringSegment;
                  } else {
                    str += String.fromCharCode(0);
                    str += stringSegment;
                  }
                  decodeStartPtr = currentBytePtr + charSize;
                }
              }
              _free2(value);
              return str;
            },
            "toWireType": function(destructors, value) {
              if (!(typeof value === "string")) {
                throwBindingError("Cannot pass non-string to C++ string type " + name);
              }
              var length = lengthBytesUTF(value);
              var ptr = _malloc2(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
              encodeString(value, ptr + 4, length + charSize);
              if (destructors !== null) {
                destructors.push(_free2, ptr);
              }
              return ptr;
            },
            "argPackAdvance": 8,
            "readValueFromPointer": simpleReadValueFromPointer,
            destructorFunction: function(ptr) {
              _free2(ptr);
            }
          });
        }
        function __embind_register_value_array(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
          tupleRegistrations[rawType] = {
            name: readLatin1String(name),
            rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
            rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
            elements: []
          };
        }
        function __embind_register_value_array_element(rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          tupleRegistrations[rawTupleType].elements.push({
            getterReturnType,
            getter: embind__requireFunction(getterSignature, getter),
            getterContext,
            setterArgumentType,
            setter: embind__requireFunction(setterSignature, setter),
            setterContext
          });
        }
        function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
          structRegistrations[rawType] = {
            name: readLatin1String(name),
            rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
            rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
            fields: []
          };
        }
        function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          structRegistrations[structType].fields.push({
            fieldName: readLatin1String(fieldName),
            getterReturnType,
            getter: embind__requireFunction(getterSignature, getter),
            getterContext,
            setterArgumentType,
            setter: embind__requireFunction(setterSignature, setter),
            setterContext
          });
        }
        function __embind_register_void(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, {
            isVoid: true,
            // void return values can be optimized out sometimes
            name,
            "argPackAdvance": 0,
            "fromWireType": function() {
              return void 0;
            },
            "toWireType": function(destructors, o) {
              return void 0;
            }
          });
        }
        function __emval_lookupTypes(argCount, argTypes) {
          var a = new Array(argCount);
          for (var i = 0; i < argCount; ++i) {
            a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i
            );
          }
          return a;
        }
        function requireHandle(handle) {
          if (!handle) {
            throwBindingError("Cannot use deleted val. handle = " + handle);
          }
          return emval_handle_array[handle].value;
        }
        function __emval_call(handle, argCount, argTypes, argv) {
          handle = requireHandle(handle);
          var types = __emval_lookupTypes(argCount, argTypes);
          var args = new Array(argCount);
          for (var i = 0; i < argCount; ++i) {
            var type = types[i];
            args[i] = type["readValueFromPointer"](argv);
            argv += type["argPackAdvance"];
          }
          var rv = handle.apply(void 0, args);
          return __emval_register(rv);
        }
        function __emval_incref(handle) {
          if (handle > 4) {
            emval_handle_array[handle].refcount += 1;
          }
        }
        function __emval_take_value(type, argv) {
          type = requireRegisteredType(type, "_emval_take_value");
          var v = type["readValueFromPointer"](argv);
          return __emval_register(v);
        }
        function _abort() {
          abort();
        }
        var _emscripten_get_now;
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now = function() {
            var t2 = process["hrtime"]();
            return t2[0] * 1e3 + t2[1] / 1e6;
          };
        } else if (typeof dateNow !== "undefined") {
          _emscripten_get_now = dateNow;
        } else
          _emscripten_get_now = function() {
            return performance.now();
          };
        var _emscripten_get_now_is_monotonic = true;
        ;
        function _clock_gettime(clk_id, tp) {
          var now2;
          if (clk_id === 0) {
            now2 = Date.now();
          } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
            now2 = _emscripten_get_now();
          } else {
            setErrNo(28);
            return -1;
          }
          HEAP32[tp >> 2] = now2 / 1e3 | 0;
          HEAP32[tp + 4 >> 2] = now2 % 1e3 * 1e3 * 1e3 | 0;
          return 0;
        }
        function _emscripten_memcpy_big(dest, src, num) {
          HEAPU8.copyWithin(dest, src, src + num);
        }
        function _emscripten_get_heap_size() {
          return HEAPU8.length;
        }
        function emscripten_realloc_buffer(size) {
          try {
            wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
            updateGlobalBufferAndViews(wasmMemory.buffer);
            return 1;
          } catch (e) {
            console.error("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
          }
        }
        function _emscripten_resize_heap(requestedSize) {
          requestedSize = requestedSize >>> 0;
          var oldSize = _emscripten_get_heap_size();
          assert(requestedSize > oldSize);
          var maxHeapSize = 2147483648;
          if (requestedSize > maxHeapSize) {
            err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
            return false;
          }
          var minHeapSize = 16777216;
          for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
            var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
            var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));
            var replacement = emscripten_realloc_buffer(newSize);
            if (replacement) {
              return true;
            }
          }
          err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
          return false;
        }
        var ENV = {};
        function getExecutableName() {
          return thisProgram || "./this.program";
        }
        function getEnvStrings() {
          if (!getEnvStrings.strings) {
            var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
            var env = {
              "USER": "web_user",
              "LOGNAME": "web_user",
              "PATH": "/",
              "PWD": "/",
              "HOME": "/home/web_user",
              "LANG": lang,
              "_": getExecutableName()
            };
            for (var x in ENV) {
              env[x] = ENV[x];
            }
            var strings = [];
            for (var x in env) {
              strings.push(x + "=" + env[x]);
            }
            getEnvStrings.strings = strings;
          }
          return getEnvStrings.strings;
        }
        function _environ_get(__environ, environ_buf) {
          var bufSize = 0;
          getEnvStrings().forEach(function(string, i) {
            var ptr = environ_buf + bufSize;
            HEAP32[__environ + i * 4 >> 2] = ptr;
            writeAsciiToMemory(string, ptr);
            bufSize += string.length + 1;
          });
          return 0;
        }
        function _environ_sizes_get(penviron_count, penviron_buf_size) {
          var strings = getEnvStrings();
          HEAP32[penviron_count >> 2] = strings.length;
          var bufSize = 0;
          strings.forEach(function(string) {
            bufSize += string.length + 1;
          });
          HEAP32[penviron_buf_size >> 2] = bufSize;
          return 0;
        }
        function _fd_close(fd) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            FS.close(stream);
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return e.errno;
          }
        }
        function _fd_read(fd, iov, iovcnt, pnum) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = SYSCALLS.doReadv(stream, iov, iovcnt);
            HEAP32[pnum >> 2] = num;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return e.errno;
          }
        }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var HIGH_OFFSET = 4294967296;
            var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
            var DOUBLE_LIMIT = 9007199254740992;
            if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
              return -61;
            }
            FS.llseek(stream, offset, whence);
            tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
            if (stream.getdents && offset === 0 && whence === 0)
              stream.getdents = null;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return e.errno;
          }
        }
        function _fd_write(fd, iov, iovcnt, pnum) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = SYSCALLS.doWritev(stream, iov, iovcnt);
            HEAP32[pnum >> 2] = num;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
              abort(e);
            return e.errno;
          }
        }
        function _getTempRet0() {
          return getTempRet0() | 0;
        }
        function _llvm_eh_typeid_for(type) {
          return type;
        }
        function _usleep(useconds) {
          var start = _emscripten_get_now();
          while (_emscripten_get_now() - start < useconds / 1e3) {
          }
        }
        function _nanosleep(rqtp, rmtp) {
          if (rqtp === 0) {
            setErrNo(28);
            return -1;
          }
          var seconds = HEAP32[rqtp >> 2];
          var nanoseconds = HEAP32[rqtp + 4 >> 2];
          if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
            setErrNo(28);
            return -1;
          }
          if (rmtp !== 0) {
            HEAP32[rmtp >> 2] = 0;
            HEAP32[rmtp + 4 >> 2] = 0;
          }
          return _usleep(seconds * 1e6 + nanoseconds / 1e3);
        }
        function _pthread_create() {
          return 6;
        }
        function _pthread_join() {
        }
        function _setTempRet0($i) {
          setTempRet0($i | 0);
        }
        function __isLeapYear(year) {
          return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
        }
        function __arraySum(array, index) {
          var sum = 0;
          for (var i = 0; i <= index; sum += array[i++]) {
          }
          return sum;
        }
        var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function __addDays(date, days) {
          var newDate = new Date(date.getTime());
          while (days > 0) {
            var leap = __isLeapYear(newDate.getFullYear());
            var currentMonth = newDate.getMonth();
            var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
            if (days > daysInCurrentMonth - newDate.getDate()) {
              days -= daysInCurrentMonth - newDate.getDate() + 1;
              newDate.setDate(1);
              if (currentMonth < 11) {
                newDate.setMonth(currentMonth + 1);
              } else {
                newDate.setMonth(0);
                newDate.setFullYear(newDate.getFullYear() + 1);
              }
            } else {
              newDate.setDate(newDate.getDate() + days);
              return newDate;
            }
          }
          return newDate;
        }
        function _strftime(s, maxsize, format, tm) {
          var tm_zone = HEAP32[tm + 40 >> 2];
          var date = {
            tm_sec: HEAP32[tm >> 2],
            tm_min: HEAP32[tm + 4 >> 2],
            tm_hour: HEAP32[tm + 8 >> 2],
            tm_mday: HEAP32[tm + 12 >> 2],
            tm_mon: HEAP32[tm + 16 >> 2],
            tm_year: HEAP32[tm + 20 >> 2],
            tm_wday: HEAP32[tm + 24 >> 2],
            tm_yday: HEAP32[tm + 28 >> 2],
            tm_isdst: HEAP32[tm + 32 >> 2],
            tm_gmtoff: HEAP32[tm + 36 >> 2],
            tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
          };
          var pattern = UTF8ToString(format);
          var EXPANSION_RULES_1 = {
            "%c": "%a %b %d %H:%M:%S %Y",
            // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
            "%D": "%m/%d/%y",
            // Equivalent to %m / %d / %y
            "%F": "%Y-%m-%d",
            // Equivalent to %Y - %m - %d
            "%h": "%b",
            // Equivalent to %b
            "%r": "%I:%M:%S %p",
            // Replaced by the time in a.m. and p.m. notation
            "%R": "%H:%M",
            // Replaced by the time in 24-hour notation
            "%T": "%H:%M:%S",
            // Replaced by the time
            "%x": "%m/%d/%y",
            // Replaced by the locale's appropriate date representation
            "%X": "%H:%M:%S",
            // Replaced by the locale's appropriate time representation
            // Modified Conversion Specifiers
            "%Ec": "%c",
            // Replaced by the locale's alternative appropriate date and time representation.
            "%EC": "%C",
            // Replaced by the name of the base year (period) in the locale's alternative representation.
            "%Ex": "%m/%d/%y",
            // Replaced by the locale's alternative date representation.
            "%EX": "%H:%M:%S",
            // Replaced by the locale's alternative time representation.
            "%Ey": "%y",
            // Replaced by the offset from %EC (year only) in the locale's alternative representation.
            "%EY": "%Y",
            // Replaced by the full alternative year representation.
            "%Od": "%d",
            // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
            "%Oe": "%e",
            // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
            "%OH": "%H",
            // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
            "%OI": "%I",
            // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
            "%Om": "%m",
            // Replaced by the month using the locale's alternative numeric symbols.
            "%OM": "%M",
            // Replaced by the minutes using the locale's alternative numeric symbols.
            "%OS": "%S",
            // Replaced by the seconds using the locale's alternative numeric symbols.
            "%Ou": "%u",
            // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
            "%OU": "%U",
            // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
            "%OV": "%V",
            // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
            "%Ow": "%w",
            // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
            "%OW": "%W",
            // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
            "%Oy": "%y"
            // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
          };
          for (var rule in EXPANSION_RULES_1) {
            pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
          }
          var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
          function leadingSomething(value, digits, character) {
            var str = typeof value === "number" ? value.toString() : value || "";
            while (str.length < digits) {
              str = character[0] + str;
            }
            return str;
          }
          function leadingNulls(value, digits) {
            return leadingSomething(value, digits, "0");
          }
          function compareByDay(date1, date2) {
            function sgn(value) {
              return value < 0 ? -1 : value > 0 ? 1 : 0;
            }
            var compare;
            if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
              if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate());
              }
            }
            return compare;
          }
          function getFirstWeekStartDate(janFourth) {
            switch (janFourth.getDay()) {
              case 0:
                return new Date(janFourth.getFullYear() - 1, 11, 29);
              case 1:
                return janFourth;
              case 2:
                return new Date(janFourth.getFullYear(), 0, 3);
              case 3:
                return new Date(janFourth.getFullYear(), 0, 2);
              case 4:
                return new Date(janFourth.getFullYear(), 0, 1);
              case 5:
                return new Date(janFourth.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(janFourth.getFullYear() - 1, 11, 30);
            }
          }
          function getWeekBasedYear(date2) {
            var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
            var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
            var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
            if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
              if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1;
              } else {
                return thisDate.getFullYear();
              }
            } else {
              return thisDate.getFullYear() - 1;
            }
          }
          var EXPANSION_RULES_2 = {
            "%a": function(date2) {
              return WEEKDAYS[date2.tm_wday].substring(0, 3);
            },
            "%A": function(date2) {
              return WEEKDAYS[date2.tm_wday];
            },
            "%b": function(date2) {
              return MONTHS[date2.tm_mon].substring(0, 3);
            },
            "%B": function(date2) {
              return MONTHS[date2.tm_mon];
            },
            "%C": function(date2) {
              var year = date2.tm_year + 1900;
              return leadingNulls(year / 100 | 0, 2);
            },
            "%d": function(date2) {
              return leadingNulls(date2.tm_mday, 2);
            },
            "%e": function(date2) {
              return leadingSomething(date2.tm_mday, 2, " ");
            },
            "%g": function(date2) {
              return getWeekBasedYear(date2).toString().substring(2);
            },
            "%G": function(date2) {
              return getWeekBasedYear(date2);
            },
            "%H": function(date2) {
              return leadingNulls(date2.tm_hour, 2);
            },
            "%I": function(date2) {
              var twelveHour = date2.tm_hour;
              if (twelveHour == 0)
                twelveHour = 12;
              else if (twelveHour > 12)
                twelveHour -= 12;
              return leadingNulls(twelveHour, 2);
            },
            "%j": function(date2) {
              return leadingNulls(date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1), 3);
            },
            "%m": function(date2) {
              return leadingNulls(date2.tm_mon + 1, 2);
            },
            "%M": function(date2) {
              return leadingNulls(date2.tm_min, 2);
            },
            "%n": function() {
              return "\n";
            },
            "%p": function(date2) {
              if (date2.tm_hour >= 0 && date2.tm_hour < 12) {
                return "AM";
              } else {
                return "PM";
              }
            },
            "%S": function(date2) {
              return leadingNulls(date2.tm_sec, 2);
            },
            "%t": function() {
              return "	";
            },
            "%u": function(date2) {
              return date2.tm_wday || 7;
            },
            "%U": function(date2) {
              var janFirst = new Date(date2.tm_year + 1900, 0, 1);
              var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
              var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
              if (compareByDay(firstSunday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
                var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2);
              }
              return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
            },
            "%V": function(date2) {
              var janFourthThisYear = new Date(date2.tm_year + 1900, 0, 4);
              var janFourthNextYear = new Date(date2.tm_year + 1901, 0, 4);
              var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
              var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
              var endDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
              if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
                return "53";
              }
              if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
                return "01";
              }
              var daysDifference;
              if (firstWeekStartThisYear.getFullYear() < date2.tm_year + 1900) {
                daysDifference = date2.tm_yday + 32 - firstWeekStartThisYear.getDate();
              } else {
                daysDifference = date2.tm_yday + 1 - firstWeekStartThisYear.getDate();
              }
              return leadingNulls(Math.ceil(daysDifference / 7), 2);
            },
            "%w": function(date2) {
              return date2.tm_wday;
            },
            "%W": function(date2) {
              var janFirst = new Date(date2.tm_year, 0, 1);
              var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
              var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
              if (compareByDay(firstMonday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
                var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2);
              }
              return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
            },
            "%y": function(date2) {
              return (date2.tm_year + 1900).toString().substring(2);
            },
            "%Y": function(date2) {
              return date2.tm_year + 1900;
            },
            "%z": function(date2) {
              var off = date2.tm_gmtoff;
              var ahead = off >= 0;
              off = Math.abs(off) / 60;
              off = off / 60 * 100 + off % 60;
              return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
            },
            "%Z": function(date2) {
              return date2.tm_zone;
            },
            "%%": function() {
              return "%";
            }
          };
          for (var rule in EXPANSION_RULES_2) {
            if (pattern.indexOf(rule) >= 0) {
              pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
            }
          }
          var bytes = intArrayFromString(pattern, false);
          if (bytes.length > maxsize) {
            return 0;
          }
          writeArrayToMemory(bytes, s);
          return bytes.length - 1;
        }
        function _strftime_l(s, maxsize, format, tm) {
          return _strftime(s, maxsize, format, tm);
        }
        var FSNode = (
          /** @constructor */
          function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          }
        );
        var readMode = 292 | 73;
        var writeMode = 146;
        Object.defineProperties(FSNode.prototype, {
          read: {
            get: (
              /** @this{FSNode} */
              function() {
                return (this.mode & readMode) === readMode;
              }
            ),
            set: (
              /** @this{FSNode} */
              function(val) {
                val ? this.mode |= readMode : this.mode &= ~readMode;
              }
            )
          },
          write: {
            get: (
              /** @this{FSNode} */
              function() {
                return (this.mode & writeMode) === writeMode;
              }
            ),
            set: (
              /** @this{FSNode} */
              function(val) {
                val ? this.mode |= writeMode : this.mode &= ~writeMode;
              }
            )
          },
          isFolder: {
            get: (
              /** @this{FSNode} */
              function() {
                return FS.isDir(this.mode);
              }
            )
          },
          isDevice: {
            get: (
              /** @this{FSNode} */
              function() {
                return FS.isChrdev(this.mode);
              }
            )
          }
        });
        FS.FSNode = FSNode;
        FS.staticInit();
        Module["FS_createFolder"] = FS.createFolder;
        Module["FS_createPath"] = FS.createPath;
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module["FS_createLazyFile"] = FS.createLazyFile;
        Module["FS_createLink"] = FS.createLink;
        Module["FS_createDevice"] = FS.createDevice;
        Module["FS_unlink"] = FS.unlink;
        ;
        InternalError = Module["InternalError"] = extendError(Error, "InternalError");
        ;
        embind_init_charCodes();
        BindingError = Module["BindingError"] = extendError(Error, "BindingError");
        ;
        init_ClassHandle();
        init_RegisteredPointer();
        init_embind();
        ;
        UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
        ;
        init_emval();
        ;
        var ASSERTIONS = true;
        function intArrayFromString(stringy, dontAddNull, length) {
          var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
          var u8array = new Array(len);
          var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
          if (dontAddNull)
            u8array.length = numBytesWritten;
          return u8array;
        }
        function intArrayToString(array) {
          var ret = [];
          for (var i = 0; i < array.length; i++) {
            var chr = array[i];
            if (chr > 255) {
              if (ASSERTIONS) {
                assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
              }
              chr &= 255;
            }
            ret.push(String.fromCharCode(chr));
          }
          return ret.join("");
        }
        var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_begin_catch": ___cxa_begin_catch, "__cxa_current_primary_exception": ___cxa_current_primary_exception, "__cxa_decrement_exception_refcount": ___cxa_decrement_exception_refcount, "__cxa_end_catch": ___cxa_end_catch, "__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "__cxa_free_exception": ___cxa_free_exception, "__cxa_increment_exception_refcount": ___cxa_increment_exception_refcount, "__cxa_rethrow": ___cxa_rethrow, "__cxa_rethrow_primary_exception": ___cxa_rethrow_primary_exception, "__cxa_throw": ___cxa_throw, "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions, "__indirect_function_table": wasmTable, "__map_file": ___map_file, "__resumeException": ___resumeException, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_munmap": ___sys_munmap, "__sys_open": ___sys_open, "_embind_finalize_value_array": __embind_finalize_value_array, "_embind_finalize_value_object": __embind_finalize_value_object, "_embind_register_bool": __embind_register_bool, "_embind_register_class": __embind_register_class, "_embind_register_class_constructor": __embind_register_class_constructor, "_embind_register_class_function": __embind_register_class_function, "_embind_register_class_property": __embind_register_class_property, "_embind_register_emval": __embind_register_emval, "_embind_register_enum": __embind_register_enum, "_embind_register_enum_value": __embind_register_enum_value, "_embind_register_float": __embind_register_float, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_value_array": __embind_register_value_array, "_embind_register_value_array_element": __embind_register_value_array_element, "_embind_register_value_object": __embind_register_value_object, "_embind_register_value_object_field": __embind_register_value_object_field, "_embind_register_void": __embind_register_void, "_emval_call": __emval_call, "_emval_decref": __emval_decref, "_emval_incref": __emval_incref, "_emval_take_value": __emval_take_value, "abort": _abort, "clock_gettime": _clock_gettime, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": _getTempRet0, "invoke_dii": invoke_dii, "invoke_diii": invoke_diii, "invoke_fi": invoke_fi, "invoke_fiii": invoke_fiii, "invoke_fiij": invoke_fiij, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiif": invoke_iiif, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiif": invoke_iiiiif, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_iiiiij": invoke_iiiiij, "invoke_iij": invoke_iij, "invoke_iiji": invoke_iiji, "invoke_iijj": invoke_iijj, "invoke_ji": invoke_ji, "invoke_jii": invoke_jii, "invoke_jiiii": invoke_jiiii, "invoke_jij": invoke_jij, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vif": invoke_vif, "invoke_viffddj": invoke_viffddj, "invoke_viffi": invoke_viffi, "invoke_vifii": invoke_vifii, "invoke_vii": invoke_vii, "invoke_viif": invoke_viif, "invoke_viifi": invoke_viifi, "invoke_viifii": invoke_viifii, "invoke_viii": invoke_viii, "invoke_viiifi": invoke_viiifi, "invoke_viiifii": invoke_viiifii, "invoke_viiii": invoke_viiii, "invoke_viiiid": invoke_viiiid, "invoke_viiiif": invoke_viiiif, "invoke_viiiifi": invoke_viiiifi, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viijf": invoke_viijf, "invoke_viijii": invoke_viijii, "invoke_vij": invoke_vij, "invoke_vijj": invoke_vijj, "llvm_eh_typeid_for": _llvm_eh_typeid_for, "memory": wasmMemory, "nanosleep": _nanosleep, "pthread_create": _pthread_create, "pthread_join": _pthread_join, "setTempRet0": _setTempRet0, "strftime_l": _strftime_l };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");
        var _fflush = Module["_fflush"] = createExportWrapper("fflush");
        var _malloc2 = Module["_malloc"] = createExportWrapper("malloc");
        var ___getTypeName2 = Module["___getTypeName"] = createExportWrapper("__getTypeName");
        var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");
        var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");
        var _free2 = Module["_free"] = createExportWrapper("free");
        var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");
        var stackSave = Module["stackSave"] = createExportWrapper("stackSave");
        var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");
        var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");
        var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = createExportWrapper("_ZSt18uncaught_exceptionv");
        var ___cxa_can_catch = Module["___cxa_can_catch"] = createExportWrapper("__cxa_can_catch");
        var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = createExportWrapper("__cxa_is_pointer_type");
        var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");
        var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");
        var dynCall_viijf = Module["dynCall_viijf"] = createExportWrapper("dynCall_viijf");
        var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");
        var dynCall_vijj = Module["dynCall_vijj"] = createExportWrapper("dynCall_vijj");
        var dynCall_viffddj = Module["dynCall_viffddj"] = createExportWrapper("dynCall_viffddj");
        var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");
        var dynCall_iij = Module["dynCall_iij"] = createExportWrapper("dynCall_iij");
        var dynCall_iiji = Module["dynCall_iiji"] = createExportWrapper("dynCall_iiji");
        var dynCall_iijj = Module["dynCall_iijj"] = createExportWrapper("dynCall_iijj");
        var dynCall_ji = Module["dynCall_ji"] = createExportWrapper("dynCall_ji");
        var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii");
        var dynCall_jiiii = Module["dynCall_jiiii"] = createExportWrapper("dynCall_jiiii");
        var dynCall_jij = Module["dynCall_jij"] = createExportWrapper("dynCall_jij");
        var dynCall_fiij = Module["dynCall_fiij"] = createExportWrapper("dynCall_fiij");
        var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
        var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");
        var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");
        var __growWasmMemory = Module["__growWasmMemory"] = createExportWrapper("__growWasmMemory");
        function invoke_iii(index, a1, a2) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiii(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_v(index) {
          var sp = stackSave();
          try {
            wasmTable.get(index)();
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viii(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_ii(index, a1) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vii(index, a1, a2) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vi(index, a1) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiifi(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_i(index) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)();
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiii(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiii(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_dii(index, a1, a2) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiif(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiii(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vif(index, a1, a2) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viffi(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiifi(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiif(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiifii(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_fi(index, a1) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viif(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viifii(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viifi(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vifii(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiif(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiid(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_fiii(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_diii(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
          var sp = stackSave();
          try {
            return wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
          var sp = stackSave();
          try {
            wasmTable.get(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_jij(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return dynCall_jij(index, a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iij(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            return dynCall_iij(index, a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vijj(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            dynCall_vijj(index, a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_ji(index, a1) {
          var sp = stackSave();
          try {
            return dynCall_ji(index, a1);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiji(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            return dynCall_iiji(index, a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viijf(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            dynCall_viijf(index, a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iijj(index, a1, a2, a3, a4, a5) {
          var sp = stackSave();
          try {
            return dynCall_iijj(index, a1, a2, a3, a4, a5);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_fiij(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            return dynCall_fiij(index, a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_vij(index, a1, a2, a3) {
          var sp = stackSave();
          try {
            dynCall_vij(index, a1, a2, a3);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viffddj(index, a1, a2, a3, a4, a5, a6, a7) {
          var sp = stackSave();
          try {
            dynCall_viffddj(index, a1, a2, a3, a4, a5, a6, a7);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_jii(index, a1, a2) {
          var sp = stackSave();
          try {
            return dynCall_jii(index, a1, a2);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_viijii(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            dynCall_viijii(index, a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_iiiiij(index, a1, a2, a3, a4, a5, a6) {
          var sp = stackSave();
          try {
            return dynCall_iiiiij(index, a1, a2, a3, a4, a5, a6);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        function invoke_jiiii(index, a1, a2, a3, a4) {
          var sp = stackSave();
          try {
            return dynCall_jiiii(index, a1, a2, a3, a4);
          } catch (e) {
            stackRestore(sp);
            if (e !== e + 0 && e !== "longjmp")
              throw e;
            _setThrew(1, 0);
          }
        }
        if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString"))
          Module["intArrayFromString"] = function() {
            abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString"))
          Module["intArrayToString"] = function() {
            abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ccall"))
          Module["ccall"] = function() {
            abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "cwrap"))
          Module["cwrap"] = function() {
            abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setValue"))
          Module["setValue"] = function() {
            abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getValue"))
          Module["getValue"] = function() {
            abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocate"))
          Module["allocate"] = function() {
            abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getMemory"))
          Module["getMemory"] = function() {
            abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString"))
          Module["UTF8ArrayToString"] = function() {
            abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString"))
          Module["UTF8ToString"] = function() {
            abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array"))
          Module["stringToUTF8Array"] = function() {
            abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8"))
          Module["stringToUTF8"] = function() {
            abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8"))
          Module["lengthBytesUTF8"] = function() {
            abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackTrace"))
          Module["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun"))
          Module["addOnPreRun"] = function() {
            abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnInit"))
          Module["addOnInit"] = function() {
            abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain"))
          Module["addOnPreMain"] = function() {
            abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnExit"))
          Module["addOnExit"] = function() {
            abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        Module["addOnPostRun"] = addOnPostRun;
        if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory"))
          Module["writeStringToMemory"] = function() {
            abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory"))
          Module["writeArrayToMemory"] = function() {
            abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory"))
          Module["writeAsciiToMemory"] = function() {
            abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        Module["addRunDependency"] = addRunDependency;
        Module["removeRunDependency"] = removeRunDependency;
        Module["FS_createFolder"] = FS.createFolder;
        Module["FS_createPath"] = FS.createPath;
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module["FS_createLazyFile"] = FS.createLazyFile;
        Module["FS_createLink"] = FS.createLink;
        Module["FS_createDevice"] = FS.createDevice;
        Module["FS_unlink"] = FS.unlink;
        if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc"))
          Module["dynamicAlloc"] = function() {
            abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getLEB"))
          Module["getLEB"] = function() {
            abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables"))
          Module["getFunctionTables"] = function() {
            abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables"))
          Module["alignFunctionTables"] = function() {
            abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions"))
          Module["registerFunctions"] = function() {
            abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addFunction"))
          Module["addFunction"] = function() {
            abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "removeFunction"))
          Module["removeFunction"] = function() {
            abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper"))
          Module["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint"))
          Module["prettyPrint"] = function() {
            abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt"))
          Module["makeBigInt"] = function() {
            abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCall"))
          Module["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting"))
          Module["getCompilerSetting"] = function() {
            abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "print"))
          Module["print"] = function() {
            abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "printErr"))
          Module["printErr"] = function() {
            abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0"))
          Module["getTempRet0"] = function() {
            abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0"))
          Module["setTempRet0"] = function() {
            abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "callMain"))
          Module["callMain"] = function() {
            abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "abort"))
          Module["abort"] = function() {
            abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8"))
          Module["stringToNewUTF8"] = function() {
            abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer"))
          Module["emscripten_realloc_buffer"] = function() {
            abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ENV"))
          Module["ENV"] = function() {
            abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES"))
          Module["ERRNO_CODES"] = function() {
            abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES"))
          Module["ERRNO_MESSAGES"] = function() {
            abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setErrNo"))
          Module["setErrNo"] = function() {
            abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "DNS"))
          Module["DNS"] = function() {
            abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES"))
          Module["GAI_ERRNO_MESSAGES"] = function() {
            abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Protocols"))
          Module["Protocols"] = function() {
            abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Sockets"))
          Module["Sockets"] = function() {
            abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "traverseStack"))
          Module["traverseStack"] = function() {
            abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE"))
          Module["UNWIND_CACHE"] = function() {
            abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc"))
          Module["withBuiltinMalloc"] = function() {
            abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray"))
          Module["readAsmConstArgsArray"] = function() {
            abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs"))
          Module["readAsmConstArgs"] = function() {
            abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM"))
          Module["mainThreadEM_ASM"] = function() {
            abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q"))
          Module["jstoi_q"] = function() {
            abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s"))
          Module["jstoi_s"] = function() {
            abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName"))
          Module["getExecutableName"] = function() {
            abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "listenOnce"))
          Module["listenOnce"] = function() {
            abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext"))
          Module["autoResumeAudioContext"] = function() {
            abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy"))
          Module["dynCallLegacy"] = function() {
            abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller"))
          Module["getDynCaller"] = function() {
            abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCall"))
          Module["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks"))
          Module["callRuntimeCallbacks"] = function() {
            abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow"))
          Module["abortStackOverflow"] = function() {
            abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative"))
          Module["reallyNegative"] = function() {
            abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "unSign"))
          Module["unSign"] = function() {
            abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "reSign"))
          Module["reSign"] = function() {
            abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "formatString"))
          Module["formatString"] = function() {
            abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PATH"))
          Module["PATH"] = function() {
            abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS"))
          Module["PATH_FS"] = function() {
            abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS"))
          Module["SYSCALLS"] = function() {
            abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2"))
          Module["syscallMmap2"] = function() {
            abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap"))
          Module["syscallMunmap"] = function() {
            abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "JSEvents"))
          Module["JSEvents"] = function() {
            abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets"))
          Module["specialHTMLTargets"] = function() {
            abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString"))
          Module["maybeCStringToJsString"] = function() {
            abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget"))
          Module["findEventTarget"] = function() {
            abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget"))
          Module["findCanvasEventTarget"] = function() {
            abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate"))
          Module["polyfillSetImmediate"] = function() {
            abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "demangle"))
          Module["demangle"] = function() {
            abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "demangleAll"))
          Module["demangleAll"] = function() {
            abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace"))
          Module["jsStackTrace"] = function() {
            abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackTrace"))
          Module["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings"))
          Module["getEnvStrings"] = function() {
            abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock"))
          Module["checkWasiClock"] = function() {
            abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64"))
          Module["writeI53ToI64"] = function() {
            abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped"))
          Module["writeI53ToI64Clamped"] = function() {
            abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling"))
          Module["writeI53ToI64Signaling"] = function() {
            abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped"))
          Module["writeI53ToU64Clamped"] = function() {
            abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling"))
          Module["writeI53ToU64Signaling"] = function() {
            abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64"))
          Module["readI53FromI64"] = function() {
            abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64"))
          Module["readI53FromU64"] = function() {
            abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53"))
          Module["convertI32PairToI53"] = function() {
            abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53"))
          Module["convertU32PairToI53"] = function() {
            abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast"))
          Module["exceptionLast"] = function() {
            abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught"))
          Module["exceptionCaught"] = function() {
            abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exceptionThrowBuf"))
          Module["exceptionThrowBuf"] = function() {
            abort("'exceptionThrowBuf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs"))
          Module["ExceptionInfoAttrs"] = function() {
            abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo"))
          Module["ExceptionInfo"] = function() {
            abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo"))
          Module["CatchInfo"] = function() {
            abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef"))
          Module["exception_addRef"] = function() {
            abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef"))
          Module["exception_decRef"] = function() {
            abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Browser"))
          Module["Browser"] = function() {
            abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers"))
          Module["funcWrappers"] = function() {
            abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper"))
          Module["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop"))
          Module["setMainLoop"] = function() {
            abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        Module["FS"] = FS;
        if (!Object.getOwnPropertyDescriptor(Module, "MEMFS"))
          Module["MEMFS"] = function() {
            abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "TTY"))
          Module["TTY"] = function() {
            abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS"))
          Module["PIPEFS"] = function() {
            abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS"))
          Module["SOCKFS"] = function() {
            abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray"))
          Module["tempFixedLengthArray"] = function() {
            abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers"))
          Module["miniTempWebGLFloatBuffers"] = function() {
            abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType"))
          Module["heapObjectForWebGLType"] = function() {
            abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap"))
          Module["heapAccessShiftForWebGLHeap"] = function() {
            abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GL"))
          Module["GL"] = function() {
            abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet"))
          Module["emscriptenWebGLGet"] = function() {
            abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize"))
          Module["computeUnpackAlignedImageSize"] = function() {
            abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData"))
          Module["emscriptenWebGLGetTexPixelData"] = function() {
            abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform"))
          Module["emscriptenWebGLGetUniform"] = function() {
            abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib"))
          Module["emscriptenWebGLGetVertexAttrib"] = function() {
            abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray"))
          Module["writeGLArray"] = function() {
            abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "AL"))
          Module["AL"] = function() {
            abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode"))
          Module["SDL_unicode"] = function() {
            abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext"))
          Module["SDL_ttfContext"] = function() {
            abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio"))
          Module["SDL_audio"] = function() {
            abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL"))
          Module["SDL"] = function() {
            abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx"))
          Module["SDL_gfx"] = function() {
            abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLUT"))
          Module["GLUT"] = function() {
            abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "EGL"))
          Module["EGL"] = function() {
            abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window"))
          Module["GLFW_Window"] = function() {
            abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLFW"))
          Module["GLFW"] = function() {
            abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLEW"))
          Module["GLEW"] = function() {
            abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "IDBStore"))
          Module["IDBStore"] = function() {
            abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError"))
          Module["runAndAbortIfError"] = function() {
            abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array"))
          Module["emval_handle_array"] = function() {
            abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list"))
          Module["emval_free_list"] = function() {
            abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols"))
          Module["emval_symbols"] = function() {
            abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "init_emval"))
          Module["init_emval"] = function() {
            abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles"))
          Module["count_emval_handles"] = function() {
            abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval"))
          Module["get_first_emval"] = function() {
            abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol"))
          Module["getStringOrSymbol"] = function() {
            abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "requireHandle"))
          Module["requireHandle"] = function() {
            abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_newers"))
          Module["emval_newers"] = function() {
            abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator"))
          Module["craftEmvalAllocator"] = function() {
            abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global"))
          Module["emval_get_global"] = function() {
            abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers"))
          Module["emval_methodCallers"] = function() {
            abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "InternalError"))
          Module["InternalError"] = function() {
            abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "BindingError"))
          Module["BindingError"] = function() {
            abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError"))
          Module["UnboundTypeError"] = function() {
            abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError"))
          Module["PureVirtualError"] = function() {
            abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "init_embind"))
          Module["init_embind"] = function() {
            abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError"))
          Module["throwInternalError"] = function() {
            abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError"))
          Module["throwBindingError"] = function() {
            abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError"))
          Module["throwUnboundTypeError"] = function() {
            abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable"))
          Module["ensureOverloadTable"] = function() {
            abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol"))
          Module["exposePublicSymbol"] = function() {
            abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol"))
          Module["replacePublicSymbol"] = function() {
            abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "extendError"))
          Module["extendError"] = function() {
            abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction"))
          Module["createNamedFunction"] = function() {
            abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances"))
          Module["registeredInstances"] = function() {
            abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer"))
          Module["getBasestPointer"] = function() {
            abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance"))
          Module["registerInheritedInstance"] = function() {
            abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance"))
          Module["unregisterInheritedInstance"] = function() {
            abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance"))
          Module["getInheritedInstance"] = function() {
            abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount"))
          Module["getInheritedInstanceCount"] = function() {
            abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances"))
          Module["getLiveInheritedInstances"] = function() {
            abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes"))
          Module["registeredTypes"] = function() {
            abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies"))
          Module["awaitingDependencies"] = function() {
            abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies"))
          Module["typeDependencies"] = function() {
            abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers"))
          Module["registeredPointers"] = function() {
            abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registerType"))
          Module["registerType"] = function() {
            abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved"))
          Module["whenDependentTypesAreResolved"] = function() {
            abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes"))
          Module["embind_charCodes"] = function() {
            abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes"))
          Module["embind_init_charCodes"] = function() {
            abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String"))
          Module["readLatin1String"] = function() {
            abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getTypeName"))
          Module["getTypeName"] = function() {
            abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray"))
          Module["heap32VectorToArray"] = function() {
            abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType"))
          Module["requireRegisteredType"] = function() {
            abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize"))
          Module["getShiftFromSize"] = function() {
            abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer"))
          Module["integerReadValueFromPointer"] = function() {
            abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer"))
          Module["enumReadValueFromPointer"] = function() {
            abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer"))
          Module["floatReadValueFromPointer"] = function() {
            abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer"))
          Module["simpleReadValueFromPointer"] = function() {
            abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "runDestructors"))
          Module["runDestructors"] = function() {
            abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "new_"))
          Module["new_"] = function() {
            abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction"))
          Module["craftInvokerFunction"] = function() {
            abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction"))
          Module["embind__requireFunction"] = function() {
            abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations"))
          Module["tupleRegistrations"] = function() {
            abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations"))
          Module["structRegistrations"] = function() {
            abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType"))
          Module["genericPointerToWireType"] = function() {
            abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType"))
          Module["constNoSmartPtrRawPointerToWireType"] = function() {
            abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType"))
          Module["nonConstNoSmartPtrRawPointerToWireType"] = function() {
            abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer"))
          Module["init_RegisteredPointer"] = function() {
            abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer"))
          Module["RegisteredPointer"] = function() {
            abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee"))
          Module["RegisteredPointer_getPointee"] = function() {
            abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor"))
          Module["RegisteredPointer_destructor"] = function() {
            abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject"))
          Module["RegisteredPointer_deleteObject"] = function() {
            abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType"))
          Module["RegisteredPointer_fromWireType"] = function() {
            abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "runDestructor"))
          Module["runDestructor"] = function() {
            abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle"))
          Module["releaseClassHandle"] = function() {
            abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup"))
          Module["finalizationGroup"] = function() {
            abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps"))
          Module["detachFinalizer_deps"] = function() {
            abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer"))
          Module["detachFinalizer"] = function() {
            abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer"))
          Module["attachFinalizer"] = function() {
            abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle"))
          Module["makeClassHandle"] = function() {
            abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle"))
          Module["init_ClassHandle"] = function() {
            abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle"))
          Module["ClassHandle"] = function() {
            abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf"))
          Module["ClassHandle_isAliasOf"] = function() {
            abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted"))
          Module["throwInstanceAlreadyDeleted"] = function() {
            abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone"))
          Module["ClassHandle_clone"] = function() {
            abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete"))
          Module["ClassHandle_delete"] = function() {
            abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue"))
          Module["deletionQueue"] = function() {
            abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted"))
          Module["ClassHandle_isDeleted"] = function() {
            abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater"))
          Module["ClassHandle_deleteLater"] = function() {
            abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes"))
          Module["flushPendingDeletes"] = function() {
            abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "delayFunction"))
          Module["delayFunction"] = function() {
            abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction"))
          Module["setDelayFunction"] = function() {
            abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass"))
          Module["RegisteredClass"] = function() {
            abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer"))
          Module["shallowCopyInternalPointer"] = function() {
            abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer"))
          Module["downcastPointer"] = function() {
            abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer"))
          Module["upcastPointer"] = function() {
            abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "validateThis"))
          Module["validateThis"] = function() {
            abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "char_0"))
          Module["char_0"] = function() {
            abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "char_9"))
          Module["char_9"] = function() {
            abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName"))
          Module["makeLegalFunctionName"] = function() {
            abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "warnOnce"))
          Module["warnOnce"] = function() {
            abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackSave"))
          Module["stackSave"] = function() {
            abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackRestore"))
          Module["stackRestore"] = function() {
            abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc"))
          Module["stackAlloc"] = function() {
            abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString"))
          Module["AsciiToString"] = function() {
            abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii"))
          Module["stringToAscii"] = function() {
            abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString"))
          Module["UTF16ToString"] = function() {
            abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16"))
          Module["stringToUTF16"] = function() {
            abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16"))
          Module["lengthBytesUTF16"] = function() {
            abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString"))
          Module["UTF32ToString"] = function() {
            abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32"))
          Module["stringToUTF32"] = function() {
            abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32"))
          Module["lengthBytesUTF32"] = function() {
            abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8"))
          Module["allocateUTF8"] = function() {
            abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack"))
          Module["allocateUTF8OnStack"] = function() {
            abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        Module["writeStackCookie"] = writeStackCookie;
        Module["checkStackCookie"] = checkStackCookie;
        if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL"))
          Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() {
            abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK"))
          Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() {
            abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE"))
          Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() {
            abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          } });
        var calledRun;
        function ExitStatus(status) {
          this.name = "ExitStatus";
          this.message = "Program terminated with exit(" + status + ")";
          this.status = status;
        }
        var calledMain = false;
        dependenciesFulfilled = function runCaller() {
          if (!calledRun)
            run2();
          if (!calledRun)
            dependenciesFulfilled = runCaller;
        };
        function run2(args) {
          args = args || arguments_;
          if (runDependencies > 0) {
            return;
          }
          writeStackCookie();
          preRun();
          if (runDependencies > 0)
            return;
          function doRun() {
            if (calledRun)
              return;
            calledRun = true;
            Module["calledRun"] = true;
            if (ABORT)
              return;
            initRuntime();
            preMain();
            readyPromiseResolve(Module);
            if (Module["onRuntimeInitialized"])
              Module["onRuntimeInitialized"]();
            assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
            postRun();
          }
          if (Module["setStatus"]) {
            Module["setStatus"]("Running...");
            setTimeout(function() {
              setTimeout(function() {
                Module["setStatus"]("");
              }, 1);
              doRun();
            }, 1);
          } else {
            doRun();
          }
          checkStackCookie();
        }
        Module["run"] = run2;
        function checkUnflushedContent() {
          var print2 = out;
          var printErr2 = err;
          var has = false;
          out = err = function(x) {
            has = true;
          };
          try {
            var flush2 = Module["_fflush"];
            if (flush2)
              flush2(0);
            ["stdout", "stderr"].forEach(function(name) {
              var info = FS.analyzePath("/dev/" + name);
              if (!info)
                return;
              var stream = info.object;
              var rdev = stream.rdev;
              var tty = TTY.ttys[rdev];
              if (tty && tty.output && tty.output.length) {
                has = true;
              }
            });
          } catch (e) {
          }
          out = print2;
          err = printErr2;
          if (has) {
            warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
          }
        }
        function exit(status, implicit) {
          checkUnflushedContent();
          if (implicit && noExitRuntime && status === 0) {
            return;
          }
          if (noExitRuntime) {
            if (!implicit) {
              var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
              readyPromiseReject(msg);
              err(msg);
            }
          } else {
            EXITSTATUS = status;
            exitRuntime();
            if (Module["onExit"])
              Module["onExit"](status);
            ABORT = true;
          }
          quit_(status, new ExitStatus(status));
        }
        if (Module["preInit"]) {
          if (typeof Module["preInit"] == "function")
            Module["preInit"] = [Module["preInit"]];
          while (Module["preInit"].length > 0) {
            Module["preInit"].pop()();
          }
        }
        noExitRuntime = true;
        run2();
        return FastTextModule2.ready;
      };
    }();
    module2.exports = FastTextModule;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TranslatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian37 = require("obsidian");

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== "$")
      result[k] = props[k];
  return result;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// node_modules/svelte/src/runtime/internal/environment.js
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;

// node_modules/svelte/src/runtime/internal/loop.js
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  /**
   * @private
   * @readonly
   * @type {WeakMap<Element, import('./private.js').Listener>}
   */
  _listeners = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
  /**
   * @private
   * @type {ResizeObserver}
   */
  _observer = void 0;
  /** @type {ResizeObserverOptions} */
  options;
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    return this._observer ?? (this._observer = new ResizeObserver((entries) => {
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        this._listeners.get(entry.target)?.(entry);
      }
    }));
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && /** @type {ShadowRoot} */
  root.host) {
    return (
      /** @type {ShadowRoot} */
      root
    );
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  style_element.textContent = "/* empty */";
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value, mounting) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  if (!mounting || value !== void 0) {
    select.selectedIndex = -1;
  }
}
var crossorigin;
function is_crossorigin() {
  if (crossorigin === void 0) {
    crossorigin = false;
    try {
      if (typeof window !== "undefined" && window.parent) {
        void window.parent.document;
      }
    } catch (error) {
      crossorigin = true;
    }
  }
  return crossorigin;
}
function add_iframe_resize_listener(node, fn) {
  const computed_style = getComputedStyle(node);
  if (computed_style.position === "static") {
    node.style.position = "relative";
  }
  const iframe = element("iframe");
  iframe.setAttribute(
    "style",
    "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"
  );
  iframe.setAttribute("aria-hidden", "true");
  iframe.tabIndex = -1;
  const crossorigin2 = is_crossorigin();
  let unsubscribe;
  if (crossorigin2) {
    iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>";
    unsubscribe = listen(
      window,
      "message",
      /** @param {MessageEvent} event */
      (event) => {
        if (event.source === iframe.contentWindow)
          fn();
      }
    );
  } else {
    iframe.src = "about:blank";
    iframe.onload = () => {
      unsubscribe = listen(iframe.contentWindow, "resize", fn);
      fn();
    };
  }
  append(node, iframe);
  return () => {
    if (crossorigin2) {
      unsubscribe();
    } else if (unsubscribe && iframe.contentWindow) {
      unsubscribe();
    }
    detach(iframe);
  };
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
var HtmlTag = class {
  /**
   * @private
   * @default false
   */
  is_svg = false;
  // parent for creating node
  /** */
  e = void 0;
  // html tag nodes
  /** */
  n = void 0;
  // target
  /** */
  t = void 0;
  // anchor
  /** */
  a = void 0;
  constructor(is_svg = false) {
    this.is_svg = is_svg;
    this.e = this.n = null;
  }
  /**
   * @param {string} html
   * @returns {void}
   */
  c(html) {
    this.h(html);
  }
  /**
   * @param {string} html
   * @param {HTMLElement | SVGElement} target
   * @param {HTMLElement | SVGElement} anchor
   * @returns {void}
   */
  m(html, target, anchor = null) {
    if (!this.e) {
      if (this.is_svg)
        this.e = svg_element(
          /** @type {keyof SVGElementTagNameMap} */
          target.nodeName
        );
      else
        this.e = element(
          /** @type {keyof HTMLElementTagNameMap} */
          target.nodeType === 11 ? "TEMPLATE" : target.nodeName
        );
      this.t = target.tagName !== "TEMPLATE" ? target : (
        /** @type {HTMLTemplateElement} */
        target.content
      );
      this.c(html);
    }
    this.i(anchor);
  }
  /**
   * @param {string} html
   * @returns {void}
   */
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(
      this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes
    );
  }
  /**
   * @returns {void} */
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  /**
   * @param {string} html
   * @returns {void}
   */
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  /**
   * @returns {void} */
  d() {
    this.n.forEach(detach);
  }
};
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}
function construct_svelte_component(component, props) {
  return new component(props);
}

// node_modules/svelte/src/runtime/internal/style_manager.js
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t2 = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t2, 1 - t2)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}

// node_modules/svelte/src/runtime/internal/animations.js
function create_animation(node, from, fn, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay,
    // @ts-ignore todo:
    end = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn(node, { from, to }, params);
  let running = true;
  let started = false;
  let name;
  function start() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t2 = 0 + 1 * easing(p / duration);
      tick2(t2, 1 - t2);
    }
    return true;
  });
  start();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
  const options = { direction: "in" };
  let config = fn(node, params, options);
  let running = false;
  let animation_name;
  let task;
  let uid = 0;
  function cleanup() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    if (css)
      animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick2(0, 1);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    if (task)
      task.abort();
    running = true;
    add_render_callback(() => dispatch(node, true, "start"));
    task = loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(1, 0);
          dispatch(node, true, "end");
          cleanup();
          return running = false;
        }
        if (now2 >= start_time) {
          const t2 = easing((now2 - start_time) / duration);
          tick2(t2, 1 - t2);
        }
      }
      return running;
    });
  }
  let started = false;
  return {
    start() {
      if (started)
        return;
      started = true;
      delete_rule(node);
      if (is_function(config)) {
        config = config(options);
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate() {
      started = false;
    },
    end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}
function create_out_transition(node, fn, params) {
  const options = { direction: "out" };
  let config = fn(node, params, options);
  let running = true;
  let animation_name;
  const group = outros;
  group.r += 1;
  let original_inert_value;
  function go() {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    if (css)
      animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    const start_time = now() + delay;
    const end_time = start_time + duration;
    add_render_callback(() => dispatch(node, false, "start"));
    if ("inert" in node) {
      original_inert_value = /** @type {HTMLElement} */
      node.inert;
      node.inert = true;
    }
    loop((now2) => {
      if (running) {
        if (now2 >= end_time) {
          tick2(0, 1);
          dispatch(node, false, "end");
          if (!--group.r) {
            run_all(group.c);
          }
          return false;
        }
        if (now2 >= start_time) {
          const t2 = easing((now2 - start_time) / duration);
          tick2(1 - t2, t2);
        }
      }
      return running;
    });
  }
  if (is_function(config)) {
    wait().then(() => {
      config = config(options);
      go();
    });
  } else {
    go();
  }
  return {
    end(reset) {
      if (reset && "inert" in node) {
        node.inert = original_inert_value;
      }
      if (reset && config.tick) {
        config.tick(1, 0);
      }
      if (running) {
        if (animation_name)
          delete_rule(node, animation_name);
        running = false;
      }
    }
  };
}
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config = fn(node, params, options);
  let t2 = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  let original_inert_value;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init2(program, duration) {
    const d = (
      /** @type {Program['d']} */
      program.b - t2
    );
    duration *= Math.abs(d);
    return {
      a: t2,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      tick: tick2 = noop,
      css
    } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if ("inert" in node) {
      if (b) {
        if (original_inert_value !== void 0) {
          node.inert = original_inert_value;
        }
      } else {
        original_inert_value = /** @type {HTMLElement} */
        node.inert;
        node.inert = true;
      }
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t2, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init2(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init2(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(
              node,
              t2,
              running_program.b,
              running_program.duration,
              0,
              easing,
              config.css
            );
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t2 = running_program.b, 1 - t2);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t2 = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t2, 1 - t2);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          const opts = { direction: b ? "in" : "out" };
          config = config(opts);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block9, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block9(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance28, create_fragment27, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance28 ? instance28(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment27 ? create_fragment27($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    $$componentCtor;
    $$slots;
    $$component;
    $$connected = false;
    $$data = {};
    $$reflecting = false;
    /** @type {Record<string, CustomElementPropDefinition>} */
    $$props_definition = {};
    /** @type {Record<string, Function[]>} */
    $$listeners = {};
    /** @type {Map<Function, Function>} */
    $$listener_unsubscribe_fns = /* @__PURE__ */ new Map();
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      this.$$componentCtor = $$componentCtor;
      this.$$slots = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$listeners[type] = this.$$listeners[type] || [];
      this.$$listeners[type].push(listener);
      if (this.$$component) {
        const unsub = this.$$component.$on(type, listener);
        this.$$listener_unsubscribe_fns.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$component) {
        const unsub = this.$$listener_unsubscribe_fns.get(listener);
        if (unsub) {
          unsub();
          this.$$listener_unsubscribe_fns.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$connected = true;
      if (!this.$$component) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = document.createElement("slot");
                if (name !== "default") {
                  node.setAttribute("name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$connected) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$slots) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$get_prop_name(attribute.name);
          if (!(name in this.$$data)) {
            this.$$data[name] = get_custom_element_value(
              name,
              attribute.value,
              this.$$props_definition,
              "toProp"
            );
          }
        }
        this.$$component = new this.$$componentCtor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$data,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        for (const type in this.$$listeners) {
          for (const listener of this.$$listeners[type]) {
            const unsub = this.$$component.$on(type, listener);
            this.$$listener_unsubscribe_fns.set(listener, unsub);
          }
        }
        this.$$listeners = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      if (this.$$reflecting)
        return;
      attr2 = this.$$get_prop_name(attr2);
      this.$$data[attr2] = get_custom_element_value(
        attr2,
        newValue,
        this.$$props_definition,
        "toProp"
      );
      this.$$component?.$set({ [attr2]: this.$$data[attr2] });
    }
    disconnectedCallback() {
      this.$$connected = false;
      Promise.resolve().then(() => {
        if (!this.$$connected) {
          this.$$component.$destroy();
          this.$$component = void 0;
        }
      });
    }
    $$get_prop_name(attribute_name) {
      return Object.keys(this.$$props_definition).find(
        (key) => this.$$props_definition[key].attribute === attribute_name || !this.$$props_definition[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  const type = props_definition[prop]?.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  /**
   * ### PRIVATE API
   *
   * Do not use, may change at any time
   *
   * @type {any}
   */
  $$ = void 0;
  /**
   * ### PRIVATE API
   *
   * Do not use, may change at any time
   *
   * @type {any}
   */
  $$set = void 0;
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/constants.ts
var import_obsidian = require("obsidian");
var ICONS = {
  "translate": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="currentColor" d="M32 28.8h-2.304c-0.017 0.001-0.037 0.002-0.056 0.002-0.22 0-0.423-0.073-0.586-0.195l0.003 0.002c-0.158-0.132-0.284-0.298-0.365-0.488l-0.003-0.008-1.488-4.112h-8l-1.6 4.064c-0.080 0.192-0.2 0.353-0.35 0.478l-0.002 0.002c-0.164 0.14-0.377 0.224-0.611 0.224-0.010 0-0.020-0-0.030-0l0.001 0h-2.208l7.28-18.352h3.024zM26.352 21.904l-2.528-6.704c-0.205-0.517-0.419-1.178-0.595-1.855l-0.029-0.129q-0.144 0.592-0.304 1.104l-0.304 0.896-2.528 6.704zM16.272 19.376c-1.779-0.618-3.317-1.38-4.739-2.307l0.083 0.051c2.172-2.328 3.749-5.238 4.473-8.47l0.023-0.122h3.088v-2.128h-7.504c-0.098-0.352-0.207-0.65-0.336-0.936l0.016 0.040c-0.384-1.040-0.816-2.304-0.816-2.304l-2.352 0.8s0.64 1.424 0.96 2.4h-9.168v2.128h3.44c0.747 3.364 2.349 6.278 4.566 8.599l-0.006-0.007c-2.3 1.453-4.968 2.607-7.81 3.32l-0.19 0.040q0.896 1.312 1.392 2.208c3.188-1.083 5.949-2.442 8.495-4.104l-0.143 0.088c1.64 1.111 3.522 2.068 5.521 2.778l0.175 0.054zM5.808 8.528h7.856c-0.542 2.834-1.941 5.276-3.912 7.113l-0.008 0.007c-1.905-1.896-3.288-4.314-3.917-7.022l-0.019-0.098z"></path></svg>',
  "translate-file": '<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <g fill="currentColor" transform="matrix(7.8236 0 0 7.8236 -635.72 -585.41)"><path transform="scale(.26458)" d="m319.31 282.81c-3.3349 0-6.0371 2.7041-6.0371 6.0391v36.227c0 3.3302 2.7022 6.0371 6.0371 6.0371h24.152c3.3302 0 6.0371-2.7069 6.0371-6.0371v-27.17h-12.076c-1.6698 0-3.0176-1.3497-3.0176-3.0195v-12.076zm18.113 0v12.076h12.076zm-10.145 17.254s0.35346 1.0397 0.67383 1.9102c0.10885 0.24131 0.20051 0.49402 0.2832 0.79101h6.332v1.7949h-2.6055l-0.0195 0.10351c-0.61086 2.7269-1.9409 5.1823-3.7734 7.1465 1.1805 0.7619 2.4555 1.3909 3.9277 1.9023l-0.70117 1.7949-0.14844-0.0449c-1.6857-0.59872-3.273-1.4051-4.6562-2.3418-2.1152 1.3673-4.4085 2.4898-7.0488 3.3867-0.279-0.50398-0.66984-1.1253-1.1738-1.8633l0.16015-0.0332c2.3979-0.60158 4.6493-1.5748 6.5898-2.8008-1.8681-1.9575-3.2179-4.4141-3.8477-7.25h-2.9023v-1.7949h7.7344c-0.26999-0.82347-0.80859-2.0254-0.80859-2.0254zm-4.0098 4.4961 0.0156 0.082c0.53071 2.2848 1.6974 4.3261 3.3047 5.9258l8e-3 -6e-3c1.663-1.5499 2.8435-3.6108 3.3008-6.002zm13.393 1.5938h2.5508l6.1562 15.51h-1.9453c-0.0144 8.4e-4 -0.031 2e-3 -0.0469 2e-3 -0.18463 0-0.35503-0.0602-0.49219-0.16211l-2e-3 -2e-3c-0.13231-0.11109-0.23672-0.25072-0.30469-0.41015l-4e-3 -6e-3 -1.2539-3.4707h-6.75l-1.3516 3.4297c-0.0675 0.16199-0.16839 0.29687-0.29493 0.40235l-2e-3 2e-3c-0.13837 0.11811-0.31819 0.18945-0.51562 0.18945h-1.8867zm1.2812 2.3613c-0.081 0.333-0.16589 0.64365-0.25586 0.93165l-0.25782 0.75585-2.1328 5.6563 5.3066-0.0137-2.1328-5.6562c-0.17295-0.4362-0.35347-0.99325-0.50195-1.5644z" stroke-width=".09434"/> </g></svg>',
  "translate-file-new": '<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <path fill="currentColor" d="m18.114-0.0019531c-6.9031 0-12.498 5.5967-12.498 12.5v74.988c0 6.8934 5.5949 12.498 12.498 12.498h49.994c1.4397 0 2.8215-0.24772 4.1094-0.69727-5.4264-2.9299-9.1152-8.6654-9.1152-15.266 0-2.9067 0.7246-5.6427 1.9883-8.0488l-1.418-3.9297h-13.973l-2.7988 7.0996c-0.13972 0.33532-0.34744 0.61369-0.60938 0.83203l-0.0039 0.0039c-0.28643 0.24449-0.65969 0.39258-1.0684 0.39258h-3.9043l12.715-32.053h5.2793l9.1895 23.152c3.1107-2.9614 7.3107-4.791 11.945-4.791 0.05411 0 0.10616 0.0073 0.16016 0.0078v-35.441h-24.998c-3.4564 0-6.2461-2.7936-6.2461-6.25v-24.998zm37.492 0v24.996h24.998zm-21 35.715s0.73138 2.1512 1.3945 3.9531c0.22532 0.4995 0.41673 1.0239 0.58789 1.6387h13.105v3.7148h-5.3926l-0.04102 0.21484c-1.2645 5.6446-4.0173 10.727-7.8105 14.793 2.4436 1.5771 5.0835 2.8789 8.1309 3.9375l-1.4512 3.7148-0.30859-0.0918c-3.4893-1.2393-6.7735-2.9087-9.6367-4.8477-4.3784 2.8303-9.1265 5.1532-14.592 7.0098-0.57752-1.0432-1.3865-2.3298-2.4297-3.8574l0.33203-0.06836c4.9636-1.2453 9.6239-3.2591 13.641-5.7969-3.8669-4.052-6.6612-9.1376-7.9648-15.008h-6.0078v-3.7148h16.01c-0.55887-1.7046-1.6738-4.1934-1.6738-4.1934zm-8.2988 9.3066 0.03125 0.16992c1.0986 4.7295 3.5147 8.9543 6.8418 12.266l0.01563-0.01172c3.4424-3.2082 5.8854-7.4741 6.832-12.424zm30.375 8.1875c-0.16767 0.6893-0.34306 1.3316-0.5293 1.9277l-0.53516 1.5645-4.4141 11.709 10.984-0.0293-4.4141-11.707c-0.358-0.90292-0.73171-2.056-1.0391-3.2383z"/> <path fill="currentColor" d="m65 84.101c0-8.5338 6.9164-15.45 15.45-15.45 8.5338 0 15.45 6.9164 15.45 15.45 0 8.5338-6.9164 15.45-15.45 15.45-8.5338 0-15.45-6.9164-15.45-15.45zm15.45 6.7594c0.80269 0 1.4485-0.64577 1.4485-1.4484v-3.8625h3.8625c0.80268 0 1.4484-0.64577 1.4484-1.4485 0-0.80268-0.64577-1.4484-1.4484-1.4484h-3.8625v-3.8625c0-0.80269-0.64577-1.4485-1.4485-1.4485-0.80268 0-1.4484 0.64577-1.4484 1.4485v3.8625h-3.8625c-0.80269 0-1.4485 0.64577-1.4485 1.4484 0 0.80269 0.64577 1.4485 1.4485 1.4485h3.8625v3.8625c0 0.80268 0.64577 1.4484 1.4484 1.4484z" stroke-width=".06"/></svg>',
  "translate-selection": '<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <g fill="currentColor" transform="matrix(18.25 0 0 18.25 -1122.5 -674.78)"><g transform="matrix(1.0128 0 0 .99967 -3.481 -8.5381)"> <path d="m68.887 49.142h-0.15901c-0.0012 7e-5 -0.0026 1.38e-4 -0.0038 1.38e-4 -0.01519 0-0.02919-0.0051-0.04045-0.01346l2.07e-4 1.4e-4c-0.0109-0.0091-0.0196-0.02057-0.0252-0.03368l-2.06e-4 -5.38e-4 -0.10269-0.28379h-0.55209l-0.11043 0.28048c-0.0056 0.01325-0.0138 0.02436-0.02416 0.03299l-1.37e-4 1.39e-4c-0.01135 0.0097-0.02602 0.01545-0.04218 0.01545h-0.0021 6.8e-5 -0.15238l0.50242-1.2666h0.2087zm-0.38979-0.47592-0.17447-0.46267c-0.01415-0.03568-0.02892-0.0813-0.04107-0.12802l-0.0021-0.0089q-0.01 0.04086-0.02098 0.07619l-0.02098 0.06185-0.17447 0.46267zm-0.69567-0.17447c-0.12278-0.04265-0.22892-0.09524-0.32706-0.15922l0.0057 0.0035c0.1499-0.16066 0.25874-0.3615 0.3087-0.58455l0.0015-0.0084h0.21312v-0.14681h-0.51786c-0.0067-0.02429-0.01429-0.04486-0.0232-0.06459l0.0011 0.0027c-0.0265-0.07176-0.05632-0.15901-0.05632-0.15901l-0.16232 0.05522s0.04418 0.09828 0.06626 0.16563h-0.63272v0.14686h0.23741c0.05157 0.23217 0.16211 0.43327 0.31512 0.59346l-4.13e-4 -4.97e-4c-0.15873 0.10028-0.34286 0.17992-0.539 0.22913l-0.01311 0.0027q0.06184 0.09055 0.09606 0.15238c0.22002-0.07474 0.41057-0.16853 0.58628-0.28324l-0.0099 6e-3c0.11318 0.07667 0.24307 0.14272 0.38103 0.19172l0.01208 0.0037zm-0.72217-0.74867h0.54218c-0.03741 0.19559-0.13396 0.36412-0.26998 0.4909l-5.39e-4 4.97e-4c-0.13147-0.13085-0.22692-0.29773-0.27033-0.48462z" fill="currentColor" stroke-width=".40982"/> <g transform="matrix(.2616 0 0 .2647 63.737 45.087)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width=".68302"><path d="m10.548 7.9h9.3515c1.1423 0.041203 2.0588 0.9577 2.1 2.1v4c-0.0055 1.1575-0.94248 2.0945-2.1 2.1h-9.3515"/><path d="m7.3515 16.1h-3.2515c-1.1423-0.041203-2.0588-0.9577-2.1-2.1v-4c0.041204-1.1423 0.9577-2.0588 2.1-2.1h3.2716"/> </g> <g transform="matrix(.15827 0 0 .15827 64.177 46.392)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4578"><path d="m17 22h-1a4 4 0 0 1-4-4v-12a4 4 0 0 1 4-4h1"/><path d="m7 22h1a4 4 0 0 0 4-4v-1"/><path d="m7 2h1a4 4 0 0 1 4 4v1"/> </g></g> </g></svg>',
  "translate-selection-filled": '<svg width="100" height="100" viewBox="100 100 100 100" xmlns="http://www.w3.org/2000/svg"> <g fill="currentColor" transform="translate(-61.509 -36.975)">  <path d="m195.97 166.39c-1.0937 1e-3 -2.1874 2e-3 -3.2811 2e-3 -6.9832 8.2e-4 -13.967-0.0148-20.949 0.011-5.2474 0.20692-9.8633 4.7122-10.199 9.9527-0.0737 6.8417-0.0111 13.688-0.0321 20.531 0.0794 5.253 4.4683 9.9842 9.7022 10.45 4.1727 0.13039 8.3546 0.0227 12.531 0.0567h8.1072c1.4932 0 1.1208-2.0122 1.1812-2.9946-0.0144-11.883 0.0283-23.768-0.0208-35.65-0.0472-0.79744 0.0794-2.3593-1.8831-2.3593z" stroke-width="0"/>  <path d="m202.49 166.39c-2.3199 0-2.5464 1.0157-2.617 1.5331-0.0661 0.51814-0.0995 1.0401-0.0976 1.5624v35.887c-1e-3 0.5223-0.24815 2.0604 1.5136 2.0604 0.0302 0.15309 49.724-0.039 49.724-0.039 5.7873-0.0285 10.47-4.72 10.498-10.507v-19.999c-0.20597-5.7113-4.7863-10.292-10.498-10.498zm20.868 2.1679s0.5896 1.7273 1.123 3.1737l0.0195 0.0586c0.17015 0.38365 0.31954 0.78945 0.44918 1.2597h10.517v2.9784h-4.326l-0.0295 0.166c-1.0149 4.5306-3.2245 8.611-6.2692 11.874 1.9616 1.2661 4.0767 2.3142 6.5231 3.1639l-1.1718 2.9784-0.24414-0.0781c-2.8019-0.99529-5.4348-2.3292-7.7337-3.8865-3.5152 2.2725-7.3204 4.134-11.708 5.6247-0.46338-0.8373-1.1157-1.8694-1.953-3.0955l0.26365-0.0488c3.9839-0.99946 7.7228-2.6212 10.947-4.658-3.1028-3.252-5.34-7.3296-6.3864-12.04h-4.824v-2.9881h12.851c-0.44843-1.3681-1.3476-3.3592-1.3476-3.3592zm-6.6598 7.4703 0.0295 0.13671c0.88172 3.796 2.8174 7.1855 5.488 9.8432l0.01-0.01c2.7629-2.575 4.7282-5.9976 5.488-9.9702zm22.245 2.6464h4.2478l10.224 25.77h-3.2323c-0.0245 1e-3 -0.0536 0-0.0781 0-0.30859 0-0.59162-0.10392-0.82027-0.27342-0.22149-0.18519-0.39403-0.41731-0.50779-0.68356v-0.01l-2.0897-5.7614h-11.21l-2.246 5.6931c-0.11339 0.26909-0.27773 0.49844-0.48827 0.6738h-0.01c-0.23054 0.19709-0.52133 0.31248-0.84957 0.31248h-3.1445zm2.1288 3.9256c-0.13545 0.55329-0.27124 1.0646-0.41988 1.5429l-0.42968 1.2597-3.5448 9.3941 8.8179-0.0196-3.5448-9.394c-0.28742-0.72469-0.58325-1.6584-0.83004-2.6073z" stroke-width="0"/>  <path d="m181.44 155.92a1.5968 1.5968 0 0 0-1.5977 1.5977 1.5968 1.5968 0 0 0 1.5977 1.5976h2.9902c5.744 0 10.365 4.6212 10.365 10.365v35.889c1e-5 5.744-4.6212 10.367-10.365 10.367h-2.9902a1.5968 1.5968 0 0 0-1.5977 1.5957 1.5968 1.5968 0 0 0 1.5977 1.5977h2.9902c5.2081 0 9.6927-2.992 11.963-7.3164 2.2702 4.3244 6.7548 7.3164 11.963 7.3164h2.9902a1.5968 1.5968 0 0 0 1.5976-1.5977 1.5968 1.5968 0 0 0-1.5976-1.5957h-2.9902c-5.744-1e-5 -10.365-4.6232-10.365-10.367v-35.889c1e-5 -5.744 4.6212-10.365 10.365-10.365h2.9902a1.5968 1.5968 0 0 0 1.5976-1.5976 1.5968 1.5968 0 0 0-1.5976-1.5977h-2.9902c-5.2081 1e-5 -9.6927 2.994-11.963 7.3184-2.2702-4.3244-6.7548-7.3184-11.963-7.3184z" stroke-linecap="round" stroke-linejoin="round" style="-inkscape-stroke:none"/> </g></svg>',
  "detect-selection": '<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <path fill="currentColor" d="m33.002 9.061-7.3547 2.5002s2.0029 4.4472 3.0029 7.4945h-28.65v6.6408h10.748c1.6174 7.2772 3.7432 12.966 7.6765 18.746 1.956-1.3432 4.1413-2.3667 6.5063-2.9698-3.5143-4.8326-5.3281-9.4593-6.7244-15.465l-0.05493-0.311h24.548c-1.1881 6.2066-2.9903 10.613-6.5063 15.385 2.389 0.55918 4.6259 1.5586 6.6284 2.8966 3.8033-5.7161 5.9057-10.972 7.4585-17.898l0.06712-0.38418h9.6497v-6.6408h-23.45c-0.30625-1.099-0.64668-2.028-1.0498-2.921l0.05494 0.12196c-1.2-3.2471-2.5513-7.1957-2.5513-7.1957zm34.753 22.538-16.675 43.04 6.5308 6.5188 2.3926-7.1469h25l4.6509 12.836 0.0063 0.02435c0.252 0.59055 0.64462 1.1072 1.1353 1.5184l0.0062 0.0062c0.50822 0.37788 1.1405 0.60371 1.825 0.60371 0.05938 0 0.11778-3e-3 0.17091-0.0062h7.2018l-22.797-57.395zm4.7424 8.7385 0.09156 0.40247c0.55 2.1137 1.2209 4.1729 1.8616 5.7871l7.8979 20.935-19.647 0.0488 7.898-20.929 0.95215-2.799c0.33333-1.0657 0.64605-2.2132 0.94605-3.4454zm-41.894 10.236c-2.4351 0-3.9669 0.36974-5.8978 1.5674 0 0-0.01878 0.05248 0.29456 0.38057-1.5638 0.987-2.2311 1.5943-3.4552 2.8173-1.3047 1.9855-2.0691 4.3555-2.0691 6.903 0 0.68198 0.07231 1.3473 0.177 2.0002 4.2831-2.0704 6.9209-4.3586 10.804-6.8664 3.8604 2.6122 6.8561 4.9483 11.407 6.8908 0.10725-0.66043 0.177-1.3343 0.177-2.0246 0-2.4922-0.73671-4.8101-1.9897-6.7689-1.3091-1.3079-2.1254-1.9014-3.7537-2.9515 0.32206-0.34488 0.03991 0.0059 0.3535-0.34712-1.9117-1.164-3.6501-1.6008-6.0479-1.6008zm-21.524 9.2107c-3.1782 1.2159-5.1193 2.2598-8.4868 3.1039l-0.59204 0.12806c1.8667 2.7309 3.3185 5.0258 4.3518 6.8908 2.2708-0.77073 3.1181-1.5901 5.2581-2.4514-0.21866-0.82926-0.40335-1.6676-0.5127-2.5307-0.22269-1.7582-0.21714-3.4801-0.018311-5.1407z"/> <path fill="currentColor" d="m59.635 85.478-11.811-11.8c2.6858-3.9836 4.0109-8.9609 3.3015-14.265-1.2097-9.0211-8.6098-16.362-17.648-17.506-13.438-1.6988-24.737 9.5906-23.037 23.016 1.1445 9.0339 8.4934 16.433 17.523 17.636 5.3084 0.70869 10.291-0.61474 14.277-3.2985l11.811 11.8c1.5412 1.5398 4.0405 1.5398 5.5817 0 1.5398-1.5418 1.5398-4.0457 6.03e-4 -5.5836zm-41.559-23.235c0-6.9578 5.6655-12.618 12.63-12.618 6.964 0 12.63 5.6605 12.63 12.618s-5.6655 12.618-12.63 12.618c-6.964 0-12.63-5.6585-12.63-12.618z" stroke-width=".031574"/></svg>',
  "azure_translator": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="currentColor" d="M6.1 0l6.392 2.25v22.5l9.004-5.198-4.414-2.070-2.785-6.932 14.186 4.984v7.246l-15.986 9.22-6.397-3.558z"></path></svg>',
  "bergamot": '<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <path fill="currentColor" d="m60.295 80.012-1.1822-4.1557-7.9813 8.3909 11.111 2.6104-1.1413-4.012c8.2083-4.2197 13.531-12.709 13.531-22.172 0-11.771-8.2242-21.866-19.578-24.346l-0.61493 2.8146c10.038 2.1931 17.312 11.122 17.312 21.532 0 8.1712-4.4873 15.521-11.456 19.338zm-21.678-38.387 1.606 4.2325 7.3704-8.7463-11.419-1.9247 1.4085 3.712c-7.8072 4.3535-12.791 12.618-12.791 21.775 0 11.746 8.1892 21.825 19.511 24.331l0.62278-2.8129c-10.009-2.2161-17.253-11.131-17.253-21.519 0-7.9544 4.2511-15.146 10.945-19.048zm5.1803-19.791c-11.13-0.92204-15.812-8.1706-14.046-21.746 14.06-0.87601 20.97 4.6852 20.731 16.684 2.084-4.2239 5.8864-8.7079 11.39-13.473 0.42103-0.36452 1.0578-0.3187 1.4223 0.10233 0.36451 0.42102 0.3187 1.0578-0.10232 1.4223-7.0476 6.1016-11.119 11.63-12.254 16.535 21.286 0.49824 38.387 17.909 38.387 39.315 0 21.719-17.607 39.325-39.326 39.325-21.719 0-39.326-17.607-39.326-39.325 0-19.608 14.351-35.865 33.123-38.839z"/></svg>',
  "deepl": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="currentColor" d="M27.289 6.134l-10.188-5.813c-0.688-0.375-1.563-0.375-2.25 0l-10.188 5.813c-0.688 0.375-1.125 1.125-1.125 1.937v11.875c0 0.813 0.438 1.563 1.125 1.938l17.563 10.125v-7.188l5.063-2.938c0.688-0.375 1.125-1.125 1.125-1.938v-11.875c0.063-0.813-0.438-1.563-1.125-1.938zM14.414 19.196c0 1.188-0.938 2.125-2.125 2.125s-2.125-0.938-2.125-2.125c0-1.188 0.938-2.125 2.125-2.125 0.563 0 1 0.188 1.375 0.5l3.75-2.125c0.188 0.438 0.438 0.875 0.688 1.25l-3.75 2.125c0.063 0.125 0.063 0.25 0.063 0.375zM20.914 16.384c-1.188 0-2.125-0.938-2.125-2.125 0-0.125 0-0.25 0.063-0.375l-5.125-2.938c-0.375 0.313-0.875 0.5-1.375 0.5-1.188 0-2.125-0.938-2.125-2.125s0.938-2.125 2.125-2.125c1.188 0 2.125 0.938 2.125 2.125 0 0.125 0 0.25-0.063 0.375l5.125 2.938c0.375-0.313 0.875-0.563 1.438-0.563 1.188 0 2.125 0.938 2.125 2.125-0.063 1.188-1 2.188-2.188 2.188z"></path></svg>',
  "google_translate": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="currentColor" d="M4 1.333c-1.48 0-2.667 1.187-2.667 2.667v18.667c0 1.48 1.187 2.667 2.667 2.667h16l-8-24h-8zM16.453 6.667l0.88 2.667h10.667v18.667h-11.493l0.867 2.667h10.627c1.48 0 2.667-1.187 2.667-2.667v-18.667c0-1.48-1.187-2.667-2.667-2.667h-11.547zM9.413 7.88c1.467 0 2.707 0.533 3.627 1.453l-1.493 1.373c-0.387-0.387-1.053-0.827-2.133-0.827-1.853 0-3.333 1.52-3.333 3.373s1.48 3.413 3.333 3.413c2.16 0 2.933-1.56 3.093-2.333h-3.093v-1.827h5.093c0.067 0.307 0.080 0.52 0.080 0.907 0 3.093-2.080 5.253-5.173 5.253-3 0-5.413-2.413-5.413-5.413 0-3.013 2.413-5.373 5.413-5.373zM21.333 13.333v1.333h-2.213l0.427 1.333h4.453c-0.36 0.813-0.493 1.56-1.587 2.84-0.533-0.627-0.96-1.173-1.080-1.507h-1.333c0.16 0.573 0.827 1.467 1.627 2.373-0.173 0.173-0.413 0.4-0.627 0.587l0.373 1.12c0.333-0.293 0.667-0.6 1-0.907 1.36 1.427 2.8 2.747 2.8 2.747l0.747-0.8c0 0-1.427-1.4-2.707-2.787 0.84-0.933 1.587-2.067 2.12-3.667h1.333v-1.333h-4v-1.333h-1.333z"></path></svg>',
  "libre_translate": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="currentColor" d="M31.381 10.744l-1.7 2.1q-7.615-3.915-10.916-8.158-3.229 4.472-10.415 7.987l-1.814-2.029q9.558-4.429 11.844-10.644l2.429 0.757q-0.486 1.429-0.643 1.672 3.086 4.415 11.216 8.315zM31.838 24.346l-1.872 1.786q-4.186-3.2-6.486-7.815-1.514 4.286-6.272 7.758l-1.872-1.729q3.315-2.2 4.972-5.186t1.886-8.515l2.515 0.214q0 0.743-0.114 1.857l-0.1 1q0 0.757 0.843 2.857 0.857 2.086 2.486 4.058 1.643 1.957 4.015 3.715zM18.565 20.545l-1.943 1.743q-1.643-2.157-3.215-3.529-1.8 3.929-5.586 7.401l-1.9-1.7q3.4-3.029 4.886-6.086 1.5-3.058 1.929-7.729l2.543 0.271q-0.286 2.6-1.014 5.301 2.772 2.386 4.3 4.329z"></path><path fill="currentColor" d="M12.749 31.969v-2.277h-9.997v-17.967h-2.583v20.244z"></path></svg>',
  "yandex_translate": '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 32 32"><path fill="none" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" stroke-width="0.5717" stroke="currentColor" d="M29.955 22.736c-1.448 2.709-3.741 5.706-8.070 7.777-0.189-0.52-12.053-28.497-12.118-28.658 3.749-1.228 7.496-2.32 13.356 0.611 2.571 1.496 7.77 5.562 8.148 12.365 0.188 2.566 0.087 4.905-1.316 7.904z"></path><path fill="currentColor" d="M26.724 13.692c-0.401-0.917-1.124-1.631-2.023-2.010l-0.025-0.009c0.168-0.745 0.223-1.359 0.242-1.768h-1.675c-0.034 0.487-0.1 0.936-0.198 1.373l0.011-0.061c-1.303-0.186-2.774 0-4.189 0.503-0.158-0.912-0.261-1.768-0.316-2.513 5.036-0.279 8.005-1.471 8.144-1.536l-0.633-1.508c-0.028 0-2.848 1.117-7.567 1.396 0-1.126-0.037-1.117 0.019-1.499l-1.675-0.019c-0.037 0.316-0.028 0.652-0.019 1.582h-0.158c-1.508 0-2.904-0.112-3.239-0.14l-0.307 1.666c0.493 0.037 2.001 0.121 3.351 0.121h0.205l0.214-0.009c0.065 0.931 0.186 2.011 0.41 3.183-2.225 1.303-4.002 3.816-3.090 5.864 0.372 0.856 1.108 1.415 2.048 1.554 0.168 0.019 0.335 0.037 0.503 0.037 0.959 0 2.057-0.382 3.109-1.033 0.395 0.593 0.821 1.111 1.294 1.582l0 0 1.154-1.201c-0.019-0.009-0.503-0.465-1.117-1.387 1.321-1.241 2.356-2.77 3.007-4.488l0.027-0.082c0.372 0.214 0.745 0.531 0.949 1.015 0.67 1.629-0.298 3.518-1.21 4.337l1.145 1.21c1.508-1.368 2.541-3.919 1.62-6.162zM16.503 18.225c-0.353-0.031-0.646-0.258-0.77-0.571l-0.002-0.006c-0.41-0.94 0.484-2.485 1.955-3.509 0.372 1.303 0.838 2.42 1.312 3.314-0.894 0.558-1.815 0.875-2.494 0.773zM20.701 15.991l-0.372 0.391c-0.41-0.838-0.819-1.843-1.117-3.034 0.853-0.352 1.844-0.557 2.882-0.557 0.181 0 0.361 0.006 0.539 0.018l-0.024-0.001c-0.467 1.23-1.113 2.289-1.918 3.204l0.010-0.012z"></path><path fill="currentColor" d="M3.294 6.553c-4.087 4.989-4.13 13.687-1.171 17.55 4.571 7.459 12.936 9.666 20.199 6.512l-12.844-28.933c-3.756 1.758-5.094 3.562-6.183 4.871zM9.72 12.030h1.76l5.454 12.604h-2.234l-1.34-3.361h-5.519l-1.342 3.361h-2.232zM10.595 14.628l-2.029 4.941h4.069z"></path></svg>',
  "lingva_translate": '<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <g transform="matrix(1.0102 0 0 1.0102 -1.0235 .36813)">  <text font-family="sans-serif" font-size="10.583px" stroke-width=".98002" style="line-height:1.25;shape-inside:url(#rect880);white-space:pre" xml:space="preserve"/>  <path d="m61.093 0.13165c-10.754 0-19.412 8.6565-19.412 19.41v18.797c0 0.0282 0-0.09766 2e-3 -0.01358h1.4388c10.726 0 19.586 8.7092 19.631 19.422h4.8031l9.2397-8.9049 8.8201 8.3986c8.756-1.8836 14.384-9.5689 14.384-18.904v-18.797c0-10.753-8.6575-19.41-19.412-19.41zm-3.8471 11.523c2.0469 1.7148 4.7119 4.2092 5.9092 5.8071l-1.9697 2.0656c-1.1973-1.6369-3.7462-4.2481-5.7932-6.1188zm7.9562 0.35088h21.821v2.611h-11.123c-0.27036 1.3641-0.57941 2.8842-0.927 4.3652h7.1452l0.42472-0.15586 2.0471 0.19476c-0.15449 2.4554-0.46341 5.3004-0.77238 7.7947h4.5188v2.6502h-24.447v-2.6502h6.3726c0.42485-1.5589 0.84957-3.3906 1.2744-5.3004h-4.9049v-2.5332h5.4842c0.3476-1.481 0.61795-3.0011 0.84969-4.3652h-7.7629zm9.2306 9.5094c-0.42484 1.9097-0.84978 3.7414-1.236 5.3004h7.8789c0.23174-1.7148 0.42485-3.6634 0.57934-5.3004zm-21.088 1.2472h8.0336v16.914l4.5959-3.0399c0.1545 0.74049 0.50203 1.8705 0.77238 2.4551-6.4112 4.443-7.4152 5.2225-7.9946 5.9629-0.23174-0.70151-0.96557-1.9485-1.429-2.5722 0.5407-0.38973 1.3518-1.2473 1.3518-2.8452v-14.109h-5.3299zm13.749 9.8989h18.655v13.446h-2.8195v-1.403h-13.094v1.5197h-2.7421zm2.7421 2.5335v6.9759h13.094v-6.9759z" fill="currentColor" stroke-width=".55229"/>  <path d="m21.691 40.09c-10.754 0-19.412 8.5395-19.412 19.147v18.542c0 10.607 8.6576 19.147 19.412 19.147h19.496c10.525 0 19.271-5.6817 18.94-16.019l0.08229-6.9989 0.18099-7.6458 0.2081-7.0246c0.31409-10.603-8.6576-19.147-19.412-19.147z" fill="none" stroke="currentColor" stroke-width="2.5321"/>  <path d="m47.95 44.582 1.178 6.0024 5.7485 1.414-5.1592 3.0899 0.40794 6.1207-4.3666-4.0927-5.4964 2.3688 2.4605-5.6193-3.8048-4.6567 5.8873 0.61979z" fill="currentColor" stroke-width=".50886"/>  <path d="m21.258 81.301c4.252-1.685 10.819 0.4356 19.351-0.06844l0.75923-0.04483c0.14461-0.0085 0.50397-0.06562 1.0781-0.17123 1.1774-0.92982 2.228-0.95605 3.1519-0.07867 0.9239 0.87741 0.95042 1.5933 0.07962 2.7918-0.73917 0.97567-3.5672 1.6087-8.4842 1.8992l-2.2777 0.13456c-5.0528 0.44189-9.4105-1.7376-12.722-0.10811-1.2669 0.64836-2.672 1.0904-4.2152 1.9702-1.1396 0.35408-2.0224 0.15532-2.6485-0.59629-0.54939-0.68445-0.56512-1.5438-0.0472-2.5781 2.4191-5.5914 3.9986-10.667 4.7385-15.227 0.81223-4.5645 1.4146-8.3997 1.8071-11.506 0.46052-3.1816 1.0802-6.7308 1.859-10.648 0.57727-1.2529 1.419-1.7327 2.5252-1.4396 1.1785 0.28883 1.7344 1.0804 1.6676 2.3748-1.1218 5.4432-2.0948 10.949-2.9188 16.518-0.75598 5.4932-1.9907 11.515-3.704 16.778z" fill="currentColor" stroke-width="2.08" style="white-space:pre"/>  <path d="m81.747 68.858v-11.339c0.75515-0.06231 1.4981-0.16673 2.2263-0.31155l-7.1935-7.0358-7.5476 7.4151h2.8001v11.283" fill="none" stroke="currentColor" stroke-width="1.0473"/>  <path d="m56.638 66.143-7.2795 7.5434v0.03186l7.0162 7.2704c0.13507-0.81301 0.21943-1.6433 0.25002-2.4876h15.948l9.7039-9.6489-25.639-0.0649z" fill="currentColor" stroke-width=".27452"/> </g></svg>',
  "fanyi_youdao": '<svg data-name="Layer 1" viewBox="0 0 536 536" xmlns="http://www.w3.org/2000/svg"> <path d="m119 0a13.57 13.57 0 0 1-3 1c-10.85 1.18-21.691 2.5399-32.311 5.4199a105.38 105.38 0 0 0-43.209 23.779c-17.54 15.72-29.67 34.801-35.1 57.861-2.38 10.04-3.4409 20.26-4.3809 30.51a8.53 8.53 0 0 1-1 2.4297v294a8.8 8.8 0 0 1 1.0508 2.4199c1.15 12.08 2.4989 24.1 5.8789 35.82a105.07 105.07 0 0 0 22.33 40.76c10.89 12.37 23.419 22.6 38.529 29.5a119.94 119.94 0 0 0 34.941 9.5606c6.59 0.85 13.22 1.31 19.83 2 0.51 0.06 0.95945 0.66 1.4394 1h287.96c0.47-0.35 0.91992-1 1.4199-1 6.61-0.74 13.24-1.21 19.84-2 27.98-3.38 51.559-15.24 70.799-36.07 16.75-18.14 26.051-39.441 29.051-63.721 0.71-5.76 1.2089-11.56 1.8789-17.33a6.22 6.22 0 0 1 1-1.9394v-292.96a8.56 8.56 0 0 1-1-2.3984c-1.05-10.56-2.1884-21.081-4.6484-31.461-5.5-23.16-17.95-41.911-35.5-57.561-17.14-15.3-37.35-23.779-60-26.699-6.08-0.82-12.201-1.31-18.301-2-0.5-0.06-1-0.59992-1.5-0.91992h-296zm25.74 156.34c0.45776 0.20455 0.89035 0.44122 1.3457 0.64844 5.0052 2.2595 9.9003 4.6759 14.779 7.1504 4.0767 2.0652 8.1457 4.1531 12.324 6.2012l-11 20.631c16.95-0.65 33.18-1.3806 49.42-1.8906a415.93 415.93 0 0 0 49.191-4.4102c-0.47 4.18-0.89055 7.8906-1.3106 11.561-2.1125 1.6759-4.3908 2.8022-6.7461 3.6582-0.00191 7e-4 -0.00395 0.00126-0.00586 0.00195-2.3462 0.85501-4.7677 1.4393-7.1777 2.0293-11.86 2.9-24.001 3.56-36.131 4-19.122 0.75969-38.245 1.6191-58.066 2.4688l-14.604 21.371 0.65039 0.65039c4.0032-1.1009 7.988-2.2747 11.982-3.4043 0.55024-0.15568 1.1112-0.27978 1.6621-0.43359 3.453-0.96407 6.9104-1.9163 10.416-2.7227a156.8 156.8 0 0 1 44.629-3.5293 66.81 66.81 0 0 1 23.66 5.4902c0.3745 0.16873 0.67701 0.38818 1.041 0.56445 1.1669 0.56579 2.2807 1.1694 3.3398 1.8106 0.70174 0.42435 1.3767 0.86406 2.0313 1.3203 0.92247 0.64365 1.798 1.3186 2.627 2.0234 0.64665 0.54925 1.2616 1.1161 1.8516 1.7012 0.70697 0.70172 1.3743 1.4266 2 2.1777 0.56233 0.67445 1.089 1.3674 1.5859 2.0801 0.51727 0.74256 0.99879 1.5048 1.4453 2.2871 0.46363 0.8115 0.88771 1.6417 1.2754 2.4941 0.3464 0.76236 0.66143 1.5404 0.94727 2.334 2.0134 5.5843 2.6126 11.883 1.6562 18.736-1.41 10.21-2.9602 20.4-4.4102 30.6-0.21 1.47-0.23008 2.9701-0.33008 4.3301 0.25 0.46 0.34961 0.87 0.59961 1 7.29 3.99 14.56 8.0311 21.92 11.871a23.23 23.23 0 0 0 6.1504 1.9492c2.6086 0.53099 4.9988 0.27231 7.041-0.58398 0.08721-0.03719 0.18759-0.05036 0.27344-0.08984 3.5142-1.6161 5.8809-5.1402 6.2246-9.8652a14.41 14.41 0 0 0-3.7793-11 29.85 29.85 0 0 0-0.39453-0.34375 29.85 29.85 0 0 0-8.8711-6.3106 29.85 29.85 0 0 0-0.4336-0.24609l-8.8203-4.2402c0.88-10.44 2.8201-20.671 4.3301-31.471 0.02098 0.00826 0.03187 0.0133 0.05273 0.02149 0.00195-0.01395 0.00391-0.02707 0.00586-0.04102 1.5 0.59 2.6812 0.95977 3.7812 1.5098 7.1474 3.5777 13.789 7.7812 19.555 13.258 0.94244 0.89644 1.8592 1.8308 2.75 2.8027 0.40697 0.44336 0.86026 0.81918 1.2559 1.2793 0.257 0.29919 0.43084 0.66628 0.67773 0.97461 0.98446 1.2311 1.8843 2.5301 2.7012 3.8906 0.44294 0.73666 0.85074 1.4772 1.2422 2.2461 0.69447 1.3649 1.3069 2.7722 1.832 4.2207 0.29934 0.82506 0.56458 1.6458 0.80664 2.4922 0.42999 1.5028 0.76576 3.0324 1.0078 4.584 0.13037 0.83653 0.233 1.6624 0.30664 2.5078 0.14334 1.6364 0.17694 3.2822 0.09961 4.9316-0.48577 10.248-5.2341 20.483-15.734 27.492-0.83 0.58-1.5901 1.14-2.8301 2 1.49 1.01 2.6196 1.8801 3.8496 2.5801 21.96 12.54 45.09 22.111 70.18 26.061 22.84 3.6 45.721 4.2609 68.381-1.6191 4.1793-1.0846 8.27-2.349 12.273-3.8125 0.00272-1e-3 0.00508-0.00291 0.00781-0.00391 0.06455-0.02363 0.1269-0.05243 0.1914-0.07617 3.8857-1.4282 7.6852-3.0523 11.402-4.8848 7.7542-3.8277 15.141-8.5787 22.145-14.473 9.3e-4 0.00966 0.00102 0.01574 0.00195 0.02539 0.01936-0.01627 0.03925-0.03059 0.0586-0.04687 0.28 2.9 0.49851 5.2813 0.72851 7.6113a85.17 85.17 0 0 1-0.34375 0.36328 85.17 85.17 0 0 1-14.611 15.428 85.17 85.17 0 0 1-0.2832 0.29883c-13.991 11.944-29.653 20.602-47.25 25.213-0.00261 6.8e-4 -0.0052 0.00126-0.00781 0.00195-2.5309 0.66525-5.1007 1.2482-7.7129 1.7441a117.57 117.57 0 0 1-29.279 1.9004c-25.39-1.57-49.291-8.8405-72.691-18.23a408.25 408.25 0 0 1-60.549-30.439c-0.81454-0.49069-1.696-0.8901-2.7774-1.4434-2.0576 14.184-4.0762 28.119-6.1738 42.553-0.01901-0.00127-0.03569-0.00265-0.05469-0.00391-0.00126 0.00862-0.00266 0.01677-0.00391 0.02539-5.25-0.33-10.201-0.47-15.111-1-11.93-1.23-23.66-3.4717-34.92-7.7617-8.82-3.36-16.9-7.8694-23.33-14.939-14.69-16.27-12.689-44.59 10.311-55.18a64.88 64.88 0 0 1 16.1-5c7.28-1.3 14.59-1.0991 21.92-0.86914h4.4102c0.70762-4.9832 1.3952-9.7924 2.1621-15.131a42.69 42.69 0 0 0-6.1211-0.69922c-12.17 0.37-24.201 1.49-35.711 6-20.09 7.88-33.43 22.359-41.76 41.939a136.11 136.11 0 0 0-7.9199 27.77c-2.65 13.82-12.661 22.08-25.311 24.08-2.29 0.36-4.5999 0.67985-6.9199 0.83985-2.13 0.11-4.2891 0-6.6191 0 4.52e-4 -0.00481-4.4e-4 -0.00499 0-0.00977 0.079548-0.84519 0.003614-1.3591 0.17969-1.6992 0.001001-0.00193-0.001017-0.00784 0-0.00976 0.028144-0.04698 0.052041-0.09556 0.080078-0.14258 1.5763-2.6481 2.9919-5.3576 4.2559-8.123 0.009906-0.02166 0.021361-0.04279 0.03125-0.06445 1.2927-2.8322 2.4324-5.7201 3.4414-8.6523 0.001339-0.00389 0.002568-0.00783 0.003906-0.01172 0.1248-0.3628 0.20728-0.73938 0.32812-1.1035 1.8353-5.5299 3.2613-11.197 4.3496-16.953 2.81-14.85 4.93-29.83 7.25-44.76 1.33-8.54 2.499-17.1 3.709-25.66a20.6 20.6 0 0 0 0.00781-0.125 20.6 20.6 0 0 0 0.0039-0.04882 20.6 20.6 0 0 0 0.00196-0.03516 20.6 20.6 0 0 0 0.00586-0.14063 20.6 20.6 0 0 0 0.0039-0.07617 20.6 20.6 0 0 0 0.00391-0.09765 20.6 20.6 0 0 0 0.0039-0.1211 20.6 20.6 0 0 0 0.00196-0.05468 20.6 20.6 0 0 0 0.0039-0.16407 20.6 20.6 0 0 0 0-0.00976 20.6 20.6 0 0 0 0-0.03907 20.6 20.6 0 0 0 0.00391-0.13671 20.6 20.6 0 0 0 0-0.03321 20.6 20.6 0 0 0 0-0.43554 20.6 20.6 0 0 0 0-0.05469 20.6 20.6 0 0 0-0.00391-0.16406 20.6 20.6 0 0 0 0-0.01172 20.6 20.6 0 0 0-0.00586-0.20703 20.6 20.6 0 0 0-0.00781-0.21875 20.6 20.6 0 0 0-0.0039-0.09766 20.6 20.6 0 0 0-0.00586-0.11914 20.6 20.6 0 0 0-0.01367-0.21875c-0.28097 0.22988-0.54132 0.43828-0.82032 0.66797-4.4381 3.6246-8.6044 7.2057-12.951 10.531-0.23119 0.1767-0.45524 0.3854-0.6875 0.56054-4.4725 3.3753-9.1634 6.3835-14.426 8.2305-1.5718 0.55149-3.1956 0.99959-4.8809 1.3184-0.077549 0.01468-0.1468 0.04641-0.22461 0.06055-2.7016 0.48356-5.2743 0.50222-7.7383-0.12695-0.93095-0.23931-1.8458-0.57857-2.7441-1.0274-0.20989-0.10524-0.42078-0.21224-0.62891-0.33008-0.99419-0.56001-1.968-1.2539-2.9219-2.1191-0.034357-0.03148-0.071163-0.04425-0.10547-0.07617 0.002119-0.00143 0.003741-0.00247 0.005859-0.0039-0.002105-0.00194-0.003755-0.00393-0.005859-0.00586 2.27-1.54 4.3595-2.8106 6.2695-4.3106 9.41-7 17.29-15.61 24.59-24.73a327.86 327.86 0 0 0 25.15-37.199c0.56-1 0.92039-2.0004 1.6504-3.6504-4.3 0.19-8.0811 0.46-11.871 0.5a51.11 51.11 0 0 1-8.9297-0.39062c-7.06-1.13-11.34-5.4292-12.35-12.449-0.4-2.74-0.070312-5.5895-0.070312-8.5195 0.011627 9.8e-4 0.017779-9.1e-4 0.029297 0 1e-6 -0.0033 0-0.00647 0-0.00977 0.070226 0.00592 0.080212 0.01015 0.14648 0.01367 0.65179 0.03477 1.1199 0.00395 1.4395 0.14258 0.032063 0.01394 0.11531-0.0047 0.14453 0.01367 5.46 3.38 11.401 4.29 17.721 3.9199 7.8016-0.4595 15.622-0.63028 23.613-0.92968 6.2076-11.477 11.089-23.455 16.447-35.861 0.00722 0.0032 0.01426 0.00657 0.02148 0.00977 0.00283-0.00655 0.00499-0.01299 0.00781-0.01954zm264.35 0.07032c0.01529 0.00655 0.02964 0.01492 0.04493 0.02148 0.00512-0.00739 0.0105-0.01409 0.01562-0.02148 0.49644 0.21357 0.97457 0.47732 1.4688 0.69531 3.7918 1.6705 7.5203 3.4553 11.242 5.3144 5.2093 2.5985 10.446 5.2881 15.889 7.9902l-18.346 19.166a320.86 320.86 0 0 0 46.445-4.2363c-3.4e-4 0.00275 3.4e-4 0.00507 0 0.00782a320.86 320.86 0 0 0 0.06055-0.00782c-0.52 4.24-1.0007 8.1211-1.4707 11.871-0.22325 0.15821-0.45851 0.25733-0.68359 0.40625-0.76689 0.5126-1.5448 0.97616-2.334 1.3906-0.36318 0.18964-0.72708 0.37518-1.0938 0.54688-0.81531 0.38348-1.6394 0.72507-2.4707 1.0332-0.37881 0.14003-0.7594 0.26726-1.1406 0.39453-2.1093 0.70592-4.2518 1.2418-6.3906 1.7344-0.16326 0.0375-0.32305 0.09558-0.48633 0.13281a132.15 132.15 0 0 1-0.20507 0.02539 132.15 132.15 0 0 1-26.389 3.293 132.15 132.15 0 0 1-0.08593 0.01172c-7.48 0.15-14.96 0.73039-23.16 1.1504l-12.576 10.584a24.21 24.21 0 0 0 3.1465 0.56641c10.47 0.28 20.909 0.57883 30.939 4.2988 14.44 5.36 19.2 16.18 17.91 29.34-1.48 15-4.1098 29.95-6.2598 44.91-1.65 11.51-3.35 23.001-5 34.531-0.16 0.64-0.31032 1.2594-0.57032 2.4394-7.2916 1.2397-14.585 2.6918-21.941 3.7188-0.15969 0.02343-0.31882 0.05897-0.47852 0.08203a178.68 178.68 0 0 1-17.49 1.3535 178.68 178.68 0 0 1-6.4609-0.13086 178.68 178.68 0 0 1-11.02-0.22266c-18.42-1.12-36.139-5.2014-52.689-13.691-1.33-0.68001-2.6397-1.4102-3.9297-2.1602-0.86-0.49-1.681-1.0598-2.791-1.7598 4.3-30.047 8.6085-60.116 12.922-90.209 5.19-3.71 22.4-8.0798 36-10.26l9.4785-11.531c-4.7837-0.00125-9.069-0.13936-13.35 0-7.81 0.27-15.629 0.73-23.439 1a60.26 60.26 0 0 1-0.04883 0 60.26 60.26 0 0 1-10.361-0.11914 60.26 60.26 0 0 1-0.06054 0c-7.69-1.11-12.091-5.9994-12.811-13.689a43.73 43.73 0 0 1 0-5.4902 7.6 7.6 0 0 1 0.43164-1.6914c0.41-0.1 0.61875-0.23969 0.71875-0.17969 0.00628 0.00397 0.01325 0.00581 0.01953 0.00977 0.00641 0.00216 0.03534-0.01317 0.04102-0.00977 4.9858 3.1639 10.404 4.1313 15.998 4.2188 0.00195 3e-5 0.00392-3e-5 0.00586 0 0.00839 1.3e-4 0.01701-1.2e-4 0.0254 0 1.8076 0.02721 3.6352-0.043 5.4707-0.1543 0.03005-0.00183 0.05979-0.00204 0.08984-0.0039 6.12-0.39 12.25-0.5193 18.93-0.7793l-9.5898-22.83 28.311-12.141c0.00126 0.00803 0.00265 0.0154 0.00391 0.02344l0.05664-0.02344c1.8 11.53 3.5083 22.559 5.2383 33.699h8.7305c0.82179-1.017 1.6202-2.0702 2.4336-3.0996 2.7288-3.4521 5.4192-6.9717 8.0781-10.555 2.3434-3.1587 4.675-6.3602 6.9922-9.6113 1.1296-1.5843 2.2628-3.1784 3.3906-4.7832 1.5311-2.179 3.061-4.356 4.5957-6.5703zm-132.58 40.24c1.8988 1.0875 3.7544 2.1964 5.5547 3.3398 1.8003 1.1434 3.5459 2.3205 5.2227 3.5449 1.6768 1.2244 3.2842 2.4957 4.8125 3.8262 1.5194 1.3228 2.9606 2.7059 4.3086 4.1582 0.00747 0.00804 0.01598 0.01539 0.02344 0.02344 0.00628 0.00678 0.0113 0.0147 0.01758 0.02148 1.3479 1.4557 2.6029 2.9813 3.7539 4.5918 1.1561 1.6177 2.2062 3.3203 3.1387 5.1191s1.7479 3.6942 2.4316 5.6992c0.68373 2.005 1.2365 4.1192 1.6465 6.3555a30.59 30.59 0 0 1 0.2168 1.3711 30.59 30.59 0 0 1 0.00195 0.01563 30.59 30.59 0 0 1 0.00195 0.01758 30.59 30.59 0 0 1 0.14844 1.3398 30.59 30.59 0 0 1 0.00391 0.03711 30.59 30.59 0 0 1 0.00195 0.03125 30.59 30.59 0 0 1 0.08594 1.3047 30.59 30.59 0 0 1 0 0.00195 30.59 30.59 0 0 1 0 0.00195 30.59 30.59 0 0 1 0 0.00195 30.59 30.59 0 0 1 0 0.00196 30.59 30.59 0 0 1 0 0.00195 30.59 30.59 0 0 1 0 0.00195 30.59 30.59 0 0 1 0.00586 0.12696 30.59 30.59 0 0 1 0.02344 1.3281 30.59 30.59 0 0 1-0.03516 1.3652 30.59 30.59 0 0 1-0.00195 0.03906 30.59 30.59 0 0 1-0.00196 0.03125 30.59 30.59 0 0 1-0.09765 1.334 30.59 30.59 0 0 1-0.00196 0.03321 30.59 30.59 0 0 1-0.00586 0.04687 30.59 30.59 0 0 1-0.14648 1.2285 30.59 30.59 0 0 1-0.02734 0.19922 30.59 30.59 0 0 1-0.21094 1.2715 30.59 30.59 0 0 1-0.00586 0.0332 30.59 30.59 0 0 1-0.00781 0.03711 30.59 30.59 0 0 1-0.26953 1.2637 30.59 30.59 0 0 1-0.04297 0.16992 30.59 30.59 0 0 1-0.33008 1.2578 30.59 30.59 0 0 1-0.40234 1.293 30.59 30.59 0 0 1-0.04102 0.12109 30.59 30.59 0 0 1-0.44141 1.2109 30.59 30.59 0 0 1-0.01172 0.03516 30.59 30.59 0 0 1-0.01367 0.03125 30.59 30.59 0 0 1-0.52539 1.2637c-1.6746-1.4997-3.2937-3.0226-4.9258-4.5059h-0.00195c-0.01642-0.01492-0.03241-0.03001-0.04883-0.04492-1.6159-1.4677-3.2459-2.8974-4.9531-4.2285a109.9 109.9 0 0 0-11.07-7.5801c-3.82-2.29-7.8794-4.1798-12.359-6.5098 1.48-10.24 2.9901-20.63 4.5801-31.66zm107.66 35.35c-0.92116-0.01174-1.8429-8.4e-4 -2.7637 0.0293-1.472 0.04771-2.9433 0.15191-4.4141 0.29101-2.9955 0.28432-5.9885 0.72723-8.9746 1.2695a53.65 53.65 0 0 0-18.66 6.6094c-0.97002 6.41-1.9395 12.802-3.0195 19.852a15.55 15.55 0 0 0 1.8398-0.81055 69.78 69.78 0 0 1 1.5918-0.83984 69.78 69.78 0 0 1 7.418-3.918 69.78 69.78 0 0 1 3.6113-1.5195 69.78 69.78 0 0 1 7.9336-2.5547 69.78 69.78 0 0 1 1.7656-0.56836 140.15 140.15 0 0 1 2.5859-0.46093 140.15 140.15 0 0 1 11.582-2.0625 140.15 140.15 0 0 1 5.4473-0.63086 140.15 140.15 0 0 1 11.893-0.64063 140.15 140.15 0 0 1 2.4922-0.13476c1.35 0 2.7696-0.18102 4.3496-0.29102-0.28947-0.95216-0.62864-1.835-1.0098-2.6582-1.24-2.6582-2.9576-4.6464-5.0098-6.1699-1.0227-0.76356-2.139-1.3976-3.3223-1.9395-0.42165-0.19198-0.8554-0.36765-1.2949-0.53515-1.0053-0.38537-2.0562-0.7078-3.1445-0.98047-0.28845-0.0718-0.56384-0.16166-0.85742-0.22656-0.56867-0.12558-1.1383-0.20779-1.707-0.31055-0.83589-0.15148-1.6719-0.28549-2.5078-0.39063-1.3643-0.17088-2.7277-0.28003-4.0918-0.33984-0.57755-0.02558-1.155-0.06078-1.7324-0.06836zm-190.99 6.1797a106.65 106.65 0 0 0-27.699 2.9004c-2.275 0.5475-4.5229 1.1648-6.7363 1.875-4.4366 1.4233-8.7381 3.2227-12.863 5.5879-2.0494 1.175-4.0551 2.4881-6.0117 3.9668-1.47 10.14-2.9998 20.451-4.5098 31.061 2.385-2.215 4.6029-4.4302 6.8105-6.5488 2.2075-2.1188 4.405-4.1407 6.75-5.9707 6.1912-4.8225 12.77-8.6451 19.652-11.67 6.8824-3.0248 14.069-5.2518 21.479-6.8828 4.9394-1.0874 9.9773-1.9098 15.09-2.5274 3.6-0.43 7.2101-0.77093 11.33-1.2109a16.85 16.85 0 0 0-8.7012-7.6992 40.94 40.94 0 0 0-14.59-2.8809zm191.93 26.752a80.37 80.37 0 0 0-2.959 0.06055 80.37 80.37 0 0 0-15.943 1.6387c-1.744 0.35262-3.465 0.7668-5.1582 1.2539-1.2796 0.36738-2.543 0.7796-3.7832 1.25-0.20568 0.07776-0.41078 0.1574-0.61523 0.23828-1.3786 0.5472-2.7314 1.1561-4.0469 1.8613-0.04498 0.02403-0.08987 0.04803-0.13476 0.07226-1.4021 0.75931-2.7672 1.6121-4.082 2.584a12.62 12.62 0 0 0-3.3125 3.4863 12.62 12.62 0 0 0-0.61328 1.0176 12.62 12.62 0 0 0-1.5449 4.5547c-0.34 3-1.0008 5.9415-1.5508 9.2715 7-2.86 13.62-5.8207 20.4-8.2207a80.93 80.93 0 0 1 20.732-3.9941 80.93 80.93 0 0 1 0.70899-0.13672c2.8836-0.20201 5.9862-0.36762 8.9121-0.54297 4.3987-0.27005 8.8686-0.52861 13.588-0.82617 0.44-3.4 0.86883-6.7506 1.2988-10.061a80.37 80.37 0 0 0-10.818-2.5078 80.37 80.37 0 0 0-3.6035-0.39258 80.37 80.37 0 0 0-7.4746-0.60742zm-7.9277 32.945c-1.7567 0.03531-3.5148 0.11904-5.2754 0.26367-1.2953 0.10704-2.5935 0.25885-3.8906 0.42188-1.0196 0.1277-2.0399 0.28057-3.0606 0.44141-0.97317 0.15376-1.9459 0.29384-2.9199 0.47656a47.55 47.55 0 0 0-17.158 6.3594c-1.0186 0.64964-1.9738 1.3567-2.8418 2.1406-0.32782 0.29753-0.64227 0.60668-0.93945 0.93164-0.25776 0.2802-0.50284 0.57131-0.73438 0.875-0.38879 0.51342-0.74109 1.059-1.043 1.6504-0.09804 0.19033-0.19524 0.38071-0.28321 0.58008-0.33222 0.76054-0.5973 1.5826-0.76562 2.4902-0.01147 0.06066-0.03035 0.1144-0.04102 0.17578 20.616 7.6661 41.081 8.7952 61.857 2.1465 0.74759-5.3926 1.4161-10.257 2.084-15.092-0.86435-0.3679-1.2956-0.59873-1.7441-0.73828-7.6926-2.3515-15.448-3.2836-23.244-3.123zm-186.85 14.223c-8.0654 0.87477-13.399 6.9156-13.771 14.566-1e-4 0.00197 1e-4 0.00388 0 0.00586-0.05123 1.0871-0.00291 2.2062 0.15234 3.3476 0.93 6.9 4.5984 11.98 10.068 15.9a40.33 40.33 0 0 0 17.051 6.8203c1.899-12.963 3.7293-25.516 5.5684-38.09a40.54 40.54 0 0 0-0.25781-0.06641 40.54 40.54 0 0 0-13.174-2.4102 40.54 40.54 0 0 0-5.6367-0.07422z" fill="currentColor"/></svg>',
  "fanyi_qq": '<svg data-name="Layer 1" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg"> <path d="m274.56 74.143c-23.137 0.10033-48.261 8.3566-69.1 27.758 18.54 21.06 28.69 45.59 28.76 73.9 0.08 28.49-9.9116 53.229-28.852 74.869 17.25 15.7 37.251 24.551 60.561 27.291-1.57 2.39-2.5695 4.1094-3.7695 5.6894-17.58 23.35-41.04 33.96-70.16 32 0 0-0.557-0.03796-1.3477-0.20508l-18.014 21.779c3.89 0.81 6.2404 1.3951 10.15 1.9551 42.05 6.06 75.731-8.1296 100.77-42.35 4.57-6.25 7.8394-13.46 11.859-20.5 49.17-11.14 77.73-49.321 81-93.061 3-39.28-16.601-85.93-72.131-104.49-9.1062-3.0438-19.212-4.6823-29.729-4.6367zm-10.201 73.938h9.3398c-0.95 5.79-1.8498 11.269-2.8398 17.359 4.76 0 9.0501-0.15 13.33 0 9.88 0.4 12.141 3.1203 10.521 12.82-1.71 9.99-3.5404 19.919-5.4004 30.279h-9.2305c1.9-11.34 3.7509-22.428 5.6309-33.738-4.7764-1.9914-11.001-1.2704-16.311-1.6504-2.14 12-4.1912 23.629-6.2812 35.389h-9.2988c3.53-20.29 6.9991-40.319 10.539-60.459zm46.9 0.63086h9.6308c-0.48 3.08-0.89117 6.0691-1.4512 9.2891h-9.7285l1.5488-9.2891zm-2.75 16.818h9.4102c-2.51 14.45-5.0005 28.61-7.4805 43h-9.4394c2.5-14.22 4.9998-28.46 7.5098-43z" fill="currentColor"/> <path d="m167.41 331.17c-22.577-6.8343-52.498-32.403-58.128-53.016-30.22-6.86-58.066-24.851-73.286-52.241-11.608-20.467-15.627-44.372-11.35-67.51 8.7847-50.711 54.085-86.854 105.48-84.16 47.26 2.31 88.63 38 95.78 88.68 1.92 13.65 0.57 27.05-2.9 40.26-3.4765 13.403-9.8 25.9-18.54 36.64-8.5145 10.556-18.973 19.381-30.81 26-12 6.69-25 10-38.76 12.32 3.9541 14.642 16.923 34.046 44.027 39.476z" fill="none" stroke="currentColor" stroke-width="8.6"/> <g fill="currentColor">  <path d="m130.34 158.12h25.78c2.47 6-0.74 11.41-0.82 17.18l2.8 1.62-0.26 5.26-4 1.49q-1 5.39-2.14 11.56l5.34 1.24-0.26 5.2-6.19 0.93c-0.86 3.69-1.72 7.34-2.59 11h-14.3c-0.57-2.11-1.08-4-1.76-6.48l9.51-0.54c0.18-1.22 0.38-2.54 0.62-4.24h-23.66l4.59-18.41-3-1.61-0.42-4.13-8.3-0.37c-1-5.7-2.05-11.36-3.2-17.7l7.51-0.39c1.29 5.48 2.49 10.61 3.76 16.05h5.76c1.29-5.22 2.58-10.45 4-16.34l-7 4.8c-0.49-5.35 0.42-9.44 3.57-13.34 3-3.67 5.14-8 7.88-12.39l7.09 0.43c-0.5 2-0.91 3.73-1.47 6h22.94c-0.14 2.44-0.26 4.31-0.4 6.7h-26.52c-1.54 2.06-2.8 3.73-4.86 6.48zm0.63 25.11c-1.08 4.1-2.11 8-3.26 12.39h16.14c0.72-4.08 1.42-8.05 2.19-12.39zm4.7-18.25c-0.9 3.52-1.8 7.05-2.78 10.85h14.72l1.52-10.83z"/>  <path d="m90.47 143.53c9.21-1.1 14.63-0.75 18.73 1.29q-3.56 26.13-7.21 53h-18.99c2.54-18.25 5-36.23 7.47-54.29zm6.81 6.74c-2 13.76-3.91 27.26-5.9 41.08l3.91 0.26c1.94-13.94 3.84-27.57 5.78-41.53z"/>  <path d="m109.43 185.34h8a173.8 173.8 0 0 1-13.08 28.37h-9.51z"/>  <path d="m121.77 155.85h-8.3c-1.07-5.25-2.17-10.67-3.35-16.53h7.6c1.28 5.02 2.55 10.37 4.05 16.53z"/>  <path d="m139.13 185.29c1 2.5 2.09 5 3.36 8h-8.17c-1-2.74-1.86-5.12-2.91-8z"/>  <path d="m143.35 166.59c1 2.44 1.79 4.56 2.8 7.15h-7.79l-3-7.15z"/> </g></svg>',
  "fanyi_baidu": '<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <g transform="matrix(1.6547 0 0 1.6547 -123.51 -115.48)" stroke-width=".1599" fill="currentColor">  <path class="cls-2" d="m93.075 120.72-9.6229 4.9001c0.65088-2.9607 1.2515-5.6806 1.8521-8.4667-0.93398-0.75936-1.9076-1.5028-2.8258-2.3098-2.7966-2.4606-4.9821-5.3816-6.3103-8.8715-2.4315-6.4109-1.9764-12.639 1.4631-18.561 3.7042-6.3288 9.3345-10.184 16.304-11.964 9.906-2.5294 19.074-0.85196 27.08 5.7176 4.2598 3.4951 7.0141 8.0036 7.919 13.494 1.1536 6.9797-0.8943 13.062-5.5748 18.256-4.2095 4.6672-9.5673 7.321-15.679 8.5884-4.6937 0.97102-9.308 0.55827-13.899-0.60325zm25.429-25.135-0.0124-0.33639c-3.0136-0.47625-6.2846-0.7484-9.0628-1.8967 1.2277-1.307 2.4395-2.5215 3.5613-3.8126 0.79375-0.90223 2.1988-2.0282 2.8125-1.9235 0.23925-0.02582 0.37598-0.34389 0.28575-0.42333l-3.3629-3.2326c-0.27951-0.42047-0.79489 0.63356-1.0987 0.9167-0.30378 0.28314-0.63632 0.48315-0.99087 0.62487-0.70908 0.28343-1.5061 0.33371-2.3369 0.34958-1.9791 0.03704-3.9688 0.24606-5.9372 0.3466-1.7833 0.08996-3.5692 0.13494-5.5933 0.20638l1.2753 1.7462h1.6907l4.1037 5.5774c-2.7305 1.5258-5.4469 3.0418-8.1492 4.5482-0.09249 0.05754-0.11651 0.20638 0.02381 0.30956 0.15079 0.25431 0.68595 0.10438 1.0583 0.06086 3.2755-0.69586 6.4611-1.6589 9.3504-3.2517 3.7227 2.1537 6.8342 3.2755 9.0144 3.2914 0.15482-0.52845 2.4343-3.0163 3.3682-3.1009zm-10.094 11.816 9.4271-0.26459 0.0714-0.29104-1.5875-1.7621-7.9243 0.73289v-3.6565h6.7125l0.17462-0.40746-1.8124-1.6192-5.17 0.55298c0.0661-0.96044 0.11377-1.6272 0.16933-2.3998-1.0583-0.70644-2.2675-1.3361-3.9052-1.3467v3.9687h-6.9215l1.1483 1.7727h5.5562v3.2094l-8.0169 0.35718 1.4499 1.7595 6.6331-0.28575v6.9638c1.0186-0.2884 1.9024-0.5424 2.7914-0.79375 0.95515-0.26459 1.2753-0.86255 1.225-1.8521-0.0767-1.4843-0.0212-2.9792-0.0212-4.6408zm-18.206-11.356v15.61h3.175v-17.965h-9.8108v2.3548zm-0.37306-10.636v3.9688h3.9238v-3.9688z"/>  <path class="cls-2" d="m128.49 120.31c0.37306 1.741 0.73025 3.3946 1.0848 5.0509l-0.26459 0.21432-5.5562-2.966c-3.1721 1.09-6.2759 1.8838-9.4403 0.17727 9.6732-4.2333 16.388-10.925 18.164-21.778 3.892 4.4979 4.0481 13.801-3.9873 19.301z"/>  <path class="cls-2" d="m106.04 91.716c-1.6484-1.0054-3.2464-1.9526-4.4053-3.7042l8.0962-0.58208c-1.053 1.733-2.3574 2.9898-3.6909 4.2862z"/> </g></svg>',
  "amazon_translate": '<svg viewBox="0 0 100 100" xml:space="preserve" xmlns="http://www.w3.org/2000/svg">	<g transform="translate(-1.668 26.707)">		<g transform="matrix(.33259 0 0 .33259 1.1132 .73415)" stroke-width="3.0067" fill="currentColor" ><path class="st0" d="m86.4 66.4c0 3.7 0.4 6.7 1.1 8.9 0.8 2.2 1.8 4.6 3.2 7.2 0.5 0.8 0.7 1.6 0.7 2.3 0 1-0.6 2-1.9 3l-6.3 4.2c-0.9 0.6-1.8 0.9-2.6 0.9-1 0-2-0.5-3-1.4-1.4-1.5-2.6-3.1-3.6-4.7-1-1.7-2-3.6-3.1-5.9-7.8 9.2-17.6 13.8-29.4 13.8-8.4 0-15.1-2.4-20-7.2s-7.4-11.2-7.4-19.2c0-8.5 3-15.4 9.1-20.6s14.2-7.8 24.5-7.8c3.4 0 6.9 0.3 10.6 0.8s7.5 1.3 11.5 2.2v-7.3c0-7.6-1.6-12.9-4.7-16-3.2-3.1-8.6-4.6-16.3-4.6-3.5 0-7.1 0.4-10.8 1.3s-7.3 2-10.8 3.4c-1.6 0.7-2.8 1.1-3.5 1.3s-1.2 0.3-1.6 0.3c-1.4 0-2.1-1-2.1-3.1v-4.9c0-1.6 0.2-2.8 0.7-3.5s1.4-1.4 2.8-2.1c3.5-1.8 7.7-3.3 12.6-4.5 4.9-1.3 10.1-1.9 15.6-1.9 11.9 0 20.6 2.7 26.2 8.1 5.5 5.4 8.3 13.6 8.3 24.6v32.4zm-40.6 15.2c3.3 0 6.7-0.6 10.3-1.8s6.8-3.4 9.5-6.4c1.6-1.9 2.8-4 3.4-6.4s1-5.3 1-8.7v-4.2c-2.9-0.7-6-1.3-9.2-1.7s-6.3-0.6-9.4-0.6c-6.7 0-11.6 1.3-14.9 4s-4.9 6.5-4.9 11.5c0 4.7 1.2 8.2 3.7 10.6 2.4 2.5 5.9 3.7 10.5 3.7zm80.3 10.8c-1.8 0-3-0.3-3.8-1-0.8-0.6-1.5-2-2.1-3.9l-23.5-77.3c-0.6-2-0.9-3.3-0.9-4 0-1.6 0.8-2.5 2.4-2.5h9.8c1.9 0 3.2 0.3 3.9 1 0.8 0.6 1.4 2 2 3.9l16.8 66.2 15.6-66.2c0.5-2 1.1-3.3 1.9-3.9s2.2-1 4-1h8c1.9 0 3.2 0.3 4 1 0.8 0.6 1.5 2 1.9 3.9l15.8 67 17.3-67c0.6-2 1.3-3.3 2-3.9 0.8-0.6 2.1-1 3.9-1h9.3c1.6 0 2.5 0.8 2.5 2.5 0 0.5-0.1 1-0.2 1.6s-0.3 1.4-0.7 2.5l-24.1 77.3c-0.6 2-1.3 3.3-2.1 3.9s-2.1 1-3.8 1h-8.6c-1.9 0-3.2-0.3-4-1s-1.5-2-1.9-4l-15.5-64.5-15.4 64.4c-0.5 2-1.1 3.3-1.9 4s-2.2 1-4 1zm128.5 2.7c-5.2 0-10.4-0.6-15.4-1.8s-8.9-2.5-11.5-4c-1.6-0.9-2.7-1.9-3.1-2.8s-0.6-1.9-0.6-2.8v-5.1c0-2.1 0.8-3.1 2.3-3.1 0.6 0 1.2 0.1 1.8 0.3s1.5 0.6 2.5 1c3.4 1.5 7.1 2.7 11 3.5 4 0.8 7.9 1.2 11.9 1.2 6.3 0 11.2-1.1 14.6-3.3s5.2-5.4 5.2-9.5c0-2.8-0.9-5.1-2.7-7s-5.2-3.6-10.1-5.2l-14.5-4.5c-7.3-2.3-12.7-5.7-16-10.2-3.3-4.4-5-9.3-5-14.5 0-4.2 0.9-7.9 2.7-11.1s4.2-6 7.2-8.2c3-2.3 6.4-4 10.4-5.2s8.2-1.7 12.6-1.7c2.2 0 4.5 0.1 6.7 0.4 2.3 0.3 4.4 0.7 6.5 1.1 2 0.5 3.9 1 5.7 1.6s3.2 1.2 4.2 1.8c1.4 0.8 2.4 1.6 3 2.5 0.6 0.8 0.9 1.9 0.9 3.3v4.7c0 2.1-0.8 3.2-2.3 3.2-0.8 0-2.1-0.4-3.8-1.2-5.7-2.6-12.1-3.9-19.2-3.9-5.7 0-10.2 0.9-13.3 2.8s-4.7 4.8-4.7 8.9c0 2.8 1 5.2 3 7.1s5.7 3.8 11 5.5l14.2 4.5c7.2 2.3 12.4 5.5 15.5 9.6s4.6 8.8 4.6 14c0 4.3-0.9 8.2-2.6 11.6-1.8 3.4-4.2 6.4-7.3 8.8-3.1 2.5-6.8 4.3-11.1 5.6-4.5 1.4-9.2 2.1-14.3 2.1z"/><path class="st1" d="m273.5 143.7c-32.9 24.3-80.7 37.2-121.8 37.2-57.6 0-109.5-21.3-148.7-56.7-3.1-2.8-0.3-6.6 3.4-4.4 42.4 24.6 94.7 39.5 148.8 39.5 36.5 0 76.6-7.6 113.5-23.2 5.5-2.5 10.2 3.6 4.8 7.6z"/><path class="st1" d="m287.2 128.1c-4.2-5.4-27.8-2.6-38.5-1.3-3.2 0.4-3.7-2.4-0.8-4.5 18.8-13.2 49.7-9.4 53.3-5 3.6 4.5-1 35.4-18.6 50.2-2.7 2.3-5.3 1.1-4.1-1.9 4-9.9 12.9-32.2 8.7-37.5z"/></g>	</g></svg>',
  "fasttext": '<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"> <g transform="matrix(6.8063 0 0 6.8063 -769.54 -447.97)" fill="currentColor">  <path d="m114.43 72.77h-0.9816l0.36777-1.6007h0.95779c0.0847-0.29104 0.15875-0.57415 0.26458-0.84931 0.18012-0.53339 0.47252-1.028 0.83608-1.4579 0.51629-0.60992 1.2329-1.0161 2.0214-1.1456 0.59251-0.11402 1.2045-0.07115 1.7754 0.12435 0.0292 0.0078 0.0575 0.01843 0.0847 0.03175l0.045 0.02381-0.52917 1.6589c-0.14022-0.04498-0.26458-0.0926-0.381-0.11906-0.6964-0.21842-1.4416 0.14837-1.6933 0.83344-0.11906 0.28046-0.20108 0.57944-0.30692 0.889h1.606l-0.38894 1.6113h-1.561l-1.3679 5.8817h-2.1167z"/>  <path d="m127.74 70.103h-7.1067v-2.1881h7.1067z"/>  <path d="m123 78.654h-2.3812v-6.4902h2.3812z"/>  <path d="m125.37 78.649v-6.5008h2.3812v6.5008z"/> </g></svg>',
  "openai_translator": '<svg width="100" height="100" version="1.1" viewBox="0 0 26.458 26.458" fill="currentColor" xmlns="http://www.w3.org/2000/svg"> <path d="m24.714 10.975c0.60835-1.8259 0.39886-3.8261-0.57399-5.4869-1.4631-2.5474-4.4043-3.8579-7.2767-3.2412-1.2779-1.4396-3.1138-2.2583-5.0386-2.2465-2.9362-0.0067141-5.5414 1.8837-6.4447 4.6774-1.8862 0.38629-3.5144 1.567-4.4671 3.2403-1.474 2.5407-1.1379 5.7433 0.83124 7.922-0.60835 1.8259-0.39886 3.8261 0.57399 5.4869 1.4631 2.5474 4.4043 3.8579 7.2767 3.2412 1.277 1.4396 3.1138 2.2583 5.0386 2.2457 2.9378 0.0075 5.5439-1.8845 6.4472-4.6808 1.8862-0.38629 3.5144-1.567 4.4671-3.2403 1.4723-2.5407 1.1354-5.7408-0.83292-7.9194zm-10.079 14.087c-1.1756 0.0016-2.3144-0.40976-3.2169-1.1631 0.04106-0.02179 0.11228-0.06117 0.15837-0.08966l5.3394-3.0836c0.27317-0.15502 0.44076-0.44579 0.43908-0.76002v-7.5273l2.2566 1.303c0.0243 0.01172 0.04022 0.0352 0.04357 0.06201v6.2335c-0.0034 2.7719-2.2482 5.0193-5.0201 5.0252zm-10.796-4.6112c-0.58908-1.0173-0.80108-2.2097-0.59913-3.3669 0.039384 0.02347 0.10893 0.0662 0.15837 0.09469l5.3394 3.0837c0.27066 0.15837 0.60584 0.15837 0.87733 0l6.5184-3.7641v2.606c0.0017 0.02683-0.0109 0.05279-0.03184 0.06955l-5.3972 3.1163c-2.4041 1.3843-5.4743 0.56142-6.8645-1.8393zm-1.4052-11.655c0.58656-1.0189 1.5125-1.7982 2.6152-2.203 0 0.046087-0.00251 0.12737-0.00251 0.18435v6.1681c-0.00167 0.31339 0.16591 0.60416 0.43825 0.75918l6.5184 3.7632-2.2566 1.303c-0.022624 0.01508-0.051115 0.01761-0.076253 0.0067l-5.3981-3.1188c-2.399-1.3893-3.2219-4.4587-1.8393-6.862zm18.54 4.3146-6.5184-3.7641 2.2566-1.3022c0.02263-0.015076 0.05111-0.017608 0.07625-0.00672l5.3981 3.1163c2.4032 1.3885 3.2269 4.4629 1.8385 6.8661-0.5874 1.0173-1.5125 1.7966-2.6144 2.2021v-6.3525c0.0025-0.3134-0.16424-0.60332-0.43573-0.75918zm2.2457-3.3803c-0.03938-0.024291-0.10893-0.066198-0.15837-0.094688l-5.3394-3.0837c-0.27066-0.15837-0.60584-0.15837-0.87733 0l-6.5184 3.7641v-2.606c-0.0017-0.026825 0.0109-0.052791 0.03184-0.069552l5.3972-3.1138c2.4041-1.3868 5.4777-0.56142 6.8636 1.8435 0.58573 1.0156 0.79773 2.2046 0.59913 3.3602zm-14.12 4.6447-2.2574-1.303c-0.024302-0.01172-0.040221-0.03519-0.043573-0.06201v-6.2335c0.00167-2.7753 2.2532-5.0243 5.0285-5.0227 1.174 0 2.3102 0.41227 3.2127 1.1631-0.04106 0.021788-0.11145 0.061168-0.15837 0.089659l-5.3394 3.0837c-0.27317 0.15502-0.44076 0.44495-0.43908 0.75918l-0.00335 7.5239zm1.2259-2.6429 2.9035-1.6767 2.9035 1.6759v3.3526l-2.9035 1.6759-2.9035-1.6759z" stroke-width=".26458"/></svg>',
  "google_translate_attribution": '<svg width="122px" height="16px" viewBox="0 0 122 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns"><title>greyscale-short</title><desc>Created with Sketch.</desc><defs></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage"><g id="greyscale-short" sketch:type="MSLayerGroup"><g id="Imported-Layers-Copy-2" transform="translate(73.000000, 0.127273)" fill=currentColor sketch:type="MSShapeGroup"><path d="M6.16,5.45866667 L6.16,7.09733333 L10.082,7.09733333 C9.96466667,8.01933333 9.65733333,8.69266667 9.18933333,9.16066667 C8.618,9.73133333 7.72533333,10.3606667 6.16,10.3606667 C3.74466667,10.3606667 1.85733333,8.41466667 1.85733333,6 C1.85733333,3.58533333 3.74466667,1.63933333 6.16,1.63933333 C7.462,1.63933333 8.41333333,2.15133333 9.116,2.81 L10.272,1.65333333 C9.29133333,0.717333333 7.98933333,7.10542736e-15 6.16,7.10542736e-15 C2.85266667,7.10542736e-15 0.072,2.69266667 0.072,6 C0.072,9.30733333 2.85266667,12 6.16,12 C7.94466667,12 9.29133333,11.4146667 10.3453333,10.3173333 C11.428,9.234 11.7646667,7.712 11.7646667,6.48266667 C11.7646667,6.10266667 11.7353333,5.75133333 11.6766667,5.45866667 L6.16,5.45866667" id="Fill-10"></path><path d="M16.6666667,4.12733333 C14.5253333,4.12733333 12.7793333,5.756 12.7793333,8 C12.7793333,10.2293333 14.5253333,11.8726667 16.6666667,11.8726667 C18.8086667,11.8726667 20.554,10.2293333 20.554,8 C20.554,5.756 18.8086667,4.12733333 16.6666667,4.12733333 L16.6666667,4.12733333 Z M16.6666667,10.3466667 C15.4933333,10.3466667 14.4806667,9.37866667 14.4806667,8 C14.4806667,6.60666667 15.4933333,5.65266667 16.6666667,5.65266667 C17.84,5.65266667 18.8526667,6.60666667 18.8526667,8 C18.8526667,9.37866667 17.84,10.3466667 16.6666667,10.3466667 L16.6666667,10.3466667 Z" id="Fill-11"></path><path d="M35.72,4.99333333 L35.6613333,4.99333333 C35.2793333,4.538 34.546,4.12733333 33.622,4.12733333 C31.686,4.12733333 30,5.814 30,8 C30,10.1706667 31.686,11.8726667 33.622,11.8726667 C34.546,11.8726667 35.2793333,11.462 35.6613333,10.9926667 L35.72,10.9926667 L35.72,11.534 C35.72,13.0153333 34.928,13.8073333 33.6513333,13.8073333 C32.61,13.8073333 31.9646667,13.0593333 31.7006667,12.4286667 L30.2193333,13.0446667 C30.6446667,14.0713333 31.774,15.3333333 33.6513333,15.3333333 C35.6466667,15.3333333 37.3333333,14.16 37.3333333,11.2993333 L37.3333333,4.32666667 L35.72,4.32666667 L35.72,4.99333333 L35.72,4.99333333 Z M33.7693333,10.3466667 C32.596,10.3466667 31.702,9.34933333 31.702,8 C31.702,6.636 32.596,5.65266667 33.7693333,5.65266667 C34.9286667,5.65266667 35.8373333,6.65066667 35.8373333,8.01466667 C35.8373333,9.364 34.9286667,10.3466667 33.7693333,10.3466667 L33.7693333,10.3466667 Z" id="Fill-12"></path><path d="M25.3333333,4.12733333 C23.192,4.12733333 21.446,5.756 21.446,8 C21.446,10.2293333 23.192,11.8726667 25.3333333,11.8726667 C27.4753333,11.8726667 29.2206667,10.2293333 29.2206667,8 C29.2206667,5.756 27.4753333,4.12733333 25.3333333,4.12733333 L25.3333333,4.12733333 Z M25.3333333,10.3466667 C24.16,10.3466667 23.148,9.37866667 23.148,8 C23.148,6.60666667 24.16,5.65266667 25.3333333,5.65266667 C26.5066667,5.65266667 27.5193333,6.60666667 27.5193333,8 C27.5193333,9.37866667 26.5066667,10.3466667 25.3333333,10.3466667 L25.3333333,10.3466667 Z" id="Fill-13"></path><path d="M38.6666667,0.16 L40.34,0.16 L40.34,11.8726667 L38.6666667,11.8726667 L38.6666667,0.16 Z" id="Fill-14"></path><path d="M45.51,10.3466667 C44.6446667,10.3466667 44.0286667,9.95133333 43.632,9.174 L48.81,7.032 L48.634,6.592 C48.3113333,5.72666667 47.3286667,4.12733333 45.3193333,4.12733333 C43.324,4.12733333 41.6666667,5.69733333 41.6666667,8 C41.6666667,10.1713333 43.3093333,11.8726667 45.51,11.8726667 C47.2846667,11.8726667 48.3113333,10.7873333 48.7366667,10.156 L47.4166667,9.276 C46.9766667,9.922 46.3753333,10.3466667 45.51,10.3466667 L45.51,10.3466667 Z M45.384,5.57866667 C46.0726667,5.57866667 46.656,5.92933333 46.8506667,6.43266667 L43.3533333,7.88266667 C43.3533333,6.25 44.508,5.57866667 45.384,5.57866667 L45.384,5.57866667 Z" id="Fill-15"></path></g><text id="translated-by-copy" opacity="0.54" sketch:type="MSTextLayer" font-family="Roboto" font-size="12" font-weight="normal" fill=currentColor><tspan x="0" y="12">translated by</tspan></text></g></g></svg>',
  "azure_translator_attribution": '<svg width="100" height="21.259" viewBox="0 0 100 21.259" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(.21694 0 0 .21694 -5.641 -44.908)" enable-background="new"><path d="m265.15 250.56c4.144-0.521 8.277 1.053 11.536 3.536 0.03-3.214-0.025-6.429 0.03-9.64-0.904-0.529-1.877-0.918-2.882-1.198-4.875-1.375-10.136-1.431-15.013-0.045-4.477 1.288-8.585 4.029-11.212 7.901-3.135 4.538-4.243 10.207-3.997 15.642 0.244 5.229 2.31 10.446 6.116 14.106 3.502 3.394 8.328 5.222 13.166 5.477 4.729 0.232 9.682-0.4 13.814-2.854-0.037-3.043 6e-3 -6.087-0.022-9.13-2.663 1.942-5.773 3.334-9.068 3.713-3.335 0.251-6.907-0.549-9.455-2.809-2.453-2.086-3.758-5.229-4.084-8.377-0.435-4.021 0.149-8.386 2.678-11.673 1.968-2.65 5.104-4.352 8.393-4.649zm-34.141-25.211c-2.807 0.319-5.201 2.864-5.125 5.72-0.118 2.713 2.069 5.146 4.693 5.617 2.529 0.551 5.43-0.516 6.727-2.812 1.173-2.035 0.882-4.808-0.702-6.549-1.35-1.59-3.556-2.284-5.593-1.976zm-27.805 1.282c-5.84 14.501-11.81 28.944-17.695 43.425-1.227-2.876-2.321-5.807-3.491-8.704-4.58-11.589-9.189-23.166-13.763-34.754h-14.698c-6e-3 19.598-3e-3 39.197 0 58.796 3.205-3e-3 6.413 5e-3 9.621-3e-3 -8e-3 -8.774 0-17.549-2e-3 -26.324 0.034-6.336-0.07-12.678 0.053-19.013 0.182 0.287 0.351 0.587 0.508 0.896 5.995 14.813 11.945 29.649 17.97 44.452 2.422-0.039 4.844 0.042 7.264-0.045 5.807-14.816 11.759-29.577 17.6-44.38 0.155-0.324 0.332-0.638 0.531-0.94 0.045 0.649 0.067 1.299 0.062 1.949-0.019 14.464 0.02 28.925-0.016 43.386 3.398 0.048 6.797 0.011 10.199 0.02-3e-3 -19.596-8e-3 -39.192 3e-3 -58.788-4.718 9e-3 -9.434-0.048-14.146 0.027zm96.111 17.268c-2.534 1.432-4.143 3.979-5.223 6.603 9e-3 -2.414-6e-3 -4.824 9e-3 -7.235-3.326-0.016-6.652-0.033-9.979 9e-3 0.02 14.039 0 28.08 9e-3 42.118h9.964c2e-3 -6.717 0-13.434 0-20.151-0.082-2.917 0.159-5.935 1.439-8.603 1.178-2.521 3.451-4.718 6.32-5.043 2.352-0.238 4.838 0.313 6.831 1.602 8e-3 -3.363-6e-3 -6.725 8e-3 -10.088-3.044-1.022-6.589-0.883-9.378 0.788zm-72.513-0.633c9e-3 14.044-2e-3 28.086 6e-3 42.127h10.033c0.014-14.036-0.022-28.073 0.017-42.109-3.351-0.064-6.705-0.031-10.056-0.018zm151.68 19.158c-2.97-1.714-6.388-2.525-9.253-4.438-1.676-1.062-2.149-3.386-1.465-5.158 0.861-1.791 2.938-2.59 4.827-2.662 3.75-0.132 7.524 1.008 10.614 3.128-3e-3 -3.089 3e-3 -6.177-3e-3 -9.268-4.423-1.672-9.314-2.273-13.988-1.453-3.948 0.702-7.824 2.749-10.056 6.162-1.953 2.929-2.205 6.705-1.397 10.057 0.545 2.273 1.937 4.289 3.775 5.72 2.615 2.002 5.745 3.119 8.723 4.455 1.586 0.745 3.267 1.504 4.412 2.88 1.224 1.788 0.853 4.708-1.208 5.729-2.151 1.03-4.664 1.013-6.974 0.639-3.317-0.571-6.452-1.98-9.17-3.948-0.036 3.248-2e-3 6.496-0.016 9.746 3.229 1.434 6.761 2.125 10.274 2.353 4.948 0.185 10.328-0.779 14.063-4.262 3.913-3.449 4.855-9.562 2.63-14.187-1.182-2.47-3.45-4.184-5.788-5.493zm44.361-17.916c-4.603-2.319-9.957-2.657-15-2.033-4.067 0.521-8.063 2.061-11.168 4.779-3.789 3.257-6.012 8.044-6.666 12.941-0.623 4.896-0.412 10.054 1.589 14.637 1.92 4.497 5.708 8.148 10.267 9.937 4.498 1.768 9.5 1.965 14.234 1.201 4.842-0.797 9.428-3.337 12.425-7.246 3.203-4.037 4.58-9.262 4.571-14.352 0.07-3.407-0.355-6.862-1.571-10.063-1.555-4.182-4.667-7.799-8.681-9.801zm-0.435 24.087c-0.388 2.218-1.156 4.429-2.612 6.185-1.469 1.764-3.652 2.839-5.906 3.169-2.419 0.361-4.967 0.188-7.229-0.784-2.441-1.03-4.333-3.138-5.329-5.563-1.199-2.889-1.438-6.09-1.199-9.18 0.23-2.994 1.081-6.065 3.063-8.392 1.808-2.172 4.58-3.373 7.376-3.53 2.854-0.198 5.902 0.46 8.097 2.383 2.023 1.675 3.144 4.183 3.657 6.708 0.576 2.961 0.57 6.026 0.082 9.004zm-80.649-24.404c-4.501-2.044-9.618-2.318-14.468-1.703-5.094 0.642-10.053 3.032-13.286 7.084-2.953 3.617-4.39 8.265-4.664 12.876-0.408 5.436 0.502 11.202 3.701 15.738 2.726 3.914 7.027 6.604 11.676 7.596 3.884 0.814 7.947 0.817 11.832 0.011 4.544-0.932 8.787-3.44 11.603-7.142 2.75-3.485 4.131-7.882 4.442-12.269 0.317-4.494-0.138-9.148-2.01-13.291-1.754-3.892-4.919-7.142-8.826-8.9zm-0.935 28.242c-0.966 2.167-2.733 3.998-4.965 4.866-2.61 1-5.543 1.059-8.237 0.361-2.742-0.719-5.068-2.696-6.334-5.214-1.629-3.241-1.872-6.99-1.536-10.546 0.307-3.234 1.435-6.56 3.904-8.792 1.792-1.668 4.233-2.483 6.649-2.618 3.036-0.198 6.27 0.658 8.452 2.861 2.336 2.291 3.239 5.613 3.489 8.783 0.181 3.47 0.037 7.085-1.422 10.299zm145.17-20.993v-8.188c-3.334 0.012-6.669-0.025-10 0.022-0.076-4.208-9e-3 -8.416-0.037-12.621-3.334 1.002-6.648 2.069-10 3.021-0.08 3.192-5e-3 6.387-0.042 9.578-4.928-2e-3 -9.856 6e-3 -14.785-5e-3 0.063-2.515-0.173-5.048 0.188-7.549 0.3-1.971 1.445-3.941 3.371-4.704 2.428-0.993 5.142-0.333 7.448 0.681-0.014-2.881 0.022-5.762-0.02-8.64-4.854-1.333-10.421-1.072-14.729 1.725-2.778 1.774-4.794 4.614-5.7 7.761-1.071 3.486-0.525 7.168-0.696 10.745-2.338-0.016-4.673-0.039-7.005 0.015 0.024 2.693 0.015 5.387 6e-3 8.077 2.343 0.048 4.688-9e-3 7.032 0.037-0.02 11.333-5e-3 22.664-5e-3 33.998h10.106c0-11.337-3e-3 -22.674 2e-3 -34.01 4.929-8e-3 9.86-6e-3 14.792-3e-3 0.014 7.227-0.015 14.45 0.011 21.674 0.045 3.364 0.62 6.963 2.854 9.619 1.935 2.353 5.004 3.428 7.968 3.646 3.124 0.221 6.352-0.16 9.24-1.411v-8.269c-2.215 1.479-5.273 2.066-7.686 0.72-1.438-0.792-1.998-2.489-2.183-4.021-0.306-2.599-0.112-5.219-0.166-7.826-3e-3 -4.708 9e-3 -9.415-5e-3 -14.122 3.347 0.013 6.695-0.087 10.041 0.05z" clip-rule="evenodd" fill=currentColor fill-rule="evenodd"/>	<path d="m26.002 207v46.617h46.726c3e-3 -15.539 0-31.078 3e-3 -46.617z" clip-rule="evenodd" fill="#f25022" fill-rule="evenodd"/>	<path d="m26.002 258.38v46.62h46.729c0-15.539 3e-3 -31.075 0-46.614-15.576-8e-3 -31.152 0-46.729-6e-3z" clip-rule="evenodd" fill="#02a4ef" fill-rule="evenodd"/>	<path d="m77.506 258.38c-6e-3 15.536 0 31.075-3e-3 46.614h46.729v-46.617c-15.577 0-31.153-3e-3 -46.726 3e-3z" clip-rule="evenodd" fill="#ffb902" fill-rule="evenodd"/>	<path d="m77.503 207c0 15.539-3e-3 31.078 3e-3 46.617 15.573 0 31.149-3e-3 46.723 0 6e-3 -15.539 3e-3 -31.078 3e-3 -46.617z" clip-rule="evenodd" fill="#80ba01" fill-rule="evenodd"/></g></svg>\n'
};
var ALL_TRANSLATOR_SERVICES = [
  "google_translate",
  "azure_translator",
  "yandex_translate",
  "deepl",
  "libre_translate",
  "bergamot",
  "fanyi_qq",
  "fanyi_youdao",
  "fanyi_baidu",
  "lingva_translate",
  "openai_translator"
];
var ALL_TRANSLATOR_LANGUAGES = [
  "aa",
  "ab",
  "ace",
  "ach",
  "ada",
  "ady",
  "ae",
  "aeb",
  "af",
  "afh",
  "agq",
  "ain",
  "ak",
  "akk",
  "akz",
  "ale",
  "aln",
  "alt",
  "am",
  "an",
  "ang",
  "anp",
  "ar",
  "ar-001",
  "arc",
  "arn",
  "aro",
  "arp",
  "arq",
  "ars",
  "arw",
  "ary",
  "arz",
  "as",
  "asa",
  "ase",
  "ast",
  "av",
  "avk",
  "awa",
  "ay",
  "az",
  "ba",
  "bal",
  "ban",
  "bar",
  "bas",
  "bax",
  "bbc",
  "bbj",
  "be",
  "bej",
  "bem",
  "ber",
  "bew",
  "bez",
  "bfd",
  "bfq",
  "bg",
  "bgn",
  "bho",
  "bi",
  "bik",
  "bin",
  "bjn",
  "bkm",
  "bla",
  "bli",
  "bm",
  "bn",
  "bo",
  "bpy",
  "bqi",
  "br",
  "bra",
  "brh",
  "brx",
  "bs",
  "bss",
  "bua",
  "bug",
  "bum",
  "byn",
  "byv",
  "ca",
  "cad",
  "car",
  "cay",
  "cch",
  "ccp",
  "ce",
  "ceb",
  "cgg",
  "ch",
  "chb",
  "chg",
  "chk",
  "chm",
  "chn",
  "cho",
  "chp",
  "chr",
  "cht",
  "chy",
  "cic",
  "ckb",
  "co",
  "cop",
  "cps",
  "cr",
  "crh",
  "cri",
  "crs",
  "cs",
  "csb",
  "cu",
  "cv",
  "cy",
  "da",
  "dak",
  "dar",
  "dav",
  "de",
  "de-AT",
  "de-CH",
  "del",
  "den",
  "dgr",
  "din",
  "dje",
  "doi",
  "dsb",
  "dtp",
  "dua",
  "dum",
  "dv",
  "dyo",
  "dyu",
  "dz",
  "dzg",
  "ebu",
  "ee",
  "efi",
  "egl",
  "egy",
  "eka",
  "el",
  "elx",
  "en",
  "en-AU",
  "en-CA",
  "en-GB",
  "en-US",
  "enm",
  "eno",
  "eo",
  "es",
  "es-419",
  "es-ES",
  "es-MX",
  "esu",
  "et",
  "eu",
  "ewo",
  "ext",
  "fa",
  "fa-AF",
  "fan",
  "fat",
  "ff",
  "fi",
  "fil",
  "fit",
  "fj",
  "fo",
  "fon",
  "fr",
  "fr-CA",
  "fr-CH",
  "frc",
  "frm",
  "fro",
  "frp",
  "frr",
  "frs",
  "fur",
  "fy",
  "ga",
  "gaa",
  "gag",
  "gan",
  "gay",
  "gba",
  "gbz",
  "gd",
  "gez",
  "gil",
  "gl",
  "glk",
  "gmh",
  "gn",
  "goh",
  "gom",
  "gon",
  "gor",
  "got",
  "gra",
  "grb",
  "grc",
  "gsw",
  "gu",
  "guc",
  "gur",
  "guz",
  "gv",
  "gwi",
  "ha",
  "hai",
  "hak",
  "haw",
  "he",
  "hi",
  "hif",
  "hil",
  "hit",
  "hmn",
  "ho",
  "hr",
  "hsb",
  "hsn",
  "ht",
  "hu",
  "hup",
  "hy",
  "hz",
  "ia",
  "iba",
  "ibb",
  "id",
  "ie",
  "ig",
  "ii",
  "ik",
  "ikt",
  "ilo",
  "ing",
  "inh",
  "io",
  "is",
  "it",
  "iu",
  "iw",
  "izh",
  "ja",
  "jam",
  "jbo",
  "jgo",
  "jmc",
  "jpr",
  "jrb",
  "jut",
  "jv",
  "jw",
  "ka",
  "kaa",
  "kab",
  "kac",
  "kah",
  "kaj",
  "kam",
  "kaw",
  "kbd",
  "kbl",
  "kcg",
  "kde",
  "kea",
  "ken",
  "kfo",
  "kg",
  "kgp",
  "kha",
  "kho",
  "khq",
  "khw",
  "ki",
  "kiu",
  "kj",
  "kk",
  "kkj",
  "kl",
  "kli",
  "kln",
  "km",
  "kmb",
  "kmr",
  "kn",
  "ko",
  "koi",
  "kok",
  "kos",
  "kpe",
  "kr",
  "krc",
  "kri",
  "krj",
  "krl",
  "kru",
  "ks",
  "ksb",
  "ksf",
  "ksh",
  "ku",
  "kum",
  "kut",
  "kv",
  "kw",
  "ky",
  "la",
  "lad",
  "lag",
  "lah",
  "lam",
  "lb",
  "lez",
  "lfn",
  "lg",
  "li",
  "lij",
  "liv",
  "lkt",
  "lmo",
  "ln",
  "lo",
  "log",
  "loj",
  "lol",
  "los",
  "lou",
  "loz",
  "lrc",
  "lt",
  "ltg",
  "lu",
  "lua",
  "lug",
  "lui",
  "lun",
  "luo",
  "lus",
  "luy",
  "lv",
  "lzh",
  "lzz",
  "mad",
  "maf",
  "mag",
  "mai",
  "mak",
  "man",
  "mas",
  "mau",
  "mde",
  "mdf",
  "mdr",
  "men",
  "mer",
  "mfe",
  "mg",
  "mga",
  "mgh",
  "mgo",
  "mh",
  "mhr",
  "mi",
  "mic",
  "min",
  "mk",
  "ml",
  "mn",
  "mnc",
  "mni",
  "moh",
  "mos",
  "mot",
  "mr",
  "mrj",
  "ms",
  "mt",
  "mtei",
  "mua",
  "mul",
  "mus",
  "mwl",
  "mwr",
  "mwv",
  "mww",
  "my",
  "mye",
  "myv",
  "mzn",
  "na",
  "nan",
  "nap",
  "naq",
  "nb",
  "nd",
  "nds",
  "nds-NL",
  "ne",
  "nea",
  "new",
  "ng",
  "nia",
  "niu",
  "njo",
  "nl",
  "nl-BE",
  "nmg",
  "nn",
  "nnh",
  "no",
  "nog",
  "non",
  "nov",
  "nqo",
  "nr",
  "nso",
  "nus",
  "nv",
  "nwc",
  "ny",
  "nya",
  "nym",
  "nyn",
  "nyo",
  "nzi",
  "oc",
  "oj",
  "om",
  "or",
  "os",
  "osa",
  "ota",
  "otq",
  "pa",
  "pag",
  "pal",
  "pam",
  "pap",
  "pau",
  "pcd",
  "pcm",
  "pdc",
  "pdt",
  "ped",
  "peo",
  "pfl",
  "phn",
  "pi",
  "pl",
  "pms",
  "pnt",
  "pon",
  "pot",
  "prg",
  "pro",
  "prs",
  "ps",
  "pt",
  "pt-BR",
  "pt-PT",
  "qu",
  "quc",
  "qug",
  "raj",
  "rap",
  "rar",
  "rgn",
  "rhg",
  "rif",
  "rm",
  "rn",
  "ro",
  "ro-MD",
  "rof",
  "rom",
  "rtm",
  "ru",
  "rue",
  "rug",
  "run",
  "rup",
  "ruy",
  "rw",
  "rwk",
  "sa",
  "sad",
  "sah",
  "sam",
  "saq",
  "sas",
  "sat",
  "saz",
  "sba",
  "sbp",
  "sc",
  "scn",
  "sco",
  "sd",
  "sdc",
  "sdh",
  "se",
  "sec",
  "see",
  "seh",
  "sei",
  "sel",
  "ses",
  "sg",
  "sga",
  "sgs",
  "sh",
  "sha",
  "shi",
  "shn",
  "shu",
  "si",
  "sid",
  "sil",
  "sk",
  "sl",
  "sli",
  "sly",
  "sm",
  "sma",
  "smj",
  "smn",
  "sms",
  "sn",
  "snk",
  "so",
  "sog",
  "sol",
  "sq",
  "sr",
  "sr-ME",
  "src",
  "srn",
  "srr",
  "ss",
  "ssy",
  "st",
  "stq",
  "su",
  "suk",
  "sus",
  "sux",
  "sv",
  "sw",
  "sw-CD",
  "swb",
  "syc",
  "syr",
  "szl",
  "ta",
  "tcy",
  "te",
  "tem",
  "teo",
  "ter",
  "tet",
  "tg",
  "th",
  "ti",
  "tig",
  "tiv",
  "tk",
  "tkl",
  "tkr",
  "tl",
  "tlh",
  "tli",
  "tly",
  "tmh",
  "tn",
  "to",
  "tog",
  "tpi",
  "tr",
  "tru",
  "trv",
  "ts",
  "tsd",
  "tsi",
  "tt",
  "ttt",
  "tua",
  "tum",
  "tvl",
  "tw",
  "twq",
  "ty",
  "tyv",
  "tzm",
  "udm",
  "ug",
  "uga",
  "uk",
  "umb",
  "und",
  "ur",
  "uz",
  "vai",
  "ve",
  "vec",
  "vep",
  "vi",
  "vls",
  "vmf",
  "vo",
  "vot",
  "vro",
  "vun",
  "wa",
  "wae",
  "wal",
  "war",
  "was",
  "wbp",
  "wen",
  "wo",
  "wuu",
  "xal",
  "xh",
  "xmf",
  "xog",
  "yao",
  "yap",
  "yav",
  "ybb",
  "yi",
  "yo",
  "yrl",
  "yua",
  "yue",
  "za",
  "zap",
  "zbl",
  "zea",
  "zen",
  "zgh",
  "zh",
  "zh-Hans",
  "zh-Hant",
  "zu",
  "zun",
  "zxx",
  "zza"
];
var ALL_DETECTOR_SERVICES = [
  "fasttext"
];
var ALL_SERVICES = [...ALL_TRANSLATOR_SERVICES, ...ALL_DETECTOR_SERVICES];
var DEFAULT_SETTINGS = {
  version: "1.4.5",
  display_language: "display",
  filter_mode: "0",
  translation_service: "dummy_translate",
  security_setting: "none",
  switch_button_action: "switch-both",
  translation_command_action: "replace",
  apply_glossary: false,
  local_glossary: false,
  glossary_preference: "online",
  case_insensitive_glossary: false,
  enable_animations: true,
  glossary_bidirectional: false,
  quicksettings_default: [
    "change-service",
    "automatic-translation",
    "change-layout",
    "apply-filter",
    "open-settings"
  ],
  layout_default: 0,
  left_quickactions_default: ["paste", "clear"],
  right_quickactions_default: ["copy"],
  hide_attribution_default: false,
  default_source_language: "auto",
  target_language_preference: "specific",
  last_used_target_languages: [],
  default_target_language: import_obsidian.moment.locale(),
  filtered_services: [],
  hotkeys: [
    {
      id: "view-translate",
      modifiers: ["Mod"],
      key: "Enter"
    },
    {
      id: "view-language-switch",
      modifiers: ["Mod"],
      key: "S"
    },
    {
      id: "view-action-copy",
      modifiers: [],
      key: ""
    },
    {
      id: "view-action-clear",
      modifiers: [],
      key: ""
    },
    {
      id: "view-action-paste",
      modifiers: [],
      key: ""
    }
  ],
  service_settings: {
    fasttext: {
      default_usage: false,
      version: "1.0.0"
    },
    google_translate: {
      selected_languages: [],
      api_key: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "af",
        "ak",
        "am",
        "ar",
        "as",
        "ay",
        "az",
        "be",
        "bg",
        "bho",
        "bm",
        "bn",
        "bs",
        "ca",
        "ceb",
        "ckb",
        "co",
        "cs",
        "cy",
        "da",
        "de",
        "doi",
        "dv",
        "ee",
        "el",
        "en",
        "eo",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fr",
        "fy",
        "ga",
        "gd",
        "gl",
        "gn",
        "gom",
        "gu",
        "ha",
        "haw",
        "he",
        "hi",
        "hmn",
        "hr",
        "ht",
        "hu",
        "hy",
        "id",
        "ig",
        "ilo",
        "is",
        "it",
        "iw",
        "ja",
        "jv",
        "jw",
        "ka",
        "kk",
        "km",
        "kn",
        "ko",
        "kri",
        "ku",
        "ky",
        "la",
        "lb",
        "lg",
        "ln",
        "lo",
        "lt",
        "lus",
        "lv",
        "mai",
        "mg",
        "mi",
        "mk",
        "ml",
        "mn",
        "mni-Mtei",
        "mr",
        "ms",
        "mt",
        "my",
        "ne",
        "nl",
        "no",
        "nso",
        "ny",
        "om",
        "or",
        "pa",
        "pl",
        "ps",
        "pt",
        "qu",
        "ro",
        "ru",
        "rw",
        "sa",
        "sd",
        "si",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sq",
        "sr",
        "st",
        "su",
        "sv",
        "sw",
        "ta",
        "te",
        "tg",
        "th",
        "ti",
        "tk",
        "tl",
        "tr",
        "ts",
        "tt",
        "ug",
        "uk",
        "ur",
        "uz",
        "vi",
        "xh",
        "yi",
        "yo",
        "zh",
        "zh-CN",
        "zh-TW",
        "zu"
      ],
      version: "1.1.0"
    },
    azure_translator: {
      selected_languages: [],
      api_key: "",
      region: "",
      host: null,
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "af",
        "am",
        "ar",
        "as",
        "az",
        "ba",
        "bg",
        "bn",
        "bo",
        "bs",
        "ca",
        "cs",
        "cy",
        "da",
        "de",
        "dsb",
        "dv",
        "el",
        "en",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fil",
        "fj",
        "fo",
        "fr",
        "fr-CA",
        "ga",
        "gl",
        "gom",
        "gu",
        "ha",
        "he",
        "hi",
        "hr",
        "hsb",
        "ht",
        "hu",
        "hy",
        "id",
        "ig",
        "ikt",
        "is",
        "it",
        "iu",
        "iu-Latn",
        "ja",
        "ka",
        "kk",
        "km",
        "kmr",
        "kn",
        "ko",
        "ku",
        "ky",
        "ln",
        "lo",
        "lt",
        "lug",
        "lv",
        "lzh",
        "mai",
        "mg",
        "mi",
        "mk",
        "ml",
        "mn-Cyrl",
        "mn-Mong",
        "mr",
        "ms",
        "mt",
        "mww",
        "my",
        "nb",
        "ne",
        "nl",
        "nso",
        "nya",
        "or",
        "otq",
        "pa",
        "pl",
        "prs",
        "ps",
        "pt",
        "pt-PT",
        "ro",
        "ru",
        "run",
        "rw",
        "sd",
        "si",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sq",
        "sr-Cyrl",
        "sr-Latn",
        "st",
        "sv",
        "sw",
        "ta",
        "te",
        "th",
        "ti",
        "tk",
        "tlh-Latn",
        "tlh-Piqd",
        "tn",
        "to",
        "tr",
        "tt",
        "ty",
        "ug",
        "uk",
        "ur",
        "uz",
        "vi",
        "xh",
        "yo",
        "yua",
        "yue",
        "zh-Hans",
        "zh-Hant",
        "zu"
      ],
      version: "1.0.1"
    },
    yandex_translate: {
      selected_languages: [],
      api_key: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "af",
        "am",
        "ar",
        "az",
        "ba",
        "be",
        "bg",
        "bn",
        "bs",
        "ca",
        "ceb",
        "cs",
        "cy",
        "da",
        "de",
        "el",
        "en",
        "eo",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fr",
        "ga",
        "gd",
        "gl",
        "gu",
        "he",
        "hi",
        "hr",
        "ht",
        "hu",
        "hy",
        "id",
        "is",
        "it",
        "ja",
        "jv",
        "ka",
        "kk",
        "km",
        "kn",
        "ko",
        "ky",
        "la",
        "lb",
        "lo",
        "lt",
        "lv",
        "mg",
        "mhr",
        "mi",
        "mk",
        "ml",
        "mn",
        "mr",
        "mrj",
        "ms",
        "mt",
        "my",
        "ne",
        "nl",
        "no",
        "pa",
        "pap",
        "pl",
        "pt",
        "ro",
        "ru",
        "si",
        "sk",
        "sl",
        "sq",
        "sr",
        "su",
        "sv",
        "sw",
        "ta",
        "te",
        "tg",
        "th",
        "tl",
        "tr",
        "tt",
        "udm",
        "uk",
        "ur",
        "uz",
        "vi",
        "xh",
        "yi",
        "zh"
      ],
      version: "1.0.0"
    },
    libre_translate: {
      selected_languages: [],
      host: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "ar",
        "az",
        "ca",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "eo",
        "es",
        "fa",
        "fi",
        "fr",
        "ga",
        "he",
        "hi",
        "hu",
        "id",
        "it",
        "ja",
        "ko",
        "nl",
        "pl",
        "pt",
        "ru",
        "sk",
        "sv",
        "th",
        "tr",
        "uk",
        "zh"
      ],
      version: "1.0.2"
    },
    deepl: {
      selected_languages: [],
      api_key: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "bg",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "es",
        "et",
        "fi",
        "fr",
        "hu",
        "id",
        "it",
        "ja",
        "ko",
        "lt",
        "lv",
        "nb",
        "nl",
        "pl",
        "pt",
        "ro",
        "ru",
        "sk",
        "sl",
        "sv",
        "tr",
        "uk",
        "zh"
      ],
      glossary_languages: {
        "de": ["en", "fr"],
        "en": ["de", "es", "fr", "ja", "it", "pl", "nl"],
        "es": ["en"],
        "fr": ["de", "en"],
        "ja": ["en"],
        "it": ["en"],
        "pl": ["en"],
        "nl": ["en"]
      },
      version: "1.0.3"
    },
    bergamot: {
      selected_languages: [],
      validated: null,
      auto_translate: false,
      auto_translate_interval: 500,
      available_languages: [],
      version: "0.3.3",
      downloadable_models: [
        {
          "size": 46992539,
          "locale": "bg",
          "files": [
            {
              "name": "model.bgen.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "from"
            },
            {
              "name": "lex.50.50.bgen.s2t.bin",
              "size": 6182512,
              "usage": "from"
            },
            {
              "name": "vocab.bgen.spm",
              "size": 920621,
              "usage": "both"
            },
            {
              "name": "model.enbg.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enbg.s2t.bin",
              "size": 5607608,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 43143255,
          "locale": "cs",
          "files": [
            {
              "name": "model.csen.intgemm.alphas.bin",
              "size": 17140756,
              "usage": "from"
            },
            {
              "name": "lex.50.50.csen.s2t.bin",
              "size": 4535788,
              "usage": "from"
            },
            {
              "name": "vocab.csen.spm",
              "size": 769763,
              "usage": "both"
            },
            {
              "name": "model.encs.intgemm.alphas.bin",
              "size": 17140756,
              "usage": "to"
            },
            {
              "name": "lex.50.50.encs.s2t.bin",
              "size": 3556124,
              "usage": "to"
            },
            {
              "name": "qualityModel.encs.bin",
              "size": 68,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 44057153,
          "locale": "de",
          "files": [
            {
              "name": "model.deen.intgemm.alphas.bin",
              "size": 17140837,
              "usage": "from"
            },
            {
              "name": "lex.50.50.deen.s2t.bin",
              "size": 5047568,
              "usage": "from"
            },
            {
              "name": "vocab.deen.spm",
              "size": 784269,
              "usage": "both"
            },
            {
              "name": "model.ende.intgemm.alphas.bin",
              "size": 17140835,
              "usage": "to"
            },
            {
              "name": "lex.50.50.ende.s2t.bin",
              "size": 3943644,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 42315033,
          "locale": "es",
          "files": [
            {
              "name": "model.esen.intgemm.alphas.bin",
              "size": 17140755,
              "usage": "from"
            },
            {
              "name": "lex.50.50.esen.s2t.bin",
              "size": 3860888,
              "usage": "from"
            },
            {
              "name": "vocab.esen.spm",
              "size": 825463,
              "usage": "both"
            },
            {
              "name": "model.enes.intgemm.alphas.bin",
              "size": 17140755,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enes.s2t.bin",
              "size": 3347104,
              "usage": "to"
            },
            {
              "name": "qualityModel.enes.bin",
              "size": 68,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 41785726,
          "locale": "et",
          "files": [
            {
              "name": "model.eten.intgemm.alphas.bin",
              "size": 17140754,
              "usage": "from"
            },
            {
              "name": "lex.50.50.eten.s2t.bin",
              "size": 3974944,
              "usage": "from"
            },
            {
              "name": "vocab.eten.spm",
              "size": 828426,
              "usage": "both"
            },
            {
              "name": "model.enet.intgemm.alphas.bin",
              "size": 17140754,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enet.s2t.bin",
              "size": 2700780,
              "usage": "to"
            },
            {
              "name": "qualityModel.enet.bin",
              "size": 68,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 51818572,
          "locale": "fr",
          "files": [
            {
              "name": "model.fren.intgemm.alphas.bin",
              "size": 17140961,
              "usage": "from"
            },
            {
              "name": "lex.50.50.fren.s2t.bin",
              "size": 8818768,
              "usage": "from"
            },
            {
              "name": "vocab.fren.spm",
              "size": 831382,
              "usage": "both"
            },
            {
              "name": "model.enfr.intgemm.alphas.bin",
              "size": 17140961,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enfr.s2t.bin",
              "size": 7886500,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 45379864,
          "locale": "it",
          "files": [
            {
              "name": "model.iten.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "from"
            },
            {
              "name": "lex.50.50.iten.s2t.bin",
              "size": 4977500,
              "usage": "from"
            },
            {
              "name": "vocab.iten.spm",
              "size": 812781,
              "usage": "from"
            },
            {
              "name": "model.enit.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enit.s2t.bin",
              "size": 4495004,
              "usage": "to"
            },
            {
              "name": "vocab.enit.spm",
              "size": 812781,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 44467108,
          "locale": "pl",
          "files": [
            {
              "name": "model.plen.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "from"
            },
            {
              "name": "lex.50.50.plen.s2t.bin",
              "size": 4898024,
              "usage": "from"
            },
            {
              "name": "vocab.plen.spm",
              "size": 822587,
              "usage": "from"
            },
            {
              "name": "model.enpl.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enpl.s2t.bin",
              "size": 3642112,
              "usage": "to"
            },
            {
              "name": "vocab.enpl.spm",
              "size": 822587,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 45063626,
          "locale": "pt",
          "files": [
            {
              "name": "model.pten.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "from"
            },
            {
              "name": "lex.50.50.pten.s2t.bin",
              "size": 4801740,
              "usage": "from"
            },
            {
              "name": "vocab.pten.spm",
              "size": 817234,
              "usage": "from"
            },
            {
              "name": "model.enpt.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enpt.s2t.bin",
              "size": 4345620,
              "usage": "to"
            },
            {
              "name": "vocab.enpt.spm",
              "size": 817234,
              "usage": "to"
            }
          ],
          "dev": false
        },
        {
          "size": 47215849,
          "locale": "fa",
          "files": [
            {
              "name": "model.faen.intgemm.alphas.bin",
              "size": 17140837,
              "usage": "from"
            },
            {
              "name": "lex.50.50.faen.s2t.bin",
              "size": 6197320,
              "usage": "from"
            },
            {
              "name": "vocab.faen.spm",
              "size": 845020,
              "usage": "from"
            },
            {
              "name": "model.enfa.intgemm.alphas.bin",
              "size": 17140835,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enfa.s2t.bin",
              "size": 5097656,
              "usage": "to"
            },
            {
              "name": "vocab.enfa.spm",
              "size": 794181,
              "usage": "to"
            }
          ],
          "dev": true
        },
        {
          "size": 45332265,
          "locale": "nl",
          "files": [
            {
              "name": "model.nlen.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "from"
            },
            {
              "name": "lex.50.50.nlen.s2t.bin",
              "size": 4940304,
              "usage": "from"
            },
            {
              "name": "vocab.nlen.spm",
              "size": 807730,
              "usage": "from"
            },
            {
              "name": "model.ennl.intgemm.alphas.bin",
              "size": 17140899,
              "usage": "to"
            },
            {
              "name": "lex.50.50.ennl.s2t.bin",
              "size": 4494892,
              "usage": "to"
            },
            {
              "name": "vocab.ennl.spm",
              "size": 807541,
              "usage": "to"
            }
          ],
          "dev": true
        },
        {
          "size": 44295337,
          "locale": "ru",
          "files": [
            {
              "name": "model.ruen.intgemm.alphas.bin",
              "size": 17140836,
              "usage": "from"
            },
            {
              "name": "lex.50.50.ruen.s2t.bin",
              "size": 5090836,
              "usage": "from"
            },
            {
              "name": "vocab.ruen.spm",
              "size": 936576,
              "usage": "from"
            },
            {
              "name": "model.enru.intgemm.alphas.bin",
              "size": 17140836,
              "usage": "to"
            },
            {
              "name": "lex.50.50.enru.s2t.bin",
              "size": 3049096,
              "usage": "to"
            },
            {
              "name": "vocab.enru.spm",
              "size": 937157,
              "usage": "to"
            }
          ],
          "dev": true
        },
        {
          "size": 74267492,
          "locale": "uk",
          "files": [
            {
              "name": "model.uken.intgemm8.bin",
              "size": 25315747,
              "usage": "from"
            },
            {
              "name": "lex.uken.s2t.bin",
              "size": 9761460,
              "usage": "from"
            },
            {
              "name": "srcvocab.uken.spm",
              "size": 984214,
              "usage": "from"
            },
            {
              "name": "trgvocab.uken.spm",
              "size": 803064,
              "usage": "from"
            },
            {
              "name": "model.enuk.intgemm8.bin",
              "size": 25315747,
              "usage": "to"
            },
            {
              "name": "lex.enuk.s2t.bin",
              "size": 10294724,
              "usage": "to"
            },
            {
              "name": "trgvocab.enuk.spm",
              "size": 1003426,
              "usage": "to"
            },
            {
              "name": "srcvocab.enuk.spm",
              "size": 789110,
              "usage": "to"
            }
          ],
          "dev": true
        }
      ]
    },
    fanyi_qq: {
      selected_languages: [],
      api_key: "",
      app_id: "",
      region: "ap-bangkok",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "ar",
        "de",
        "en",
        "es",
        "fr",
        "hi",
        "id",
        "it",
        "ja",
        "ko",
        "ms",
        "pt",
        "ru",
        "th",
        "tr",
        "vi",
        "zh",
        "zh-TW"
      ],
      version: "1.0.0"
    },
    fanyi_youdao: {
      selected_languages: [],
      api_key: "",
      app_id: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "af",
        "am",
        "ar",
        "az",
        "be",
        "bg",
        "bn",
        "bs",
        "ca",
        "ceb",
        "co",
        "cs",
        "cy",
        "da",
        "de",
        "el",
        "en",
        "eo",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fj",
        "fr",
        "fy",
        "ga",
        "gd",
        "gl",
        "gu",
        "ha",
        "haw",
        "he",
        "hi",
        "hr",
        "ht",
        "hu",
        "hy",
        "id",
        "ig",
        "is",
        "it",
        "ja",
        "jw",
        "ka",
        "kk",
        "km",
        "kn",
        "ko",
        "ku",
        "ky",
        "la",
        "lb",
        "lo",
        "lt",
        "lv",
        "mg",
        "mi",
        "mk",
        "ml",
        "mn",
        "mr",
        "ms",
        "mt",
        "mww",
        "my",
        "ne",
        "nl",
        "no",
        "ny",
        "otq",
        "pa",
        "pl",
        "ps",
        "pt",
        "ro",
        "ru",
        "sd",
        "si",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sq",
        "sr-Cyrl",
        "sr-Latn",
        "st",
        "su",
        "sv",
        "sw",
        "ta",
        "te",
        "tg",
        "th",
        "tl",
        "tlh",
        "to",
        "tr",
        "ty",
        "uk",
        "ur",
        "uz",
        "vi",
        "xh",
        "yi",
        "yo",
        "yua",
        "yue",
        "zh-CHS",
        "zh-CHT",
        "zu"
      ],
      version: "1.0.0"
    },
    fanyi_baidu: {
      selected_languages: [],
      api_key: "",
      app_id: "",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "ace",
        "aeb",
        "af",
        "ak",
        "am",
        "an",
        "ang",
        "ar",
        "arq",
        "as",
        "ast",
        "ay",
        "az",
        "ba",
        "bal",
        "be",
        "bem",
        "ber",
        "bg",
        "bho",
        "bi",
        "bli",
        "bn",
        "br",
        "bs",
        "ca",
        "ceb",
        "chr",
        "cnh",
        "cnr",
        "co",
        "cr",
        "crh",
        "cs",
        "csb",
        "cv",
        "cy",
        "da",
        "de",
        "dsb",
        "dv",
        "el",
        "en",
        "eo",
        "es",
        "et",
        "eu",
        "fa",
        "ff",
        "fi",
        "fil",
        "fo",
        "fr",
        "fr-CA",
        "frm",
        "fur",
        "fy",
        "ga",
        "gd",
        "gl",
        "gn",
        "grc",
        "gu",
        "gv",
        "ha",
        "haw",
        "he",
        "hi",
        "hil",
        "hmn",
        "hr",
        "hsb",
        "ht",
        "hu",
        "hup",
        "hy",
        "ia",
        "id",
        "ig",
        "inh",
        "io",
        "is",
        "it",
        "iu",
        "ja",
        "jbo",
        "jv",
        "ka",
        "kab",
        "kg",
        "kl",
        "km",
        "kn",
        "ko",
        "kok",
        "kr",
        "ks",
        "ku",
        "kw",
        "ky",
        "la",
        "lb",
        "lg",
        "li",
        "ln",
        "lo",
        "lt",
        "ltg",
        "lv",
        "lzh",
        "mai",
        "mfe",
        "mg",
        "mh",
        "mi",
        "mk",
        "ml",
        "mr",
        "ms",
        "mt",
        "my",
        "nap",
        "nb",
        "nds",
        "ne",
        "nl",
        "nn",
        "no",
        "nqo",
        "nr",
        "nso",
        "ny",
        "oc",
        "oj",
        "om",
        "or",
        "os",
        "pa",
        "pam",
        "pap",
        "pes",
        "pl",
        "ps",
        "pt",
        "pt-br",
        "qu",
        "rm",
        "ro",
        "rom",
        "ru",
        "rue",
        "rw",
        "sa",
        "sc",
        "sd",
        "se",
        "sh",
        "shn",
        "si",
        "sk",
        "sl",
        "sli",
        "sm",
        "sn",
        "so",
        "son",
        "sq",
        "sr",
        "sr-CYRL",
        "st",
        "su",
        "sv",
        "sw",
        "syr",
        "ta",
        "te",
        "tet",
        "tg",
        "th",
        "ti",
        "tk",
        "tl",
        "tlh",
        "tr",
        "ts",
        "tt",
        "tw",
        "uk",
        "ur",
        "ve",
        "vi",
        "wa",
        "wo",
        "xh",
        "yi",
        "yo",
        "yue",
        "zh",
        "zh-hant",
        "zu",
        "zza"
      ],
      version: "1.0.0"
    },
    /*amazon_translate: {
    	selected_languages: [],
    	filter_type: 0,
    	api_key: "",
    	auto_translate: false,
    	auto_translate_interval: 500,
    	validated: null,
    	available_languages: [
    		"af", "am", "ar", "az", "bg", "bn", "bs", "ca", "cs", "cy", "da", "de", "el", "en", "es", "es-MX", "et",
    		"fa", "fa-AF", "fi", "fr", "fr-CA", "ga", "gu", "ha", "he", "hi", "hr", "ht", "hu", "hy", "id", "is",
    		"it", "ja", "ka", "kk", "kn", "ko", "lt", "lv", "mk", "ml", "mn", "mr", "ms", "mt", "nl", "no", "pa",
    		"pl", "ps", "pt", "pt-PT", "ro", "ru", "si", "sk", "sl", "so", "sq", "sr", "sv", "sw", "ta", "te", "th",
    		"tl", "tr", "uk", "ur", "uz", "vi", "zh", "zh-TW"
    	],
    	version: "1.0.0"
    },*/
    lingva_translate: {
      selected_languages: [],
      host: "translate.plausibility.cloud",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: [
        "af",
        "ak",
        "am",
        "ar",
        "as",
        "ay",
        "az",
        "be",
        "bg",
        "bho",
        "bm",
        "bn",
        "bs",
        "ca",
        "ceb",
        "ckb",
        "co",
        "cs",
        "cy",
        "da",
        "de",
        "doi",
        "dv",
        "ee",
        "el",
        "en",
        "eo",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fr",
        "fy",
        "ga",
        "gd",
        "gl",
        "gn",
        "gom",
        "gu",
        "ha",
        "haw",
        "hi",
        "hmn",
        "hr",
        "ht",
        "hu",
        "hy",
        "id",
        "ig",
        "ilo",
        "is",
        "it",
        "iw",
        "ja",
        "jw",
        "ka",
        "kk",
        "km",
        "kn",
        "ko",
        "kri",
        "ku",
        "ky",
        "la",
        "lb",
        "lg",
        "ln",
        "lo",
        "lt",
        "lus",
        "lv",
        "mai",
        "mg",
        "mi",
        "mk",
        "ml",
        "mn",
        "mni-Mtei",
        "mr",
        "ms",
        "mt",
        "my",
        "ne",
        "nl",
        "no",
        "nso",
        "ny",
        "om",
        "or",
        "pa",
        "pl",
        "ps",
        "pt",
        "qu",
        "ro",
        "ru",
        "rw",
        "sa",
        "sd",
        "si",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sq",
        "sr",
        "st",
        "su",
        "sv",
        "sw",
        "ta",
        "te",
        "tg",
        "th",
        "ti",
        "tk",
        "tl",
        "tr",
        "ts",
        "tt",
        "ug",
        "uk",
        "ur",
        "uz",
        "vi",
        "xh",
        "yi",
        "yo",
        "zh",
        "zh-HANT",
        "zu"
      ],
      version: "1.0.1"
    },
    openai_translator: {
      selected_languages: [],
      api_key: "",
      host: "api.openai.com",
      auto_translate: false,
      auto_translate_interval: 500,
      validated: null,
      available_languages: ALL_TRANSLATOR_LANGUAGES,
      version: "1.0.0"
    }
  }
};
var SERVICES_INFO = {
  dummy: {
    display_name: "DEBUG"
  },
  google_translate: {
    display_name: "Google Translate",
    requires_api_key: true,
    request_key: "https://cloud.google.com/translate/docs/setup",
    url: "http://translate.google.com/",
    attribution: "google_translate_attribution",
    type: "translation"
  },
  azure_translator: {
    display_name: "Azure Translator",
    requires_api_key: true,
    request_key: "https://learn.microsoft.com/en-us/azure/cognitive-services/translator/how-to-create-translator-resource",
    url: "http://aka.ms/MicrosoftTranslatorAttribution",
    attribution: "azure_translator_attribution",
    type: "translation",
    region_options: [
      { value: "", text: "Global" },
      { value: "asia", text: "Asia" },
      { value: "asiapacific", text: "Asia Pacific" },
      { value: "australia", text: "Australia" },
      { value: "australiacentral", text: "Australia Central" },
      { value: "australiacentral2", text: "Australia Central 2" },
      { value: "australiaeast", text: "Australia East" },
      { value: "australiasoutheast", text: "Australia Southeast" },
      { value: "brazil", text: "Brazil" },
      { value: "brazilsouth", text: "Brazil South" },
      { value: "brazilsoutheast", text: "Brazil Southeast" },
      { value: "canada", text: "Canada" },
      { value: "canadacentral", text: "Canada Central" },
      { value: "canadaeast", text: "Canada East" },
      { value: "centralindia", text: "Central India" },
      { value: "centralus", text: "Central US" },
      { value: "centraluseuap", text: "Central US EUAP" },
      { value: "eastasia", text: "East Asia" },
      { value: "eastus", text: "East US" },
      { value: "eastus2", text: "East US 2" },
      { value: "eastus2euap", text: "East US 2 EUAP" },
      { value: "europe", text: "Europe" },
      { value: "france", text: "France" },
      { value: "francecentral", text: "France Central" },
      { value: "francesouth", text: "France South" },
      { value: "germany", text: "Germany" },
      { value: "germanynorth", text: "Germany North" },
      { value: "germanywestcentral", text: "Germany West Central" },
      { value: "global", text: "Global" },
      { value: "india", text: "India" },
      { value: "japan", text: "Japan" },
      { value: "japaneast", text: "Japan East" },
      { value: "japanwest", text: "Japan West" },
      { value: "korea", text: "Korea" },
      { value: "koreacentral", text: "Korea Central" },
      { value: "koreasouth", text: "Korea South" },
      { value: "northcentralus", text: "North Central US" },
      { value: "northeurope", text: "North Europe" },
      { value: "norway", text: "Norway" },
      { value: "norwayeast", text: "Norway East" },
      { value: "norwaywest", text: "Norway West" },
      { value: "southafrica", text: "South Africa" },
      { value: "southafricanorth", text: "South Africa North" },
      { value: "southafricawest", text: "South Africa West" },
      { value: "southcentralus", text: "South Central US" },
      { value: "southindia", text: "South India" },
      { value: "southeastasia", text: "Southeast Asia" },
      { value: "swedencentral", text: "Sweden Central" },
      { value: "switzerland", text: "Switzerland" },
      { value: "switzerlandnorth", text: "Switzerland North" },
      { value: "switzerlandwest", text: "Switzerland West" },
      { value: "uaecentral", text: "UAE Central" },
      { value: "uaenorth", text: "UAE North" },
      { value: "uksouth", text: "UK South" },
      { value: "ukwest", text: "UK West" },
      { value: "unitedstates", text: "United States" },
      { value: "westcentralus", text: "West Central US" },
      { value: "westeurope", text: "West Europe" },
      { value: "westindia", text: "West India" },
      { value: "westus", text: "West US" },
      { value: "westus2", text: "West US 2" },
      { value: "westus3", text: "West US 3" }
    ],
    options: {
      profanity_filter: true
    }
  },
  yandex_translate: {
    display_name: "Yandex Translate",
    requires_api_key: true,
    request_key: "https://yandex.com/dev/translate/",
    url: "https://translate.yandex.com/",
    type: "translation"
  },
  deepl: {
    display_name: "DeepL",
    requires_api_key: true,
    request_key: "https://www.deepl.com/pro-api?cta=header-pro-api/",
    url: "https://www.deepl.com/",
    type: "translation",
    online_glossary: true,
    options: {
      split_sentences: true,
      preserve_formatting: true,
      formality: true
    }
  },
  libre_translate: {
    display_name: "Libre Translate",
    requires_api_key: false,
    local_host: "https://github.com/LibreTranslate/LibreTranslate",
    url: "https://libretranslate.com/",
    requires_host: true,
    type: "translation"
  },
  bergamot: {
    display_name: "Bergamot",
    url: "https://browser.mt/",
    desktop_only: true,
    type: "translation"
  },
  fanyi_qq: {
    display_name: "Fanyi QQ",
    requires_api_key: true,
    requires_app_id: true,
    request_key: "https://cloud.tencent.com/product/tmt",
    url: "https://fanyi.qq.com/",
    type: "translation",
    region_options: [
      { value: "ap-bangkok", text: "Bangkok" },
      { value: "ap-beijing", text: "Beijing" },
      { value: "ap-chengdu", text: "Chengdu" },
      { value: "ap-chongqing", text: "Chongqing" },
      { value: "ap-guangzhou", text: "Guangzhou" },
      { value: "ap-hongkong", text: "Hong Kong" },
      { value: "ap-mumbai", text: "Mumbai" },
      { value: "ap-seoul", text: "Seoul" },
      { value: "ap-shanghai", text: "Shanghai" },
      { value: "ap-shanghai-fsi", text: "Shanghai (Financial zone)" },
      { value: "ap-shenzhen-fsi", text: "Shenzhen (Financial zone)" },
      { value: "ap-singapore", text: "Singapore" },
      { value: "eu-frankfurt", text: "Frankfurt" },
      { value: "na-ashburn", text: "Ashburn" },
      { value: "na-siliconvalley", text: "Silicon Valley" },
      { value: "na-toronto", text: "Toronto" }
    ]
  },
  fanyi_youdao: {
    display_name: "Fanyi Youdao",
    requires_api_key: true,
    requires_app_id: true,
    request_key: "https://ai.youdao.com/doc-trans.s",
    url: "https://fanyi.youdao.com/",
    type: "translation"
  },
  fanyi_baidu: {
    display_name: "Fanyi Baidu",
    requires_api_key: true,
    requires_app_id: true,
    request_key: "https://passport.baidu.com/v2/?login&u=https%3A%2F%2Ffanyi-api.baidu.com%2Fapi%2Ftrans%2Fproduct%2Fdesktop",
    url: "https://fanyi.baidu.com/",
    type: "translation",
    standard_languages: [
      "ar",
      "bg",
      "cs",
      "da",
      "de",
      "el",
      "en",
      "es",
      "et",
      "fi",
      "fr",
      "hu",
      "it",
      "ja",
      "ko",
      "lzh",
      "nl",
      "pl",
      "pt",
      "ro",
      "ru",
      "sl",
      "sv",
      "th",
      "vi",
      "yue",
      "zh",
      "zh-hant"
    ]
  },
  /*amazon_translate: {
  	display_name: "Amazon Translate",
  	requires_api_key: true,
  	request_key: "https://aws.amazon.com/translate/",
  	url: "https://aws.amazon.com/translate/",
  	type: 'translation',
  	region_options: [
  		{value: "af-south-1", text: ""},
  		{value: "ap-east-1", text: ""},
  		{value: "ap-northeast-1", text: ""},
  		{value: "ap-northeast-2", text: ""},
  		{value: "ap-northeast-3", text: ""},
  		{value: "ap-south-1", text: ""},
  		{value: "ap-southeast-1", text: ""},
  		{value: "ap-southeast-2", text: ""},
  		{value: "ap-southeast-3", text: ""},
  		{value: "ca-central-1", text: ""},
  		{value: "eu-central-1", text: ""},
  		{value: "eu-north-1", text: ""},
  		{value: "eu-south-1", text: ""},
  		{value: "eu-west-1", text: ""},
  		{value: "eu-west-2", text: ""},
  		{value: "eu-west-3", text: ""},
  		{value: "me-south-1", text: ""},
  		{value: "sa-east-1", text: ""},
  		{value: "us-east-1", text: ""},
  		{value: "us-east-1-fips", text: ""},
  		{value: "us-east-2", text: ""},
  		{value: "us-east-2-fips", text: ""},
  		{value: "us-west-1", text: ""},
  		{value: "us-west-2", text: ""},
  		{value: "us-west-2-fips", text: ""}
  	],
  	options: {
  		formality: true,
  	}
  },*/
  lingva_translate: {
    display_name: "Lingva Translate",
    url: "https://github.com/TheDavidDelta/lingva-translate",
    requires_host: true,
    type: "translation",
    default_custom_host: "http://YOURDOMAINHERE.com",
    host_options: [
      { text: "translate.plausibility.cloud", value: "translate.plausibility.cloud" },
      { text: "lingva.lunar.icu", value: "lingva.lunar.icu" },
      { text: "translate.dr460nf1r3.org", value: "translate.dr460nf1r3.org" },
      { text: "lingva.opnxng.com", value: "lingva.opnxng.com" },
      { text: "translate.projectsegfau.lt", value: "translate.projectsegfau.lt" },
      { text: "lingva.garudalinux.org", value: "lingva.garudalinux.org" },
      { text: "lingva.ml", value: "lingva.ml" },
      { text: "translate.igna.ooo", value: "translate.igna.ooo" },
      { text: "lingva.pussthecat.org", value: "lingva.pussthecat.org" },
      { text: "custom domain", value: "http://YOURDOMAINHERE.com" }
    ]
  },
  openai_translator: {
    display_name: "OpenAI Translator",
    requires_api_key: true,
    request_key: "https://platform.openai.com/account/api-keys",
    url: "https://platform.openai.com/docs/introduction",
    requires_host: true,
    type: "translation",
    default_custom_host: "https://YOURDOMAINHERE.com",
    host_options: [
      { text: "api.openai.com", value: "api.openai.com" },
      { text: "api.pawan.krd", value: "api.pawan.krd" },
      { text: "custom domain", value: "https://YOURDOMAINHERE.com" }
    ],
    model_options: [
      { text: "GPT 3.5", value: "gpt-3.5-turbo" },
      { text: "GPT 4", value: "gpt-4" }
    ]
  },
  fasttext: {
    display_name: "FastText",
    url: "https://fasttext.cc/",
    type: "detection"
  }
};
var FILTER_MODES = {
  0: {
    icon: "asterisk",
    tooltip: "Show all available languages"
  },
  1: {
    icon: "repeat",
    tooltip: "Show only spellchecker languages"
  },
  2: {
    icon: "filter",
    tooltip: "Show manually selected languages"
  }
};
var VIEW_MODES = {
  0: {
    id: "automatic",
    icon: "layout-dashboard",
    tooltip: "Automatic layout"
  },
  1: {
    id: "vertical",
    icon: "columns",
    tooltip: "Vertical layout"
  },
  2: {
    id: "mixed",
    icon: "layout-grid",
    tooltip: "Mixed layout"
  },
  3: {
    id: "horizontal",
    icon: "stretch-horizontal",
    tooltip: "Horizontal layout"
  }
};
var SECURITY_MODES = [
  { value: "none", text: "Plaintext (no security)", info: "API keys are currently stored as plaintext strings in data.json" },
  { value: "password", text: "Encrypt with password", info: "API keys are currently stored as encrypted strings in data.json" },
  { value: "local_only", text: "Stored in local storage", info: "API keys will not be saved to data.json, keys are only stored locally" },
  { value: "dont_save", text: "Stored for single session", info: "API keys will be cleared when Obsidian is closed" }
];
var TRANSLATOR_VIEW_ID = "translator-view";
var SETTINGS_TABS = [
  {
    id: "general",
    name: "General",
    icon: "settings"
  },
  {
    id: "functionality",
    name: "Functionality",
    icon: "wrench"
  },
  {
    id: "glossary",
    name: "Glossary",
    icon: "book"
  },
  {
    id: "hotkeys",
    name: "Hotkeys",
    icon: "function-square"
  },
  {
    id: "appearance",
    name: "Appearance",
    icon: "palette"
  }
];
var QUICK_ACTIONS = {
  "copy": { tooltip: ["Copy"], icon: ["copy"], text: "Copy" },
  "paste": { tooltip: ["Paste"], icon: ["clipboard-check"], text: "Paste" },
  "clear": { tooltip: ["Clear"], icon: ["x"], text: "Clear" }
};
var QUICK_SETTINGS = {
  "change-service": { tooltip: ["Change Translation Service"], icon: ["cloud"], text: "Change Service" },
  "automatic-translation": { tooltip: ["Translating manually", "Automatically translating"], icon: ["hand", "zap"], text: "Toggle Auto-Translate" },
  "apply-glossary": { tooltip: ["Don't apply glossary", "Apply glossary"], icon: ["book", "book-open"], text: "Toggle Glossary" },
  "change-layout": {
    tooltip: Object.values(VIEW_MODES).map((mode) => mode.tooltip),
    icon: Object.values(VIEW_MODES).map((mode) => mode.icon),
    text: "Change Layout"
  },
  "apply-filter": {
    tooltip: Object.values(FILTER_MODES).map((mode) => mode.tooltip),
    icon: Object.values(FILTER_MODES).map((mode) => mode.icon),
    text: "Change Filter"
  },
  "open-settings": { tooltip: ["Open Settings"], icon: ["settings"], text: "Open Settings" }
};
var QUICK_SETTINGS_BUTTONS = Object.entries(QUICK_SETTINGS).map(([key, value]) => {
  return { id: key, ...value };
});
var QUICK_ACTIONS_BUTTONS = Object.entries(QUICK_ACTIONS).map(([key, value]) => {
  return { id: key, ...value };
});
var UNTESTED_SERVICES = ["yandex_translate", "fanyi_qq"];

// src/stores.ts
var settings = writable();
var all_languages = writable(/* @__PURE__ */ new Map());
var available_languages = writable([]);
var available_translator_services = writable(ALL_TRANSLATOR_SERVICES);
var available_detector_services = writable(ALL_DETECTOR_SERVICES);
var spellcheck_languages = writable([]);
var settings_tab = writable("general");
var passwords_are_encrypted = writable(false);
var password = writable("");
var fasttext_data = writable();
var bergamot_data = writable();
var hide_shortcut_tooltips = writable(false);
var glossary = {
  dicts: {},
  replacements: {},
  source_language: "",
  target_language: "",
  text: ["", ""]
};
var globals2 = {
  plugin: null
};

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// node_modules/svelte/src/runtime/easing/index.js
function cubicOut(t2) {
  const f = t2 - 1;
  return f * f * f + 1;
}

// node_modules/svelte/src/runtime/transition/index.js
function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = "y" } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const primary_property = axis === "y" ? "height" : "width";
  const primary_property_value = parseFloat(style[primary_property]);
  const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
  const capitalized_secondary_properties = secondary_properties.map(
    (e) => `${e[0].toUpperCase()}${e.slice(1)}`
  );
  const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
  const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
  const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
  const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
  const border_width_start_value = parseFloat(
    style[`border${capitalized_secondary_properties[0]}Width`]
  );
  const border_width_end_value = parseFloat(
    style[`border${capitalized_secondary_properties[1]}Width`]
  );
  return {
    delay,
    duration,
    easing,
    css: (t2) => `overflow: hidden;opacity: ${Math.min(t2 * 20, 1) * opacity};${primary_property}: ${t2 * primary_property_value}px;padding-${secondary_properties[0]}: ${t2 * padding_start_value}px;padding-${secondary_properties[1]}: ${t2 * padding_end_value}px;margin-${secondary_properties[0]}: ${t2 * margin_start_value}px;margin-${secondary_properties[1]}: ${t2 * margin_end_value}px;border-${secondary_properties[0]}-width: ${t2 * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t2 * border_width_end_value}px;`
  };
}

// src/ui/animations/horizontal-slide.js
function horizontalSlide(node, {
  delay = 0,
  duration = 400,
  easing = cubicOut,
  axis = "x"
} = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const primary_property = axis === "y" ? "height" : "width";
  const primary_property_value = parseFloat(style[primary_property]);
  const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
  const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
  const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
  const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
  const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
  const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
  const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
  const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
  return {
    delay,
    duration,
    easing,
    css: (t2) => `overflow: hidden;opacity: ${Math.min(t2 * 20, 1) * opacity};${primary_property}: ${t2 * primary_property_value}px;padding-${secondary_properties[0]}: ${t2 * padding_start_value}px;padding-${secondary_properties[1]}: ${t2 * padding_end_value}px;margin-${secondary_properties[0]}: ${t2 * margin_start_value}px;margin-${secondary_properties[1]}: ${t2 * margin_end_value}px;border-${secondary_properties[0]}-width: ${t2 * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t2 * border_width_end_value}px;`
  };
}

// src/ui/components/Button.svelte
function create_if_block_1(ctx) {
  let div;
  let t2;
  return {
    c() {
      div = element("div");
      t2 = text(
        /*text*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*text*/
      1)
        set_data(
          t2,
          /*text*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon_default({
    props: {
      icon: (
        /*icon*/
        ctx[1]
      ),
      size: (
        /*size*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*icon*/
      2)
        icon_1_changes.icon = /*icon*/
        ctx2[1];
      if (dirty & /*size*/
      8)
        icon_1_changes.size = /*size*/
        ctx2[3];
      icon_1.$set(icon_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
}
function create_fragment(ctx) {
  let button;
  let t2;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*text*/
    ctx[0] && create_if_block_1(ctx)
  );
  let if_block1 = (
    /*icon*/
    ctx[1] && create_if_block(ctx)
  );
  return {
    c() {
      button = element("button");
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      attr(button, "class", button_class_value = /*$$props*/
      ctx[5].class);
      attr(
        button,
        "aria-label",
        /*tooltip*/
        ctx[2]
      );
      toggle_class(
        button,
        "translator-icon-text",
        /*icon*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (if_block0)
        if_block0.m(button, null);
      append(button, t2);
      if (if_block1)
        if_block1.m(button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*text*/
        ctx2[0]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(button, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*icon*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*icon*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*$$props*/
      32 && button_class_value !== (button_class_value = /*$$props*/
      ctx2[5].class)) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*tooltip*/
      4) {
        attr(
          button,
          "aria-label",
          /*tooltip*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*$$props, icon*/
      34) {
        toggle_class(
          button,
          "translator-icon-text",
          /*icon*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { text: text2 = "" } = $$props;
  let { icon = "" } = $$props;
  let { tooltip = "" } = $$props;
  let { size = null } = $$props;
  let { onClick = () => {
  } } = $$props;
  const click_handler = () => onClick();
  $$self.$$set = ($$new_props) => {
    $$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("text" in $$new_props)
      $$invalidate(0, text2 = $$new_props.text);
    if ("icon" in $$new_props)
      $$invalidate(1, icon = $$new_props.icon);
    if ("tooltip" in $$new_props)
      $$invalidate(2, tooltip = $$new_props.tooltip);
    if ("size" in $$new_props)
      $$invalidate(3, size = $$new_props.size);
    if ("onClick" in $$new_props)
      $$invalidate(4, onClick = $$new_props.onClick);
  };
  $$props = exclude_internal_props($$props);
  return [text2, icon, tooltip, size, onClick, $$props, click_handler];
}
var Button = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, {
      text: 0,
      icon: 1,
      tooltip: 2,
      size: 3,
      onClick: 4
    });
  }
};
var Button_default = Button;

// src/ui/components/Dropdown.svelte
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[0] = list[i].value;
  child_ctx[7] = list[i].text;
  return child_ctx;
}
function create_each_block(ctx) {
  let option;
  let t_value = (
    /*text*/
    ctx[7] + ""
  );
  let t2;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t2 = text(t_value);
      option.__value = option_value_value = /*value*/
      ctx[0];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*options*/
      4 && t_value !== (t_value = /*text*/
      ctx2[7] + ""))
        set_data(t2, t_value);
      if (dirty & /*options*/
      4 && option_value_value !== (option_value_value = /*value*/
      ctx2[0])) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_fragment2(ctx) {
  let select;
  let select_class_value;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*options*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  return {
    c() {
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(select, "class", select_class_value = /*$$props*/
      ctx[4].class ? (
        /*$$props*/
        ctx[4].class + " dropdown"
      ) : "dropdown");
      select.disabled = /*disabled*/
      ctx[3];
    },
    m(target, anchor) {
      insert(target, select, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      select_option(
        select,
        /*value*/
        ctx[0]
      );
      if (!mounted) {
        dispose = listen(select, "change", function() {
          if (is_function(
            /*onChange*/
            ctx[1]
          ))
            ctx[1].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*options*/
      4) {
        each_value = ensure_array_like(
          /*options*/
          ctx[2]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*$$props*/
      16 && select_class_value !== (select_class_value = /*$$props*/
      ctx[4].class ? (
        /*$$props*/
        ctx[4].class + " dropdown"
      ) : "dropdown")) {
        attr(select, "class", select_class_value);
      }
      if (dirty & /*disabled*/
      8) {
        select.disabled = /*disabled*/
        ctx[3];
      }
      if (dirty & /*value, options*/
      5) {
        select_option(
          select,
          /*value*/
          ctx[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { onChange } = $$props;
  let { options = [] } = $$props;
  let { value } = $$props;
  let { disabled = false } = $$props;
  let { default_value = "" } = $$props;
  function setDefaultValue() {
    if (default_value && options.findIndex((option) => option.value === value) === -1)
      $$invalidate(0, value = default_value);
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("onChange" in $$new_props)
      $$invalidate(1, onChange = $$new_props.onChange);
    if ("options" in $$new_props)
      $$invalidate(2, options = $$new_props.options);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("disabled" in $$new_props)
      $$invalidate(3, disabled = $$new_props.disabled);
    if ("default_value" in $$new_props)
      $$invalidate(5, default_value = $$new_props.default_value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    1) {
      $:
        value, setDefaultValue();
    }
  };
  $$props = exclude_internal_props($$props);
  return [value, onChange, options, disabled, $$props, default_value];
}
var Dropdown = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, {
      onChange: 1,
      options: 2,
      value: 0,
      disabled: 3,
      default_value: 5
    });
  }
};
var Dropdown_default = Dropdown;

// src/ui/components/Toggle.svelte
function create_fragment3(ctx) {
  let div;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      input = element("input");
      attr(input, "type", "checkbox");
      attr(input, "tabindex", "0");
      input.disabled = /*disabled*/
      ctx[2];
      attr(div, "class", "checkbox-container");
      toggle_class(
        div,
        "is-enabled",
        /*value*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      if (!mounted) {
        dispose = listen(
          div,
          "click",
          /*click_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*disabled*/
      4) {
        input.disabled = /*disabled*/
        ctx2[2];
      }
      if (dirty & /*value*/
      1) {
        toggle_class(
          div,
          "is-enabled",
          /*value*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { value } = $$props;
  let { onChange } = $$props;
  let { disabled = false } = $$props;
  const click_handler = () => !disabled && onChange(!value);
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("onChange" in $$props2)
      $$invalidate(1, onChange = $$props2.onChange);
    if ("disabled" in $$props2)
      $$invalidate(2, disabled = $$props2.disabled);
  };
  return [value, onChange, disabled, click_handler];
}
var Toggle = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, { value: 0, onChange: 1, disabled: 2 });
  }
};
var Toggle_default = Toggle;

// src/ui/components/Input.svelte
function create_fragment4(ctx) {
  let input;
  let input_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(
        input,
        "type",
        /*type*/
        ctx[0]
      );
      input.value = /*val*/
      ctx[1];
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      input.readOnly = /*readonly*/
      ctx[5];
      attr(
        input,
        "val",
        /*val*/
        ctx[1]
      );
      attr(input, "class", input_class_value = /*$$props*/
      ctx[6].class);
      toggle_class(
        input,
        "translator-input-success",
        /*valid*/
        ctx[4]
      );
      toggle_class(
        input,
        "translator-input-fail",
        /*valid*/
        ctx[4] === false
      );
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(input, "input", function() {
          if (is_function(
            /*onChange*/
            ctx[3]
          ))
            ctx[3].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*type*/
      1) {
        attr(
          input,
          "type",
          /*type*/
          ctx[0]
        );
      }
      if (dirty & /*val*/
      2 && input.value !== /*val*/
      ctx[1]) {
        input.value = /*val*/
        ctx[1];
      }
      if (dirty & /*placeholder*/
      4) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx[2]
        );
      }
      if (dirty & /*readonly*/
      32) {
        input.readOnly = /*readonly*/
        ctx[5];
      }
      if (dirty & /*val*/
      2) {
        attr(
          input,
          "val",
          /*val*/
          ctx[1]
        );
      }
      if (dirty & /*$$props*/
      64 && input_class_value !== (input_class_value = /*$$props*/
      ctx[6].class)) {
        attr(input, "class", input_class_value);
      }
      if (dirty & /*$$props, valid*/
      80) {
        toggle_class(
          input,
          "translator-input-success",
          /*valid*/
          ctx[4]
        );
      }
      if (dirty & /*$$props, valid*/
      80) {
        toggle_class(
          input,
          "translator-input-fail",
          /*valid*/
          ctx[4] === false
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let { type } = $$props;
  let { val } = $$props;
  let { placeholder = "" } = $$props;
  let { onChange } = $$props;
  let { valid = null } = $$props;
  let { readonly = false } = $$props;
  $$self.$$set = ($$new_props) => {
    $$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("type" in $$new_props)
      $$invalidate(0, type = $$new_props.type);
    if ("val" in $$new_props)
      $$invalidate(1, val = $$new_props.val);
    if ("placeholder" in $$new_props)
      $$invalidate(2, placeholder = $$new_props.placeholder);
    if ("onChange" in $$new_props)
      $$invalidate(3, onChange = $$new_props.onChange);
    if ("valid" in $$new_props)
      $$invalidate(4, valid = $$new_props.valid);
    if ("readonly" in $$new_props)
      $$invalidate(5, readonly = $$new_props.readonly);
  };
  $$props = exclude_internal_props($$props);
  return [type, val, placeholder, onChange, valid, readonly, $$props];
}
var Input = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, {
      type: 0,
      val: 1,
      placeholder: 2,
      onChange: 3,
      valid: 4,
      readonly: 5
    });
  }
};
var Input_default = Input;

// src/ui/components/TextArea.svelte
function create_else_block(ctx) {
  let textarea;
  let textarea_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      textarea = element("textarea");
      attr(textarea, "class", textarea_class_value = /*$$props*/
      ctx[7].class);
      textarea.readOnly = /*readonly*/
      ctx[1];
      attr(
        textarea,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      textarea.value = /*text*/
      ctx[0];
    },
    m(target, anchor) {
      insert(target, textarea, anchor);
      if (!mounted) {
        dispose = [
          listen(
            textarea,
            "input",
            /*input_handler*/
            ctx[11]
          ),
          listen(
            textarea,
            "contextmenu",
            /*contextmenu_handler_1*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*$$props*/
      128 && textarea_class_value !== (textarea_class_value = /*$$props*/
      ctx2[7].class)) {
        attr(textarea, "class", textarea_class_value);
      }
      if (dirty & /*readonly*/
      2) {
        textarea.readOnly = /*readonly*/
        ctx2[1];
      }
      if (dirty & /*placeholder*/
      4) {
        attr(
          textarea,
          "placeholder",
          /*placeholder*/
          ctx2[2]
        );
      }
      if (dirty & /*text*/
      1) {
        textarea.value = /*text*/
        ctx2[0];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(textarea);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block2(ctx) {
  let textarea;
  let textarea_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      textarea = element("textarea");
      attr(textarea, "class", textarea_class_value = /*$$props*/
      ctx[7].class);
      textarea.readOnly = /*readonly*/
      ctx[1];
      attr(
        textarea,
        "placeholder",
        /*placeholder*/
        ctx[2]
      );
      attr(
        textarea,
        "text",
        /*text*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, textarea, anchor);
      set_input_value(
        textarea,
        /*text*/
        ctx[0]
      );
      if (!mounted) {
        dispose = [
          listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[9]
          ),
          listen(textarea, "input", function() {
            if (is_function(
              /*onChange*/
              ctx[4]
            ))
              ctx[4].apply(this, arguments);
          }),
          listen(
            textarea,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$$props*/
      128 && textarea_class_value !== (textarea_class_value = /*$$props*/
      ctx[7].class)) {
        attr(textarea, "class", textarea_class_value);
      }
      if (dirty & /*readonly*/
      2) {
        textarea.readOnly = /*readonly*/
        ctx[1];
      }
      if (dirty & /*placeholder*/
      4) {
        attr(
          textarea,
          "placeholder",
          /*placeholder*/
          ctx[2]
        );
      }
      if (dirty & /*text*/
      1) {
        attr(
          textarea,
          "text",
          /*text*/
          ctx[0]
        );
      }
      if (dirty & /*text*/
      1) {
        set_input_value(
          textarea,
          /*text*/
          ctx[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(textarea);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment5(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (!/*typingdelay*/
    ctx2[3])
      return create_if_block2;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let { text: text2 } = $$props;
  let { readonly = false } = $$props;
  let { placeholder = "" } = $$props;
  let { typingdelay = 0 } = $$props;
  let { onChange } = $$props;
  let { onInput } = $$props;
  let { onContextmenu } = $$props;
  let timer = null;
  function textarea_input_handler() {
    text2 = this.value;
    $$invalidate(0, text2);
  }
  const contextmenu_handler = (e) => {
    onContextmenu(e);
    e.preventDefault();
    return false;
  };
  const input_handler = (e) => {
    if (timer) {
      clearTimeout(timer);
    }
    $$invalidate(6, timer = setTimeout(
      () => {
        onChange(e);
      },
      typingdelay
    ));
  };
  const contextmenu_handler_1 = (e) => {
    onContextmenu(e);
    e.preventDefault();
    return false;
  };
  $$self.$$set = ($$new_props) => {
    $$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("text" in $$new_props)
      $$invalidate(0, text2 = $$new_props.text);
    if ("readonly" in $$new_props)
      $$invalidate(1, readonly = $$new_props.readonly);
    if ("placeholder" in $$new_props)
      $$invalidate(2, placeholder = $$new_props.placeholder);
    if ("typingdelay" in $$new_props)
      $$invalidate(3, typingdelay = $$new_props.typingdelay);
    if ("onChange" in $$new_props)
      $$invalidate(4, onChange = $$new_props.onChange);
    if ("onInput" in $$new_props)
      $$invalidate(8, onInput = $$new_props.onInput);
    if ("onContextmenu" in $$new_props)
      $$invalidate(5, onContextmenu = $$new_props.onContextmenu);
  };
  $$props = exclude_internal_props($$props);
  return [
    text2,
    readonly,
    placeholder,
    typingdelay,
    onChange,
    onContextmenu,
    timer,
    $$props,
    onInput,
    textarea_input_handler,
    contextmenu_handler,
    input_handler,
    contextmenu_handler_1
  ];
}
var TextArea = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, {
      text: 0,
      readonly: 1,
      placeholder: 2,
      typingdelay: 3,
      onChange: 4,
      onInput: 8,
      onContextmenu: 5
    });
  }
};
var TextArea_default = TextArea;

// src/ui/components/Icon.svelte
var import_obsidian2 = require("obsidian");
function create_fragment6(ctx) {
  let html_tag;
  let raw_value = (
    /*icon_element*/
    ctx[0].outerHTML + ""
  );
  let html_anchor;
  return {
    c() {
      html_tag = new HtmlTag(false);
      html_anchor = empty();
      html_tag.a = html_anchor;
    },
    m(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert(target, html_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*icon_element*/
      1 && raw_value !== (raw_value = /*icon_element*/
      ctx2[0].outerHTML + ""))
        html_tag.p(raw_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(html_anchor);
        html_tag.d();
      }
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let { icon } = $$props;
  let { size = null } = $$props;
  let { stroke_width = null } = $$props;
  let icon_element;
  $$self.$$set = ($$new_props) => {
    $$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("icon" in $$new_props)
      $$invalidate(1, icon = $$new_props.icon);
    if ("size" in $$new_props)
      $$invalidate(2, size = $$new_props.size);
    if ("stroke_width" in $$new_props)
      $$invalidate(3, stroke_width = $$new_props.stroke_width);
  };
  $$self.$$.update = () => {
    $: {
      if (icon !== "spinner") {
        if (!icon.startsWith("<svg")) {
          $$invalidate(0, icon_element = (0, import_obsidian2.getIcon)(icon));
        } else {
          $$invalidate(0, icon_element = new DOMParser().parseFromString(icon, "text/html").body.childNodes[0]);
        }
        if ($$props.class)
          icon_element.classList.add(...$$props.class.split(" "));
      } else {
        $$invalidate(0, icon_element.innerHTML = "", icon_element);
        icon_element.classList.add("translator-spinner");
      }
    }
    if ($$self.$$.dirty & /*icon_element, size*/
    5) {
      $: {
        if (icon_element && size) {
          if (typeof size === "number") {
            $$invalidate(0, icon_element.style.width = size + "px", icon_element);
            $$invalidate(0, icon_element.style.height = size + "px", icon_element);
          } else if (Array.isArray(size)) {
            $$invalidate(0, icon_element.style.width = size[0] + "px", icon_element);
            $$invalidate(0, icon_element.style.height = size[1] + "px", icon_element);
          } else {
            $$invalidate(0, icon_element.style.width = `var(--${size})`, icon_element);
            $$invalidate(0, icon_element.style.height = `var(--${size})`, icon_element);
            $$invalidate(0, icon_element.style.strokeWidth = `var(--${size}-stroke-width)`, icon_element);
          }
        }
      }
    }
    if ($$self.$$.dirty & /*icon_element, stroke_width*/
    9) {
      $: {
        if (icon_element && stroke_width) {
          $$invalidate(0, icon_element.style.strokeWidth = stroke_width + "px", icon_element);
        }
      }
    }
  };
  $$props = exclude_internal_props($$props);
  return [icon_element, icon, size, stroke_width];
}
var Icon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { icon: 1, size: 2, stroke_width: 3 });
  }
};
var Icon_default = Icon;

// src/ui/components/ToggleButton.svelte
function create_fragment7(ctx) {
  let button;
  let div;
  let t0;
  let t1;
  let icon;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: {
      icon: (
        /*running*/
        ctx[4] ? "spinner" : (
          /*value*/
          ctx[0] === null ? "question-mark-glyph" : (
            /*value*/
            ctx[0] ? "check" : "cross"
          )
        )
      ),
      size: (
        /*size*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      button = element("button");
      div = element("div");
      t0 = text(
        /*text*/
        ctx[1]
      );
      t1 = space();
      create_component(icon.$$.fragment);
      attr(button, "class", "translator-icon-text translator-toggle-button");
      toggle_class(
        button,
        "translator-success",
        /*value*/
        ctx[0]
      );
      toggle_class(
        button,
        "translator-fail",
        /*value*/
        ctx[0] === false
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      append(div, t0);
      append(button, t1);
      mount_component(icon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*text*/
      2)
        set_data(
          t0,
          /*text*/
          ctx2[1]
        );
      const icon_changes = {};
      if (dirty & /*running, value*/
      17)
        icon_changes.icon = /*running*/
        ctx2[4] ? "spinner" : (
          /*value*/
          ctx2[0] === null ? "question-mark-glyph" : (
            /*value*/
            ctx2[0] ? "check" : "cross"
          )
        );
      if (dirty & /*size*/
      4)
        icon_changes.size = /*size*/
        ctx2[2];
      icon.$set(icon_changes);
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "translator-success",
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*value*/
      1) {
        toggle_class(
          button,
          "translator-fail",
          /*value*/
          ctx2[0] === false
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let { value = null } = $$props;
  let { text: text2 } = $$props;
  let { size = null } = $$props;
  let { fn } = $$props;
  let running = false;
  const click_handler = async () => {
    $$invalidate(0, value = null);
    $$invalidate(4, running = true);
    $$invalidate(0, value = await fn());
    $$invalidate(4, running = false);
  };
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("text" in $$props2)
      $$invalidate(1, text2 = $$props2.text);
    if ("size" in $$props2)
      $$invalidate(2, size = $$props2.size);
    if ("fn" in $$props2)
      $$invalidate(3, fn = $$props2.fn);
  };
  return [value, text2, size, fn, running, click_handler];
}
var ToggleButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, { value: 0, text: 1, size: 2, fn: 3 });
  }
};
var ToggleButton_default = ToggleButton;

// src/ui/components/ButtonList.svelte
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i].value;
  child_ctx[8] = list[i].text;
  child_ctx[10] = i;
  return child_ctx;
}
function create_if_block3(ctx) {
  let span;
  let icon_1;
  let current;
  let mounted;
  let dispose;
  icon_1 = new Icon_default({
    props: {
      icon: (
        /*icon*/
        ctx[2]
      ),
      size: (
        /*size*/
        ctx[5]
      )
    }
  });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[7](
        /*value*/
        ctx[6],
        /*index*/
        ctx[10]
      )
    );
  }
  return {
    c() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      attr(span, "class", "setting-hotkey-icon");
      set_style(span, "display", "flex");
      attr(
        span,
        "aria-label",
        /*tooltip*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;
      if (!mounted) {
        dispose = listen(span, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_1_changes = {};
      if (dirty & /*icon*/
      4)
        icon_1_changes.icon = /*icon*/
        ctx[2];
      if (dirty & /*size*/
      32)
        icon_1_changes.size = /*size*/
        ctx[5];
      icon_1.$set(icon_1_changes);
      if (!current || dirty & /*tooltip*/
      8) {
        attr(
          span,
          "aria-label",
          /*tooltip*/
          ctx[3]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon_1);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block2(ctx) {
  let span;
  let t0_value = (
    /*text*/
    ctx[8] + ""
  );
  let t0;
  let t1;
  let t2;
  let span_intro;
  let span_outro;
  let current;
  let if_block = !/*disabled*/
  ctx[4] && create_if_block3(ctx);
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      attr(span, "class", "setting-hotkey translator-icon-text");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      if (if_block)
        if_block.m(span, null);
      append(span, t2);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*items*/
      2) && t0_value !== (t0_value = /*text*/
      ctx2[8] + ""))
        set_data(t0, t0_value);
      if (!/*disabled*/
      ctx2[4]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*disabled*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(span, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (span_outro)
            span_outro.end(1);
          span_intro = create_in_transition(span, horizontalSlide, {});
          span_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      if (span_intro)
        span_intro.invalidate();
      if (local) {
        span_outro = create_out_transition(span, horizontalSlide, {});
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if (if_block)
        if_block.d();
      if (detaching && span_outro)
        span_outro.end();
    }
  };
}
function create_fragment8(ctx) {
  let div;
  let div_transition;
  let current;
  let each_value = ensure_array_like(
    /*items*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "setting-command-hotkeys");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*tooltip, onClick, items, icon, size, disabled*/
      63) {
        each_value = ensure_array_like(
          /*items*/
          ctx2[1]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, {}, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, {}, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { onClick } = $$props;
  let { items = [] } = $$props;
  let { value } = $$props;
  let { icon } = $$props;
  let { tooltip = null } = $$props;
  let { disabled = false } = $$props;
  let { size = null } = $$props;
  const click_handler = (value2, index) => onClick(value2, index);
  $$self.$$set = ($$props2) => {
    if ("onClick" in $$props2)
      $$invalidate(0, onClick = $$props2.onClick);
    if ("items" in $$props2)
      $$invalidate(1, items = $$props2.items);
    if ("value" in $$props2)
      $$invalidate(6, value = $$props2.value);
    if ("icon" in $$props2)
      $$invalidate(2, icon = $$props2.icon);
    if ("tooltip" in $$props2)
      $$invalidate(3, tooltip = $$props2.tooltip);
    if ("disabled" in $$props2)
      $$invalidate(4, disabled = $$props2.disabled);
    if ("size" in $$props2)
      $$invalidate(5, size = $$props2.size);
  };
  return [onClick, items, icon, tooltip, disabled, size, value, click_handler];
}
var ButtonList = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, {
      onClick: 0,
      items: 1,
      value: 6,
      icon: 2,
      tooltip: 3,
      disabled: 4,
      size: 5
    });
  }
};
var ButtonList_default = ButtonList;

// node_modules/svelte/src/runtime/animate/index.js
function flip(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t2, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t2 + u * from.width / to.width;
      const sy = t2 + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// node_modules/svelte-dnd-action/dist/index.mjs
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    // TODO - figure out what is so special about right (why the rect is too big)
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = /* @__PURE__ */ new Map();
}
resetIndexesCache();
function resetIndexesCacheForDz(dz) {
  printDebug(function() {
    return "resetting indexes cache for dz";
  });
  dzToShadowIndexToRect["delete"](dz);
}
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        if (scrolled)
          resetIndexesCacheForDz(lastDropZoneFound);
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    var scrolled = scrollIfNeeded$1(mousePosition, document.documentElement);
    if (scrolled)
      resetIndexesCache();
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
function svelteNodeClone(el) {
  var cloned = el.cloneNode(true);
  var values = [];
  var elIsSelect = el.tagName === "SELECT";
  var selects = elIsSelect ? [el] : _toConsumableArray(el.querySelectorAll("select"));
  var _iterator = _createForOfIteratorHelper(selects), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _select = _step.value;
      values.push(_select.value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (selects.length <= 0) {
    return cloned;
  }
  var clonedSelects = elIsSelect ? [cloned] : _toConsumableArray(cloned.querySelectorAll("select"));
  for (var i = 0; i < clonedSelects.length; i++) {
    var select = clonedSelects[i];
    var value = values[i];
    var optionEl = select.querySelector('option[value="'.concat(value, '"'));
    if (optionEl) {
      optionEl.setAttribute("selected", true);
    }
  }
  return cloned;
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = svelteNodeClone(originalElement);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY) {
  copyStylesFromTo(copyFromEl, draggedEl2);
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideElement(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var scheduledForRemovalAfterDrop = [];
var typeToDropZones = /* @__PURE__ */ new Map();
var dzToConfig = /* @__PURE__ */ new Map();
var elToMouseDownListener = /* @__PURE__ */ new WeakMap();
function registerDropZone(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  typeToDropZones.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones["delete"](type);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function scheduleDZForRemovalAfterDrop(dz, destroy) {
  scheduledForRemovalAfterDrop.push({
    dz,
    destroy
  });
  window.requestAnimationFrame(function() {
    hideElement(dz);
    document.body.appendChild(dz);
  });
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  if (scheduledForRemovalAfterDrop.length) {
    printDebug(function() {
      return ["will destroy zones that were removed during drag", scheduledForRemovalAfterDrop];
    });
    scheduledForRemovalAfterDrop.forEach(function(_ref) {
      var dz = _ref.dz, destroy = _ref.destroy;
      destroy();
      dz.remove();
    });
    scheduledForRemovalAfterDrop = [];
  }
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var initialized = false;
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = /* @__PURE__ */ new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideElement(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? void 0 : _ref2$items, _ref2$flipDurationMs = _ref2.flipDurationMs, dropAnimationDurationMs = _ref2$flipDurationMs === void 0 ? 0 : _ref2$flipDurationMs, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$morphDisabled = _ref2.morphDisabled, morphDisabled = _ref2$morphDisabled === void 0 ? false : _ref2$morphDisabled, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$transformDragge = _ref2.transformDraggedElement, transformDraggedElement = _ref2$transformDragge === void 0 ? function() {
    } : _ref2$transformDragge, _ref2$centreDraggedOn = _ref2.centreDraggedOnCursor, centreDraggedOnCursor = _ref2$centreDraggedOn === void 0 ? false : _ref2$centreDraggedOn;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    for (var idx = 0; idx < node.children.length; idx++) {
      var draggableEl = node.children[idx];
      styleDraggable(draggableEl, dragDisabled);
      if (idx === shadowElIdx) {
        config.transformDraggedElement(draggedEl, draggedElData, idx);
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y);
        }
        decorateShadowEl(draggableEl);
        continue;
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx);
      if (!initialized) {
        initialized = true;
      }
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      function destroyDz() {
        printDebug(function() {
          return "pointer dndzone will destroy";
        });
        unregisterDropZone(node, dzToConfig.get(node).type);
        dzToConfig["delete"](node);
      }
      if (isWorkingOnPreviousDrag) {
        printDebug(function() {
          return "pointer dndzone will be scheduled for destruction";
        });
        scheduleDZForRemovalAfterDrop(node, destroyDz);
      } else {
        destroyDz();
      }
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  if (alertsDiv) {
    return;
  }
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function destroyAria() {
  if (isOnServer || !alertsDiv)
    return;
  Object.keys(ID_TO_INSTRUCTION).forEach(function(id) {
    var _document$getElementB;
    return (_document$getElementB = document.getElementById(id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();
  });
  alertsDiv.remove();
  alertsDiv = void 0;
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  if (isOnServer)
    return;
  if (!alertsDiv) {
    initAriaOnBrowser();
  }
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = /* @__PURE__ */ new WeakSet();
var elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
var elToFocusListeners = /* @__PURE__ */ new WeakMap();
var dzToHandles = /* @__PURE__ */ new Map();
var dzToConfig$1 = /* @__PURE__ */ new Map();
var typeToDropZones$1 = /* @__PURE__ */ new Map();
var INSTRUCTION_IDs$1;
function registerDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    INSTRUCTION_IDs$1 = initAria();
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1["delete"](type);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
    INSTRUCTION_IDs$1 = void 0;
    destroyAria();
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
var _excluded = ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"];
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs2 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, _excluded);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// src/ui/components/DragAndDrop.svelte
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  child_ctx[15] = i;
  return child_ctx;
}
function create_each_block3(key_1, ctx) {
  let div;
  let icon;
  let t2;
  let div_class_value;
  let div_aria_label_value;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: {
      icon: (
        /*item*/
        ctx[13].icon[
          /*dragDisabled*/
          ctx[4] ? (
            /*button_states*/
            ctx[1][
              /*index*/
              ctx[15]
            ]
          ) : 0
        ]
      )
    }
  });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[11](
        /*index*/
        ctx[15],
        /*item*/
        ctx[13]
      )
    );
  }
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t2 = space();
      attr(div, "class", div_class_value = `translator-flex-row-element ${/*itemstyle*/
      ctx[2]}`);
      attr(div, "aria-label", div_aria_label_value = /*item*/
      ctx[13].tooltip[
        /*dragDisabled*/
        ctx[4] ? (
          /*button_states*/
          ctx[1][
            /*index*/
            ctx[15]
          ]
        ) : 0
      ]);
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      append(div, t2);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty & /*items, dragDisabled, button_states*/
      19)
        icon_changes.icon = /*item*/
        ctx[13].icon[
          /*dragDisabled*/
          ctx[4] ? (
            /*button_states*/
            ctx[1][
              /*index*/
              ctx[15]
            ]
          ) : 0
        ];
      icon.$set(icon_changes);
      if (!current || dirty & /*itemstyle*/
      4 && div_class_value !== (div_class_value = `translator-flex-row-element ${/*itemstyle*/
      ctx[2]}`)) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & /*items, dragDisabled, button_states*/
      19 && div_aria_label_value !== (div_aria_label_value = /*item*/
      ctx[13].tooltip[
        /*dragDisabled*/
        ctx[4] ? (
          /*button_states*/
          ctx[1][
            /*index*/
            ctx[15]
          ]
        ) : 0
      ])) {
        attr(div, "aria-label", div_aria_label_value);
      }
    },
    r() {
      rect = div.getBoundingClientRect();
    },
    f() {
      fix_position(div);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div, rect, flip, { duration: flipDurationMs });
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment9(ctx) {
  let section;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let section_class_value;
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*items*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*item*/
    ctx2[13].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context3(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
  }
  return {
    c() {
      section = element("section");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(
        section,
        "aria-label",
        /*tooltip*/
        ctx[3]
      );
      attr(section, "class", section_class_value = /*$$props*/
      ctx[9].class);
    },
    m(target, anchor) {
      insert(target, section, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(section, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, section, {
            items: (
              /*items*/
              ctx[0]
            ),
            flipDurationMs,
            dropTargetStyle: (
              /*dropTargetStyle*/
              ctx[6]
            ),
            dropFromOthersDisabled: (
              /*dropFromOthersDisabled*/
              ctx[5]
            ),
            dragDisabled: (
              /*dragDisabled*/
              ctx[4]
            )
          })),
          listen(
            section,
            "consider",
            /*handleDndConsider*/
            ctx[7]
          ),
          listen(
            section,
            "finalize",
            /*handleDndFinalize*/
            ctx[8]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*itemstyle, items, dragDisabled, button_states*/
      23) {
        each_value = ensure_array_like(
          /*items*/
          ctx2[0]
        );
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, section, fix_and_outro_and_destroy_block, create_each_block3, null, get_each_context3);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (!current || dirty & /*tooltip*/
      8) {
        attr(
          section,
          "aria-label",
          /*tooltip*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*$$props*/
      512 && section_class_value !== (section_class_value = /*$$props*/
      ctx2[9].class)) {
        attr(section, "class", section_class_value);
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & /*items, dropFromOthersDisabled, dragDisabled*/
      49)
        dndzone_action.update.call(null, {
          items: (
            /*items*/
            ctx2[0]
          ),
          flipDurationMs,
          dropTargetStyle: (
            /*dropTargetStyle*/
            ctx2[6]
          ),
          dropFromOthersDisabled: (
            /*dropFromOthersDisabled*/
            ctx2[5]
          ),
          dragDisabled: (
            /*dragDisabled*/
            ctx2[4]
          )
        });
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(section);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
var flipDurationMs = 300;
function instance9($$self, $$props, $$invalidate) {
  let { items = [] } = $$props;
  let { itemstyle = "" } = $$props;
  let { role = "regular" } = $$props;
  let { tooltip } = $$props;
  let { dragDisabled } = $$props;
  let ignoring_dnd_events = false;
  let dropFromOthersDisabled = false;
  let { button_states = items.map(() => 0) } = $$props;
  const dropTargetStyle = {
    "outline": "2px dashed var(--color-accent)"
  };
  function handleDndConsider(e) {
    if (role === "source") {
      const { trigger, id } = e.detail.info;
      if (trigger === TRIGGERS.DRAG_STARTED) {
        const idx = items.findIndex((item) => item.id === id);
        const new_id = `${id}_copy${Math.random() * 1e6}`;
        e.detail.items = e.detail.items.filter((item) => !item[SHADOW_ITEM_MARKER_PROPERTY_NAME]);
        e.detail.items.splice(idx, 0, { ...items[idx], id: new_id });
        $$invalidate(0, items = e.detail.items);
        ignoring_dnd_events = true;
      } else if (!ignoring_dnd_events) {
        $$invalidate(0, items = e.detail.items);
      } else {
        $$invalidate(0, items = [...items]);
      }
    } else {
      $$invalidate(0, items = e.detail.items);
      $$invalidate(1, button_states = items ? items.map(() => 0) : []);
    }
  }
  function handleDndFinalize(e) {
    if (role === "trashcan") {
      $$invalidate(0, items = []);
    } else if (role === "source") {
      if (!ignoring_dnd_events) {
        $$invalidate(0, items = e.detail.items);
      } else {
        $$invalidate(0, items = [...items]);
        ignoring_dnd_events = false;
      }
    } else {
      $$invalidate(0, items = e.detail.items);
      $$invalidate(1, button_states = items ? items.map(() => 0) : items);
    }
  }
  const click_handler = (index, item) => {
    if (dragDisabled) {
      $$invalidate(1, button_states[index] = (button_states[index] + 1) % item.tooltip.length, button_states);
    }
  };
  $$self.$$set = ($$new_props) => {
    $$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("items" in $$new_props)
      $$invalidate(0, items = $$new_props.items);
    if ("itemstyle" in $$new_props)
      $$invalidate(2, itemstyle = $$new_props.itemstyle);
    if ("role" in $$new_props)
      $$invalidate(10, role = $$new_props.role);
    if ("tooltip" in $$new_props)
      $$invalidate(3, tooltip = $$new_props.tooltip);
    if ("dragDisabled" in $$new_props)
      $$invalidate(4, dragDisabled = $$new_props.dragDisabled);
    if ("button_states" in $$new_props)
      $$invalidate(1, button_states = $$new_props.button_states);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*dragDisabled, role*/
    1040) {
      $:
        $$invalidate(5, dropFromOthersDisabled = dragDisabled || role === "source");
    }
  };
  $$props = exclude_internal_props($$props);
  return [
    items,
    button_states,
    itemstyle,
    tooltip,
    dragDisabled,
    dropFromOthersDisabled,
    dropTargetStyle,
    handleDndConsider,
    handleDndFinalize,
    $$props,
    role,
    click_handler
  ];
}
var DragAndDrop = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, {
      items: 0,
      itemstyle: 2,
      role: 10,
      tooltip: 3,
      dragDisabled: 4,
      button_states: 1
    });
  }
};
var DragAndDrop_default = DragAndDrop;

// src/util.ts
var import_obsidian3 = require("obsidian");
var DefaultDict = class {
  constructor(init2 = {}, value) {
    return new Proxy(init2, {
      get: (target, name) => name in target ? target[name] : value
    });
  }
};
function toTitleCase(str) {
  return str.replace(/\w\S*/g, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
}
function array_cmp(a1, a2) {
  if (a1 === a2)
    return true;
  if (a1 == null || a2 == null)
    return false;
  let i = a1.length;
  if (i !== a2.length)
    return false;
  while (i--)
    if (a1[i] !== a2[i])
      return false;
  return true;
}
function regexLastIndexOf(searchString, regex, position) {
  regex = regex.global ? regex : new RegExp(regex.source, "g" + (regex.ignoreCase ? "i" : "") + (regex.multiline ? "m" : ""));
  if (position == null)
    position = searchString.length;
  else if (position < 0)
    position = 0;
  const stringToWorkWith = searchString.substring(0, position + 1);
  let lastIndexOf = -1;
  let nextStop = 0;
  let result;
  while ((result = regex.exec(stringToWorkWith)) != null) {
    lastIndexOf = result.index;
    regex.lastIndex = ++nextStop;
  }
  return lastIndexOf;
}
function rateLimit(limitCount, interval, unique, default_timeout, fn) {
  const fifo = [];
  const currently_running = [];
  let running = false;
  function next_call(args = []) {
    setTimeout(function() {
      if (fifo.length)
        next_call(fifo.shift());
      else
        running = false;
    }, interval);
    if (unique) {
      setTimeout(function() {
        if (!fifo)
          currently_running.length = 0;
        else
          currently_running.shift();
      }, args[2] || default_timeout);
    }
    fn.apply(args[0], args[1]);
  }
  return function rate_limited_function() {
    const ctx = this;
    const args = Array.prototype.slice.call(arguments);
    if (!limitCount || fifo.length < limitCount) {
      if (args[2]) {
        fn.apply(ctx, args);
      } else {
        if (unique && !currently_running.find((x) => array_cmp(x, args)) || !unique) {
          if (unique)
            currently_running.push(args);
          fifo.push([ctx, args]);
        }
        if (!running && fifo.length) {
          running = true;
          next_call(fifo.shift());
        }
      }
    }
  };
}
function S4() {
  return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
}
function generateIdentifier(length = 16) {
  let str = "";
  for (let i = 0; i < length / 4; i++)
    str += S4();
  return str.substring(0, length);
}
async function aesGcmEncrypt(plaintext, password2) {
  if (!password2 || !plaintext)
    return plaintext;
  const pwUtf8 = new TextEncoder().encode(password2);
  const pwHash = await crypto.subtle.digest("SHA-256", pwUtf8);
  const iv = crypto.getRandomValues(new Uint8Array(12));
  const alg = { name: "AES-GCM", iv };
  const key = await crypto.subtle.importKey("raw", pwHash, alg, false, ["encrypt"]);
  const ptUint8 = new TextEncoder().encode(plaintext);
  const ctBuffer = await crypto.subtle.encrypt(alg, key, ptUint8);
  const ctArray = Array.from(new Uint8Array(ctBuffer));
  const ctStr = ctArray.map((byte) => String.fromCharCode(byte)).join("");
  const ctBase64 = btoa(ctStr);
  const ivHex = Array.from(iv).map((b) => ("00" + b.toString(16)).slice(-2)).join("");
  return ivHex + ctBase64;
}
async function aesGcmDecrypt(ciphertext, password2) {
  try {
    if (!password2 || !ciphertext)
      return ciphertext;
    const pwUtf8 = new TextEncoder().encode(password2);
    const pwHash = await crypto.subtle.digest("SHA-256", pwUtf8);
    const iv = ciphertext.slice(0, 24).match(/.{2}/g).map((byte) => parseInt(byte, 16));
    const alg = { name: "AES-GCM", iv: new Uint8Array(iv) };
    const key = await crypto.subtle.importKey("raw", pwHash, alg, false, ["decrypt"]);
    const ctStr = atob(ciphertext.slice(24));
    const ctUint8 = new Uint8Array(new ArrayBuffer(ctStr.length));
    for (let i = 0; i < ctStr.length; i++) {
      ctUint8[i] = ctStr.charCodeAt(i);
    }
    const plainBuffer = await crypto.subtle.decrypt(alg, key, ctUint8);
    const plaintext = new TextDecoder().decode(plainBuffer);
    return plaintext;
  } catch (e) {
    console.log("Error decrypting: password is incorrect");
    return ciphertext;
  }
}
function humanFileSize(bytes, si = false, dp = 1) {
  const thresh = si ? 1e3 : 1024;
  if (Math.abs(bytes) < thresh)
    return bytes + " B";
  const units = si ? ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"] : ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
  let u = -1;
  const r = 10 ** dp;
  while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1) {
    bytes /= thresh;
    ++u;
  }
  return bytes.toFixed(dp) + " " + units[u];
}
function nested_object_assign(source, target, ignored_keys) {
  Object.keys(source).forEach((key) => {
    const s_val = source[key];
    const t_val = target[key];
    if (t_val && ignored_keys.has(key) || !ignored_keys.has(key)) {
      if (t_val) {
        if (!Array.isArray(t_val) && t_val instanceof Object && s_val instanceof Object) {
          nested_object_assign(s_val, t_val, ignored_keys);
        }
      } else {
        if (s_val instanceof Object && !(s_val instanceof Array))
          target[key] = Object.fromEntries(Object.entries(s_val).filter(([k, v]) => !ignored_keys.has(k)));
        else
          target[key] = s_val;
      }
    }
  });
  return target;
}
var modifier_resolver = import_obsidian3.Platform.isSafari ? {
  "Mod": "\u2318",
  "Ctrl": "Cmd",
  "Meta": "Cmd",
  "Alt": "\u2325",
  "Shift": "Shift"
} : {
  "Mod": "Ctrl",
  "Ctrl": "Ctrl",
  "Meta": "Win",
  "Alt": "Alt",
  "Shift": "Shift"
};
function getHotKeyString(hotkey) {
  return `${!hotkey.modifiers.length ? "" : `${hotkey.modifiers.map((mod) => modifier_resolver[mod]).join(" + ")} + `}${hotkey.key}`;
}
var iso639_3to1 = {
  "ach": "ace",
  "afr": "af",
  "aka": "ak",
  "alb": "sq",
  "amh": "am",
  "ara": "ar",
  "arg": "an",
  "arm": "hy",
  "arq": "arq",
  "asm": "as",
  "ast": "ast",
  "aym": "ay",
  "aze": "az",
  "bak": "ba",
  "bal": "bal",
  "baq": "eu",
  "bel": "be",
  "bem": "bem",
  "ben": "bn",
  "ber": "ber",
  "bho": "bho",
  "bis": "bi",
  "bli": "bli",
  "bos": "bs",
  "bre": "br",
  "bul": "bg",
  "bur": "my",
  "cat": "ca",
  "ceb": "ceb",
  "chr": "chr",
  "cht": "zh-hant",
  "chv": "cv",
  "cor": "kw",
  "cos": "co",
  "cre": "cr",
  "cri": "crh",
  "cs": "cs",
  "dan": "da",
  "de": "de",
  "div": "dv",
  "el": "el",
  "en": "en",
  "eno": "ang",
  "epo": "eo",
  "est": "et",
  "fao": "fo",
  "fil": "fil",
  "fin": "fi",
  "fra": "fr",
  "fri": "fur",
  "frm": "frm",
  "frn": "fr-CA",
  "fry": "fy",
  "ful": "ff",
  "geo": "ka",
  "gla": "gd",
  "gle": "ga",
  "glg": "gl",
  "glv": "gv",
  "gra": "grc",
  "grn": "gn",
  "guj": "gu",
  "hak": "cnh",
  "hau": "ha",
  "haw": "haw",
  "heb": "he",
  "hi": "hi",
  "hil": "hil",
  "hkm": "km",
  "hmn": "hmn",
  "hrv": "hr",
  "ht": "ht",
  "hu": "hu",
  "hup": "hup",
  "ibo": "ig",
  "ice": "is",
  "id": "id",
  "ido": "io",
  "iku": "iu",
  "ina": "ia",
  "ing": "inh",
  "ir": "pes",
  "it": "it",
  "jav": "jv",
  "jp": "ja",
  "kab": "kab",
  "kah": "csb",
  "kal": "kl",
  "kan": "kn",
  "kas": "ks",
  "kau": "kr",
  "kin": "rw",
  "kir": "ky",
  "kli": "tlh",
  "kok": "kok",
  "kon": "kg",
  "kor": "ko",
  "kur": "ku",
  "lag": "ltg",
  "lao": "lo",
  "lat": "la",
  "lav": "lv",
  "lim": "li",
  "lin": "ln",
  "lit": "lt",
  "log": "nds",
  "loj": "jbo",
  "los": "dsb",
  "ltz": "lb",
  "lug": "lg",
  "mac": "mk",
  "mah": "mh",
  "mai": "mai",
  "mal": "ml",
  "mao": "mi",
  "mar": "mr",
  "mau": "mfe",
  "may": "ms",
  "mg": "mg",
  "mlt": "mt",
  "mot": "cnr",
  "nbl": "nr",
  "nea": "nap",
  "nep": "ne",
  "nl": "nl",
  "nno": "nn",
  "nob": "nb",
  "nor": "no",
  "nqo": "nqo",
  "nya": "ny",
  "oci": "oc",
  "oji": "oj",
  "ori": "or",
  "orm": "om",
  "oss": "os",
  "pam": "pam",
  "pan": "pa",
  "pap": "pap",
  "ped": "nso",
  "per": "fa",
  "pl": "pl",
  "pot": "pt-br",
  "pt": "pt",
  "pus": "ps",
  "que": "qu",
  "ro": "rom",
  "roh": "rm",
  "rom": "ro",
  "ru": "ru",
  "ruy": "rue",
  "san": "sa",
  "sec": "sh",
  "sha": "shn",
  "sil": "sli",
  "sin": "si",
  "sk": "sk",
  "slo": "sl",
  "sm": "sm",
  "sme": "se",
  "sna": "sn",
  "snd": "sd",
  "sol": "son",
  "som": "so",
  "sot": "st",
  "spa": "es",
  "src": "sr-CYRL",
  "srd": "sc",
  "srp": "sr",
  "sun": "su",
  "swa": "sw",
  "swe": "sv",
  "syr": "syr",
  "tam": "ta",
  "tat": "tt",
  "tel": "te",
  "tet": "tet",
  "tgk": "tg",
  "tgl": "tl",
  "th": "th",
  "tir": "ti",
  "tr": "tr",
  "tso": "ts",
  "tua": "aeb",
  "tuk": "tk",
  "twi": "tw",
  "ukr": "uk",
  "ups": "hsb",
  "urd": "ur",
  "ven": "ve",
  "vie": "vi",
  "wel": "cy",
  "wln": "wa",
  "wol": "wo",
  "wyw": "lzh",
  "xho": "xh",
  "yid": "yi",
  "yor": "yo",
  "yue": "yue",
  "zaz": "zza",
  "zh": "zh",
  "zul": "zu"
};
var iso639_1to3 = {
  "ace": "ach",
  "af": "afr",
  "ak": "aka",
  "sq": "alb",
  "am": "amh",
  "ar": "ara",
  "an": "arg",
  "hy": "arm",
  "arq": "arq",
  "as": "asm",
  "ast": "ast",
  "ay": "aym",
  "az": "aze",
  "ba": "bak",
  "bal": "bal",
  "eu": "baq",
  "be": "bel",
  "bem": "bem",
  "bn": "ben",
  "ber": "ber",
  "bho": "bho",
  "bi": "bis",
  "bli": "bli",
  "bs": "bos",
  "br": "bre",
  "bg": "bul",
  "my": "bur",
  "ca": "cat",
  "ceb": "ceb",
  "chr": "chr",
  "zh-hant": "cht",
  "cv": "chv",
  "kw": "cor",
  "co": "cos",
  "cr": "cre",
  "crh": "cri",
  "cs": "cs",
  "da": "dan",
  "de": "de",
  "dsb": "los",
  "dv": "div",
  "el": "el",
  "en": "en",
  "ang": "eno",
  "eo": "epo",
  "et": "est",
  "fo": "fao",
  "fil": "fil",
  "fi": "fin",
  "fr": "fra",
  "fur": "fri",
  "frm": "frm",
  "fr-CA": "frn",
  "fy": "fry",
  "ff": "ful",
  "ka": "geo",
  "gd": "gla",
  "ga": "gle",
  "gl": "glg",
  "gv": "glv",
  "grc": "gra",
  "gn": "grn",
  "gu": "guj",
  "cnh": "hak",
  "ha": "hau",
  "haw": "haw",
  "he": "heb",
  "hi": "hi",
  "hil": "hil",
  "km": "hkm",
  "hmn": "hmn",
  "hr": "hrv",
  "ht": "ht",
  "hu": "hu",
  "hup": "hup",
  "ig": "ibo",
  "is": "ice",
  "id": "id",
  "io": "ido",
  "iu": "iku",
  "ia": "ina",
  "inh": "ing",
  "pes": "ir",
  "it": "it",
  "jv": "jav",
  "ja": "jp",
  "kab": "kab",
  "csb": "kah",
  "kl": "kal",
  "kn": "kan",
  "ks": "kas",
  "kr": "kau",
  "rw": "kin",
  "ky": "kir",
  "tlh": "kli",
  "kok": "kok",
  "kg": "kon",
  "ko": "kor",
  "ku": "kur",
  "ltg": "lag",
  "lo": "lao",
  "la": "lat",
  "lv": "lav",
  "li": "lim",
  "ln": "lin",
  "lt": "lit",
  "nds": "log",
  "jbo": "loj",
  "lb": "ltz",
  "lg": "lug",
  "mk": "mac",
  "mh": "mah",
  "mai": "mai",
  "ml": "mal",
  "mi": "mao",
  "mr": "mar",
  "mfe": "mau",
  "ms": "may",
  "mg": "mg",
  "mt": "mlt",
  "cnr": "mot",
  "nr": "nbl",
  "nap": "nea",
  "ne": "nep",
  "nl": "nl",
  "nn": "nno",
  "nb": "nob",
  "no": "nor",
  "nqo": "nqo",
  "ny": "nya",
  "oc": "oci",
  "oj": "oji",
  "or": "ori",
  "om": "orm",
  "os": "oss",
  "pam": "pam",
  "pa": "pan",
  "pap": "pap",
  "nso": "ped",
  "fa": "per",
  "pl": "pl",
  "pt-br": "pot",
  "pt": "pt",
  "ps": "pus",
  "qu": "que",
  "rom": "ro",
  "rm": "roh",
  "ro": "rom",
  "ru": "ru",
  "rue": "ruy",
  "sa": "san",
  "sh": "sec",
  "shn": "sha",
  "sli": "sil",
  "si": "sin",
  "sk": "sk",
  "sl": "slo",
  "sm": "sm",
  "se": "sme",
  "sn": "sna",
  "sd": "snd",
  "son": "sol",
  "so": "som",
  "st": "sot",
  "es": "spa",
  "sr-CYRL": "src",
  "sc": "srd",
  "sr": "srp",
  "su": "sun",
  "sw": "swa",
  "sv": "swe",
  "syr": "syr",
  "ta": "tam",
  "tt": "tat",
  "te": "tel",
  "tet": "tet",
  "tg": "tgk",
  "tl": "tgl",
  "th": "th",
  "ti": "tir",
  "tr": "tr",
  "ts": "tso",
  "aeb": "tua",
  "tk": "tuk",
  "tw": "twi",
  "uk": "ukr",
  "hsb": "ups",
  "ur": "urd",
  "ve": "ven",
  "vi": "vie",
  "cy": "wel",
  "wa": "wln",
  "wo": "wol",
  "lzh": "wyw",
  "xh": "xho",
  "yi": "yid",
  "yo": "yor",
  "yue": "yue",
  "zza": "zaz",
  "zh": "zh",
  "zu": "zul"
};

// src/l10n/index.ts
var import_obsidian4 = require("obsidian");

// src/l10n/locale/ar.ts
var ar_default = {
  "aa": "\u0627\u0644\u0623\u0641\u0627\u0631\u064A\u0629",
  "ab": "\u0627\u0644\u0623\u0628\u062E\u0627\u0632\u064A\u0629",
  "ace": "\u0627\u0644\u0623\u062A\u0634\u064A\u0646\u064A\u0632\u064A\u0629",
  "ach": "\u0627\u0644\u0623\u0643\u0648\u0644\u064A\u0629",
  "ada": "\u0627\u0644\u0623\u062F\u0627\u0646\u062C\u0645\u064A\u0629",
  "ady": "\u0627\u0644\u0623\u062F\u064A\u063A\u0629",
  "ae": "\u0627\u0644\u0623\u0641\u0633\u062A\u064A\u0629",
  "af": "\u0627\u0644\u0623\u0641\u0631\u064A\u0642\u0627\u0646\u064A\u0629",
  "afh": "\u0627\u0644\u0623\u0641\u0631\u064A\u0647\u064A\u0644\u064A\u0629",
  "agq": "\u0627\u0644\u0623\u063A\u0645",
  "ain": "\u0627\u0644\u0622\u064A\u0646\u0648\u064A\u0629",
  "ak": "\u0627\u0644\u0623\u0643\u0627\u0646\u064A\u0629",
  "akk": "\u0627\u0644\u0623\u0643\u0627\u062F\u064A\u0629",
  "ale": "\u0627\u0644\u0623\u0644\u064A\u0648\u062A\u064A\u0629",
  "alt": "\u0627\u0644\u0623\u0644\u0637\u0627\u0626\u064A\u0629 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629",
  "am": "\u0627\u0644\u0623\u0645\u0647\u0631\u064A\u0629",
  "an": "\u0627\u0644\u0623\u0631\u0627\u063A\u0648\u0646\u064A\u0629",
  "ang": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "anp": "\u0627\u0644\u0623\u0646\u062C\u064A\u0643\u0627",
  "ar": "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
  "ar-001": "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0641\u0635\u062D\u0649 \u0627\u0644\u062D\u062F\u064A\u062B\u0629",
  "arc": "\u0627\u0644\u0622\u0631\u0627\u0645\u064A\u0629",
  "arn": "\u0627\u0644\u0645\u0627\u0628\u0648\u062F\u0648\u0646\u063A\u0648\u0646\u064A\u0629",
  "arp": "\u0627\u0644\u0623\u0631\u0627\u0628\u0627\u0647\u0648",
  "ars": "\u0627\u0644\u0644\u0647\u062C\u0629 \u0627\u0644\u0646\u062C\u062F\u064A\u0629",
  "arw": "\u0627\u0644\u0623\u0631\u0627\u0648\u0627\u0643\u064A\u0629",
  "as": "\u0627\u0644\u0623\u0633\u0627\u0645\u064A\u0629",
  "asa": "\u0627\u0644\u0622\u0633\u0648",
  "ast": "\u0627\u0644\u0623\u0633\u062A\u0631\u064A\u0629",
  "av": "\u0627\u0644\u0623\u0648\u0627\u0631\u064A\u0629",
  "awa": "\u0627\u0644\u0623\u0648\u0627\u062F\u064A\u0629",
  "ay": "\u0627\u0644\u0623\u064A\u0645\u0627\u0631\u0627",
  "az": "\u0627\u0644\u0623\u0630\u0631\u0628\u064A\u062C\u0627\u0646\u064A\u0629",
  "ba": "\u0627\u0644\u0628\u0627\u0634\u0643\u064A\u0631\u064A\u0629",
  "bal": "\u0627\u0644\u0628\u0644\u0648\u0634\u064A\u0629",
  "ban": "\u0627\u0644\u0628\u0627\u0644\u064A\u0646\u064A\u0629",
  "bas": "\u0627\u0644\u0628\u0627\u0633\u0627",
  "bax": "\u0628\u0627\u0645\u0646",
  "bbj": "\u0644\u063A\u0629 \u0627\u0644\u063A\u0648\u0645\u0627\u0644\u0627",
  "be": "\u0627\u0644\u0628\u064A\u0644\u0627\u0631\u0648\u0633\u064A\u0629",
  "bej": "\u0627\u0644\u0628\u064A\u062C\u0627",
  "bem": "\u0627\u0644\u0628\u064A\u0645\u0628\u0627",
  "bez": "\u0628\u064A\u0646\u0627",
  "bfd": "\u0644\u063A\u0629 \u0627\u0644\u0628\u0627\u0641\u0648\u062A",
  "bg": "\u0627\u0644\u0628\u0644\u063A\u0627\u0631\u064A\u0629",
  "bgn": "\u0627\u0644\u0628\u0644\u0648\u0634\u064A\u0629 \u0627\u0644\u063A\u0631\u0628\u064A\u0629",
  "bho": "\u0627\u0644\u0628\u0647\u0648\u062C\u0628\u0648\u0631\u064A\u0629",
  "bi": "\u0627\u0644\u0628\u064A\u0633\u0644\u0627\u0645\u064A\u0629",
  "bik": "\u0627\u0644\u0628\u064A\u0643\u0648\u0644\u064A\u0629",
  "bin": "\u0627\u0644\u0628\u064A\u0646\u064A\u0629",
  "bkm": "\u0644\u063A\u0629 \u0627\u0644\u0643\u0648\u0645",
  "bla": "\u0627\u0644\u0633\u064A\u0643\u0633\u064A\u0643\u064A\u0629",
  "bm": "\u0627\u0644\u0628\u0627\u0645\u0628\u0627\u0631\u0627",
  "bn": "\u0627\u0644\u0628\u0646\u063A\u0627\u0644\u064A\u0629",
  "bo": "\u0627\u0644\u062A\u0628\u062A\u064A\u0629",
  "br": "\u0627\u0644\u0628\u0631\u064A\u062A\u0648\u0646\u064A\u0629",
  "bra": "\u0627\u0644\u0628\u0631\u0627\u062C\u064A\u0629",
  "brx": "\u0627\u0644\u0628\u0648\u062F\u0648",
  "bs": "\u0627\u0644\u0628\u0648\u0633\u0646\u064A\u0629",
  "bss": "\u0623\u0643\u0648\u0633",
  "bua": "\u0627\u0644\u0628\u0631\u064A\u0627\u062A\u064A\u0629",
  "bug": "\u0627\u0644\u0628\u062C\u064A\u0646\u064A\u0632\u064A\u0629",
  "bum": "\u0644\u063A\u0629 \u0627\u0644\u0628\u0648\u0644\u0648",
  "byn": "\u0627\u0644\u0628\u0644\u064A\u0646\u064A\u0629",
  "byv": "\u0644\u063A\u0629 \u0627\u0644\u0645\u064A\u062F\u0648\u0645\u0628\u0627",
  "ca": "\u0627\u0644\u0643\u062A\u0627\u0644\u0627\u0646\u064A\u0629",
  "cad": "\u0627\u0644\u0643\u0627\u062F\u0648",
  "car": "\u0627\u0644\u0643\u0627\u0631\u064A\u0628\u064A\u0629",
  "cay": "\u0627\u0644\u0643\u0627\u064A\u0648\u062C\u064A\u0629",
  "cch": "\u0627\u0644\u0623\u062A\u0633\u0627\u0645",
  "ccp": "\u062A\u0634\u0627\u0643\u0645\u0627",
  "ce": "\u0627\u0644\u0634\u064A\u0634\u0627\u0646\u064A\u0629",
  "ceb": "\u0627\u0644\u0633\u064A\u0628\u064A\u0648\u0627\u0646\u064A\u0629",
  "cgg": "\u062A\u0634\u064A\u063A\u0627",
  "ch": "\u0627\u0644\u062A\u0634\u0627\u0645\u0648\u0631\u0648",
  "chb": "\u0627\u0644\u062A\u0634\u064A\u0628\u0634\u0627",
  "chg": "\u0627\u0644\u062A\u0634\u0627\u062C\u0627\u062A\u0627\u064A",
  "chk": "\u0627\u0644\u062A\u0634\u0643\u064A\u0632\u064A\u0629",
  "chm": "\u0627\u0644\u0645\u0627\u0631\u064A",
  "chn": "\u0627\u0644\u0634\u064A\u0646\u0648\u0643 \u062C\u0627\u0631\u062C\u0648\u0646",
  "cho": "\u0627\u0644\u0634\u0648\u0643\u062A\u0648",
  "chp": "\u0627\u0644\u0634\u064A\u0628\u0627\u0648\u0627\u064A\u0627\u0646",
  "chr": "\u0627\u0644\u0634\u064A\u0631\u0648\u0643\u064A",
  "chy": "\u0627\u0644\u0634\u0627\u064A\u0627\u0646",
  "ckb": "\u0627\u0644\u0633\u0648\u0631\u0627\u0646\u064A\u0629 \u0627\u0644\u0643\u0631\u062F\u064A\u0629",
  "co": "\u0627\u0644\u0643\u0648\u0631\u0633\u064A\u0643\u064A\u0629",
  "cop": "\u0627\u0644\u0642\u0628\u0637\u064A\u0629",
  "cr": "\u0627\u0644\u0643\u0631\u0649",
  "crh": "\u0644\u063A\u0629 \u062A\u062A\u0627\u0631 \u0627\u0644\u0642\u0631\u0645",
  "crs": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0643\u0631\u064A\u0648\u0644\u064A\u0629 \u0627\u0644\u0633\u064A\u0634\u064A\u0644\u064A\u0629",
  "cs": "\u0627\u0644\u062A\u0634\u064A\u0643\u064A\u0629",
  "csb": "\u0627\u0644\u0643\u0627\u0634\u0628\u0627\u064A\u0627\u0646",
  "cu": "\u0633\u0644\u0627\u0641\u064A\u0629 \u0643\u0646\u0633\u064A\u0629",
  "cv": "\u0627\u0644\u062A\u0634\u0648\u0641\u0627\u0634\u064A",
  "cy": "\u0627\u0644\u0648\u064A\u0644\u0632\u064A\u0629",
  "da": "\u0627\u0644\u062F\u0627\u0646\u0645\u0631\u0643\u064A\u0629",
  "dak": "\u0627\u0644\u062F\u0627\u0643\u0648\u062A\u0627",
  "dar": "\u0627\u0644\u062F\u0627\u0631\u062C\u0648\u0627",
  "dav": "\u062A\u064A\u062A\u0627",
  "de": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629",
  "de-AT": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0646\u0645\u0633\u0627\u0648\u064A\u0629",
  "de-CH": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627 \u0627\u0644\u0633\u0648\u064A\u0633\u0631\u064A\u0629",
  "del": "\u0627\u0644\u062F\u064A\u0644\u0648\u064A\u0631",
  "den": "\u0627\u0644\u0633\u0644\u0627\u0641\u064A\u0629",
  "dgr": "\u0627\u0644\u062F\u0648\u062C\u0631\u064A\u0628",
  "din": "\u0627\u0644\u062F\u0646\u0643\u0627",
  "dje": "\u0627\u0644\u0632\u0627\u0631\u0645\u064A\u0629",
  "doi": "\u0627\u0644\u062F\u0648\u062C\u0631\u064A\u0629",
  "dsb": "\u0635\u0648\u0631\u0628\u064A\u0627 \u0627\u0644\u0633\u0641\u0644\u0649",
  "dua": "\u0627\u0644\u062F\u064A\u0648\u0644\u0627",
  "dum": "\u0627\u0644\u0647\u0648\u0644\u0646\u062F\u064A\u0629 \u0627\u0644\u0648\u0633\u0637\u0649",
  "dv": "\u0627\u0644\u0645\u0627\u0644\u062F\u064A\u0641\u064A\u0629",
  "dyo": "\u062C\u0648\u0644\u0627 \u0641\u0648\u0646\u064A\u0627",
  "dyu": "\u0627\u0644\u062F\u0627\u064A\u0644\u0627",
  "dz": "\u0627\u0644\u0632\u0648\u0646\u062E\u0627\u064A\u0629",
  "dzg": "\u0627\u0644\u0642\u0631\u0639\u0627\u0646\u064A\u0629",
  "ebu": "\u0625\u0645\u0628\u0648",
  "ee": "\u0627\u0644\u0625\u064A\u0648\u064A",
  "efi": "\u0627\u0644\u0625\u0641\u064A\u0643",
  "egy": "\u0627\u0644\u0645\u0635\u0631\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "eka": "\u0627\u0644\u0625\u0643\u0627\u062C\u0643",
  "el": "\u0627\u0644\u064A\u0648\u0646\u0627\u0646\u064A\u0629",
  "elx": "\u0627\u0644\u0625\u0645\u0627\u064A\u062A",
  "en": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629",
  "en-AU": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0629",
  "en-CA": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0643\u0646\u062F\u064A\u0629",
  "en-GB": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0629",
  "en-US": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
  "enm": "\u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0627\u0644\u0648\u0633\u0637\u0649",
  "eo": "\u0627\u0644\u0625\u0633\u0628\u0631\u0627\u0646\u062A\u0648",
  "es": "\u0627\u0644\u0625\u0633\u0628\u0627\u0646\u064A\u0629",
  "es-419": "\u0627\u0644\u0625\u0633\u0628\u0627\u0646\u064A\u0629 \u0623\u0645\u0631\u064A\u0643\u0627 \u0627\u0644\u0644\u0627\u062A\u064A\u0646\u064A\u0629",
  "es-ES": "\u0627\u0644\u0625\u0633\u0628\u0627\u0646\u064A\u0629 \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064A\u0629",
  "es-MX": "\u0627\u0644\u0625\u0633\u0628\u0627\u0646\u064A\u0629 \u0627\u0644\u0645\u0643\u0633\u064A\u0643\u064A\u0629",
  "et": "\u0627\u0644\u0625\u0633\u062A\u0648\u0646\u064A\u0629",
  "eu": "\u0627\u0644\u0628\u0627\u0633\u0643\u064A\u0629",
  "ewo": "\u0627\u0644\u0625\u064A\u0648\u0646\u062F\u0648",
  "fa": "\u0627\u0644\u0641\u0627\u0631\u0633\u064A\u0629",
  "fa-AF": "\u0627\u0644\u062F\u0627\u0631\u064A\u0629",
  "fan": "\u0627\u0644\u0641\u0627\u0646\u062C",
  "fat": "\u0627\u0644\u0641\u0627\u0646\u062A\u064A",
  "ff": "\u0627\u0644\u0641\u0648\u0644\u0627\u0646\u064A\u0629",
  "fi": "\u0627\u0644\u0641\u0646\u0644\u0646\u062F\u064A\u0629",
  "fil": "\u0627\u0644\u0641\u0644\u0628\u064A\u0646\u064A\u0629",
  "fj": "\u0627\u0644\u0641\u064A\u062C\u064A\u0629",
  "fo": "\u0627\u0644\u0641\u0627\u0631\u0648\u064A\u0629",
  "fon": "\u0627\u0644\u0641\u0648\u0646",
  "fr": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
  "fr-CA": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0643\u0646\u062F\u064A\u0629",
  "fr-CH": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0633\u0648\u064A\u0633\u0631\u064A\u0629",
  "frc": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0643\u0627\u062C\u0648\u0646\u064A\u0629",
  "frm": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0648\u0633\u0637\u0649",
  "fro": "\u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "frr": "\u0627\u0644\u0641\u0631\u064A\u0632\u064A\u0646\u064A\u0629 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
  "frs": "\u0627\u0644\u0641\u0631\u064A\u0632\u064A\u0646\u064A\u0629 \u0627\u0644\u0634\u0631\u0642\u064A\u0629",
  "fur": "\u0627\u0644\u0641\u0631\u064A\u0644\u0627\u064A\u0627\u0646",
  "fy": "\u0627\u0644\u0641\u0631\u064A\u0632\u064A\u0627\u0646",
  "ga": "\u0627\u0644\u0623\u064A\u0631\u0644\u0646\u062F\u064A\u0629",
  "gaa": "\u0627\u0644\u062C\u0627",
  "gag": "\u0627\u0644\u063A\u0627\u063A\u0648\u0632",
  "gan": "\u0627\u0644\u063A\u0627\u0646 \u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "gay": "\u0627\u0644\u062C\u0627\u064A\u0648",
  "gba": "\u0627\u0644\u062C\u0628\u064A\u0627",
  "gd": "\u0627\u0644\u063A\u064A\u0644\u064A\u0629 \u0627\u0644\u0623\u0633\u0643\u062A\u0644\u0646\u062F\u064A\u0629",
  "gez": "\u0627\u0644\u062C\u0639\u0632\u064A\u0629",
  "gil": "\u0644\u063A\u0629 \u0623\u0647\u0644 \u062C\u0628\u0644 \u0637\u0627\u0631\u0642",
  "gl": "\u0627\u0644\u062C\u0627\u0644\u064A\u0643\u064A\u0629",
  "gmh": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627 \u0627\u0644\u0648\u0633\u0637\u0649",
  "gn": "\u0627\u0644\u063A\u0648\u0627\u0631\u0627\u0646\u064A\u0629",
  "goh": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "gon": "\u0627\u0644\u062C\u0646\u062F\u064A",
  "gor": "\u0627\u0644\u062C\u0648\u0631\u0648\u0646\u062A\u0627\u0644\u0648",
  "got": "\u0627\u0644\u0642\u0648\u0637\u064A\u0629",
  "grb": "\u0627\u0644\u062C\u0631\u064A\u0628\u0648",
  "grc": "\u0627\u0644\u064A\u0648\u0646\u0627\u0646\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "gsw": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0633\u0648\u064A\u0633\u0631\u064A\u0629",
  "gu": "\u0627\u0644\u063A\u0648\u062C\u0627\u0631\u0627\u062A\u064A\u0629",
  "guz": "\u0627\u0644\u063A\u064A\u0632\u064A\u0629",
  "gv": "\u0627\u0644\u0645\u0646\u0643\u064A\u0629",
  "gwi": "\u063A\u0648\u062A\u0634\u0646",
  "ha": "\u0627\u0644\u0647\u0648\u0633\u0627",
  "hai": "\u0627\u0644\u0647\u064A\u062F\u0627",
  "hak": "\u0627\u0644\u0647\u0627\u0643\u0627 \u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "haw": "\u0644\u063A\u0629 \u0647\u0627\u0648\u0627\u064A",
  "he": "\u0627\u0644\u0639\u0628\u0631\u064A\u0629",
  "hi": "\u0627\u0644\u0647\u0646\u062F\u064A\u0629",
  "hil": "\u0627\u0644\u0647\u064A\u0644\u064A\u062C\u064A\u0646\u0648\u0646",
  "hit": "\u0627\u0644\u062D\u062B\u064A\u0629",
  "hmn": "\u0627\u0644\u0647\u0645\u0648\u0646\u062C\u064A\u0629",
  "ho": "\u0627\u0644\u0647\u064A\u0631\u064A \u0645\u0648\u062A\u0648",
  "hr": "\u0627\u0644\u0643\u0631\u0648\u0627\u062A\u064A\u0629",
  "hsb": "\u0627\u0644\u0635\u0648\u0631\u0628\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627",
  "hsn": "\u0634\u064A\u0627\u0646\u063A \u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "ht": "\u0627\u0644\u0643\u0631\u064A\u0648\u0644\u064A\u0629 \u0627\u0644\u0647\u0627\u064A\u062A\u064A\u0629",
  "hu": "\u0627\u0644\u0647\u0646\u063A\u0627\u0631\u064A\u0629",
  "hup": "\u0627\u0644\u0647\u0628\u0627",
  "hy": "\u0627\u0644\u0623\u0631\u0645\u0646\u064A\u0629",
  "hz": "\u0627\u0644\u0647\u064A\u0631\u064A\u0631\u0648",
  "ia": "\u0627\u0644\u0644\u0651\u063A\u0629 \u0627\u0644\u0648\u0633\u064A\u0637\u0629",
  "iba": "\u0627\u0644\u0625\u064A\u0628\u0627\u0646",
  "ibb": "\u0627\u0644\u0625\u064A\u0628\u064A\u0628\u064A\u0648",
  "id": "\u0627\u0644\u0625\u0646\u062F\u0648\u0646\u064A\u0633\u064A\u0629",
  "ie": "\u0627\u0644\u0625\u0646\u062A\u0631\u0644\u064A\u0646\u062C",
  "ig": "\u0627\u0644\u0625\u064A\u062C\u0628\u0648",
  "ii": "\u0627\u0644\u0633\u064A\u062A\u0634\u064A\u0648\u0646 \u064A\u064A",
  "ik": "\u0627\u0644\u0625\u064A\u0646\u0628\u064A\u0627\u0643",
  "ilo": "\u0627\u0644\u0625\u064A\u0644\u0648\u0643\u0648",
  "inh": "\u0627\u0644\u0625\u0646\u062C\u0648\u0634\u064A\u0629",
  "io": "\u0627\u0644\u0625\u064A\u062F\u0648",
  "is": "\u0627\u0644\u0623\u064A\u0633\u0644\u0646\u062F\u064A\u0629",
  "it": "\u0627\u0644\u0625\u064A\u0637\u0627\u0644\u064A\u0629",
  "iu": "\u0627\u0644\u0625\u064A\u0646\u0643\u062A\u064A\u062A\u062A",
  "ja": "\u0627\u0644\u064A\u0627\u0628\u0627\u0646\u064A\u0629",
  "jbo": "\u0627\u0644\u0644\u0648\u062C\u0628\u0627\u0646",
  "jgo": "\u0646\u063A\u0648\u0645\u0628\u0627",
  "jmc": "\u0627\u0644\u0645\u0627\u062A\u0634\u0627\u0645\u064A\u0629",
  "jpr": "\u0627\u0644\u0641\u0627\u0631\u0633\u064A\u0629 \u0627\u0644\u064A\u0647\u0648\u062F\u064A\u0629",
  "jrb": "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u064A\u0647\u0648\u062F\u064A\u0629",
  "jv": "\u0627\u0644\u062C\u0627\u0648\u064A\u0629",
  "ka": "\u0627\u0644\u062C\u0648\u0631\u062C\u064A\u0629",
  "kaa": "\u0627\u0644\u0643\u0627\u0631\u0627-\u0643\u0627\u0644\u0628\u0627\u0643",
  "kab": "\u0627\u0644\u0642\u0628\u064A\u0644\u064A\u0629",
  "kac": "\u0627\u0644\u0643\u0627\u062A\u0634\u064A\u0646",
  "kaj": "\u0627\u0644\u062C\u0648",
  "kam": "\u0627\u0644\u0643\u0627\u0645\u0628\u0627",
  "kaw": "\u0627\u0644\u0643\u0648\u064A",
  "kbd": "\u0627\u0644\u0643\u0627\u0628\u0627\u0631\u062F\u0627\u064A\u0627\u0646",
  "kbl": "\u0643\u0627\u0646\u0645\u0628\u0648",
  "kcg": "\u0627\u0644\u062A\u0627\u064A\u0627\u0628\u064A\u0629",
  "kde": "\u0645\u0627\u0643\u0648\u0646\u062F\u0647",
  "kea": "\u0643\u0627\u0628\u0648\u0641\u064A\u0631\u062F\u064A\u0627\u0646\u0648",
  "kfo": "\u0627\u0644\u0643\u0648\u0631\u0648",
  "kg": "\u0627\u0644\u0643\u0648\u0646\u063A\u0648",
  "kgp": "kgp",
  "kha": "\u0627\u0644\u0643\u0627\u0632\u064A\u0629",
  "kho": "\u0627\u0644\u062E\u0648\u062A\u0627\u0646\u064A\u0632",
  "khq": "\u0643\u0648\u064A\u0631\u0627 \u062A\u0634\u064A\u0646\u064A",
  "ki": "\u0627\u0644\u0643\u064A\u0643\u064A\u0648",
  "kj": "\u0627\u0644\u0643\u064A\u0648\u0646\u064A\u0627\u0645\u0627",
  "kk": "\u0627\u0644\u0643\u0627\u0632\u0627\u062E\u0633\u062A\u0627\u0646\u064A\u0629",
  "kkj": "\u0644\u063A\u0629 \u0627\u0644\u0643\u0627\u0643\u0648",
  "kl": "\u0627\u0644\u0643\u0627\u0644\u0627\u0644\u064A\u0633\u062A",
  "kln": "\u0643\u0627\u0644\u064A\u0646\u062C\u064A\u0646",
  "km": "\u0627\u0644\u062E\u0645\u064A\u0631\u064A\u0629",
  "kmb": "\u0627\u0644\u0643\u064A\u0645\u0628\u0646\u062F\u0648",
  "kn": "\u0627\u0644\u0643\u0627\u0646\u0627\u062F\u0627",
  "ko": "\u0627\u0644\u0643\u0648\u0631\u064A\u0629",
  "koi": "\u0643\u0648\u0645\u064A-\u0628\u064A\u0631\u0645\u0627\u064A\u0627\u0643",
  "kok": "\u0627\u0644\u0643\u0648\u0646\u0643\u0627\u0646\u064A\u0629",
  "kos": "\u0627\u0644\u0643\u0648\u0633\u0631\u0627\u064A\u0646",
  "kpe": "\u0627\u0644\u0643\u0628\u064A\u0644",
  "kr": "\u0627\u0644\u0643\u0627\u0646\u0648\u0631\u064A",
  "krc": "\u0627\u0644\u0643\u0627\u0631\u0627\u062A\u0634\u0627\u064A-\u0628\u0627\u0644\u0643\u0627\u0631",
  "krl": "\u0627\u0644\u0643\u0627\u0631\u064A\u0644\u064A\u0629",
  "kru": "\u0627\u0644\u0643\u0648\u0631\u0648\u062E",
  "ks": "\u0627\u0644\u0643\u0634\u0645\u064A\u0631\u064A\u0629",
  "ksb": "\u0634\u0627\u0645\u0628\u0627\u0644\u0627",
  "ksf": "\u0644\u063A\u0629 \u0627\u0644\u0628\u0627\u0641\u064A\u0627",
  "ksh": "\u0644\u063A\u0629 \u0627\u0644\u0643\u0648\u0644\u0648\u0646\u064A\u0627\u0646",
  "ku": "\u0627\u0644\u0643\u0631\u062F\u064A\u0629",
  "kum": "\u0627\u0644\u0642\u0645\u0648\u0642\u064A\u0629",
  "kut": "\u0627\u0644\u0643\u062A\u064A\u0646\u0627\u064A",
  "kv": "\u0627\u0644\u0643\u0648\u0645\u064A",
  "kw": "\u0627\u0644\u0643\u0648\u0631\u0646\u064A\u0629",
  "ky": "\u0627\u0644\u0642\u064A\u0631\u063A\u064A\u0632\u064A\u0629",
  "la": "\u0627\u0644\u0644\u0627\u062A\u064A\u0646\u064A\u0629",
  "lad": "\u0627\u0644\u0644\u0627\u062F\u064A\u0646\u0648",
  "lag": "\u0644\u0627\u0646\u062C\u064A",
  "lah": "\u0627\u0644\u0644\u0627\u0647\u0646\u062F\u0627",
  "lam": "\u0627\u0644\u0644\u0627\u0645\u0628\u0627",
  "lb": "\u0627\u0644\u0644\u0643\u0633\u0645\u0628\u0648\u0631\u063A\u064A\u0629",
  "lez": "\u0627\u0644\u0644\u064A\u0632\u062C\u064A\u0629",
  "lg": "\u0627\u0644\u063A\u0627\u0646\u062F\u0627",
  "li": "\u0627\u0644\u0644\u064A\u0645\u0628\u0648\u0631\u063A\u064A\u0629",
  "lij": "lij",
  "lkt": "\u0644\u0627\u0643\u0648\u062A\u0627",
  "ln": "\u0627\u0644\u0644\u064A\u0646\u062C\u0627\u0644\u0627",
  "lo": "\u0627\u0644\u0644\u0627\u0648\u064A\u0629",
  "lol": "\u0645\u0646\u063A\u0648\u0644\u0649",
  "lou": "\u0627\u0644\u0643\u0631\u064A\u0648\u0644\u064A\u0629 \u0627\u0644\u0644\u0648\u064A\u0632\u064A\u0627\u0646\u064A\u0629",
  "loz": "\u0627\u0644\u0644\u0648\u0632\u064A",
  "lrc": "\u0627\u0644\u0644\u0631\u064A\u0629 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
  "lt": "\u0627\u0644\u0644\u064A\u062A\u0648\u0627\u0646\u064A\u0629",
  "lu": "\u0627\u0644\u0644\u0648\u0628\u0627 \u0643\u0627\u062A\u0627\u0646\u063A\u0627",
  "lua": "\u0627\u0644\u0644\u0628\u0627-\u0644\u0624\u0644\u0624",
  "lui": "\u0627\u0644\u0644\u0648\u0633\u064A\u0646\u0648",
  "lun": "\u0627\u0644\u0644\u0648\u0646\u062F\u0627",
  "luo": "\u0627\u0644\u0644\u0648",
  "lus": "\u0627\u0644\u0645\u064A\u0632\u0648",
  "luy": "\u0644\u063A\u0629 \u0627\u0644\u0644\u0648\u064A\u0627",
  "lv": "\u0627\u0644\u0644\u0627\u062A\u0641\u064A\u0629",
  "mad": "\u0627\u0644\u0645\u0627\u062F\u0631\u064A\u0632",
  "mag": "\u0627\u0644\u0645\u0627\u062C\u0627",
  "mai": "\u0627\u0644\u0645\u0627\u064A\u062B\u064A\u0644\u064A",
  "mak": "\u0627\u0644\u0645\u0627\u0643\u0627\u0633\u0627\u0631",
  "man": "\u0627\u0644\u0645\u0627\u0646\u062F\u064A\u0646\u063A",
  "mas": "\u0627\u0644\u0645\u0627\u0633\u0627\u064A",
  "mde": "\u0645\u0627\u0628\u0627",
  "mdf": "\u0627\u0644\u0645\u0648\u0643\u0634\u0627",
  "mdr": "\u0627\u0644\u0645\u0627\u0646\u062F\u0627\u0631",
  "men": "\u0627\u0644\u0645\u064A\u0646\u062F",
  "mer": "\u0627\u0644\u0645\u064A\u0631\u0648",
  "mfe": "\u0627\u0644\u0645\u0648\u0631\u0633\u064A\u0627\u0646\u064A\u0629",
  "mg": "\u0627\u0644\u0645\u0644\u063A\u0627\u0634\u064A",
  "mga": "\u0627\u0644\u0623\u064A\u0631\u0644\u0646\u062F\u064A\u0629 \u0627\u0644\u0648\u0633\u0637\u0649",
  "mgh": "\u0645\u0627\u062E\u0627\u0648\u0627-\u0645\u064A\u062A\u0648",
  "mgo": "\u0645\u064A\u062A\u0627",
  "mh": "\u0627\u0644\u0645\u0627\u0631\u0634\u0627\u0644\u064A\u0629",
  "mi": "\u0627\u0644\u0645\u0627\u0648\u0631\u064A\u0629",
  "mic": "\u0627\u0644\u0645\u064A\u0643\u0645\u0627\u0643\u064A\u0648\u0646\u064A\u0629",
  "min": "\u0627\u0644\u0645\u064A\u0646\u0627\u0646\u062C\u0643\u0627\u0628\u0627\u0648",
  "mk": "\u0627\u0644\u0645\u0642\u062F\u0648\u0646\u064A\u0629",
  "ml": "\u0627\u0644\u0645\u0627\u0644\u0627\u064A\u0627\u0644\u0627\u0645\u064A\u0629",
  "mn": "\u0627\u0644\u0645\u0646\u063A\u0648\u0644\u064A\u0629",
  "mnc": "\u0627\u0644\u0645\u0627\u0646\u0634\u0648",
  "mni": "\u0627\u0644\u0645\u0627\u0646\u064A\u0628\u0648\u0631\u064A\u0629",
  "moh": "\u0627\u0644\u0645\u0648\u0647\u0648\u0643",
  "mos": "\u0627\u0644\u0645\u0648\u0633\u064A",
  "mr": "\u0627\u0644\u0645\u0627\u0631\u0627\u062B\u064A\u0629",
  "ms": "\u0627\u0644\u0645\u0627\u0644\u064A\u0632\u064A\u0629",
  "mt": "\u0627\u0644\u0645\u0627\u0644\u0637\u064A\u0629",
  "mua": "\u0645\u0646\u062F\u0646\u062C",
  "mul": "\u0644\u063A\u0627\u062A \u0645\u062A\u0639\u062F\u062F\u0629",
  "mus": "\u0627\u0644\u0643\u0631\u064A\u0643",
  "mwl": "\u0627\u0644\u0645\u064A\u0631\u0627\u0646\u062F\u064A\u0632",
  "mwr": "\u0627\u0644\u0645\u0627\u0631\u0648\u0627\u0631\u064A\u0629",
  "my": "\u0627\u0644\u0628\u0648\u0631\u0645\u064A\u0629",
  "myv": "\u0627\u0644\u0623\u0631\u0632\u064A\u0629",
  "mzn": "\u0627\u0644\u0645\u0627\u0632\u0646\u062F\u0631\u0627\u0646\u064A\u0629",
  "na": "\u0627\u0644\u0646\u0648\u0631\u0648",
  "nan": "\u0645\u064A\u0646-\u0646\u0627\u0646 \u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "nap": "\u0627\u0644\u0646\u0627\u0628\u0648\u0644\u064A\u0629",
  "naq": "\u0644\u063A\u0629 \u0627\u0644\u0646\u0627\u0645\u0627",
  "nb": "\u0627\u0644\u0646\u0631\u0648\u064A\u062C\u064A\u0629 \u0628\u0648\u0643\u0645\u0627\u0644",
  "nd": "\u0627\u0644\u0646\u062F\u064A\u0628\u064A\u0644 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
  "nds": "\u0627\u0644\u0623\u0644\u0645\u0627\u0646\u064A\u0629 \u0627\u0644\u0633\u0641\u0644\u0649",
  "nds-NL": "\u0627\u0644\u0633\u0643\u0633\u0648\u0646\u064A\u0629 \u0627\u0644\u0633\u0641\u0644\u0649",
  "ne": "\u0627\u0644\u0646\u064A\u0628\u0627\u0644\u064A\u0629",
  "new": "\u0627\u0644\u0646\u0648\u0627\u0631\u064A\u0629",
  "ng": "\u0627\u0644\u0646\u062F\u0648\u0646\u062C\u0627",
  "nia": "\u0627\u0644\u0646\u064A\u0627\u0633",
  "niu": "\u0627\u0644\u0646\u064A\u0648\u064A",
  "nl": "\u0627\u0644\u0647\u0648\u0644\u0646\u062F\u064A\u0629",
  "nl-BE": "\u0627\u0644\u0641\u0644\u0645\u0646\u0643\u064A\u0629",
  "nmg": "\u0643\u0648\u0627\u0633\u064A\u0648",
  "nn": "\u0627\u0644\u0646\u0631\u0648\u064A\u062C\u064A\u0629 \u0646\u064A\u0646\u0648\u0631\u0633\u0643",
  "nnh": "\u0644\u063A\u0629 \u0627\u0644\u0646\u062C\u064A\u0645\u0628\u0648\u0646",
  "no": "\u0627\u0644\u0646\u0631\u0648\u064A\u062C\u064A\u0629",
  "nog": "\u0627\u0644\u0646\u0648\u062C\u0627\u064A",
  "non": "\u0627\u0644\u0646\u0648\u0631\u0633 \u0627\u0644\u0642\u062F\u064A\u0645",
  "nqo": "\u0623\u0646\u0643\u0648",
  "nr": "\u0627\u0644\u0646\u062F\u064A\u0628\u064A\u0644 \u0627\u0644\u062C\u0646\u0648\u0628\u064A",
  "nso": "\u0627\u0644\u0633\u0648\u062A\u0648 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
  "nus": "\u0627\u0644\u0646\u0648\u064A\u0631",
  "nv": "\u0627\u0644\u0646\u0627\u0641\u0627\u062C\u0648",
  "nwc": "\u0627\u0644\u0646\u0648\u0627\u0631\u064A\u0629 \u0627\u0644\u062A\u0642\u0644\u064A\u062F\u064A\u0629",
  "ny": "\u0627\u0644\u0646\u064A\u0627\u0646\u062C\u0627",
  "nym": "\u0627\u0644\u0646\u064A\u0627\u0645\u0648\u064A\u0632\u064A",
  "nyn": "\u0627\u0644\u0646\u064A\u0627\u0646\u0643\u0648\u0644",
  "nyo": "\u0627\u0644\u0646\u064A\u0648\u0631\u0648",
  "nzi": "\u0627\u0644\u0646\u0632\u064A\u0645\u0627",
  "oc": "\u0627\u0644\u0623\u0648\u0643\u0633\u064A\u062A\u0627\u0646\u064A\u0629",
  "oj": "\u0627\u0644\u0623\u0648\u062C\u064A\u0628\u0648\u0627",
  "om": "\u0627\u0644\u0623\u0648\u0631\u0648\u0645\u064A\u0629",
  "or": "\u0627\u0644\u0623\u0648\u0631\u064A\u0629",
  "os": "\u0627\u0644\u0623\u0648\u0633\u064A\u062A\u064A\u0643",
  "osa": "\u0627\u0644\u0623\u0648\u0633\u0627\u062C",
  "ota": "\u0627\u0644\u062A\u0631\u0643\u064A\u0629 \u0627\u0644\u0639\u062B\u0645\u0627\u0646\u064A\u0629",
  "pa": "\u0627\u0644\u0628\u0646\u062C\u0627\u0628\u064A\u0629",
  "pag": "\u0627\u0644\u0628\u0627\u0646\u062C\u0627\u0633\u064A\u0646\u0627\u0646",
  "pal": "\u0627\u0644\u0628\u0647\u0644\u0648\u064A\u0629",
  "pam": "\u0627\u0644\u0628\u0627\u0645\u0628\u0627\u0646\u062C\u0627",
  "pap": "\u0627\u0644\u0628\u0627\u0628\u064A\u0627\u0645\u064A\u0646\u062A\u0648",
  "pau": "\u0627\u0644\u0628\u0627\u0644\u0648\u0627\u0646",
  "pcm": "\u0627\u0644\u0628\u062F\u062C\u0646\u064A\u0629 \u0627\u0644\u0646\u064A\u062C\u064A\u0631\u064A\u0629",
  "peo": "\u0627\u0644\u0641\u0627\u0631\u0633\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "phn": "\u0627\u0644\u0641\u064A\u0646\u064A\u0642\u064A\u0629",
  "pi": "\u0627\u0644\u0628\u0627\u0644\u064A\u0629",
  "pl": "\u0627\u0644\u0628\u0648\u0644\u0646\u062F\u064A\u0629",
  "pon": "\u0627\u0644\u0628\u0648\u0647\u0646\u0628\u064A\u0627\u064A\u0627\u0646",
  "prg": "\u0627\u0644\u0628\u0631\u0648\u0633\u064A\u0627\u0648\u064A\u0629",
  "pro": "\u0627\u0644\u0628\u0631\u0648\u0641\u0627\u0646\u0633\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "ps": "\u0627\u0644\u0628\u0634\u062A\u0648",
  "pt": "\u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644\u064A\u0629",
  "pt-BR": "\u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644\u064A\u0629 \u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644\u064A\u0629",
  "pt-PT": "\u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644\u064A\u0629 \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064A\u0629",
  "qu": "\u0627\u0644\u0643\u0648\u064A\u062A\u0634\u0648\u0627",
  "quc": "\u0627\u0644\u0643\u064A\u0634\u064A\u0629",
  "raj": "\u0627\u0644\u0631\u0627\u062C\u0627\u0633\u062B\u0627\u0646\u064A\u0629",
  "rap": "\u0627\u0644\u0631\u0627\u0628\u0627\u0646\u064A",
  "rar": "\u0627\u0644\u0631\u0627\u0631\u0648\u062A\u0648\u0646\u062C\u0627\u0646\u064A",
  "rhg": "\u0627\u0644\u0631\u0648\u0647\u064A\u0646\u063A\u064A\u0629",
  "rm": "\u0627\u0644\u0631\u0648\u0645\u0627\u0646\u0634\u064A\u0629",
  "rn": "\u0627\u0644\u0631\u0646\u062F\u064A",
  "ro": "\u0627\u0644\u0631\u0648\u0645\u0627\u0646\u064A\u0629",
  "ro-MD": "\u0627\u0644\u0645\u0648\u0644\u062F\u0648\u0641\u064A\u0629",
  "rof": "\u0627\u0644\u0631\u0648\u0645\u0628\u0648",
  "rom": "\u0627\u0644\u063A\u062C\u0631\u064A\u0629",
  "ru": "\u0627\u0644\u0631\u0648\u0633\u064A\u0629",
  "rup": "\u0627\u0644\u0623\u0631\u0648\u0645\u0627\u0646\u064A\u0627\u0646",
  "rw": "\u0627\u0644\u0643\u064A\u0646\u064A\u0627\u0631\u0648\u0627\u0646\u062F\u0627",
  "rwk": "\u0627\u0644\u0631\u0648\u0627",
  "sa": "\u0627\u0644\u0633\u0646\u0633\u0643\u0631\u064A\u062A\u064A\u0629",
  "sad": "\u0627\u0644\u0633\u0627\u0646\u062F\u0627\u0648\u064A",
  "sah": "\u0627\u0644\u0633\u0627\u062E\u064A\u0651\u0629",
  "sam": "\u0627\u0644\u0622\u0631\u0627\u0645\u064A\u0629 \u0627\u0644\u0633\u0627\u0645\u0631\u064A\u0629",
  "saq": "\u0633\u0627\u0645\u0628\u0648\u0631\u0648",
  "sas": "\u0627\u0644\u0633\u0627\u0633\u0627\u0643",
  "sat": "\u0627\u0644\u0633\u0627\u0646\u062A\u0627\u0644\u064A\u0629",
  "sba": "\u0646\u0627\u0645\u0628\u064A",
  "sbp": "\u0633\u0627\u0646\u063A\u0648",
  "sc": "\u0627\u0644\u0633\u0631\u062F\u064A\u0646\u064A\u0629",
  "scn": "\u0627\u0644\u0635\u0642\u0644\u064A\u0629",
  "sco": "\u0627\u0644\u0623\u0633\u0643\u062A\u0644\u0646\u062F\u064A\u0629",
  "sd": "\u0627\u0644\u0633\u0646\u062F\u064A\u0629",
  "sdh": "\u0627\u0644\u0643\u0631\u062F\u064A\u0629 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629",
  "se": "\u0633\u0627\u0645\u064A \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
  "see": "\u0627\u0644\u0633\u0646\u064A\u0643\u0627",
  "seh": "\u0633\u064A\u0646\u0627",
  "sel": "\u0627\u0644\u0633\u064A\u0644\u0643\u0628",
  "ses": "\u0643\u0648\u064A\u0631\u0627\u0628\u0648\u0631\u0648 \u0633\u064A\u0646\u064A",
  "sg": "\u0627\u0644\u0633\u0627\u0646\u062C\u0648",
  "sga": "\u0627\u0644\u0623\u064A\u0631\u0644\u0646\u062F\u064A\u0629 \u0627\u0644\u0642\u062F\u064A\u0645\u0629",
  "sh": "\u0635\u0631\u0628\u064A\u0629-\u0643\u0631\u0648\u0627\u062A\u064A\u0629",
  "shi": "\u062A\u0634\u0644\u062D\u064A\u062A",
  "shn": "\u0627\u0644\u0634\u0627\u0646",
  "shu": "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u062A\u0634\u0627\u062F\u064A\u0629",
  "si": "\u0627\u0644\u0633\u0646\u0647\u0627\u0644\u064A\u0629",
  "sid": "\u0627\u0644\u0633\u064A\u062F\u0627\u0645\u0648",
  "sk": "\u0627\u0644\u0633\u0644\u0648\u0641\u0627\u0643\u064A\u0629",
  "sl": "\u0627\u0644\u0633\u0644\u0648\u0641\u0627\u0646\u064A\u0629",
  "sm": "\u0627\u0644\u0633\u0627\u0645\u0648\u0627\u0626\u064A\u0629",
  "sma": "\u0627\u0644\u0633\u0627\u0645\u064A \u0627\u0644\u062C\u0646\u0648\u0628\u064A",
  "smj": "\u0627\u0644\u0644\u0648\u0644 \u0633\u0627\u0645\u064A",
  "smn": "\u0627\u0644\u0625\u064A\u0646\u0627\u0631\u064A \u0633\u0627\u0645\u064A",
  "sms": "\u0627\u0644\u0633\u0643\u0648\u0644\u062A \u0633\u0627\u0645\u064A",
  "sn": "\u0627\u0644\u0634\u0648\u0646\u0627",
  "snk": "\u0627\u0644\u0633\u0648\u0646\u064A\u0646\u0643",
  "so": "\u0627\u0644\u0635\u0648\u0645\u0627\u0644\u064A\u0629",
  "sog": "\u0627\u0644\u0633\u0648\u062C\u062F\u064A\u0646",
  "sq": "\u0627\u0644\u0623\u0644\u0628\u0627\u0646\u064A\u0629",
  "sr": "\u0627\u0644\u0635\u0631\u0628\u064A\u0629",
  "srn": "\u0627\u0644\u0633\u0631\u0627\u0646\u0627\u0646 \u062A\u0648\u0646\u062C\u0648",
  "srr": "\u0627\u0644\u0633\u0631\u0631",
  "ss": "\u0627\u0644\u0633\u0648\u0627\u062A\u064A",
  "ssy": "\u0644\u063A\u0629 \u0627\u0644\u0633\u0627\u0647\u0648",
  "st": "\u0627\u0644\u0633\u0648\u062A\u0648 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629",
  "su": "\u0627\u0644\u0633\u0648\u0646\u062F\u0627\u0646\u064A\u0629",
  "suk": "\u0627\u0644\u0633\u0648\u0643\u0648\u0645\u0627",
  "sus": "\u0627\u0644\u0633\u0648\u0633\u0648",
  "sux": "\u0627\u0644\u0633\u0648\u0645\u0627\u0631\u064A\u0629",
  "sv": "\u0627\u0644\u0633\u0648\u064A\u062F\u064A\u0629",
  "sw": "\u0627\u0644\u0633\u0648\u0627\u062D\u0644\u064A\u0629",
  "sw-CD": "\u0627\u0644\u0643\u0648\u0646\u063A\u0648 \u0627\u0644\u0633\u0648\u0627\u062D\u0644\u064A\u0629",
  "swb": "\u0627\u0644\u0642\u0645\u0631\u064A\u0629",
  "syc": "\u0633\u0631\u064A\u0627\u0646\u064A\u0629 \u062A\u0642\u0644\u064A\u062F\u064A\u0629",
  "syr": "\u0627\u0644\u0633\u0631\u064A\u0627\u0646\u064A\u0629",
  "ta": "\u0627\u0644\u062A\u0627\u0645\u064A\u0644\u064A\u0629",
  "te": "\u0627\u0644\u062A\u064A\u0644\u0648\u063A\u0648\u064A\u0629",
  "tem": "\u0627\u0644\u062A\u064A\u0645\u0646",
  "teo": "\u062A\u064A\u0633\u0648",
  "ter": "\u0627\u0644\u062A\u064A\u0631\u064A\u0646\u0648",
  "tet": "\u0627\u0644\u062A\u064A\u062A\u0645",
  "tg": "\u0627\u0644\u0637\u0627\u062C\u064A\u0643\u064A\u0629",
  "th": "\u0627\u0644\u062A\u0627\u064A\u0644\u0627\u0646\u062F\u064A\u0629",
  "ti": "\u0627\u0644\u062A\u063A\u0631\u064A\u0646\u064A\u0629",
  "tig": "\u0627\u0644\u062A\u064A\u063A\u0631\u064A\u0629",
  "tiv": "\u0627\u0644\u062A\u064A\u0641",
  "tk": "\u0627\u0644\u062A\u0631\u0643\u0645\u0627\u0646\u064A\u0629",
  "tkl": "\u0627\u0644\u062A\u0648\u0643\u064A\u0644\u0627\u0648",
  "tl": "\u0627\u0644\u062A\u0627\u063A\u0627\u0644\u0648\u063A\u064A\u0629",
  "tlh": "\u0627\u0644\u0643\u0644\u064A\u0646\u062C\u0648\u0646",
  "tli": "\u0627\u0644\u062A\u0644\u064A\u0646\u063A\u064A\u062A\u064A\u0629",
  "tmh": "\u0627\u0644\u062A\u0627\u0645\u0627\u0634\u064A\u0643",
  "tn": "\u0627\u0644\u062A\u0633\u0648\u0627\u0646\u064A\u0629",
  "to": "\u0627\u0644\u062A\u0648\u0646\u063A\u064A\u0629",
  "tog": "\u062A\u0648\u0646\u062C\u0627 - \u0646\u064A\u0627\u0633\u0627",
  "tpi": "\u0627\u0644\u062A\u0648\u0643 \u0628\u064A\u0633\u064A\u0646",
  "tr": "\u0627\u0644\u062A\u0631\u0643\u064A\u0629",
  "trv": "\u0644\u063A\u0629 \u0627\u0644\u062A\u0627\u0631\u0648\u0643\u0648",
  "ts": "\u0627\u0644\u0633\u0648\u0646\u062C\u0627",
  "tsi": "\u0627\u0644\u062A\u0633\u064A\u0645\u0634\u064A\u0627\u0646",
  "tt": "\u0627\u0644\u062A\u062A\u0631\u064A\u0629",
  "tum": "\u0627\u0644\u062A\u0627\u0645\u0628\u0648\u0643\u0627",
  "tvl": "\u0627\u0644\u062A\u0648\u0641\u0627\u0644\u0648",
  "tw": "\u0627\u0644\u062A\u0648\u064A",
  "twq": "\u062A\u0627\u0633\u0627\u0648\u0627\u0642",
  "ty": "\u0627\u0644\u062A\u0627\u0647\u064A\u062A\u064A\u0629",
  "tyv": "\u0627\u0644\u062A\u0648\u0641\u064A\u0629",
  "tzm": "\u0627\u0644\u0623\u0645\u0627\u0632\u064A\u063A\u064A\u0629 \u0648\u0633\u0637 \u0627\u0644\u0623\u0637\u0644\u0633",
  "udm": "\u0627\u0644\u0623\u062F\u0645\u0631\u062A",
  "ug": "\u0627\u0644\u0623\u0648\u064A\u063A\u0648\u0631\u064A\u0629",
  "uga": "\u0627\u0644\u064A\u062C\u0627\u0631\u064A\u062A\u064A\u0643",
  "uk": "\u0627\u0644\u0623\u0648\u0643\u0631\u0627\u0646\u064A\u0629",
  "umb": "\u0627\u0644\u0623\u0645\u0628\u0646\u062F\u0648",
  "und": "\u0644\u063A\u0629 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641\u0629",
  "ur": "\u0627\u0644\u0623\u0648\u0631\u062F\u064A\u0629",
  "uz": "\u0627\u0644\u0623\u0648\u0632\u0628\u0643\u064A\u0629",
  "vai": "\u0627\u0644\u0641\u0627\u064A",
  "ve": "\u0627\u0644\u0641\u064A\u0646\u062F\u0627",
  "vi": "\u0627\u0644\u0641\u064A\u062A\u0646\u0627\u0645\u064A\u0629",
  "vo": "\u0644\u063A\u0629 \u0627\u0644\u0641\u0648\u0644\u0627\u0628\u0648\u0643",
  "vot": "\u0627\u0644\u0641\u0648\u062A\u064A\u0643",
  "vun": "\u0627\u0644\u0641\u0648\u0646\u062C\u0648",
  "wa": "\u0627\u0644\u0648\u0644\u0648\u0646\u064A\u0629",
  "wae": "\u0627\u0644\u0648\u0627\u0644\u0633\u0631",
  "wal": "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A\u0627",
  "war": "\u0627\u0644\u0648\u0627\u0631\u0627\u064A",
  "was": "\u0627\u0644\u0648\u0627\u0634\u0648",
  "wbp": "\u0648\u0627\u0631\u0644\u0628\u064A\u0631\u064A",
  "wo": "\u0627\u0644\u0648\u0644\u0648\u0641\u064A\u0629",
  "wuu": "\u0627\u0644\u0648\u0648 \u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "xal": "\u0627\u0644\u0643\u0627\u0644\u0645\u064A\u0643",
  "xh": "\u0627\u0644\u062E\u0648\u0633\u0627",
  "xog": "\u0627\u0644\u0633\u0648\u063A\u0627",
  "yao": "\u0627\u0644\u064A\u0627\u0648",
  "yap": "\u0627\u0644\u064A\u0627\u0628\u064A\u0632",
  "yav": "\u064A\u0627\u0646\u062C\u0628\u0646",
  "ybb": "\u064A\u0645\u0628\u0627",
  "yi": "\u0627\u0644\u064A\u062F\u064A\u0634\u064A\u0629",
  "yo": "\u0627\u0644\u064A\u0648\u0631\u0648\u0628\u0627",
  "yrl": "yrl",
  "yue": "\u0627\u0644\u0643\u064E\u0646\u0652\u062A\u064F\u0648\u0646\u064A\u0629",
  "za": "\u0627\u0644\u0632\u0647\u064A\u0648\u0646\u062C",
  "zap": "\u0627\u0644\u0632\u0627\u0628\u0648\u062A\u064A\u0643",
  "zbl": "\u0631\u0645\u0648\u0632 \u0627\u0644\u0645\u0639\u0627\u064A\u064A\u0631 \u0627\u0644\u0623\u0633\u0627\u0633\u064A\u0629",
  "zen": "\u0627\u0644\u0632\u064A\u0646\u0627\u062C\u0627",
  "zgh": "\u0627\u0644\u062A\u0645\u0627\u0632\u064A\u063A\u064A\u0629 \u0627\u0644\u0645\u063A\u0631\u0628\u064A\u0629 \u0627\u0644\u0642\u064A\u0627\u0633\u064A\u0629",
  "zh": "\u0627\u0644\u0635\u064A\u0646\u064A\u0629",
  "zh-Hans": "\u0627\u0644\u0635\u064A\u0646\u064A\u0629 \u0627\u0644\u0645\u0628\u0633\u0637\u0629",
  "zh-Hant": "\u0627\u0644\u0635\u064A\u0646\u064A\u0629 \u0627\u0644\u062A\u0642\u0644\u064A\u062F\u064A\u0629",
  "zu": "\u0627\u0644\u0632\u0648\u0644\u0648",
  "zun": "\u0627\u0644\u0632\u0648\u0646\u064A\u0629",
  "zxx": "\u0628\u062F\u0648\u0646 \u0645\u062D\u062A\u0648\u0649 \u0644\u063A\u0648\u064A",
  "zza": "\u0632\u0627\u0632\u0627"
};

// src/l10n/locale/be.ts
var be_default = {
  "aa": "\u0430\u0444\u0430\u0440\u0441\u043A\u0430\u044F",
  "ab": "\u0430\u0431\u0445\u0430\u0437\u0441\u043A\u0430\u044F",
  "ace": "\u0430\u0447\u044D\u0445",
  "ada": "\u0430\u0434\u0430\u043D\u0433\u043C\u044D",
  "ady": "\u0430\u0434\u044B\u0433\u0435\u0439\u0441\u043A\u0430\u044F",
  "af": "\u0430\u0444\u0440\u044B\u043A\u0430\u0430\u043D\u0441",
  "agq": "\u0430\u0433\u0435\u043C",
  "ain": "\u0430\u0439\u043D\u0441\u043A\u0430\u044F",
  "ak": "\u0430\u043A\u0430\u043D",
  "akk": "\u0430\u043A\u0430\u0434\u0441\u043A\u0430\u044F",
  "ale": "\u0430\u043B\u0435\u0443\u0446\u043A\u0430\u044F",
  "alt": "\u043F\u0430\u045E\u0434\u043D\u0451\u0432\u0430\u0430\u043B\u0442\u0430\u0439\u0441\u043A\u0430\u044F",
  "am": "\u0430\u043C\u0445\u0430\u0440\u0441\u043A\u0430\u044F",
  "an": "\u0430\u0440\u0430\u0433\u043E\u043D\u0441\u043A\u0430\u044F",
  "ang": "\u0441\u0442\u0430\u0440\u0430\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "anp": "\u0430\u043D\u0433\u0456\u043A\u0430",
  "ar": "\u0430\u0440\u0430\u0431\u0441\u043A\u0430\u044F",
  "ar-001": "\u0441\u0443\u0447\u0430\u0441\u043D\u0430\u044F \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F \u0430\u0440\u0430\u0431\u0441\u043A\u0430\u044F",
  "arc": "\u0430\u0440\u0430\u043C\u0435\u0439\u0441\u043A\u0430\u044F",
  "arn": "\u043C\u0430\u043F\u0443\u0434\u0443\u043D\u0433\u0443\u043D",
  "arp": "\u0430\u0440\u0430\u043F\u0430\u0445\u0430",
  "as": "\u0430\u0441\u0430\u043C\u0441\u043A\u0430\u044F",
  "asa": "\u0430\u0441\u0443",
  "ast": "\u0430\u0441\u0442\u0443\u0440\u044B\u0439\u0441\u043A\u0430\u044F",
  "av": "\u0430\u0432\u0430\u0440\u0441\u043A\u0430\u044F",
  "awa": "\u0430\u0432\u0430\u0434\u0445\u0456",
  "ay": "\u0430\u0439\u043C\u0430\u0440\u0430",
  "az": "\u0430\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u043A\u0430\u044F",
  "ba": "\u0431\u0430\u0448\u043A\u0456\u0440\u0441\u043A\u0430\u044F",
  "ban": "\u0431\u0430\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "bas": "\u0431\u0430\u0441\u0430\u0430",
  "be": "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F",
  "bem": "\u0431\u0435\u043C\u0431\u0430",
  "bez": "\u0431\u0435\u043D\u0430",
  "bg": "\u0431\u0430\u043B\u0433\u0430\u0440\u0441\u043A\u0430\u044F",
  "bgn": "\u0437\u0430\u0445\u043E\u0434\u043D\u044F\u044F \u0431\u0435\u043B\u0443\u0434\u0436\u0441\u043A\u0430\u044F",
  "bho": "\u0431\u0445\u0430\u0434\u0436\u043F\u0443\u0440\u044B",
  "bi": "\u0431\u0456\u0441\u043B\u0430\u043C\u0430",
  "bin": "\u044D\u0434\u0430",
  "bla": "\u0431\u043B\u044D\u043A\u0444\u0443\u0442",
  "bm": "\u0431\u0430\u043C\u0431\u0430\u0440\u0430",
  "bn": "\u0431\u0435\u043D\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "bo": "\u0442\u044B\u0431\u0435\u0446\u043A\u0430\u044F",
  "br": "\u0431\u0440\u044D\u0442\u043E\u043D\u0441\u043A\u0430\u044F",
  "brx": "\u0431\u043E\u0434\u0430",
  "bs": "\u0431\u0430\u0441\u043D\u0456\u0439\u0441\u043A\u0430\u044F",
  "bua": "\u0431\u0443\u0440\u0430\u0446\u043A\u0430\u044F",
  "bug": "\u0431\u0443\u0433\u0456\u0441",
  "byn": "\u0431\u0456\u043B\u0435\u043D",
  "ca": "\u043A\u0430\u0442\u0430\u043B\u0430\u043D\u0441\u043A\u0430\u044F",
  "ccp": "\u0447\u0430\u043A\u043C\u0430",
  "ce": "\u0447\u0430\u0447\u044D\u043D\u0441\u043A\u0430\u044F",
  "ceb": "\u0441\u0435\u0431\u0443\u0430\u043D\u0430",
  "cgg": "\u0447\u044B\u0433\u0430",
  "ch": "\u0447\u0430\u043C\u043E\u0440\u0430",
  "chb": "\u0447\u044B\u0431\u0447\u0430",
  "chk": "\u0447\u0443\u0443\u043A",
  "chm": "\u043C\u0430\u0440\u044B",
  "cho": "\u0447\u043E\u043A\u0442\u0430",
  "chr": "\u0447\u044D\u0440\u043E\u043A\u0456",
  "chy": "\u0448\u044D\u0439\u0435\u043D",
  "ckb": "\u0446\u044D\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u0430\u043A\u0443\u0440\u0434\u0441\u043A\u0430\u044F",
  "co": "\u043A\u0430\u0440\u0441\u0456\u043A\u0430\u043D\u0441\u043A\u0430\u044F",
  "cop": "\u043A\u043E\u043F\u0446\u043A\u0430\u044F",
  "crs": "\u0441\u044D\u0441\u044D\u043B\u044C\u0432\u0430",
  "cs": "\u0447\u044D\u0448\u0441\u043A\u0430\u044F",
  "cu": "\u0446\u0430\u0440\u043A\u043E\u045E\u043D\u0430\u0441\u043B\u0430\u0432\u044F\u043D\u0441\u043A\u0430\u044F",
  "cv": "\u0447\u0443\u0432\u0430\u0448\u0441\u043A\u0430\u044F",
  "cy": "\u0432\u0430\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "da": "\u0434\u0430\u0446\u043A\u0430\u044F",
  "dak": "\u0434\u0430\u043A\u043E\u0442\u0430",
  "dar": "\u0434\u0430\u0440\u0433\u0456\u043D\u0441\u043A\u0430\u044F",
  "dav": "\u0442\u0430\u0456\u0442\u0430",
  "de": "\u043D\u044F\u043C\u0435\u0446\u043A\u0430\u044F",
  "de-AT": "\u0430\u045E\u0441\u0442\u0440\u044B\u0439\u0441\u043A\u0430\u044F \u043D\u044F\u043C\u0435\u0446\u043A\u0430\u044F",
  "de-CH": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0430\u044F \u043B\u0456\u0442\u0430\u0440\u0430\u0442\u0443\u0440\u043D\u0430\u044F \u043D\u044F\u043C\u0435\u0446\u043A\u0430\u044F",
  "dgr": "\u0434\u043E\u0433\u0440\u044B\u0431",
  "dje": "\u0437\u0430\u0440\u043C\u0430",
  "doi": "\u0434\u043E\u0433\u0440\u044B",
  "dsb": "\u043D\u0456\u0436\u043D\u044F\u043B\u0443\u0436\u044B\u0446\u043A\u0430\u044F",
  "dua": "\u0434\u0443\u0430\u043B\u0430",
  "dv": "\u043C\u0430\u043B\u044C\u0434\u044B\u045E\u0441\u043A\u0430\u044F",
  "dyo": "\u0434\u0436\u043E\u043B\u0430-\u0444\u043E\u043D\u044C\u0456",
  "dz": "\u0434\u0437\u043E\u043D\u0433-\u043A\u044D",
  "dzg": "\u0434\u0430\u0437\u0430\u0433\u0430",
  "ebu": "\u044D\u043C\u0431\u0443",
  "ee": "\u044D\u0432\u0435",
  "efi": "\u044D\u0444\u0456\u043A",
  "egy": "\u0441\u0442\u0430\u0440\u0430\u0436\u044B\u0442\u043D\u0430\u0435\u0433\u0456\u043F\u0435\u0446\u043A\u0430\u044F",
  "eka": "\u044D\u043A\u0430\u0434\u0436\u0443\u043A",
  "el": "\u0433\u0440\u044D\u0447\u0430\u0441\u043A\u0430\u044F",
  "en": "\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "en-AU": "\u0430\u045E\u0441\u0442\u0440\u0430\u043B\u0456\u0439\u0441\u043A\u0430\u044F \u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "en-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0430\u044F \u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "en-GB": "\u0431\u0440\u044B\u0442\u0430\u043D\u0441\u043A\u0430\u044F \u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "en-US": "\u0430\u043C\u0435\u0440\u044B\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0430\u043D\u0433\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "eo": "\u044D\u0441\u043F\u0435\u0440\u0430\u043D\u0442\u0430",
  "es": "\u0456\u0441\u043F\u0430\u043D\u0441\u043A\u0430\u044F",
  "es-419": "\u043B\u0430\u0446\u0456\u043D\u0430\u0430\u043C\u0435\u0440\u044B\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0456\u0441\u043F\u0430\u043D\u0441\u043A\u0430\u044F",
  "es-ES": "\u0435\u045E\u0440\u0430\u043F\u0435\u0439\u0441\u043A\u0430\u044F \u0456\u0441\u043F\u0430\u043D\u0441\u043A\u0430\u044F",
  "es-MX": "\u043C\u0435\u043A\u0441\u0456\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0456\u0441\u043F\u0430\u043D\u0441\u043A\u0430\u044F",
  "et": "\u044D\u0441\u0442\u043E\u043D\u0441\u043A\u0430\u044F",
  "eu": "\u0431\u0430\u0441\u043A\u0441\u043A\u0430\u044F",
  "ewo": "\u044D\u0432\u043E\u043D\u0434\u0430",
  "fa": "\u0444\u0430\u0440\u0441\u0456",
  "fa-AF": "\u0434\u0430\u0440\u044B",
  "ff": "\u0444\u0443\u043B\u0430",
  "fi": "\u0444\u0456\u043D\u0441\u043A\u0430\u044F",
  "fil": "\u0444\u0456\u043B\u0456\u043F\u0456\u043D\u0441\u043A\u0430\u044F",
  "fj": "\u0444\u0456\u0434\u0436\u044B\u0439\u0441\u043A\u0430\u044F",
  "fo": "\u0444\u0430\u0440\u044D\u0440\u0441\u043A\u0430\u044F",
  "fon": "\u0444\u043E\u043D",
  "fr": "\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F",
  "fr-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0430\u044F \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F",
  "fr-CH": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0430\u044F \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F",
  "frc": "frc",
  "fro": "\u0441\u0442\u0430\u0440\u0430\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F",
  "fur": "\u0444\u0440\u044B\u0443\u043B\u044C\u0441\u043A\u0430\u044F",
  "fy": "\u0437\u0430\u0445\u043E\u0434\u043D\u044F\u044F \u0444\u0440\u044B\u0437\u0441\u043A\u0430\u044F",
  "ga": "\u0456\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "gaa": "\u0433\u0430",
  "gag": "\u0433\u0430\u0433\u0430\u0443\u0437\u0441\u043A\u0430\u044F",
  "gd": "\u0448\u0430\u0442\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F \u0433\u044D\u043B\u044C\u0441\u043A\u0430\u044F",
  "gez": "\u0433\u0435\u044D\u0437",
  "gil": "\u043A\u0456\u0440\u044B\u0431\u0430\u0446\u0456",
  "gl": "\u0433\u0430\u043B\u0456\u0441\u0456\u0439\u0441\u043A\u0430\u044F",
  "gn": "\u0433\u0443\u0430\u0440\u0430\u043D\u0456",
  "gor": "\u0433\u0430\u0440\u0430\u043D\u0442\u0430\u043B\u0430",
  "grc": "\u0441\u0442\u0430\u0440\u0430\u0436\u044B\u0442\u043D\u0430\u0433\u0440\u044D\u0447\u0430\u0441\u043A\u0430\u044F",
  "gsw": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0430\u044F \u043D\u044F\u043C\u0435\u0446\u043A\u0430\u044F",
  "gu": "\u0433\u0443\u0434\u0436\u0430\u0440\u0430\u0446\u0456",
  "guz": "\u0433\u0443\u0441\u0456\u0456",
  "gv": "\u043C\u044D\u043D\u0441\u043A\u0430\u044F",
  "gwi": "\u0433\u0443\u0456\u0447\u2019\u0456\u043D",
  "ha": "\u0445\u0430\u0443\u0441\u0430",
  "haw": "\u0433\u0430\u0432\u0430\u0439\u0441\u043A\u0430\u044F",
  "he": "\u0456\u045E\u0440\u044B\u0442",
  "hi": "\u0445\u0456\u043D\u0434\u0437\u0456",
  "hil": "\u0445\u0456\u043B\u0456\u0433\u0430\u0439\u043D\u043E\u043D",
  "hmn": "\u0445\u043C\u043E\u043D\u0433",
  "hr": "\u0445\u0430\u0440\u0432\u0430\u0446\u043A\u0430\u044F",
  "hsb": "\u0432\u0435\u0440\u0445\u043D\u044F\u043B\u0443\u0436\u044B\u0446\u043A\u0430\u044F",
  "ht": "\u0433\u0430\u0456\u0446\u044F\u043D\u0441\u043A\u0430\u044F \u043A\u0440\u044D\u043E\u043B\u044C\u0441\u043A\u0430\u044F",
  "hu": "\u0432\u0435\u043D\u0433\u0435\u0440\u0441\u043A\u0430\u044F",
  "hup": "\u0445\u0443\u043F\u0430",
  "hy": "\u0430\u0440\u043C\u044F\u043D\u0441\u043A\u0430\u044F",
  "hz": "\u0433\u0435\u0440\u044D\u0440\u0430",
  "ia": "\u0456\u043D\u0442\u044D\u0440\u043B\u0456\u043D\u0433\u0432\u0430",
  "iba": "\u0456\u0431\u0430\u043D",
  "ibb": "\u0456\u0431\u0456\u0431\u0456\u044F",
  "id": "\u0456\u043D\u0434\u0430\u043D\u0435\u0437\u0456\u0439\u0441\u043A\u0430\u044F",
  "ie": "\u0456\u043D\u0442\u044D\u0440\u043B\u0456\u043D\u0433\u0432\u044D",
  "ig": "\u0456\u0433\u0431\u0430",
  "ii": "\u0441\u044B\u0447\u0443\u0430\u043D\u044C\u0441\u043A\u0430\u044F \u0439\u0456",
  "ilo": "\u0456\u043B\u0430\u043A\u0430\u043D\u0430",
  "inh": "\u0456\u043D\u0433\u0443\u0448\u0441\u043A\u0430\u044F",
  "io": "\u0456\u0434\u0430",
  "is": "\u0456\u0441\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "it": "\u0456\u0442\u0430\u043B\u044C\u044F\u043D\u0441\u043A\u0430\u044F",
  "iu": "\u0456\u043D\u0443\u043A\u0442\u044B\u0442\u0443\u0442",
  "ja": "\u044F\u043F\u043E\u043D\u0441\u043A\u0430\u044F",
  "jbo": "\u043B\u043E\u0436\u0431\u0430\u043D",
  "jgo": "\u043D\u0433\u043E\u043C\u0431\u0430",
  "jmc": "\u043C\u0430\u0447\u0430\u043C\u0431\u044D",
  "jv": "\u044F\u0432\u0430\u043D\u0441\u043A\u0430\u044F",
  "ka": "\u0433\u0440\u0443\u0437\u0456\u043D\u0441\u043A\u0430\u044F",
  "kab": "\u043A\u0430\u0431\u0456\u043B\u044C\u0441\u043A\u0430\u044F",
  "kac": "\u043A\u0430\u0447\u044B\u043D\u0441\u043A\u0430\u044F",
  "kaj": "\u0434\u0434\u0436\u0443",
  "kam": "\u043A\u0430\u043C\u0431\u0430",
  "kbd": "\u043A\u0430\u0431\u0430\u0440\u0434\u0437\u0456\u043D\u0441\u043A\u0430\u044F",
  "kcg": "\u0442\u2019\u044F\u043F",
  "kde": "\u043C\u0430\u043A\u043E\u043D\u0434\u044D",
  "kea": "\u043A\u0430\u0431\u0443\u0432\u0435\u0440\u0434\u044B\u044F\u043D\u0443",
  "kfo": "\u043A\u043E\u0440\u0430",
  "kgp": "kgp",
  "kha": "\u043A\u0445\u0430\u0441\u0456",
  "khq": "\u043A\u043E\u0439\u0440\u0430 \u0447\u044B\u0456\u043D\u0456",
  "ki": "\u043A\u0456\u043A\u0443\u0439\u044E",
  "kj": "\u043A\u0443\u0430\u043D\u044C\u044F\u043C\u0430",
  "kk": "\u043A\u0430\u0437\u0430\u0445\u0441\u043A\u0430\u044F",
  "kkj": "\u043A\u0430\u043A\u043E",
  "kl": "\u0433\u0440\u044D\u043D\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "kln": "\u043A\u0430\u043B\u0435\u043D\u0434\u0436\u044B\u043D",
  "km": "\u043A\u0445\u043C\u0435\u0440\u0441\u043A\u0430\u044F",
  "kmb": "\u043A\u0456\u043C\u0431\u0443\u043D\u0434\u0443",
  "kn": "\u043A\u0430\u043D\u0430\u0434\u0430",
  "ko": "\u043A\u0430\u0440\u044D\u0439\u0441\u043A\u0430\u044F",
  "koi": "\u043A\u043E\u043C\u0456-\u043F\u044F\u0440\u043C\u044F\u0446\u043A\u0430\u044F",
  "kok": "\u043A\u0430\u043D\u043A\u0430\u043D\u0456",
  "kpe": "\u043A\u043F\u0435\u043B\u0435",
  "kr": "\u043A\u0430\u043D\u0443\u0440\u044B",
  "krc": "\u043A\u0430\u0440\u0430\u0447\u0430\u0439-\u0431\u0430\u043B\u043A\u0430\u0440\u0441\u043A\u0430\u044F",
  "krl": "\u043A\u0430\u0440\u044D\u043B\u044C\u0441\u043A\u0430\u044F",
  "kru": "\u043A\u0443\u0440\u0443\u0445",
  "ks": "\u043A\u0430\u0448\u043C\u0456\u0440\u0441\u043A\u0430\u044F",
  "ksb": "\u0448\u0430\u043C\u0431\u0430\u043B\u0430",
  "ksf": "\u0431\u0430\u0444\u0456\u044F",
  "ksh": "\u043A\u0451\u043B\u044C\u043D\u0441\u043A\u0430\u044F",
  "ku": "\u043A\u0443\u0440\u0434\u0441\u043A\u0430\u044F",
  "kum": "\u043A\u0443\u043C\u044B\u0446\u043A\u0430\u044F",
  "kv": "\u043A\u043E\u043C\u0456",
  "kw": "\u043A\u043E\u0440\u043D\u0441\u043A\u0430\u044F",
  "ky": "\u043A\u0456\u0440\u0433\u0456\u0437\u0441\u043A\u0430\u044F",
  "la": "\u043B\u0430\u0446\u0456\u043D\u0441\u043A\u0430\u044F",
  "lad": "\u043B\u0430\u0434\u044B\u043D\u0430",
  "lag": "\u043B\u0430\u043D\u0433\u0456",
  "lb": "\u043B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0430\u044F",
  "lez": "\u043B\u0435\u0437\u0433\u0456\u043D\u0441\u043A\u0430\u044F",
  "lg": "\u0433\u0430\u043D\u0434\u0430",
  "li": "\u043B\u0456\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0430\u044F",
  "lij": "lij",
  "lkt": "\u043B\u0430\u043A\u043E\u0442\u0430",
  "ln": "\u043B\u0456\u043D\u0433\u0430\u043B\u0430",
  "lo": "\u043B\u0430\u043E\u0441\u043A\u0430\u044F",
  "lol": "\u043C\u043E\u043D\u0433\u0430",
  "lou": "lou",
  "loz": "\u043B\u043E\u0437\u0456",
  "lrc": "\u043F\u0430\u045E\u043D\u043E\u0447\u043D\u0430\u044F \u043B\u0443\u0440\u044B",
  "lt": "\u043B\u0456\u0442\u043E\u045E\u0441\u043A\u0430\u044F",
  "lu": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0442\u0430\u043D\u0433\u0430",
  "lua": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0441\u0430\u0456",
  "lun": "\u043B\u0443\u043D\u0434\u0430",
  "luo": "\u043B\u0443\u043E",
  "lus": "\u043C\u0456\u0437\u043E",
  "luy": "\u043B\u0443\u0439\u044F",
  "lv": "\u043B\u0430\u0442\u044B\u0448\u0441\u043A\u0430\u044F",
  "mad": "\u043C\u0430\u0434\u0443\u0440\u0441\u043A\u0430\u044F",
  "mag": "\u043C\u0430\u0433\u0430\u0445\u0456",
  "mai": "\u043C\u0430\u0439\u0442\u0445\u0456\u043B\u0456",
  "mak": "\u043C\u0430\u043A\u0430\u0441\u0430\u0440",
  "man": "\u043C\u0430\u043D\u0434\u044B\u043D\u0433",
  "mas": "\u043C\u0430\u0430\u0441\u0430\u0439",
  "mdf": "\u043C\u0430\u043A\u0448\u0430\u043D\u0441\u043A\u0430\u044F",
  "men": "\u043C\u0435\u043D\u0434\u044D",
  "mer": "\u043C\u0435\u0440\u0443",
  "mfe": "\u043C\u0430\u0440\u044B\u0441\u044C\u0435\u043D",
  "mg": "\u043C\u0430\u043B\u0430\u0433\u0430\u0441\u0456\u0439\u0441\u043A\u0430\u044F",
  "mgh": "\u043C\u0430\u043A\u0443\u045E\u0430-\u043C\u0435\u0435\u0442\u0430",
  "mgo": "\u043C\u0435\u0442\u0430",
  "mh": "\u043C\u0430\u0440\u0448\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "mi": "\u043C\u0430\u0430\u0440\u044B",
  "mic": "\u043C\u0456\u043A\u043C\u0430\u043A",
  "min": "\u043C\u0456\u043D\u0430\u043D\u0433\u043A\u0430\u0431\u0430\u0443",
  "mk": "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0430\u044F",
  "ml": "\u043C\u0430\u043B\u0430\u044F\u043B\u0430\u043C",
  "mn": "\u043C\u0430\u043D\u0433\u043E\u043B\u044C\u0441\u043A\u0430\u044F",
  "mni": "\u043C\u0435\u0439\u0442\u044D\u0439",
  "moh": "\u043C\u043E\u0445\u0430\u043A",
  "mos": "\u043C\u043E\u0441\u0456",
  "mr": "\u043C\u0430\u0440\u0430\u0442\u0445\u0456",
  "ms": "\u043C\u0430\u043B\u0430\u0439\u0441\u043A\u0430\u044F",
  "mt": "\u043C\u0430\u043B\u044C\u0442\u044B\u0439\u0441\u043A\u0430\u044F",
  "mua": "\u043C\u0443\u043D\u0434\u0430\u043D\u0433",
  "mul": "\u043D\u0435\u043A\u0430\u043B\u044C\u043A\u0456 \u043C\u043E\u045E",
  "mus": "\u043C\u0443\u0441\u043A\u043E\u0433\u0456",
  "mwl": "\u043C\u0456\u0440\u0430\u043D\u0434\u044B\u0439\u0441\u043A\u0430\u044F",
  "my": "\u0431\u0456\u0440\u043C\u0430\u043D\u0441\u043A\u0430\u044F",
  "myv": "\u044D\u0440\u0437\u044F\u043D\u0441\u043A\u0430\u044F",
  "mzn": "\u043C\u0430\u0437\u0430\u043D\u0434\u044D\u0440\u0430\u043D\u0441\u043A\u0430\u044F",
  "na": "\u043D\u0430\u0443\u0440\u0443",
  "nap": "\u043D\u0435\u0430\u043F\u0430\u043B\u0456\u0442\u0430\u043D\u0441\u043A\u0430\u044F",
  "naq": "\u043D\u0430\u043C\u0430",
  "nb": "\u043D\u0430\u0440\u0432\u0435\u0436\u0441\u043A\u0430\u044F (\u0431\u0443\u043A\u043C\u043E\u043B)",
  "nd": "\u043F\u0430\u045E\u043D\u043E\u0447\u043D\u0430\u044F \u043D\u0434\u044D\u0431\u0435\u043B\u0435",
  "nds": "\u043D\u0456\u0436\u043D\u0435\u043D\u044F\u043C\u0435\u0446\u043A\u0430\u044F",
  "nds-NL": "\u043D\u0456\u0436\u043D\u0435\u0441\u0430\u043A\u0441\u043E\u043D\u0441\u043A\u0430\u044F",
  "ne": "\u043D\u0435\u043F\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "new": "\u043D\u0435\u045E\u0430\u0440\u044B",
  "ng": "\u043D\u0434\u043E\u043D\u0433\u0430",
  "nia": "\u043D\u0456\u0430\u0441",
  "niu": "\u043D\u0456\u045E\u044D",
  "nl": "\u043D\u0456\u0434\u044D\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "nl-BE": "\u0444\u043B\u0430\u043C\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "nmg": "\u043D\u0433\u0443\u043C\u0431\u0430",
  "nn": "\u043D\u0430\u0440\u0432\u0435\u0436\u0441\u043A\u0430\u044F (\u043D\u044E\u043D\u043E\u0448\u043A)",
  "nnh": "\u043D\u0433\u2019\u0435\u043C\u0431\u043E\u043D",
  "no": "\u043D\u0430\u0440\u0432\u0435\u0436\u0441\u043A\u0430\u044F",
  "nog": "\u043D\u0430\u0433\u0430\u0439\u0441\u043A\u0430\u044F",
  "non": "\u0441\u0442\u0430\u0440\u0430\u043D\u0430\u0440\u0432\u0435\u0436\u0441\u043A\u0430\u044F",
  "nqo": "\u043D\u043A\u043E",
  "nr": "\u043F\u0430\u045E\u0434\u043D\u0451\u0432\u0430\u044F \u043D\u0434\u044D\u0431\u0435\u043B\u0435",
  "nso": "\u043F\u0430\u045E\u043D\u043E\u0447\u043D\u0430\u044F \u0441\u043E\u0442\u0430",
  "nus": "\u043D\u0443\u044D\u0440",
  "nv": "\u043D\u0430\u0432\u0430\u0445\u0430",
  "ny": "\u043D\u044C\u044F\u043D\u0434\u0436\u0430",
  "nyn": "\u043D\u044C\u044F\u043D\u043A\u043E\u043B\u0435",
  "oc": "\u0430\u043A\u0441\u0456\u0442\u0430\u043D\u0441\u043A\u0430\u044F",
  "oj": "\u0430\u0434\u0436\u044B\u0431\u0432\u0430",
  "om": "\u0430\u0440\u043E\u043C\u0430",
  "or": "\u043E\u0440\u044B\u044F",
  "os": "\u0430\u0441\u0435\u0446\u0456\u043D\u0441\u043A\u0430\u044F",
  "pa": "\u043F\u0430\u043D\u0434\u0436\u0430\u0431\u0456",
  "pag": "\u043F\u0430\u043D\u0433\u0430\u0441\u0456\u043D\u0430\u043D",
  "pam": "\u043F\u0430\u043C\u043F\u0430\u043D\u0433\u0430",
  "pap": "\u043F\u0430\u043F\u2019\u044F\u043C\u0435\u043D\u0442\u0443",
  "pau": "\u043F\u0430\u043B\u0430\u0443",
  "pcm": "\u043D\u0456\u0433\u0435\u0440\u044B\u0439\u0441\u043A\u0456 \u043F\u0456\u0434\u0436\u044B\u043D",
  "peo": "\u0441\u0442\u0430\u0440\u0430\u043F\u0435\u0440\u0441\u0456\u0434\u0441\u043A\u0430\u044F",
  "phn": "\u0444\u0456\u043D\u0456\u043A\u0456\u0439\u0441\u043A\u0430\u044F",
  "pl": "\u043F\u043E\u043B\u044C\u0441\u043A\u0430\u044F",
  "prg": "\u043F\u0440\u0443\u0441\u043A\u0430\u044F",
  "pro": "\u0441\u0442\u0430\u0440\u0430\u043F\u0440\u0430\u0432\u0430\u043D\u0441\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "ps": "\u043F\u0443\u0448\u0442\u0443",
  "pt": "\u043F\u0430\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "pt-BR": "\u0431\u0440\u0430\u0437\u0456\u043B\u044C\u0441\u043A\u0430\u044F \u043F\u0430\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "pt-PT": "\u0435\u045E\u0440\u0430\u043F\u0435\u0439\u0441\u043A\u0430\u044F \u043F\u0430\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "qu": "\u043A\u0435\u0447\u0443\u0430",
  "quc": "\u043A\u0456\u0447\u044D",
  "raj": "\u0440\u0430\u0434\u0436\u0430\u0441\u0442\u0445\u0430\u043D\u0441\u043A\u0430\u044F",
  "rap": "\u0440\u0430\u043F\u0430\u043D\u0443\u0456",
  "rar": "\u0440\u0430\u0440\u0430\u0442\u043E\u043D\u0433",
  "rhg": "\u0440\u0430\u0445\u0456\u043D\u0434\u0436\u0430",
  "rm": "\u0440\u044D\u0442\u0430\u0440\u0430\u043C\u0430\u043D\u0441\u043A\u0430\u044F",
  "rn": "\u0440\u0443\u043D\u0434\u0437\u0456",
  "ro": "\u0440\u0443\u043C\u044B\u043D\u0441\u043A\u0430\u044F",
  "ro-MD": "\u043C\u0430\u043B\u0434\u0430\u045E\u0441\u043A\u0430\u044F",
  "rof": "\u0440\u043E\u043C\u0431\u0430",
  "ru": "\u0440\u0443\u0441\u043A\u0430\u044F",
  "rup": "\u0430\u0440\u0443\u043C\u0443\u043D\u0441\u043A\u0430\u044F",
  "rw": "\u0440\u0443\u0430\u043D\u0434\u0430",
  "rwk": "\u0440\u0443\u0430",
  "sa": "\u0441\u0430\u043D\u0441\u043A\u0440\u044B\u0442",
  "sad": "\u0441\u0430\u043D\u0434\u0430\u045E\u044D",
  "sah": "\u044F\u043A\u0443\u0446\u043A\u0430\u044F",
  "saq": "\u0441\u0430\u043C\u0431\u0443\u0440\u0443",
  "sat": "\u0441\u0430\u043D\u0442\u0430\u043B\u0456",
  "sba": "\u043D\u0433\u0430\u043C\u0431\u0430\u0439",
  "sbp": "\u0441\u0430\u043D\u0433\u0443",
  "sc": "\u0441\u0430\u0440\u0434\u0437\u0456\u043D\u0441\u043A\u0430\u044F",
  "scn": "\u0441\u0456\u0446\u044B\u043B\u0456\u0439\u0441\u043A\u0430\u044F",
  "sco": "\u0448\u0430\u0442\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "sd": "\u0441\u0456\u043D\u0434\u0445\u0456",
  "sdh": "\u043F\u0430\u045E\u0434\u043D\u0451\u0432\u0430\u043A\u0443\u0440\u0434\u0441\u043A\u0430\u044F",
  "se": "\u043F\u0430\u045E\u043D\u043E\u0447\u043D\u0430\u0441\u0430\u0430\u043C\u0441\u043A\u0430\u044F",
  "seh": "\u0441\u0435\u043D\u0430",
  "ses": "\u043A\u0430\u0439\u0440\u0430\u0431\u043E\u0440\u0430 \u0441\u044D\u043D\u0456",
  "sg": "\u0441\u0430\u043D\u0433\u0430",
  "sga": "\u0441\u0442\u0430\u0440\u0430\u0456\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0430\u044F",
  "sh": "\u0441\u0435\u0440\u0431\u0441\u043A\u0430\u0445\u0430\u0440\u0432\u0430\u0446\u043A\u0430\u044F",
  "shi": "\u0442\u0430\u0448\u044D\u043B\u044C\u0445\u0456\u0442",
  "shn": "\u0448\u0430\u043D",
  "si": "\u0441\u0456\u043D\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F",
  "sk": "\u0441\u043B\u0430\u0432\u0430\u0446\u043A\u0430\u044F",
  "sl": "\u0441\u043B\u0430\u0432\u0435\u043D\u0441\u043A\u0430\u044F",
  "sm": "\u0441\u0430\u043C\u043E\u0430",
  "sma": "\u043F\u0430\u045E\u0434\u043D\u0451\u0432\u0430\u0441\u0430\u0430\u043C\u0441\u043A\u0430\u044F",
  "smj": "\u043B\u0443\u043B\u0435-\u0441\u0430\u0430\u043C\u0441\u043A\u0430\u044F",
  "smn": "\u0456\u043D\u0430\u0440\u044B-\u0441\u0430\u0430\u043C\u0441\u043A\u0430\u044F",
  "sms": "\u043A\u043E\u043B\u0442\u0430-\u0441\u0430\u0430\u043C\u0441\u043A\u0430\u044F",
  "sn": "\u0448\u043E\u043D\u0430",
  "snk": "\u0441\u0430\u043D\u0456\u043D\u043A\u0435",
  "so": "\u0441\u0430\u043C\u0430\u043B\u0456",
  "sq": "\u0430\u043B\u0431\u0430\u043D\u0441\u043A\u0430\u044F",
  "sr": "\u0441\u0435\u0440\u0431\u0441\u043A\u0430\u044F",
  "srn": "\u0441\u0440\u0430\u043D\u0430\u043D-\u0442\u043E\u043D\u0433\u0430",
  "ss": "\u0441\u0443\u0430\u0446\u0456",
  "ssy": "\u0441\u0430\u0445\u0430",
  "st": "\u0441\u0435\u0441\u0443\u0442\u0430",
  "su": "\u0441\u0443\u043D\u0434\u0430",
  "suk": "\u0441\u0443\u043A\u0443\u043C\u0430",
  "sux": "\u0448\u0443\u043C\u0435\u0440\u0441\u043A\u0430\u044F",
  "sv": "\u0448\u0432\u0435\u0434\u0441\u043A\u0430\u044F",
  "sw": "\u0441\u0443\u0430\u0445\u0456\u043B\u0456",
  "sw-CD": "\u043A\u0430\u043D\u0433\u0430\u043B\u0435\u0437\u0441\u043A\u0430\u044F \u0441\u0443\u0430\u0445\u0456\u043B\u0456",
  "swb": "\u043A\u0430\u043C\u043E\u0440\u0441\u043A\u0430\u044F",
  "syr": "\u0441\u0456\u0440\u044B\u0439\u0441\u043A\u0430\u044F",
  "ta": "\u0442\u0430\u043C\u0456\u043B\u044C\u0441\u043A\u0430\u044F",
  "te": "\u0442\u044D\u043B\u0443\u0433\u0443",
  "tem": "\u0442\u044D\u043C\u043D\u044D",
  "teo": "\u0442\u044D\u0441\u043E",
  "tet": "\u0442\u044D\u0442\u0443\u043C",
  "tg": "\u0442\u0430\u0434\u0436\u044B\u043A\u0441\u043A\u0430\u044F",
  "th": "\u0442\u0430\u0439\u0441\u043A\u0430\u044F",
  "ti": "\u0442\u044B\u0433\u0440\u044B\u043D\u044C\u044F",
  "tig": "\u0442\u044B\u0433\u0440\u044D",
  "tk": "\u0442\u0443\u0440\u043A\u043C\u0435\u043D\u0441\u043A\u0430\u044F",
  "tlh": "\u043A\u043B\u0456\u043D\u0433\u0430\u043D",
  "tn": "\u0442\u0441\u0432\u0430\u043D\u0430",
  "to": "\u0442\u0430\u043D\u0433\u0430\u043D\u0441\u043A\u0430\u044F",
  "tpi": "\u0442\u043E\u043A-\u043F\u0456\u0441\u0456\u043D",
  "tr": "\u0442\u0443\u0440\u044D\u0446\u043A\u0430\u044F",
  "trv": "\u0442\u0430\u0440\u043E\u043A\u0430",
  "ts": "\u0442\u0441\u043E\u043D\u0433\u0430",
  "tt": "\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0430\u044F",
  "tum": "\u0442\u0443\u043C\u0431\u0443\u043A\u0430",
  "tvl": "\u0442\u0443\u0432\u0430\u043B\u0443",
  "twq": "\u0442\u0430\u0441\u0430\u045E\u0430\u043A",
  "ty": "\u0442\u0430\u0456\u0446\u0456",
  "tyv": "\u0442\u0443\u0432\u0456\u043D\u0441\u043A\u0430\u044F",
  "tzm": "\u0441\u044F\u0440\u044D\u0434\u043D\u0435\u0430\u0442\u043B\u0430\u0441\u043A\u0430\u044F \u0442\u0430\u043C\u0430\u0437\u0456\u0433\u0445\u0442",
  "udm": "\u0443\u0434\u043C\u0443\u0440\u0446\u043A\u0430\u044F",
  "ug": "\u0443\u0439\u0433\u0443\u0440\u0441\u043A\u0430\u044F",
  "uk": "\u0443\u043A\u0440\u0430\u0456\u043D\u0441\u043A\u0430\u044F",
  "umb": "\u0443\u043C\u0431\u0443\u043D\u0434\u0443",
  "und": "\u043D\u0435\u0432\u044F\u0434\u043E\u043C\u0430\u044F \u043C\u043E\u0432\u0430",
  "ur": "\u0443\u0440\u0434\u0443",
  "uz": "\u0443\u0437\u0431\u0435\u043A\u0441\u043A\u0430\u044F",
  "vai": "\u0432\u0430\u0456",
  "ve": "\u0432\u0435\u043D\u0434\u0430",
  "vi": "\u0432\u2019\u0435\u0442\u043D\u0430\u043C\u0441\u043A\u0430\u044F",
  "vo": "\u0432\u0430\u043B\u0430\u043F\u044E\u043A",
  "vun": "\u0432\u0443\u043D\u0434\u0436\u043E",
  "wa": "\u0432\u0430\u043B\u043E\u043D\u0441\u043A\u0430\u044F",
  "wae": "\u0432\u0430\u043B\u044C\u0448\u0441\u043A\u0430\u044F",
  "wal": "\u0432\u043E\u043B\u0430\u0439\u0442\u0430",
  "war": "\u0432\u0430\u0440\u0430\u0439",
  "wbp": "\u0432\u0430\u0440\u043B\u043F\u0456\u0440\u044B",
  "wo": "\u0432\u0430\u043B\u043E\u0444",
  "xal": "\u043A\u0430\u043B\u043C\u044B\u0446\u043A\u0430\u044F",
  "xh": "\u043A\u043E\u0441\u0430",
  "xog": "\u0441\u043E\u0433\u0430",
  "yav": "\u044F\u043D\u0433\u0431\u044D\u043D",
  "ybb": "\u0439\u0435\u043C\u0431\u0430",
  "yi": "\u0456\u0434\u044B\u0448",
  "yo": "\u0451\u0440\u0443\u0431\u0430",
  "yrl": "yrl",
  "yue": "\u043A\u0430\u043D\u0442\u043E\u043D\u0441\u043A\u0456 \u0434\u044B\u044F\u043B\u0435\u043A\u0442 \u043A\u0456\u0442\u0430\u0439\u0441\u043A\u0430\u0439",
  "zap": "\u0441\u0430\u043F\u0430\u0442\u044D\u043A",
  "zgh": "\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F \u043C\u0430\u0440\u0430\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0442\u0430\u043C\u0430\u0437\u0456\u0445\u0442",
  "zh": "\u043A\u0456\u0442\u0430\u0439\u0441\u043A\u0430\u044F",
  "zh-Hans": "\u043A\u0456\u0442\u0430\u0439\u0441\u043A\u0430\u044F (\u0441\u043F\u0440\u043E\u0448\u0447\u0430\u043D\u044B\u044F \u0456\u0435\u0440\u043E\u0433\u043B\u0456\u0444\u044B)",
  "zh-Hant": "\u043A\u0456\u0442\u0430\u0439\u0441\u043A\u0430\u044F (\u0442\u0440\u0430\u0434\u044B\u0446\u044B\u0439\u043D\u044B\u044F \u0456\u0435\u0440\u043E\u0433\u043B\u0456\u0444\u044B)",
  "zu": "\u0437\u0443\u043B\u0443",
  "zun": "\u0437\u0443\u043D\u0456",
  "zxx": "\u043D\u044F\u043C\u0430 \u043C\u043E\u045E\u043D\u0430\u0433\u0430 \u043C\u0430\u0442\u044D\u0440\u044B\u044F\u043B\u0443",
  "zza": "\u0437\u0430\u0437\u0430\u043A\u0456"
};

// src/l10n/locale/bg.ts
var bg_default = {
  "aa": "\u0430\u0444\u0430\u0440\u0441\u043A\u0438",
  "ab": "\u0430\u0431\u0445\u0430\u0437\u043A\u0438",
  "ace": "\u0430\u0447\u0435\u0448\u043A\u0438",
  "ach": "\u0430\u043A\u043E\u043B\u0438",
  "ada": "\u0430\u0434\u0430\u043D\u0433\u043C\u0435",
  "ady": "\u0430\u0434\u0438\u0433\u0435\u0439\u0441\u043A\u0438",
  "ae": "\u0430\u0432\u0435\u0441\u0442\u0441\u043A\u0438",
  "af": "\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441",
  "afh": "\u0430\u0444\u0440\u0438\u0445\u0438\u043B\u0438",
  "agq": "\u0430\u0433\u0435\u043C",
  "ain": "\u0430\u0439\u043D\u0443",
  "ak": "\u0430\u043A\u0430\u043D",
  "akk": "\u0430\u043A\u0430\u0434\u0441\u043A\u0438",
  "ale": "\u0430\u043B\u0435\u0443\u0442\u0441\u043A\u0438",
  "alt": "\u044E\u0436\u043D\u043E\u0430\u043B\u0442\u0430\u0439\u0441\u043A\u0438",
  "am": "\u0430\u043C\u0445\u0430\u0440\u0441\u043A\u0438",
  "an": "\u0430\u0440\u0430\u0433\u043E\u043D\u0441\u043A\u0438",
  "ang": "\u0441\u0442\u0430\u0440\u043E\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "anp": "\u0430\u043D\u0433\u0438\u043A\u0430",
  "ar": "\u0430\u0440\u0430\u0431\u0441\u043A\u0438",
  "ar-001": "\u0441\u044A\u0432\u0440\u0435\u043C\u0435\u043D\u0435\u043D \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0435\u043D \u0430\u0440\u0430\u0431\u0441\u043A\u0438",
  "arc": "\u0430\u0440\u0430\u043C\u0435\u0439\u0441\u043A\u0438",
  "arn": "\u043C\u0430\u043F\u0443\u0447\u0435",
  "arp": "\u0430\u0440\u0430\u043F\u0430\u0445\u043E",
  "arw": "\u0430\u0440\u0430\u0432\u0430\u043A",
  "as": "\u0430\u0441\u0430\u043C\u0441\u043A\u0438",
  "asa": "\u0430\u0441\u0443",
  "ast": "\u0430\u0441\u0442\u0443\u0440\u0441\u043A\u0438",
  "av": "\u0430\u0432\u0430\u0440\u0441\u043A\u0438",
  "awa": "\u0430\u0432\u0430\u0434\u0438",
  "ay": "\u0430\u0439\u043C\u0430\u0440\u0430",
  "az": "\u0430\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u043A\u0438",
  "ba": "\u0431\u0430\u0448\u043A\u0438\u0440\u0441\u043A\u0438",
  "bal": "\u0431\u0430\u043B\u0443\u0447\u0438",
  "ban": "\u0431\u0430\u043B\u0438\u0439\u0441\u043A\u0438",
  "bas": "\u0431\u0430\u0441\u0430",
  "be": "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0438",
  "bej": "\u0431\u0435\u044F",
  "bem": "\u0431\u0435\u043C\u0431\u0430",
  "bez": "\u0431\u0435\u043D\u0430",
  "bg": "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
  "bgn": "\u0437\u0430\u043F\u0430\u0434\u0435\u043D \u0431\u0430\u043B\u043E\u0447\u0438",
  "bho": "\u0431\u043E\u0434\u0436\u043F\u0443\u0440\u0438",
  "bi": "\u0431\u0438\u0441\u043B\u0430\u043C\u0430",
  "bik": "\u0431\u0438\u043A\u043E\u043B\u0441\u043A\u0438",
  "bin": "\u0431\u0438\u043D\u0438",
  "bla": "\u0441\u0438\u043A\u0441\u0438\u043A\u0430",
  "bm": "\u0431\u0430\u043C\u0431\u0430\u0440\u0430",
  "bn": "\u0431\u0435\u043D\u0433\u0430\u043B\u0441\u043A\u0438",
  "bo": "\u0442\u0438\u0431\u0435\u0442\u0441\u043A\u0438",
  "br": "\u0431\u0440\u0435\u0442\u043E\u043D\u0441\u043A\u0438",
  "bra": "\u0431\u0440\u0430\u0434\u0436",
  "brx": "\u0431\u043E\u0434\u043E",
  "bs": "\u0431\u043E\u0441\u043D\u0435\u043D\u0441\u043A\u0438",
  "bua": "\u0431\u0443\u0440\u044F\u0442\u0441\u043A\u0438",
  "bug": "\u0431\u0443\u0433\u0438\u043D\u0441\u043A\u0438",
  "byn": "\u0431\u0438\u043B\u0435\u043D\u0441\u043A\u0438",
  "ca": "\u043A\u0430\u0442\u0430\u043B\u043E\u043D\u0441\u043A\u0438",
  "cad": "\u043A\u0430\u0434\u0434\u043E",
  "car": "\u043A\u0430\u0440\u0438\u0431\u0441\u043A\u0438",
  "cch": "\u0430\u0442\u0441\u0430\u043C",
  "ccp": "\u0447\u0430\u043A\u043C\u0430",
  "ce": "\u0447\u0435\u0447\u0435\u043D\u0441\u043A\u0438",
  "ceb": "\u0441\u0435\u0431\u0443\u0430\u043D\u0441\u043A\u0438",
  "cgg": "\u0447\u0438\u0433\u0430",
  "ch": "\u0447\u0430\u043C\u043E\u0440\u043E",
  "chb": "\u0447\u0438\u0431\u0447\u0430",
  "chg": "\u0447\u0430\u0433\u0430\u0442\u0430\u0439",
  "chk": "\u0447\u0443\u0443\u043A",
  "chm": "\u043C\u0430\u0440\u0438\u0439\u0441\u043A\u0438",
  "chn": "\u0436\u0430\u0440\u0433\u043E\u043D \u0447\u0438\u043D\u0443\u0443\u043A",
  "cho": "\u0447\u043E\u043A\u0442\u043E",
  "chp": "\u0447\u0438\u0438\u043F\u0443\u0432\u0441\u043A\u0438",
  "chr": "\u0447\u0435\u0440\u043E\u043A\u0441\u043A\u0438",
  "chy": "\u0448\u0430\u0439\u0435\u043D\u0441\u043A\u0438",
  "ckb": "\u043A\u044E\u0440\u0434\u0441\u043A\u0438 (\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u0435\u043D)",
  "co": "\u043A\u043E\u0440\u0441\u0438\u043A\u0430\u043D\u0441\u043A\u0438",
  "cop": "\u043A\u043E\u043F\u0442\u0441\u043A\u0438",
  "cr": "\u043A\u0440\u0438\u0438",
  "crh": "\u043A\u0440\u0438\u043C\u0441\u043A\u043E\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438",
  "crs": "\u0441\u0435\u0441\u0435\u043B\u0432\u0430, \u043A\u0440\u0435\u043E\u043B\u0441\u043A\u0438 \u0444\u0440\u0435\u043D\u0441\u043A\u0438",
  "cs": "\u0447\u0435\u0448\u043A\u0438",
  "csb": "\u043A\u0430\u0448\u0443\u0431\u0441\u043A\u0438",
  "cu": "\u0446\u044A\u0440\u043A\u043E\u0432\u043D\u043E\u0441\u043B\u0430\u0432\u044F\u043D\u0441\u043A\u0438",
  "cv": "\u0447\u0443\u0432\u0430\u0448\u043A\u0438",
  "cy": "\u0443\u0435\u043B\u0441\u043A\u0438",
  "da": "\u0434\u0430\u0442\u0441\u043A\u0438",
  "dak": "\u0434\u0430\u043A\u043E\u0442\u0441\u043A\u0438",
  "dar": "\u0434\u0430\u0440\u0433\u0438\u043D\u0441\u043A\u0438",
  "dav": "\u0442\u0430\u0438\u0442\u0430",
  "de": "\u043D\u0435\u043C\u0441\u043A\u0438",
  "de-AT": "\u043D\u0435\u043C\u0441\u043A\u0438 (\u0410\u0432\u0441\u0442\u0440\u0438\u044F)",
  "de-CH": "\u043D\u0435\u043C\u0441\u043A\u0438 (\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F)",
  "del": "\u0434\u0435\u043B\u0430\u0443\u0435\u0440",
  "den": "\u0441\u043B\u0435\u0439\u0432\u0438",
  "dgr": "\u0434\u043E\u0433\u0440\u0438\u0431",
  "din": "\u0434\u0438\u043D\u043A\u0430",
  "dje": "\u0437\u0430\u0440\u043C\u0430",
  "doi": "\u0434\u043E\u0433\u0440\u0438",
  "dsb": "\u0434\u043E\u043B\u043D\u043E\u043B\u0443\u0436\u0438\u0448\u043A\u0438",
  "dua": "\u0434\u0443\u0430\u043B\u0430",
  "dum": "\u0441\u0440\u0435\u0434\u043D\u043E\u0432\u0435\u043A\u043E\u0432\u0435\u043D \u0445\u043E\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "dv": "\u0434\u0438\u0432\u0435\u0445\u0438",
  "dyo": "\u0434\u0438\u043E\u043B\u0430-\u0444\u043E\u043D\u0438",
  "dyu": "\u0434\u0438\u0443\u043B\u0430",
  "dz": "\u0434\u0437\u043E\u043D\u0433\u043A\u0445\u0430",
  "dzg": "\u0434\u0430\u0437\u0430\u0433\u0430",
  "ebu": "\u0435\u043C\u0431\u0443",
  "ee": "\u0435\u0432\u0435",
  "efi": "\u0435\u0444\u0438\u043A",
  "egy": "\u0434\u0440\u0435\u0432\u043D\u043E\u0435\u0433\u0438\u043F\u0435\u0442\u0441\u043A\u0438",
  "eka": "\u0435\u043A\u0430\u0436\u0443\u043A",
  "el": "\u0433\u0440\u044A\u0446\u043A\u0438",
  "elx": "\u0435\u043B\u0430\u043C\u0438\u0442\u0441\u043A\u0438",
  "en": "\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "en-AU": "\u0430\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u0439\u0441\u043A\u0438 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "en-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0438 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "en-GB": "\u0431\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "en-US": "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "enm": "\u0441\u0440\u0435\u0434\u043D\u043E\u0432\u0435\u043A\u043E\u0432\u0435\u043D \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438",
  "eo": "\u0435\u0441\u043F\u0435\u0440\u0430\u043D\u0442\u043E",
  "es": "\u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438",
  "es-419": "\u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438 (\u041B\u0430\u0442\u0438\u043D\u0441\u043A\u0430 \u0410\u043C\u0435\u0440\u0438\u043A\u0430)",
  "es-ES": "\u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438 (\u0418\u0441\u043F\u0430\u043D\u0438\u044F)",
  "es-MX": "\u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438 (\u041C\u0435\u043A\u0441\u0438\u043A\u043E)",
  "et": "\u0435\u0441\u0442\u043E\u043D\u0441\u043A\u0438",
  "eu": "\u0431\u0430\u0441\u043A\u0438",
  "ewo": "\u0435\u0432\u043E\u043D\u0434\u043E",
  "fa": "\u043F\u0435\u0440\u0441\u0438\u0439\u0441\u043A\u0438",
  "fa-AF": "\u0434\u0430\u0440\u0438",
  "fan": "\u0444\u0430\u043D\u0433",
  "fat": "\u0444\u0430\u043D\u0442\u0438",
  "ff": "\u0444\u0443\u043B\u0430",
  "fi": "\u0444\u0438\u043D\u0441\u043A\u0438",
  "fil": "\u0444\u0438\u043B\u0438\u043F\u0438\u043D\u0441\u043A\u0438",
  "fj": "\u0444\u0438\u0434\u0436\u0438\u0439\u0441\u043A\u0438",
  "fo": "\u0444\u0430\u0440\u044C\u043E\u0440\u0441\u043A\u0438",
  "fon": "\u0444\u043E\u043D",
  "fr": "\u0444\u0440\u0435\u043D\u0441\u043A\u0438",
  "fr-CA": "\u0444\u0440\u0435\u043D\u0441\u043A\u0438 (\u041A\u0430\u043D\u0430\u0434\u0430)",
  "fr-CH": "\u0444\u0440\u0435\u043D\u0441\u043A\u0438 (\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F)",
  "frc": "frc",
  "frm": "\u0441\u0440\u0435\u0434\u043D\u043E\u0432\u0435\u043A\u043E\u0432\u0435\u043D \u0444\u0440\u0435\u043D\u0441\u043A\u0438",
  "fro": "\u0441\u0442\u0430\u0440\u043E\u0444\u0440\u0435\u043D\u0441\u043A\u0438",
  "frr": "\u0441\u0435\u0432\u0435\u0440\u0435\u043D \u0444\u0440\u0438\u0437\u0441\u043A\u0438",
  "frs": "\u0438\u0437\u0442\u043E\u0447\u043D\u043E\u0444\u0440\u0438\u0437\u0438\u0439\u0441\u043A\u0438",
  "fur": "\u0444\u0440\u0438\u0443\u043B\u0441\u043A\u0438",
  "fy": "\u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0444\u0440\u0438\u0437\u0438\u0439\u0441\u043A\u0438",
  "ga": "\u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "gaa": "\u0433\u0430",
  "gag": "\u0433\u0430\u0433\u0430\u0443\u0437\u043A\u0438",
  "gay": "\u0433\u0430\u0439\u043E",
  "gba": "\u0433\u0431\u0430\u044F",
  "gd": "\u0448\u043E\u0442\u043B\u0430\u043D\u0434\u0441\u043A\u0438 \u043A\u0435\u043B\u0442\u0441\u043A\u0438",
  "gez": "\u0433\u0438\u0438\u0437",
  "gil": "\u0433\u0438\u043B\u0431\u0435\u0440\u0442\u0441\u043A\u0438",
  "gl": "\u0433\u0430\u043B\u0438\u0441\u0438\u0439\u0441\u043A\u0438",
  "gmh": "\u0441\u0440\u0435\u0434\u043D\u043E\u0432\u0438\u0441\u043E\u043A\u043E\u043D\u0435\u043C\u0441\u043A\u0438",
  "gn": "\u0433\u0443\u0430\u0440\u0430\u043D\u0438",
  "goh": "\u0441\u0442\u0430\u0440\u043E\u0432\u0438\u0441\u043E\u043A\u043E\u043D\u0435\u043C\u0441\u043A\u0438",
  "gon": "\u0433\u043E\u043D\u0434\u0438",
  "gor": "\u0433\u043E\u0440\u043E\u043D\u0442\u0430\u043B\u043E",
  "got": "\u0433\u043E\u0442\u0438\u0447\u0435\u0441\u043A\u0438",
  "grb": "\u0433\u0440\u0435\u0431\u043E",
  "grc": "\u0434\u0440\u0435\u0432\u043D\u043E\u0433\u0440\u044A\u0446\u043A\u0438",
  "gsw": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0438 \u043D\u0435\u043C\u0441\u043A\u0438",
  "gu": "\u0433\u0443\u0434\u0436\u0430\u0440\u0430\u0442\u0438",
  "guz": "\u0433\u0443\u0441\u0438\u0438",
  "gv": "\u043C\u0430\u043D\u043A\u0441\u043A\u0438",
  "gwi": "\u0433\u0432\u0438\u0447\u0438\u043D",
  "ha": "\u0445\u0430\u0443\u0441\u0430",
  "hai": "\u0445\u0430\u0439\u0434\u0430",
  "haw": "\u0445\u0430\u0432\u0430\u0439\u0441\u043A\u0438",
  "he": "\u0438\u0432\u0440\u0438\u0442",
  "hi": "\u0445\u0438\u043D\u0434\u0438",
  "hil": "\u0445\u0438\u043B\u0438\u0433\u0430\u0439\u043D\u043E\u043D",
  "hit": "\u0445\u0438\u0442\u0441\u043A\u0438",
  "hmn": "\u0445\u043C\u043E\u043D\u0433",
  "ho": "\u0445\u0438\u0440\u0438 \u043C\u043E\u0442\u0443",
  "hr": "\u0445\u044A\u0440\u0432\u0430\u0442\u0441\u043A\u0438",
  "hsb": "\u0433\u043E\u0440\u043D\u043E\u043B\u0443\u0436\u0438\u0448\u043A\u0438",
  "ht": "\u0445\u0430\u0438\u0442\u044F\u043D\u0441\u043A\u0438 \u043A\u0440\u0435\u043E\u043B\u0441\u043A\u0438",
  "hu": "\u0443\u043D\u0433\u0430\u0440\u0441\u043A\u0438",
  "hup": "\u0445\u0443\u043F\u0430",
  "hy": "\u0430\u0440\u043C\u0435\u043D\u0441\u043A\u0438",
  "hz": "\u0445\u0435\u0440\u0435\u0440\u043E",
  "ia": "\u0438\u043D\u0442\u0435\u0440\u043B\u0438\u043D\u0433\u0432\u0430",
  "iba": "\u0438\u0431\u0430\u043D",
  "ibb": "\u0438\u0431\u0438\u0431\u0438\u043E",
  "id": "\u0438\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0439\u0441\u043A\u0438",
  "ie": "\u043E\u043A\u0441\u0438\u0434\u0435\u043D\u0442\u0430\u043B",
  "ig": "\u0438\u0433\u0431\u043E",
  "ii": "\u0441\u044A\u0447\u0443\u0430\u043D\u0441\u043A\u0438 \u0439\u0438",
  "ik": "\u0438\u043D\u0443\u043F\u0438\u0430\u043A",
  "ilo": "\u0438\u043B\u043E\u043A\u043E",
  "inh": "\u0438\u043D\u0433\u0443\u0448\u0435\u0442\u0441\u043A\u0438",
  "io": "\u0438\u0434\u043E",
  "is": "\u0438\u0441\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "it": "\u0438\u0442\u0430\u043B\u0438\u0430\u043D\u0441\u043A\u0438",
  "iu": "\u0438\u043D\u0443\u043A\u0442\u0438\u0442\u0443\u0442",
  "ja": "\u044F\u043F\u043E\u043D\u0441\u043A\u0438",
  "jbo": "\u043B\u043E\u0436\u0431\u0430\u043D",
  "jgo": "\u043D\u0433\u043E\u043C\u0431\u0430",
  "jmc": "\u043C\u0430\u0447\u0430\u043C\u0435",
  "jpr": "\u044E\u0434\u0435\u043E-\u043F\u0435\u0440\u0441\u0438\u0439\u0441\u043A\u0438",
  "jrb": "\u044E\u0434\u0435\u043E-\u0430\u0440\u0430\u0431\u0441\u043A\u0438",
  "jv": "\u044F\u0432\u0430\u043D\u0441\u043A\u0438",
  "ka": "\u0433\u0440\u0443\u0437\u0438\u043D\u0441\u043A\u0438",
  "kaa": "\u043A\u0430\u0440\u0430\u043A\u0430\u043B\u043F\u0430\u0448\u043A\u0438",
  "kab": "\u043A\u0430\u0431\u0438\u043B\u0441\u043A\u0438",
  "kac": "\u043A\u0430\u0447\u0438\u043D\u0441\u043A\u0438",
  "kaj": "\u0436\u0436\u0443",
  "kam": "\u043A\u0430\u043C\u0431\u0430",
  "kaw": "\u043A\u0430\u0432\u0438",
  "kbd": "\u043A\u0430\u0431\u0430\u0440\u0434\u0438\u0430\u043D",
  "kcg": "\u0442\u0443\u0430\u043F",
  "kde": "\u043C\u0430\u043A\u043E\u043D\u0434\u0435",
  "kea": "\u043A\u0430\u0431\u043E\u0432\u0435\u0440\u0434\u0438\u0430\u043D\u0441\u043A\u0438",
  "kfo": "\u043A\u043E\u0440\u043E",
  "kg": "\u043A\u043E\u043D\u0433\u043E\u0430\u043D\u0441\u043A\u0438",
  "kgp": "kgp",
  "kha": "\u043A\u0445\u0430\u0441\u0438",
  "kho": "\u043A\u043E\u0442\u0441\u043A\u0438",
  "khq": "\u043A\u043E\u0439\u0440\u0430 \u0447\u0438\u0438\u043D\u0438",
  "ki": "\u043A\u0438\u043A\u0443\u044E",
  "kj": "\u043A\u0432\u0430\u043D\u044F\u043C\u0430",
  "kk": "\u043A\u0430\u0437\u0430\u0445\u0441\u043A\u0438",
  "kkj": "\u043A\u0430\u043A\u043E",
  "kl": "\u0433\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "kln": "\u043A\u0430\u043B\u0435\u043D\u0434\u0436\u0438\u043D",
  "km": "\u043A\u0445\u043C\u0435\u0440\u0441\u043A\u0438",
  "kmb": "\u043A\u0438\u043C\u0431\u0443\u043D\u0434\u0443",
  "kn": "\u043A\u0430\u043D\u043D\u0430\u0434\u0430",
  "ko": "\u043A\u043E\u0440\u0435\u0439\u0441\u043A\u0438",
  "koi": "\u043A\u043E\u043C\u0438-\u043F\u0435\u0440\u043C\u044F\u043A\u0441\u043A\u0438",
  "kok": "\u043A\u043E\u043D\u043A\u0430\u043D\u0438",
  "kos": "\u043A\u043E\u0441\u0440\u0430\u0435\u043D",
  "kpe": "\u043A\u043F\u0435\u043B\u0435",
  "kr": "\u043A\u0430\u043D\u0443\u0440\u0438",
  "krc": "\u043A\u0430\u0440\u0430\u0447\u0430\u0439-\u0431\u0430\u043B\u043A\u0430\u0440\u0441\u043A\u0438",
  "krl": "\u043A\u0430\u0440\u0435\u043B\u0441\u043A\u0438",
  "kru": "\u043A\u0443\u0440\u0443\u043A",
  "ks": "\u043A\u0430\u0448\u043C\u0438\u0440\u0441\u043A\u0438",
  "ksb": "\u0448\u0430\u043C\u0431\u0430\u043B\u0430",
  "ksf": "\u0431\u0430\u0444\u0438\u044F",
  "ksh": "\u043A\u044C\u043E\u043B\u043D\u0441\u043A\u0438",
  "ku": "\u043A\u044E\u0440\u0434\u0441\u043A\u0438",
  "kum": "\u043A\u0443\u043C\u0438\u043A\u0441\u043A\u0438",
  "kut": "\u043A\u0443\u0442\u0435\u043D\u0430\u0439",
  "kv": "\u043A\u043E\u043C\u0438",
  "kw": "\u043A\u043E\u0440\u043D\u0443\u043E\u043B\u0441\u043A\u0438",
  "ky": "\u043A\u0438\u0440\u0433\u0438\u0437\u043A\u0438",
  "la": "\u043B\u0430\u0442\u0438\u043D\u0441\u043A\u0438",
  "lad": "\u043B\u0430\u0434\u0438\u043D\u043E",
  "lag": "\u043B\u0430\u043D\u0433\u0438",
  "lah": "\u043B\u0430\u0445\u043D\u0434\u0430",
  "lam": "\u043B\u0430\u043C\u0431\u0430",
  "lb": "\u043B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0438",
  "lez": "\u043B\u0435\u0437\u0433\u0438\u043D\u0441\u043A\u0438",
  "lg": "\u0433\u0430\u043D\u0434\u0430",
  "li": "\u043B\u0438\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0438",
  "lij": "lij",
  "lkt": "\u043B\u0430\u043A\u043E\u0442\u0430",
  "ln": "\u043B\u0438\u043D\u0433\u0430\u043B\u0430",
  "lo": "\u043B\u0430\u043E\u0441\u043A\u0438",
  "lol": "\u043C\u043E\u043D\u0433\u043E",
  "lou": "lou",
  "loz": "\u043B\u043E\u0437\u0438",
  "lrc": "\u0441\u0435\u0432\u0435\u0440\u0435\u043D \u043B\u0443\u0440\u0438",
  "lt": "\u043B\u0438\u0442\u043E\u0432\u0441\u043A\u0438",
  "lu": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0442\u0430\u043D\u0433\u0430",
  "lua": "\u043B\u0443\u0431\u0430-\u043B\u0443\u043B\u0443\u0430",
  "lui": "\u043B\u0443\u0438\u0441\u0435\u043D\u044C\u043E",
  "lun": "\u043B\u0443\u043D\u0434\u0430",
  "luo": "\u043B\u0443\u043E",
  "lus": "\u043C\u0438\u0437\u043E",
  "luy": "\u043B\u0443\u0445\u044F",
  "lv": "\u043B\u0430\u0442\u0432\u0438\u0439\u0441\u043A\u0438",
  "mad": "\u043C\u0430\u0434\u0443\u0440\u0441\u043A\u0438",
  "mag": "\u043C\u0430\u0433\u0430\u0445\u0438",
  "mai": "\u043C\u0430\u0439\u0442\u0445\u0438\u043B\u0438",
  "mak": "\u043C\u0430\u043A\u0430\u0441\u0430\u0440",
  "man": "\u043C\u0430\u043D\u0434\u0438\u043D\u0433\u043E",
  "mas": "\u043C\u0430\u0441\u0430\u0439\u0441\u043A\u0438",
  "mdf": "\u043C\u043E\u043A\u0448\u0430",
  "mdr": "\u043C\u0430\u043D\u0434\u0430\u0440",
  "men": "\u043C\u0435\u043D\u0434\u0435",
  "mer": "\u043C\u0435\u0440\u0443",
  "mfe": "\u043C\u043E\u0440\u0438\u0441\u0438\u0435\u043D",
  "mg": "\u043C\u0430\u043B\u0433\u0430\u0448\u043A\u0438",
  "mga": "\u0441\u0440\u0435\u0434\u043D\u043E\u0432\u0435\u043A\u043E\u0432\u0435\u043D \u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "mgh": "\u043C\u0430\u043A\u0443\u0430 \u043C\u0435\u0442\u043E",
  "mgo": "\u043C\u0435\u0442\u0430",
  "mh": "\u043C\u0430\u0440\u0448\u0430\u043B\u0435\u0437\u0435",
  "mi": "\u043C\u0430\u043E\u0440\u0441\u043A\u0438",
  "mic": "\u043C\u0438\u043A\u043C\u0430\u043A",
  "min": "\u043C\u0438\u043D\u0430\u043D\u0433\u043A\u0430\u0431\u0430\u0443",
  "mk": "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  "ml": "\u043C\u0430\u043B\u0430\u044F\u043B\u0430\u043C",
  "mn": "\u043C\u043E\u043D\u0433\u043E\u043B\u0441\u043A\u0438",
  "mnc": "\u043C\u0430\u043D\u0434\u0436\u0443\u0440\u0441\u043A\u0438",
  "mni": "\u043C\u0430\u043D\u0438\u043F\u0443\u0440\u0441\u043A\u0438",
  "moh": "\u043C\u043E\u0445\u043E\u0443\u043A",
  "mos": "\u043C\u043E\u0441\u0438",
  "mr": "\u043C\u0430\u0440\u0430\u0442\u0438",
  "ms": "\u043C\u0430\u043B\u0430\u0439\u0441\u043A\u0438",
  "mt": "\u043C\u0430\u043B\u0442\u0438\u0439\u0441\u043A\u0438",
  "mua": "\u043C\u0443\u043D\u0434\u0430\u043D\u0433",
  "mul": "\u043C\u043D\u043E\u0433\u043E\u0435\u0437\u0438\u0447\u043D\u0438",
  "mus": "\u043C\u0443\u0441\u043A\u043E\u0433\u0441\u043A\u0438",
  "mwl": "\u043C\u0438\u0440\u0430\u043D\u0434\u0438\u0439\u0441\u043A\u0438",
  "mwr": "\u043C\u0430\u0440\u0432\u0430\u0440\u0438",
  "my": "\u0431\u0438\u0440\u043C\u0430\u043D\u0441\u043A\u0438",
  "myv": "\u0435\u0440\u0437\u0438\u0430",
  "mzn": "\u043C\u0430\u0437\u0430\u043D\u0434\u0435\u0440\u0430\u043D\u0441\u043A\u0438",
  "na": "\u043D\u0430\u0443\u0440\u0443",
  "nap": "\u043D\u0435\u0430\u043F\u043E\u043B\u0438\u0442\u0430\u043D\u0441\u043A\u0438",
  "naq": "\u043D\u0430\u043C\u0430",
  "nb": "\u043D\u043E\u0440\u0432\u0435\u0436\u043A\u0438 (\u0431\u0443\u043A\u043C\u043E\u043B)",
  "nd": "\u0441\u0435\u0432\u0435\u0440\u0435\u043D \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nds": "\u0434\u043E\u043B\u043D\u043E\u043D\u0435\u043C\u0441\u043A\u0438",
  "nds-NL": "\u0434\u043E\u043B\u043D\u043E\u0441\u0430\u043A\u0441\u043E\u043D\u0441\u043A\u0438",
  "ne": "\u043D\u0435\u043F\u0430\u043B\u0441\u043A\u0438",
  "new": "\u043D\u0435\u0432\u0430\u0440\u0441\u043A\u0438",
  "ng": "\u043D\u0434\u043E\u043D\u0433\u0430",
  "nia": "\u043D\u0438\u0430\u0441",
  "niu": "\u043D\u0438\u0443\u0435\u0430\u043D",
  "nl": "\u043D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "nl-BE": "\u0444\u043B\u0430\u043C\u0430\u043D\u0434\u0441\u043A\u0438",
  "nmg": "\u043A\u0432\u0430\u0441\u0438\u043E",
  "nn": "\u043D\u043E\u0440\u0432\u0435\u0436\u043A\u0438 (\u043D\u044E\u043D\u043E\u0448\u043A)",
  "nnh": "\u043D\u0433\u0438\u0435\u043C\u0431\u0443\u043D",
  "no": "\u043D\u043E\u0440\u0432\u0435\u0436\u043A\u0438",
  "nog": "\u043D\u043E\u0433\u0430\u0438",
  "non": "\u0441\u0442\u0430\u0440\u043E\u043D\u043E\u0440\u0432\u0435\u0436\u043A\u0438",
  "nqo": "\u043D\u043A\u043E",
  "nr": "\u044E\u0436\u0435\u043D \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nso": "\u0441\u0435\u0432\u0435\u0440\u0435\u043D \u0441\u043E\u0442\u043E",
  "nus": "\u043D\u0443\u0435\u0440",
  "nv": "\u043D\u0430\u0432\u0430\u0445\u043E",
  "nwc": "\u043A\u043B\u0430\u0441\u0438\u0447\u0435\u0441\u043A\u0438 \u043D\u0435\u0432\u0430\u0440\u0438",
  "ny": "\u043D\u044F\u043D\u0434\u0436\u0430",
  "nym": "\u043D\u0438\u0430\u043C\u0432\u0435\u0437\u0438",
  "nyn": "\u043D\u044F\u043D\u043A\u043E\u043B\u0435",
  "nyo": "\u043D\u0443\u043E\u0440\u043E",
  "nzi": "\u043D\u0437\u0438\u043C\u0430",
  "oc": "\u043E\u043A\u0441\u0438\u0442\u0430\u043D\u0441\u043A\u0438",
  "oj": "\u043E\u0434\u0436\u0438\u0431\u0432\u0430",
  "om": "\u043E\u0440\u043E\u043C\u043E",
  "or": "\u043E\u0440\u0438\u044F",
  "os": "\u043E\u0441\u0435\u0442\u0438\u043D\u0441\u043A\u0438",
  "osa": "\u043E\u0441\u0435\u0439\u0434\u0436\u0438",
  "ota": "\u043E\u0442\u043E\u043C\u0430\u043D\u0441\u043A\u0438 \u0442\u0443\u0440\u0441\u043A\u0438",
  "pa": "\u043F\u0435\u043D\u0434\u0436\u0430\u0431\u0441\u043A\u0438",
  "pag": "\u043F\u0430\u043D\u0433\u0430\u0441\u0438\u043D\u0430\u043D",
  "pal": "\u043F\u0430\u0445\u043B\u0430\u0432\u0438",
  "pam": "\u043F\u0430\u043C\u043F\u0430\u043D\u0433\u0430",
  "pap": "\u043F\u0430\u043F\u0438\u0430\u043C\u0435\u043D\u0442\u043E",
  "pau": "\u043F\u0430\u043B\u0430\u0443\u0430\u043D",
  "pcm": "\u043D\u0438\u0433\u0435\u0440\u0438\u0439\u0441\u043A\u0438 \u043F\u0438\u0434\u0436\u0438\u043D",
  "peo": "\u0441\u0442\u0430\u0440\u043E\u043F\u0435\u0440\u0441\u0438\u0439\u0441\u043A\u0438",
  "phn": "\u0444\u0438\u043D\u0438\u043A\u0438\u0439\u0441\u043A\u0438",
  "pi": "\u043F\u0430\u043B\u0438",
  "pl": "\u043F\u043E\u043B\u0441\u043A\u0438",
  "pon": "\u043F\u043E\u043D\u0430\u043F\u0435\u0430\u043D",
  "prg": "\u043F\u0440\u0443\u0441\u043A\u0438",
  "pro": "\u0441\u0442\u0430\u0440\u043E\u043F\u0440\u043E\u0432\u0430\u043D\u0441\u0430\u043B\u0441\u043A\u0438",
  "ps": "\u043F\u0443\u0449\u0443",
  "pt": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438",
  "pt-BR": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438 (\u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F)",
  "pt-PT": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438 (\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0438\u044F)",
  "qu": "\u043A\u0435\u0447\u0443\u0430",
  "quc": "\u043A\u0438\u0447\u0435",
  "raj": "\u0440\u0430\u0434\u0436\u0430\u0441\u0442\u0430\u043D\u0441\u043A\u0438",
  "rap": "\u0440\u0430\u043F\u0430 \u043D\u0443\u0438",
  "rar": "\u0440\u0430\u0440\u043E\u0442\u043E\u043D\u0433\u0430",
  "rhg": "\u0440\u043E\u0445\u0438\u043D\u0433\u0430",
  "rm": "\u0440\u0435\u0442\u043E\u0440\u043E\u043C\u0430\u043D\u0441\u043A\u0438",
  "rn": "\u0440\u0443\u043D\u0434\u0438",
  "ro": "\u0440\u0443\u043C\u044A\u043D\u0441\u043A\u0438",
  "ro-MD": "\u043C\u043E\u043B\u0434\u043E\u0432\u0441\u043A\u0438",
  "rof": "\u0440\u043E\u043C\u0431\u043E",
  "rom": "\u0440\u043E\u043C\u0441\u043A\u0438",
  "ru": "\u0440\u0443\u0441\u043A\u0438",
  "rup": "\u0430\u0440\u0443\u043C\u044A\u043D\u0441\u043A\u0438",
  "rw": "\u043A\u0438\u043D\u044F\u0440\u0443\u0430\u043D\u0434\u0430",
  "rwk": "\u0440\u0432\u0430",
  "sa": "\u0441\u0430\u043D\u0441\u043A\u0440\u0438\u0442",
  "sad": "\u0441\u0430\u043D\u0434\u0430\u0432\u0435",
  "sah": "\u0441\u0430\u0445\u0430",
  "sam": "\u0441\u0430\u043C\u0430\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438 \u0430\u0440\u0430\u043C\u0435\u0439\u0441\u043A\u0438",
  "saq": "\u0441\u0430\u043C\u0431\u0443\u0440\u0443",
  "sas": "\u0441\u0430\u0441\u0430\u043A",
  "sat": "\u0441\u0430\u043D\u0442\u0430\u043B\u0438",
  "sba": "\u043D\u0433\u0430\u043C\u0431\u0430\u0439",
  "sbp": "\u0441\u0430\u043D\u0433\u0443",
  "sc": "\u0441\u0430\u0440\u0434\u0438\u043D\u0441\u043A\u0438",
  "scn": "\u0441\u0438\u0446\u0438\u043B\u0438\u0430\u043D\u0441\u043A\u0438",
  "sco": "\u0448\u043E\u0442\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "sd": "\u0441\u0438\u043D\u0434\u0445\u0438",
  "sdh": "\u044E\u0436\u043D\u043E\u043A\u044E\u0440\u0434\u0441\u043A\u0438",
  "se": "\u0441\u0435\u0432\u0435\u0440\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u043A\u0438",
  "seh": "\u0441\u0435\u043D\u0430",
  "sel": "\u0441\u0435\u043B\u043A\u0443\u043F",
  "ses": "\u043A\u043E\u0439\u0440\u0430\u0431\u043E\u0440\u043E \u0441\u0435\u043D\u0438",
  "sg": "\u0441\u0430\u043D\u0433\u043E",
  "sga": "\u0441\u0442\u0430\u0440\u043E\u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "sh": "\u0441\u044A\u0440\u0431\u043E\u0445\u044A\u0440\u0432\u0430\u0442\u0441\u043A\u0438",
  "shi": "\u0442\u0430\u0448\u0435\u043B\u0445\u0438\u0442",
  "shn": "\u0448\u0430\u043D",
  "si": "\u0441\u0438\u043D\u0445\u0430\u043B\u0441\u043A\u0438",
  "sid": "\u0441\u0438\u0434\u0430\u043C\u043E",
  "sk": "\u0441\u043B\u043E\u0432\u0430\u0448\u043A\u0438",
  "sl": "\u0441\u043B\u043E\u0432\u0435\u043D\u0441\u043A\u0438",
  "sm": "\u0441\u0430\u043C\u043E\u0430\u043D\u0441\u043A\u0438",
  "sma": "\u044E\u0436\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u043A\u0438",
  "smj": "\u043B\u0443\u043B\u0435-\u0441\u0430\u0430\u043C\u0441\u043A\u0438",
  "smn": "\u0438\u043D\u0430\u0440\u0438-\u0441\u0430\u0430\u043C\u0441\u043A\u0438",
  "sms": "\u0441\u043A\u043E\u043B\u0442-\u0441\u0430\u0430\u043C\u0441\u043A\u0438",
  "sn": "\u0448\u043E\u043D\u0430",
  "snk": "\u0441\u043E\u043D\u0438\u043D\u043A\u0435",
  "so": "\u0441\u043E\u043C\u0430\u043B\u0438\u0439\u0441\u043A\u0438",
  "sog": "\u0441\u043E\u0433\u0434\u0438\u0439\u0441\u043A\u0438",
  "sq": "\u0430\u043B\u0431\u0430\u043D\u0441\u043A\u0438",
  "sr": "\u0441\u0440\u044A\u0431\u0441\u043A\u0438",
  "srn": "\u0441\u0440\u0430\u043D\u0430\u043D \u0442\u043E\u043D\u0433\u043E",
  "srr": "\u0441\u0435\u0440\u0435\u0440",
  "ss": "\u0441\u0432\u0430\u0442\u0438",
  "ssy": "\u0441\u0430\u0445\u043E",
  "st": "\u0441\u043E\u0442\u043E",
  "su": "\u0441\u0443\u043D\u0434\u0430\u043D\u0441\u043A\u0438",
  "suk": "\u0441\u0443\u043A\u0443\u043C\u0430",
  "sus": "\u0441\u0443\u0441\u0443",
  "sux": "\u0448\u0443\u043C\u0435\u0440\u0441\u043A\u0438",
  "sv": "\u0448\u0432\u0435\u0434\u0441\u043A\u0438",
  "sw": "\u0441\u0443\u0430\u0445\u0438\u043B\u0438",
  "sw-CD": "\u043A\u043E\u043D\u0433\u043E\u0430\u043D\u0441\u043A\u0438 \u0441\u0443\u0430\u0445\u0438\u043B\u0438",
  "swb": "\u043A\u043E\u043C\u043E\u0440\u0441\u043A\u0438",
  "syc": "\u043A\u043B\u0430\u0441\u0438\u0447\u0435\u0441\u043A\u0438 \u0441\u0438\u0440\u0438\u0439\u0441\u043A\u0438",
  "syr": "\u0441\u0438\u0440\u0438\u0439\u0441\u043A\u0438",
  "ta": "\u0442\u0430\u043C\u0438\u043B\u0441\u043A\u0438",
  "te": "\u0442\u0435\u043B\u0443\u0433\u0443",
  "tem": "\u0442\u0435\u043C\u043D\u0435",
  "teo": "\u0442\u0435\u0441\u043E",
  "ter": "\u0442\u0435\u0440\u0435\u043D\u043E",
  "tet": "\u0442\u0435\u0442\u0443\u043C",
  "tg": "\u0442\u0430\u0434\u0436\u0438\u043A\u0441\u043A\u0438",
  "th": "\u0442\u0430\u0439\u0441\u043A\u0438",
  "ti": "\u0442\u0438\u0433\u0440\u0438\u043D\u044F",
  "tig": "\u0442\u0438\u0433\u0440\u0435",
  "tiv": "\u0442\u0438\u0432",
  "tk": "\u0442\u0443\u0440\u043A\u043C\u0435\u043D\u0441\u043A\u0438",
  "tkl": "\u0442\u043E\u043A\u0435\u043B\u0430\u0439\u0441\u043A\u0438",
  "tl": "\u0442\u0430\u0433\u0430\u043B\u043E\u0433",
  "tlh": "\u043A\u043B\u0438\u043D\u0433\u043E\u043D\u0441\u043A\u0438",
  "tli": "\u0442\u043B\u0438\u043D\u0433\u0438\u0442",
  "tmh": "\u0442\u0430\u043C\u0430\u0448\u0435\u043A",
  "tn": "\u0442\u0441\u0432\u0430\u043D\u0430",
  "to": "\u0442\u043E\u043D\u0433\u0430\u043D\u0441\u043A\u0438",
  "tog": "\u043D\u0438\u0430\u043D\u0441\u0430 \u0442\u043E\u043D\u0433\u0430",
  "tpi": "\u0442\u043E\u043A \u043F\u0438\u0441\u0438\u043D",
  "tr": "\u0442\u0443\u0440\u0441\u043A\u0438",
  "trv": "\u0442\u0430\u0440\u043E\u043A\u043E",
  "ts": "\u0446\u043E\u043D\u0433\u0430",
  "tsi": "\u0446\u0438\u043C\u0448\u0438\u0430\u043D\u0441\u043A\u0438",
  "tt": "\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438",
  "tum": "\u0442\u0443\u043C\u0431\u0443\u043A\u0430",
  "tvl": "\u0442\u0443\u0432\u0430\u043B\u0443\u0430\u043D\u0441\u043A\u0438",
  "tw": "\u0442\u0443\u0438",
  "twq": "\u0442\u0430\u0441\u0430\u0432\u0430\u043A",
  "ty": "\u0442\u0430\u0438\u0442\u044F\u043D\u0441\u043A\u0438",
  "tyv": "\u0442\u0443\u0432\u0438\u043D\u0441\u043A\u0438",
  "tzm": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0442\u043B\u0430\u0441\u043A\u0438 \u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0442",
  "udm": "\u0443\u0434\u043C\u0443\u0440\u0442\u0441\u043A\u0438",
  "ug": "\u0443\u0439\u0433\u0443\u0440\u0441\u043A\u0438",
  "uga": "\u0443\u0433\u0430\u0440\u0438\u0442\u0441\u043A\u0438",
  "uk": "\u0443\u043A\u0440\u0430\u0438\u043D\u0441\u043A\u0438",
  "umb": "\u0443\u043C\u0431\u0443\u043D\u0434\u0443",
  "und": "\u043D\u0435\u043F\u043E\u0437\u043D\u0430\u0442 \u0435\u0437\u0438\u043A",
  "ur": "\u0443\u0440\u0434\u0443",
  "uz": "\u0443\u0437\u0431\u0435\u043A\u0441\u043A\u0438",
  "vai": "\u0432\u0430\u0438",
  "ve": "\u0432\u0435\u043D\u0434\u0430",
  "vi": "\u0432\u0438\u0435\u0442\u043D\u0430\u043C\u0441\u043A\u0438",
  "vo": "\u0432\u043E\u043B\u0430\u043F\u044E\u043A",
  "vot": "\u0432\u043E\u0442\u0438\u043A",
  "vun": "\u0432\u0443\u043D\u0434\u0436\u043E",
  "wa": "\u0432\u0430\u043B\u043E\u043D\u0441\u043A\u0438",
  "wae": "\u0432\u0430\u043B\u0437\u0435\u0440\u0441\u043A\u0438 \u043D\u0435\u043C\u0441\u043A\u0438",
  "wal": "\u0432\u0430\u043B\u0430\u043C\u043E",
  "war": "\u0432\u0430\u0440\u0430\u0439",
  "was": "\u0443\u0430\u0448\u043E",
  "wbp": "\u0432\u0430\u043B\u043F\u0438\u0440\u0438",
  "wo": "\u0432\u043E\u043B\u043E\u0444",
  "xal": "\u043A\u0430\u043B\u043C\u0438\u043A",
  "xh": "\u043A\u0445\u043E\u0441\u0430",
  "xog": "\u0441\u043E\u0433\u0430",
  "yao": "\u044F\u043E",
  "yap": "\u044F\u043F\u0435\u0437\u0435",
  "yav": "\u044F\u043D\u0433\u0431\u0435\u043D",
  "ybb": "\u0439\u0435\u043C\u0431\u0430",
  "yi": "\u0438\u0434\u0438\u0448",
  "yo": "\u0439\u043E\u0440\u0443\u0431\u0430",
  "yrl": "yrl",
  "yue": "\u043A\u0430\u043D\u0442\u043E\u043D\u0441\u043A\u0438",
  "za": "\u0437\u0443\u0430\u043D\u0433",
  "zap": "\u0437\u0430\u043F\u043E\u0442\u0435\u043A",
  "zbl": "\u0431\u043B\u0438\u0441 \u0441\u0438\u043C\u0432\u043E\u043B\u0438",
  "zen": "\u0437\u0435\u043D\u0430\u0433\u0430",
  "zgh": "\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0435\u043D \u043C\u0430\u0440\u043E\u043A\u0430\u043D\u0441\u043A\u0438 \u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0442",
  "zh": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438",
  "zh-Hans": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438 (\u043E\u043F\u0440\u043E\u0441\u0442\u0435\u043D)",
  "zh-Hant": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438 (\u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043E\u043D\u0435\u043D)",
  "zu": "\u0437\u0443\u043B\u0443\u0441\u043A\u0438",
  "zun": "\u0437\u0443\u043D\u0438",
  "zxx": "\u0431\u0435\u0437 \u043B\u0438\u043D\u0433\u0432\u0438\u0441\u0442\u0438\u0447\u043D\u043E \u0441\u044A\u0434\u044A\u0440\u0436\u0430\u043D\u0438\u0435",
  "zza": "\u0437\u0430\u0437\u0430"
};

// src/l10n/locale/ca.ts
var ca_default = {
  "aa": "\xE0far",
  "ab": "abkhaz",
  "ace": "atjeh",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adigu\xE9",
  "ae": "av\xE8stic",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "\xE0kan",
  "akk": "accadi",
  "akz": "alabama",
  "ale": "aleuta",
  "aln": "alban\xE8s geg",
  "alt": "altaic meridional",
  "am": "amh\xE0ric",
  "an": "aragon\xE8s",
  "ang": "angl\xE8s antic",
  "anp": "angika",
  "ar": "\xE0rab",
  "ar-001": "\xE0rab est\xE0ndard modern",
  "arc": "arameu",
  "arn": "mapudungu",
  "aro": "araona",
  "arp": "arapaho",
  "ars": "\xE0rab najdi",
  "arw": "arauac",
  "arz": "\xE0rab egipci",
  "as": "assam\xE8s",
  "asa": "pare",
  "ase": "llengua de signes americana",
  "ast": "asturi\xE0",
  "av": "\xE0var",
  "awa": "awadhi",
  "ay": "aimara",
  "az": "azerbaidjan\xE8s",
  "ba": "baixkir",
  "bal": "balutxi",
  "ban": "balin\xE8s",
  "bar": "bavar\xE8s",
  "bas": "basa",
  "bax": "bamum",
  "bbj": "ghomala",
  "be": "belar\xFAs",
  "bej": "beja",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badaga",
  "bg": "b\xFAlgar",
  "bgn": "balutxi occidental",
  "bho": "bhojpuri",
  "bi": "bislama",
  "bik": "bicol",
  "bin": "edo",
  "bkm": "kom",
  "bla": "blackfoot",
  "bm": "bambara",
  "bn": "bengal\xED",
  "bo": "tibet\xE0",
  "br": "bret\xF3",
  "bra": "braj",
  "brh": "brahui",
  "brx": "bodo",
  "bs": "bosni\xE0",
  "bss": "akoose",
  "bua": "buriat",
  "bug": "bugui",
  "bum": "bulu",
  "byn": "bilin",
  "byv": "medumba",
  "ca": "catal\xE0",
  "cad": "caddo",
  "car": "carib",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "txetx\xE8",
  "ceb": "cebu\xE0",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "txibtxa",
  "chg": "txagatai",
  "chk": "chuuk",
  "chm": "mari",
  "chn": "pidgin chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cherokee",
  "chy": "xeiene",
  "ckb": "kurd central",
  "co": "cors",
  "cop": "copte",
  "cr": "cree",
  "crh": "t\xE0tar de Crimea",
  "crs": "franc\xE8s crioll de les Seychelles",
  "cs": "txec",
  "csb": "caixubi",
  "cu": "eslau eclesi\xE0stic",
  "cv": "txuvaix",
  "cy": "gal\xB7l\xE8s",
  "da": "dan\xE8s",
  "dak": "dakota",
  "dar": "dargu\xE0",
  "dav": "taita",
  "de": "alemany",
  "de-AT": "alemany austr\xEDac",
  "de-CH": "alemany est\xE0ndard su\xEDs",
  "del": "delaware",
  "den": "slavi",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "baix s\xF2rab",
  "dua": "douala",
  "dum": "neerland\xE8s mitj\xE0",
  "dv": "divehi",
  "dyo": "diola",
  "dyu": "jula",
  "dz": "dzongka",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe",
  "efi": "efik",
  "egl": "emili\xE0",
  "egy": "egipci antic",
  "eka": "ekajuk",
  "el": "grec",
  "elx": "elamita",
  "en": "angl\xE8s",
  "en-AU": "angl\xE8s australi\xE0",
  "en-CA": "angl\xE8s canadenc",
  "en-GB": "angl\xE8s brit\xE0nic",
  "en-US": "angl\xE8s americ\xE0",
  "enm": "angl\xE8s mitj\xE0",
  "eo": "esperanto",
  "es": "espanyol",
  "es-419": "espanyol hispanoameric\xE0",
  "es-ES": "espanyol europeu",
  "es-MX": "espanyol de M\xE8xic",
  "et": "estoni\xE0",
  "eu": "basc",
  "ewo": "ewondo",
  "ext": "extremeny",
  "fa": "persa",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "ful",
  "fi": "fin\xE8s",
  "fil": "filip\xED",
  "fj": "fiji\xE0",
  "fo": "fero\xE8s",
  "fon": "fon",
  "fr": "franc\xE8s",
  "fr-CA": "franc\xE8s canadenc",
  "fr-CH": "franc\xE8s su\xEDs",
  "frc": "franc\xE8s cajun",
  "frm": "franc\xE8s mitj\xE0",
  "fro": "franc\xE8s antic",
  "frr": "fris\xF3 septentrional",
  "frs": "fris\xF3 oriental",
  "fur": "fri\xFCl\xE0",
  "fy": "fris\xF3 occidental",
  "ga": "irland\xE8s",
  "gaa": "ga",
  "gag": "gaga\xFAs",
  "gan": "xin\xE8s gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gd": "ga\xE8lic escoc\xE8s",
  "gez": "gueez",
  "gil": "gilbert\xE8s",
  "gl": "gallec",
  "glk": "gilaki",
  "gmh": "alt alemany mitj\xE0",
  "gn": "guaran\xED",
  "goh": "alt alemany antic",
  "gom": "concani de Goa",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "g\xF2tic",
  "grb": "grebo",
  "grc": "grec antic",
  "gsw": "alemany su\xEDs",
  "gu": "gujarati",
  "guc": "way\xFA",
  "guz": "gus\xED",
  "gv": "manx",
  "gwi": "gwich\u2019in",
  "ha": "haussa",
  "hai": "haida",
  "hak": "xin\xE8s hakka",
  "haw": "hawai\xE0",
  "he": "hebreu",
  "hi": "hindi",
  "hif": "hindi de Fiji",
  "hil": "h\xEDligaynon",
  "hit": "hitita",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croat",
  "hsb": "alt s\xF2rab",
  "hsn": "xin\xE8s xiang",
  "ht": "crioll d\u2019Hait\xED",
  "hu": "hongar\xE8s",
  "hup": "hupa",
  "hy": "armeni",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonesi",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "yi sichuan",
  "ik": "inupiak",
  "ilo": "ilocano",
  "inh": "ing\xFAix",
  "io": "ido",
  "is": "island\xE8s",
  "it": "itali\xE0",
  "iu": "inuktitut",
  "ja": "japon\xE8s",
  "jam": "crioll angl\xE8s de Jamaica",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "machame",
  "jpr": "judeopersa",
  "jrb": "judeo\xE0rab",
  "jv": "javan\xE8s",
  "ka": "georgi\xE0",
  "kaa": "karakalpak",
  "kab": "cabilenc",
  "kac": "katxin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabard\xED",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "crioll capverdi\xE0",
  "ken": "kenyang",
  "kfo": "koro",
  "kg": "kongo",
  "kgp": "kaing\xE0",
  "kha": "khasi",
  "kho": "khotan\xE8s",
  "khq": "koyra chiini",
  "ki": "kikuiu",
  "kj": "kuanyama",
  "kk": "kazakh",
  "kkj": "kako",
  "kl": "groenland\xE8s",
  "kln": "kalenjin",
  "km": "khmer",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "core\xE0",
  "koi": "komi-permiac",
  "kok": "concani",
  "kos": "kosrae\xE0",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karatxai-balkar",
  "kri": "krio",
  "krl": "careli\xE0",
  "kru": "kurukh",
  "ks": "caixmiri",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "kurd",
  "kum": "k\xFAmik",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "c\xF2rnic",
  "ky": "kirgu\xEDs",
  "la": "llat\xED",
  "lad": "judeocastell\xE0",
  "lag": "langi",
  "lah": "panjabi occidental",
  "lam": "lamba",
  "lb": "luxemburgu\xE8s",
  "lez": "lesgui\xE0",
  "lg": "ganda",
  "li": "limburgu\xE8s",
  "lij": "l\xEDgur",
  "lkt": "lakota",
  "lmo": "llombard",
  "ln": "lingala",
  "lo": "laosi\xE0",
  "lol": "mongo",
  "lou": "crioll franc\xE8s de Louisiana",
  "loz": "lozi",
  "lrc": "luri septentrional",
  "lt": "litu\xE0",
  "lu": "luba katanga",
  "lua": "luba-lulua",
  "lui": "luisenyo",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizo",
  "luy": "luyia",
  "lv": "let\xF3",
  "lzh": "xin\xE8s cl\xE0ssic",
  "lzz": "laz",
  "mad": "madur\xE8s",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makassar",
  "man": "mandinga",
  "mas": "massai",
  "mde": "maba",
  "mdf": "mordovi\xE0 moksa",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "maurici\xE0",
  "mg": "malgaix",
  "mga": "ga\xE8lic irland\xE8s mitj\xE0",
  "mgh": "makhuwa-metto",
  "mgo": "meta\u2019",
  "mh": "marshall\xE8s",
  "mi": "maori",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "macedoni",
  "ml": "malai\xE0lam",
  "mn": "mongol",
  "mnc": "manx\xFA",
  "mni": "manipur\xED",
  "moh": "mohawk",
  "mos": "moore",
  "mr": "marathi",
  "mrj": "mari occidental",
  "ms": "malai",
  "mt": "malt\xE8s",
  "mua": "mundang",
  "mul": "lleng\xFCes v\xE0ries",
  "mus": "creek",
  "mwl": "mirand\xE8s",
  "mwr": "marwari",
  "my": "birm\xE0",
  "mye": "myene",
  "myv": "mordovi\xE0 erza",
  "mzn": "mazanderani",
  "na": "nauru\xE0",
  "nan": "xin\xE8s min del sud",
  "nap": "napolit\xE0",
  "naq": "nama",
  "nb": "noruec bokm\xE5l",
  "nd": "ndebele septentrional",
  "nds": "baix alemany",
  "nds-NL": "baix sax\xF3",
  "ne": "nepal\xE8s",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niue\xE0",
  "nl": "neerland\xE8s",
  "nl-BE": "flamenc",
  "nmg": "bissio",
  "nn": "noruec nynorsk",
  "nnh": "ngiemboon",
  "no": "noruec",
  "nog": "nogai",
  "non": "n\xF2rdic antic",
  "nov": "novial",
  "nqo": "n\u2019Ko",
  "nr": "ndebele meridional",
  "nso": "sotho septentrional",
  "nus": "nuer",
  "nv": "navaho",
  "nwc": "newari cl\xE0ssic",
  "ny": "nyanja",
  "nym": "nyamwesi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzema",
  "oc": "occit\xE0",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "oriya",
  "os": "osseta",
  "osa": "osage",
  "ota": "turc otom\xE0",
  "pa": "panjabi",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiament",
  "pau": "palau\xE0",
  "pcd": "picard",
  "pcm": "pidgin de Nig\xE8ria",
  "pdc": "alemany pennsilvani\xE0",
  "peo": "persa antic",
  "pfl": "alemany palat\xED",
  "phn": "fenici",
  "pi": "pali",
  "pl": "polon\xE8s",
  "pms": "piemont\xE8s",
  "pnt": "p\xF2ntic",
  "pon": "ponape\xE0",
  "prg": "prussi\xE0",
  "pro": "proven\xE7al antic",
  "ps": "paixtu",
  "pt": "portugu\xE8s",
  "pt-BR": "portugu\xE8s del Brasil",
  "pt-PT": "portugu\xE8s de Portugal",
  "qu": "qu\xEDtxua",
  "quc": "k\u2019iche\u2019",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotong\xE0",
  "rgn": "romany\xE8s",
  "rhg": "rohingya",
  "rm": "retorom\xE0nic",
  "rn": "rundi",
  "ro": "roman\xE8s",
  "ro-MD": "moldau",
  "rof": "rombo",
  "rom": "roman\xED",
  "ru": "rus",
  "rup": "aroman\xE8s",
  "rw": "ruand\xE8s",
  "rwk": "rwo",
  "sa": "s\xE0nscrit",
  "sad": "sandawe",
  "sah": "iacut",
  "sam": "arameu samarit\xE0",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sard",
  "scn": "sicili\xE0",
  "sco": "escoc\xE8s",
  "sd": "sindi",
  "sdc": "sasser\xE8s",
  "sdh": "kurd meridional",
  "se": "sami septentrional",
  "see": "seneca",
  "seh": "sena",
  "sel": "selkup",
  "ses": "songhai oriental",
  "sg": "sango",
  "sga": "irland\xE8s antic",
  "sh": "serbocroat",
  "shi": "taixelhit",
  "shn": "xan",
  "shu": "\xE0rab txadi\xE0",
  "si": "singal\xE8s",
  "sid": "sidamo",
  "sk": "eslovac",
  "sl": "eslov\xE8",
  "sm": "samo\xE0",
  "sma": "sami meridional",
  "smj": "sami lule",
  "smn": "sami d\u2019Inari",
  "sms": "sami skolt",
  "sn": "shona",
  "snk": "soninke",
  "so": "somali",
  "sog": "sogdi\xE0",
  "sq": "alban\xE8s",
  "sr": "serbi",
  "srn": "sranan",
  "srr": "serer",
  "ss": "swazi",
  "ssy": "saho",
  "st": "sotho meridional",
  "su": "sondan\xE8s",
  "suk": "sukuma",
  "sus": "sus\xFA",
  "sux": "sumeri",
  "sv": "suec",
  "sw": "suahili",
  "sw-CD": "suahili del Congo",
  "swb": "comori\xE0",
  "syc": "sir\xEDac cl\xE0ssic",
  "syr": "sir\xEDac",
  "szl": "silesi\xE0",
  "ta": "t\xE0mil",
  "te": "telugu",
  "tem": "temne",
  "teo": "teso",
  "ter": "terena",
  "tet": "t\xE8tum",
  "tg": "tadjik",
  "th": "tai",
  "ti": "tigrinya",
  "tig": "tigre",
  "tiv": "tiv",
  "tk": "turcman",
  "tkl": "tokelau\xE8s",
  "tkr": "tsakhur",
  "tl": "tagal",
  "tlh": "klingoni\xE0",
  "tli": "tlingit",
  "tly": "talix",
  "tmh": "amazic",
  "tn": "setswana",
  "to": "tongal\xE8s",
  "tog": "tonga",
  "tpi": "tok pisin",
  "tr": "turc",
  "trv": "taroko",
  "ts": "tsonga",
  "tsi": "tsimshi\xE0",
  "tt": "t\xE0tar",
  "ttt": "tat meridional",
  "tum": "tumbuka",
  "tvl": "tuvalu\xE0",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahiti\xE0",
  "tyv": "tuvini\xE0",
  "tzm": "amazic del Marroc central",
  "udm": "udmurt",
  "ug": "uigur",
  "uga": "ugar\xEDtic",
  "uk": "ucra\xEFn\xE8s",
  "umb": "umbundu",
  "und": "idioma desconegut",
  "ur": "urd\xFA",
  "uz": "uzbek",
  "vai": "vai",
  "ve": "venda",
  "vec": "v\xE8net",
  "vep": "vepse",
  "vi": "vietnamita",
  "vls": "flamenc occidental",
  "vo": "volap\xFCk",
  "vot": "v\xF2tic",
  "vun": "vunjo",
  "wa": "val\xF3",
  "wae": "walser",
  "wal": "wolaita",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "w\xF2lof",
  "wuu": "xin\xE8s wu",
  "xal": "calmuc",
  "xh": "xosa",
  "xmf": "mingreli\xE0",
  "xog": "soga",
  "yao": "yao",
  "yap": "yape\xE0",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "\xEDdix",
  "yo": "ioruba",
  "yrl": "yrl",
  "yue": "canton\xE8s",
  "za": "zhuang",
  "zap": "zapoteca",
  "zbl": "s\xEDmbols Bliss",
  "zea": "zeland\xE8s",
  "zen": "zenaga",
  "zgh": "amazic est\xE0ndard marroqu\xED",
  "zh": "xin\xE8s",
  "zh-Hans": "xin\xE8s simplificat",
  "zh-Hant": "xin\xE8s tradicional",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "sense contingut ling\xFC\xEDstic",
  "zza": "zaza"
};

// src/l10n/locale/cs.ts
var cs_default = {
  "aa": "afar\u0161tina",
  "ab": "abch\xE1z\u0161tina",
  "ace": "aceh\u0161tina",
  "ach": "akol\u0161tina",
  "ada": "adangme",
  "ady": "adygej\u0161tina",
  "ae": "avest\xE1n\u0161tina",
  "aeb": "arab\u0161tina (tunisk\xE1)",
  "af": "afrik\xE1n\u0161tina",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ain\u0161tina",
  "ak": "akan\u0161tina",
  "akk": "akkad\u0161tina",
  "akz": "alabam\u0161tina",
  "ale": "aleut\u0161tina",
  "aln": "alb\xE1n\u0161tina (Gheg)",
  "alt": "altaj\u0161tina (ji\u017En\xED)",
  "am": "amhar\u0161tina",
  "an": "aragon\u0161tina",
  "ang": "staroangli\u010Dtina",
  "anp": "angika",
  "ar": "arab\u0161tina",
  "ar-001": "arab\u0161tina (modern\xED standardn\xED)",
  "arc": "aramej\u0161tina",
  "arn": "mapudungun",
  "aro": "araon\u0161tina",
  "arp": "arapa\u017E\u0161tina",
  "arq": "arab\u0161tina (al\u017E\xEDrsk\xE1)",
  "ars": "arab\u0161tina (Nad\u017Ed)",
  "arw": "arawack\xE9 jazyky",
  "ary": "arab\u0161tina (marock\xE1)",
  "arz": "arab\u0161tina (egyptsk\xE1)",
  "as": "\xE1s\xE1m\u0161tina",
  "asa": "asu",
  "ase": "znakov\xE1 \u0159e\u010D (americk\xE1)",
  "ast": "astur\u0161tina",
  "av": "avar\u0161tina",
  "avk": "kotava",
  "awa": "awadh\u0161tina",
  "ay": "ajmar\u0161tina",
  "az": "\xE1zerb\xE1jd\u017E\xE1n\u0161tina",
  "ba": "ba\u0161kir\u0161tina",
  "bal": "bal\xFA\u010D\u0161tina",
  "ban": "balij\u0161tina",
  "bar": "bavor\u0161tina",
  "bas": "basa",
  "bax": "bamun",
  "bbc": "batak toba",
  "bbj": "ghomala",
  "be": "b\u011Bloru\u0161tina",
  "bej": "bed\u017Ea",
  "bem": "bemb\u0161tina",
  "bew": "batav\u0161tina",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badag\u0161tina",
  "bg": "bulhar\u0161tina",
  "bgn": "bal\xFA\u010D\u0161tina (z\xE1padn\xED)",
  "bho": "bh\xF3d\u017Epur\u0161tina",
  "bi": "bislam\u0161tina",
  "bik": "bikol\u0161tina",
  "bin": "bini",
  "bjn": "band\u017Ear\u0161tina",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambar\u0161tina",
  "bn": "beng\xE1l\u0161tina",
  "bo": "tibet\u0161tina",
  "bpy": "bi\u0161nuprijskomanipur\u0161tina",
  "bqi": "bachtij\xE1r\u0161tina",
  "br": "breton\u0161tina",
  "bra": "brad\u017E\u0161tina",
  "brh": "brahuj\u0161tina",
  "brx": "bodo\u0161tina",
  "bs": "bosen\u0161tina",
  "bss": "akoose",
  "bua": "burjat\u0161tina",
  "bug": "bugi\u0161tina",
  "bum": "bulu",
  "byn": "blin\u0161tina",
  "byv": "medumba",
  "ca": "katal\xE1n\u0161tina",
  "cad": "caddo",
  "car": "karib\u0161tina",
  "cay": "kajug\u0161tina",
  "cch": "atsam",
  "ccp": "\u010Dakma",
  "ce": "\u010De\u010Den\u0161tina",
  "ceb": "cebu\xE1n\u0161tina",
  "cgg": "kiga",
  "ch": "\u010Damoro",
  "chb": "\u010Dib\u010Da",
  "chg": "\u010Dagataj\u0161tina",
  "chk": "\u010Duk\u0161tina",
  "chm": "marij\u0161tina",
  "chn": "\u010Dinuk pid\u017Ein",
  "cho": "\u010Dokt\u0161tina",
  "chp": "\u010Dipevaj\u0161tina",
  "chr": "\u010Derok\xE9z\u0161tina",
  "chy": "\u010Dejen\u0161tina",
  "ckb": "kurd\u0161tina (sor\xE1n\xED)",
  "co": "korsi\u010Dtina",
  "cop": "kopt\u0161tina",
  "cps": "kapiznon\u0161tina",
  "cr": "kr\xEDj\u0161tina",
  "crh": "ture\u010Dtina (krymsk\xE1)",
  "crs": "kreol\u0161tina (seychelsk\xE1)",
  "cs": "\u010De\u0161tina",
  "csb": "ka\u0161ub\u0161tina",
  "cu": "staroslov\u011Bn\u0161tina",
  "cv": "\u010Duva\u0161tina",
  "cy": "vel\u0161tina",
  "da": "d\xE1n\u0161tina",
  "dak": "dakot\u0161tina",
  "dar": "darg\u0161tina",
  "dav": "taita",
  "de": "n\u011Bm\u010Dina",
  "de-AT": "n\u011Bm\u010Dina (Rakousko)",
  "de-CH": "n\u011Bm\u010Dina standardn\xED (\u0160v\xFDcarsko)",
  "del": "delawar\u0161tina",
  "den": "slejv\u0161tina (athabask\xFD jazyk)",
  "dgr": "dogrib",
  "din": "dink\u0161tina",
  "dje": "zarm\u0161tina",
  "doi": "dogar\u0161tina",
  "dsb": "dolnolu\u017Eick\xE1 srb\u0161tina",
  "dtp": "kadazandusun\u0161tina",
  "dua": "dual\u0161tina",
  "dum": "holand\u0161tina (st\u0159edov\u011Bk\xE1)",
  "dv": "malediv\u0161tina",
  "dyo": "jola-fonyi",
  "dyu": "djula",
  "dz": "dzongk\xE4",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe\u0161tina",
  "efi": "efik\u0161tina",
  "egl": "emilij\u0161tina",
  "egy": "egypt\u0161tina star\xE1",
  "eka": "ekajuk",
  "el": "\u0159e\u010Dtina",
  "elx": "elamit\u0161tina",
  "en": "angli\u010Dtina",
  "en-AU": "angli\u010Dtina (Austr\xE1lie)",
  "en-CA": "angli\u010Dtina (Kanada)",
  "en-GB": "angli\u010Dtina (Velk\xE1 Brit\xE1nie)",
  "en-US": "angli\u010Dtina (USA)",
  "enm": "angli\u010Dtina (st\u0159edov\u011Bk\xE1)",
  "eo": "esperanto",
  "es": "\u0161pan\u011Bl\u0161tina",
  "es-419": "\u0161pan\u011Bl\u0161tina (Latinsk\xE1 Amerika)",
  "es-ES": "\u0161pan\u011Bl\u0161tina (Evropa)",
  "es-MX": "\u0161pan\u011Bl\u0161tina (Mexiko)",
  "esu": "jupik\u0161tina (st\u0159edoalja\u0161sk\xE1)",
  "et": "eston\u0161tina",
  "eu": "baski\u010Dtina",
  "ewo": "ewondo",
  "ext": "extremadur\u0161tina",
  "fa": "per\u0161tina",
  "fa-AF": "dar\xED",
  "fan": "fang",
  "fat": "fant\u0161tina",
  "ff": "fulb\u0161tina",
  "fi": "fin\u0161tina",
  "fil": "filip\xEDn\u0161tina",
  "fit": "fin\u0161tina (tornedalsk\xE1)",
  "fj": "fid\u017Eij\u0161tina",
  "fo": "faer\u0161tina",
  "fon": "fon\u0161tina",
  "fr": "francouz\u0161tina",
  "fr-CA": "francouz\u0161tina (Kanada)",
  "fr-CH": "francouz\u0161tina (\u0160v\xFDcarsko)",
  "frc": "francouz\u0161tina (cajunsk\xE1)",
  "frm": "francouz\u0161tina (st\u0159edov\u011Bk\xE1)",
  "fro": "francouz\u0161tina (star\xE1)",
  "frp": "franko-provens\xE1l\u0161tina",
  "frr": "fr\xED\u0161tina (severn\xED)",
  "frs": "fr\xED\u0161tina (v\xFDchodn\xED)",
  "fur": "furlan\u0161tina",
  "fy": "fr\xED\u0161tina (z\xE1padn\xED)",
  "ga": "ir\u0161tina",
  "gaa": "ga\u0161tina",
  "gag": "gagauz\u0161tina",
  "gan": "\u010D\xEDn\u0161tina (dialekty Gan)",
  "gay": "gayo",
  "gba": "gbaja",
  "gbz": "dar\xEDj\u0161tina (zoroastrijsk\xE1)",
  "gd": "skotsk\xE1 gael\u0161tina",
  "gez": "geez",
  "gil": "kiribat\u0161tina",
  "gl": "galicij\u0161tina",
  "glk": "gila\u010Dtina",
  "gmh": "hornon\u011Bm\u010Dina (st\u0159edov\u011Bk\xE1)",
  "gn": "guaran\u0161tina",
  "goh": "hornon\u011Bm\u010Dina (star\xE1)",
  "gom": "konk\xE1n\u0161tina (Goa)",
  "gon": "g\xF3nd\u0161tina",
  "gor": "gorontalo",
  "got": "g\xF3t\u0161tina",
  "grb": "grebo",
  "grc": "staro\u0159e\u010Dtina",
  "gsw": "n\u011Bm\u010Dina (\u0160v\xFDcarsko)",
  "gu": "gud\u017Ear\xE1t\u0161tina",
  "guc": "way\xFAu\u0161tina",
  "gur": "frafra",
  "guz": "gusii",
  "gv": "man\u0161tina",
  "gwi": "gwich\u02BCin",
  "ha": "hau\u0161tina",
  "hai": "haid\u0161tina",
  "hak": "\u010D\xEDn\u0161tina (dialekty Hakka)",
  "haw": "havaj\u0161tina",
  "he": "hebrej\u0161tina",
  "hi": "hind\u0161tina",
  "hif": "hind\u0161tina (Fid\u017Ei)",
  "hil": "hiligajnon\u0161tina",
  "hit": "chetit\u0161tina",
  "hmn": "hmong\u0161tina",
  "ho": "hiri motu",
  "hr": "chorvat\u0161tina",
  "hsb": "hornolu\u017Eick\xE1 srb\u0161tina",
  "hsn": "\u010D\xEDn\u0161tina (dialekty Xiang)",
  "ht": "hait\u0161tina",
  "hu": "ma\u010Far\u0161tina",
  "hup": "hupa",
  "hy": "arm\xE9n\u0161tina",
  "hz": "herer\u0161tina",
  "ia": "interlingua",
  "iba": "iban\u0161tina",
  "ibb": "ibibio",
  "id": "indon\xE9\u0161tina",
  "ie": "interlingue",
  "ig": "igbo\u0161tina",
  "ii": "i\u0161tina (se\u010Du\xE1nsk\xE1)",
  "ik": "inupiak\u0161tina",
  "ilo": "ilok\xE1n\u0161tina",
  "inh": "ingu\u0161tina",
  "io": "ido",
  "is": "island\u0161tina",
  "it": "ital\u0161tina",
  "iu": "inuktitut\u0161tina",
  "izh": "ingrij\u0161tina",
  "ja": "japon\u0161tina",
  "jam": "jamajsk\xE1 kreol\u0161tina",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "ma\u0161ame",
  "jpr": "judeoper\u0161tina",
  "jrb": "judeoarab\u0161tina",
  "jut": "jut\u0161tina",
  "jv": "jav\xE1n\u0161tina",
  "ka": "gruz\xEDn\u0161tina",
  "kaa": "karakalpa\u010Dtina",
  "kab": "kabyl\u0161tina",
  "kac": "ka\u010Dij\u0161tina",
  "kaj": "jju",
  "kam": "kamb\u0161tina",
  "kaw": "kawi",
  "kbd": "kabardin\u0161tina",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kapverd\u0161tina",
  "ken": "kenyang",
  "kfo": "koro",
  "kg": "kon\u017E\u0161tina",
  "kgp": "kaingang",
  "kha": "kh\xE1s\xED",
  "kho": "chot\xE1n\u0161tina",
  "khq": "koyra chiini",
  "khw": "chovar\u0161tina",
  "ki": "kikuj\u0161tina",
  "kiu": "zazak\u0161tina",
  "kj": "kua\u0148am\u0161tina",
  "kk": "kaza\u0161tina",
  "kkj": "kako",
  "kl": "gr\xF3n\u0161tina",
  "kln": "kalend\u017Ein",
  "km": "khm\xE9r\u0161tina",
  "kmb": "kimbund\u0161tina",
  "kn": "kannad\u0161tina",
  "ko": "korej\u0161tina",
  "koi": "komi-permja\u010Dtina",
  "kok": "konk\xE1n\u0161tina",
  "kos": "kosraj\u0161tina",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "kara\u010Dajevo-balkar\u0161tina",
  "kri": "krio",
  "krj": "kinaraj-a",
  "krl": "karel\u0161tina",
  "kru": "kuruch\u0161tina",
  "ks": "ka\u0161m\xEDr\u0161tina",
  "ksb": "\u0161ambala",
  "ksf": "bafia",
  "ksh": "kol\xEDn\u0161tina",
  "ku": "kurd\u0161tina",
  "kum": "kumy\u010Dtina",
  "kut": "kutenaj\u0161tina",
  "kv": "komij\u0161tina",
  "kw": "korn\u0161tina",
  "ky": "kyrgyz\u0161tina",
  "la": "latina",
  "lad": "ladin\u0161tina",
  "lag": "langi",
  "lah": "lahnd\u0161tina",
  "lam": "lamb\u0161tina",
  "lb": "lucembur\u0161tina",
  "lez": "lezgin\u0161tina",
  "lfn": "lingua franca nova",
  "lg": "gand\u0161tina",
  "li": "limbur\u0161tina",
  "lij": "ligur\u0161tina",
  "liv": "livon\u0161tina",
  "lkt": "lakot\u0161tina",
  "lmo": "lombard\u0161tina",
  "ln": "lingal\u0161tina",
  "lo": "lao\u0161tina",
  "lol": "mong\u0161tina",
  "lou": "kreol\u0161tina (Louisiana)",
  "loz": "loz\u0161tina",
  "lrc": "l\xFAr\u0161tina (severn\xED)",
  "lt": "litev\u0161tina",
  "ltg": "latgal\u0161tina",
  "lu": "lubu-katan\u017E\u0161tina",
  "lua": "luba-lulua\u0161tina",
  "lui": "luise\u0148o",
  "lun": "lund\u0161tina",
  "luo": "luo\u0161tina",
  "lus": "mizo\u0161tina",
  "luy": "luhja",
  "lv": "loty\u0161tina",
  "lzh": "\u010D\xEDn\u0161tina (klasick\xE1)",
  "lzz": "laz\u0161tina",
  "mad": "madur\u0161tina",
  "maf": "mafa",
  "mag": "magahij\u0161tina",
  "mai": "maithili\u0161tina",
  "mak": "makasar\u0161tina",
  "man": "manding\u0161tina",
  "mas": "masaj\u0161tina",
  "mde": "maba",
  "mdf": "mok\u0161an\u0161tina",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "mauricijsk\xE1 kreol\u0161tina",
  "mg": "malga\u0161tina",
  "mga": "ir\u0161tina (st\u0159edov\u011Bk\xE1)",
  "mgh": "makhuwa-meetto",
  "mgo": "meta\u2019",
  "mh": "mar\u0161\xE1l\u0161tina",
  "mi": "maor\u0161tina",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "makedon\u0161tina",
  "ml": "malaj\xE1lam\u0161tina",
  "mn": "mongol\u0161tina",
  "mnc": "mand\u017Eu\u0161tina",
  "mni": "manipur\u0161tina",
  "moh": "mohawk\u0161tina",
  "mos": "mosi",
  "mr": "mar\xE1th\u0161tina",
  "mrj": "marij\u0161tina (z\xE1padn\xED)",
  "ms": "malaj\u0161tina",
  "mt": "malt\u0161tina",
  "mua": "mundang",
  "mul": "v\xEDce jazyk\u016F",
  "mus": "kr\xEDk\u0161tina",
  "mwl": "mirand\u0161tina",
  "mwr": "m\xE1rv\xE1r\u0161tina",
  "mwv": "mentavaj\u0161tina",
  "my": "barm\u0161tina",
  "mye": "myene",
  "myv": "erzjan\u0161tina",
  "mzn": "m\xE1zandar\xE1n\u0161tina",
  "na": "naur\u0161tina",
  "nan": "\u010D\xEDn\u0161tina (dialekty Minnan)",
  "nap": "neapol\u0161tina",
  "naq": "nama\u0161tina",
  "nb": "nor\u0161tina (bokm\xE5l)",
  "nd": "ndebele (Zimbabwe)",
  "nds": "dolnon\u011Bm\u010Dina",
  "nds-NL": "dolnosa\u0161tina",
  "ne": "nep\xE1l\u0161tina",
  "new": "n\xE9v\xE1r\u0161tina",
  "ng": "ndond\u0161tina",
  "nia": "nias",
  "niu": "niue\u0161tina",
  "njo": "ao (jazyky N\xE1g\xE1landu)",
  "nl": "nizozem\u0161tina",
  "nl-BE": "vl\xE1m\u0161tina",
  "nmg": "kwasio",
  "nn": "nor\u0161tina (nynorsk)",
  "nnh": "ngiemboon",
  "no": "nor\u0161tina",
  "nog": "nogaj\u0161tina",
  "non": "nor\u0161tina historick\xE1",
  "nov": "novial",
  "nqo": "n\u2019ko",
  "nr": "ndebele (Ji\u017En\xED Afrika)",
  "nso": "sot\u0161tina (severn\xED)",
  "nus": "nuer\u0161tina",
  "nv": "nava\u017E\u0161tina",
  "nwc": "newar\u0161tina (klasick\xE1)",
  "ny": "\u0148and\u017E\u0161tina",
  "nym": "\u0148amwe\u017E\u0161tina",
  "nyn": "\u0148ankol\u0161tina",
  "nyo": "\u0148or\u0161tina",
  "nzi": "nzima",
  "oc": "okcit\xE1n\u0161tina",
  "oj": "od\u017Eibvej\u0161tina",
  "om": "orom\u0161tina",
  "or": "urij\u0161tina",
  "os": "oset\u0161tina",
  "osa": "osage",
  "ota": "ture\u010Dtina (osmansk\xE1)",
  "pa": "pa\u0148d\u017E\xE1b\u0161tina",
  "pag": "pangasinan\u0161tina",
  "pal": "pahlav\u0161tina",
  "pam": "papangau",
  "pap": "papiamento",
  "pau": "palau\u0161tina",
  "pcd": "picard\u0161tina",
  "pcm": "nigerijsk\xFD pid\u017Ein",
  "pdc": "n\u011Bm\u010Dina (pensylv\xE1nsk\xE1)",
  "pdt": "n\u011Bm\u010Dina (plautdietsch)",
  "peo": "staroper\u0161tina",
  "pfl": "fal\u010Dtina",
  "phn": "f\xE9ni\u010Dtina",
  "pi": "p\xE1l\xED",
  "pl": "pol\u0161tina",
  "pms": "piemon\u0161tina",
  "pnt": "pont\u0161tina",
  "pon": "pohnpei\u0161tina",
  "prg": "pru\u0161tina",
  "pro": "provens\xE1l\u0161tina",
  "ps": "pa\u0161t\u0161tina",
  "pt": "portugal\u0161tina",
  "pt-BR": "portugal\u0161tina (Braz\xEDlie)",
  "pt-PT": "portugal\u0161tina (Evropa)",
  "qu": "ke\u010Du\xE1n\u0161tina",
  "quc": "ki\u010D\xE9",
  "qug": "ke\u010Du\xE1n\u0161tina (chimborazo)",
  "raj": "r\xE1d\u017East\xE1n\u0161tina",
  "rap": "rapanuj\u0161tina",
  "rar": "rarotong\xE1n\u0161tina",
  "rgn": "roma\u0148ol\u0161tina",
  "rhg": "rohing\u0161tina",
  "rif": "r\xEDf\u0161tina",
  "rm": "r\xE9torom\xE1n\u0161tina",
  "rn": "kirund\u0161tina",
  "ro": "rumun\u0161tina",
  "ro-MD": "moldav\u0161tina",
  "rof": "rombo",
  "rom": "rom\u0161tina",
  "rtm": "rotuman\u0161tina",
  "ru": "ru\u0161tina",
  "rue": "rus\xEDn\u0161tina",
  "rug": "rovian\u0161tina",
  "rup": "arumun\u0161tina",
  "rw": "ki\u0148arwand\u0161tina",
  "rwk": "rwa",
  "sa": "sanskrt",
  "sad": "sandaw\u0161tina",
  "sah": "jakut\u0161tina",
  "sam": "samar\u0161tina",
  "saq": "samburu",
  "sas": "sasak\u0161tina",
  "sat": "sant\xE1l\u0161tina",
  "saz": "saur\xE1\u0161ter\u0161tina",
  "sba": "ngambay",
  "sbp": "sango\u0161tina",
  "sc": "sard\u0161tina",
  "scn": "sicil\u0161tina",
  "sco": "skot\u0161tina",
  "sd": "sindh\u0161tina",
  "sdc": "sassar\u0161tina",
  "sdh": "kurd\u0161tina (ji\u017En\xED)",
  "se": "s\xE1m\u0161tina (severn\xED)",
  "see": "seneca",
  "seh": "sena",
  "sei": "seri\u0161tina",
  "sel": "selkup\u0161tina",
  "ses": "koyraboro senni",
  "sg": "sang\u0161tina",
  "sga": "ir\u0161tina (star\xE1)",
  "sgs": "\u017Eemait\u0161tina",
  "sh": "srbochorvat\u0161tina",
  "shi": "ta\u0161elhit",
  "shn": "\u0161an\u0161tina",
  "shu": "arab\u0161tina (\u010Dadsk\xE1)",
  "si": "sinh\xE1l\u0161tina",
  "sid": "sidamo",
  "sk": "sloven\u0161tina",
  "sl": "slovin\u0161tina",
  "sli": "n\u011Bm\u010Dina (slezsk\xE1)",
  "sly": "selajar\u0161tina",
  "sm": "samoj\u0161tina",
  "sma": "s\xE1m\u0161tina (ji\u017En\xED)",
  "smj": "s\xE1m\u0161tina (lulejsk\xE1)",
  "smn": "s\xE1m\u0161tina (inarijsk\xE1)",
  "sms": "s\xE1m\u0161tina (skoltsk\xE1)",
  "sn": "\u0161on\u0161tina",
  "snk": "sonik\u0161tina",
  "so": "som\xE1l\u0161tina",
  "sog": "sogd\u0161tina",
  "sq": "alb\xE1n\u0161tina",
  "sr": "srb\u0161tina",
  "srn": "sranan tongo",
  "srr": "serer\u0161tina",
  "ss": "siswat\u0161tina",
  "ssy": "saho",
  "st": "sot\u0161tina (ji\u017En\xED)",
  "stq": "fr\xED\u0161tina (saterlandsk\xE1)",
  "su": "sund\u0161tina",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumer\u0161tina",
  "sv": "\u0161v\xE9d\u0161tina",
  "sw": "svahil\u0161tina",
  "sw-CD": "svahil\u0161tina (Kongo)",
  "swb": "komor\u0161tina",
  "syc": "syr\u0161tina (klasick\xE1)",
  "syr": "syr\u0161tina",
  "szl": "slez\u0161tina",
  "ta": "tamil\u0161tina",
  "tcy": "tulu\u0161tina",
  "te": "telug\u0161tina",
  "tem": "temne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tetum\u0161tina",
  "tg": "t\xE1d\u017Ei\u010Dtina",
  "th": "thaj\u0161tina",
  "ti": "tigrinij\u0161tina",
  "tig": "tigrej\u0161tina",
  "tiv": "tiv\u0161tina",
  "tk": "turkmen\u0161tina",
  "tkl": "tokelau\u0161tina",
  "tkr": "cachur\u0161tina",
  "tl": "tagalog",
  "tlh": "klingon\u0161tina",
  "tli": "tlingit",
  "tly": "taly\u0161tina",
  "tmh": "tama\u0161ek",
  "tn": "setswan\u0161tina",
  "to": "tong\xE1n\u0161tina",
  "tog": "ton\u017E\u0161tina (nyasa)",
  "tpi": "tok pisin",
  "tr": "ture\u010Dtina",
  "tru": "turoj\u0161tina",
  "trv": "taroko",
  "ts": "tsonga",
  "tsd": "tsakon\u0161tina",
  "tsi": "tsim\u0161ijsk\xE9 jazyky",
  "tt": "tatar\u0161tina",
  "ttt": "tat\u0161tina",
  "tum": "tumbuk\u0161tina",
  "tvl": "tuval\u0161tina",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahit\u0161tina",
  "tyv": "tuvin\u0161tina",
  "tzm": "tamazight (st\u0159edn\xED Maroko)",
  "udm": "udmurt\u0161tina",
  "ug": "ujgur\u0161tina",
  "uga": "ugarit\u0161tina",
  "uk": "ukrajin\u0161tina",
  "umb": "umbundu",
  "und": "nezn\xE1m\xFD jazyk",
  "ur": "urd\u0161tina",
  "uz": "uzbe\u010Dtina",
  "vai": "vai",
  "ve": "venda",
  "vec": "ben\xE1t\u0161tina",
  "vep": "vep\u0161tina",
  "vi": "vietnam\u0161tina",
  "vls": "vl\xE1m\u0161tina (z\xE1padn\xED)",
  "vmf": "n\u011Bm\u010Dina (mohansko-fransk\xE9 dialekty)",
  "vo": "volap\xFCk",
  "vot": "vot\u0161tina",
  "vro": "v\xF5ru\u0161tina",
  "vun": "vunjo",
  "wa": "valon\u0161tina",
  "wae": "n\u011Bm\u010Dina (walser)",
  "wal": "wolajt\u0161tina",
  "war": "waraj\u0161tina",
  "was": "wa\u0161tina",
  "wbp": "warlpiri",
  "wo": "wolof\u0161tina",
  "wuu": "\u010D\xEDn\u0161tina (dialekty Wu)",
  "xal": "kalmy\u010Dtina",
  "xh": "xho\u0161tina",
  "xmf": "mingrel\u0161tina",
  "xog": "sog\u0161tina",
  "yao": "jao\u0161tina",
  "yap": "jap\u0161tina",
  "yav": "jangben\u0161tina",
  "ybb": "yemba",
  "yi": "jidi\u0161",
  "yo": "jorub\u0161tina",
  "yrl": "nheengatu",
  "yue": "kanton\u0161tina",
  "za": "\u010Duang\u0161tina",
  "zap": "zapot\xE9\u010Dtina",
  "zbl": "bliss syst\xE9m",
  "zea": "z\xE9land\u0161tina",
  "zen": "zenaga",
  "zgh": "tamazight (standardn\xED marock\xFD)",
  "zh": "\u010D\xEDn\u0161tina",
  "zh-Hans": "\u010D\xEDn\u0161tina (zjednodu\u0161en\xE1)",
  "zh-Hant": "\u010D\xEDn\u0161tina (tradi\u010Dn\xED)",
  "zu": "zulu\u0161tina",
  "zun": "zunij\u0161tina",
  "zxx": "\u017E\xE1dn\xFD jazykov\xFD obsah",
  "zza": "zaza"
};

// src/l10n/locale/da.ts
var da_default = {
  "aa": "afar",
  "ab": "abkhasisk",
  "ace": "achinesisk",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adyghe",
  "ae": "avestan",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "akkadisk",
  "ale": "aleutisk",
  "alt": "sydaltaisk",
  "am": "amharisk",
  "an": "aragonesisk",
  "ang": "oldengelsk",
  "anp": "angika",
  "ar": "arabisk",
  "ar-001": "moderne standardarabisk",
  "arc": "aram\xE6isk",
  "arn": "mapudungun",
  "arp": "arapaho",
  "ars": "Najd-arabisk",
  "arw": "arawak",
  "as": "assamesisk",
  "asa": "asu",
  "ast": "asturisk",
  "av": "avarisk",
  "awa": "awadhi",
  "ay": "aymara",
  "az": "aserbajdsjansk",
  "ba": "bashkir",
  "bal": "baluchi",
  "ban": "balinesisk",
  "bas": "basaa",
  "bax": "bamun",
  "bbj": "ghomala",
  "be": "hviderussisk",
  "bej": "beja",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bg": "bulgarsk",
  "bgn": "vestbaluchi",
  "bho": "bhojpuri",
  "bi": "bislama",
  "bik": "bikol",
  "bin": "bini",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengali",
  "bo": "tibetansk",
  "br": "bretonsk",
  "bra": "braj",
  "brx": "bodo",
  "bs": "bosnisk",
  "bss": "bakossi",
  "bua": "buriatisk",
  "bug": "buginesisk",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "catalansk",
  "cad": "caddo",
  "car": "caribisk",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "tjetjensk",
  "ceb": "cebuano",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "chagatai",
  "chk": "chuukese",
  "chm": "mari",
  "chn": "chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cherokee",
  "chy": "cheyenne",
  "ckb": "sorani",
  "co": "korsikansk",
  "cop": "koptisk",
  "cr": "cree",
  "crh": "krim-tyrkisk",
  "crs": "seselwa (kreol-fransk)",
  "cs": "tjekkisk",
  "csb": "kasjubisk",
  "cu": "kirkeslavisk",
  "cv": "chuvash",
  "cy": "walisisk",
  "da": "dansk",
  "dak": "dakota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "tysk",
  "de-AT": "\xF8strigsk tysk",
  "de-CH": "schweizerh\xF8jtysk",
  "del": "delaware",
  "den": "athapaskisk",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "nedersorbisk",
  "dua": "duala",
  "dum": "middelhollandsk",
  "dv": "divehi",
  "dyo": "jola-fonyi",
  "dyu": "dyula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "kiembu",
  "ee": "ewe",
  "efi": "efik",
  "egy": "oldegyptisk",
  "eka": "ekajuk",
  "el": "gr\xE6sk",
  "elx": "elamitisk",
  "en": "engelsk",
  "en-AU": "australsk engelsk",
  "en-CA": "canadisk engelsk",
  "en-GB": "britisk engelsk",
  "en-US": "amerikansk engelsk",
  "enm": "middelengelsk",
  "eo": "esperanto",
  "es": "spansk",
  "es-419": "latinamerikansk spansk",
  "es-ES": "europ\xE6isk spansk",
  "es-MX": "mexicansk spansk",
  "et": "estisk",
  "eu": "baskisk",
  "ewo": "ewondo",
  "fa": "persisk",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fulah",
  "fi": "finsk",
  "fil": "filippinsk",
  "fj": "fijiansk",
  "fo": "f\xE6r\xF8sk",
  "fon": "fon",
  "fr": "fransk",
  "fr-CA": "canadisk fransk",
  "fr-CH": "schweizisk fransk",
  "frc": "cajunfransk",
  "frm": "middelfransk",
  "fro": "oldfransk",
  "frr": "nordfrisisk",
  "frs": "\xF8stfrisisk",
  "fur": "friulisk",
  "fy": "vestfrisisk",
  "ga": "irsk",
  "gaa": "ga",
  "gag": "gagauzisk",
  "gan": "gan-kinesisk",
  "gay": "gayo",
  "gba": "gbaya",
  "gd": "skotsk g\xE6lisk",
  "gez": "geez",
  "gil": "gilbertesisk",
  "gl": "galicisk",
  "gmh": "middelh\xF8jtysk",
  "gn": "guarani",
  "goh": "oldh\xF8jtysk",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gotisk",
  "grb": "grebo",
  "grc": "oldgr\xE6sk",
  "gsw": "schweizertysk",
  "gu": "gujarati",
  "guz": "gusii",
  "gv": "manx",
  "gwi": "gwichin",
  "ha": "hausa",
  "hai": "haida",
  "hak": "hakka-kinesisk",
  "haw": "hawaiiansk",
  "he": "hebraisk",
  "hi": "hindi",
  "hil": "hiligaynon",
  "hit": "hittitisk",
  "hmn": "hmong",
  "ho": "hirimotu",
  "hr": "kroatisk",
  "hsb": "\xF8vresorbisk",
  "hsn": "xiang-kinesisk",
  "ht": "haitisk",
  "hu": "ungarsk",
  "hup": "hupa",
  "hy": "armensk",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonesisk",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "sichuan yi",
  "ik": "inupiaq",
  "ilo": "iloko",
  "inh": "ingush",
  "io": "ido",
  "is": "islandsk",
  "it": "italiensk",
  "iu": "inuktitut",
  "ja": "japansk",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "machame",
  "jpr": "j\xF8disk-persisk",
  "jrb": "j\xF8disk-arabisk",
  "jv": "javanesisk",
  "ka": "georgisk",
  "kaa": "karakalpakisk",
  "kab": "kabylisk",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardian",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kapverdisk",
  "kfo": "koro",
  "kg": "kongo",
  "kgp": "kgp",
  "kha": "khasi",
  "kho": "khotanesisk",
  "khq": "koyra-chiini",
  "ki": "kikuyu",
  "kj": "kuanyama",
  "kk": "kasakhisk",
  "kkj": "kako",
  "kl": "gr\xF8nlandsk",
  "kln": "kalenjin",
  "km": "khmer",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "koreansk",
  "koi": "komi-permjakisk",
  "kok": "konkani",
  "kos": "kosraean",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karatjai-balkar",
  "krl": "karelsk",
  "kru": "kurukh",
  "ks": "kashmiri",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "kurdisk",
  "kum": "kymyk",
  "kut": "kutenaj",
  "kv": "komi",
  "kw": "cornisk",
  "ky": "kirgisisk",
  "la": "latin",
  "lad": "ladino",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxembourgsk",
  "lez": "lezghian",
  "lg": "ganda",
  "li": "limburgsk",
  "lij": "lij",
  "lkt": "lakota",
  "ln": "lingala",
  "lo": "lao",
  "lol": "mongo",
  "lou": "Louisiana-kreolsk",
  "loz": "lozi",
  "lrc": "nordluri",
  "lt": "litauisk",
  "lu": "luba-Katanga",
  "lua": "luba-Lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "lushai",
  "luy": "luyana",
  "lv": "lettisk",
  "mad": "madurese",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandingo",
  "mas": "masai",
  "mde": "maba",
  "mdf": "moksha",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "morisyen",
  "mg": "malagassisk",
  "mga": "middelirsk",
  "mgh": "makhuwa-meetto",
  "mgo": "meta",
  "mh": "marshallese",
  "mi": "maori",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "makedonsk",
  "ml": "malayalam",
  "mn": "mongolsk",
  "mnc": "manchu",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marathisk",
  "ms": "malajisk",
  "mt": "maltesisk",
  "mua": "mundang",
  "mul": "flere sprog",
  "mus": "creek",
  "mwl": "mirandesisk",
  "mwr": "marwari",
  "my": "burmesisk",
  "mye": "myene",
  "myv": "erzya",
  "mzn": "mazenisk",
  "na": "nauru",
  "nan": "min-kinesisk",
  "nap": "napolitansk",
  "naq": "nama",
  "nb": "bokm\xE5l",
  "nd": "nordndebele",
  "nds": "nedertysk",
  "nds-NL": "nedertysk (Holland)",
  "ne": "nepalesisk",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niueansk",
  "nl": "hollandsk",
  "nl-BE": "flamsk",
  "nmg": "kwasio",
  "nn": "nynorsk",
  "nnh": "ngiemboon",
  "no": "norsk",
  "nog": "nogai",
  "non": "oldislandsk",
  "nqo": "n-ko",
  "nr": "sydndebele",
  "nso": "nordsotho",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "klassisk newarisk",
  "ny": "nyanja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro-sprog",
  "nzi": "nzima",
  "oc": "occitansk",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "oriya",
  "os": "ossetisk",
  "osa": "osage",
  "ota": "osmannisk tyrkisk",
  "pa": "punjabisk",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palauansk",
  "pcm": "nigeriansk pidgin",
  "peo": "oldpersisk",
  "phn": "f\xF8nikisk",
  "pi": "pali",
  "pl": "polsk",
  "pon": "ponape",
  "prg": "preussisk",
  "pro": "oldprovencalsk",
  "ps": "pashto",
  "pt": "portugisisk",
  "pt-BR": "brasiliansk portugisisk",
  "pt-PT": "europ\xE6isk portugisisk",
  "qu": "quechua",
  "quc": "quich\xE9",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotonga",
  "rhg": "rohingya",
  "rm": "r\xE6toromansk",
  "rn": "rundi",
  "ro": "rum\xE6nsk",
  "ro-MD": "moldovisk",
  "rof": "rombo",
  "rom": "romani",
  "ru": "russisk",
  "rup": "arum\xE6nsk",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "sanskrit",
  "sad": "sandawe",
  "sah": "jakutisk",
  "sam": "samaritansk aram\xE6isk",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardinsk",
  "scn": "siciliansk",
  "sco": "skotsk",
  "sd": "sindhi",
  "sdh": "sydkurdisk",
  "se": "nordsamisk",
  "see": "seneca",
  "seh": "sena",
  "sel": "selkupisk",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "oldirsk",
  "sh": "serbokroatisk",
  "shi": "tachelhit",
  "shn": "shan",
  "shu": "tchadisk arabisk",
  "si": "singalesisk",
  "sid": "sidamo",
  "sk": "slovakisk",
  "sl": "slovensk",
  "sm": "samoansk",
  "sma": "sydsamisk",
  "smj": "lulesamisk",
  "smn": "enaresamisk",
  "sms": "skoltesamisk",
  "sn": "shona",
  "snk": "soninke",
  "so": "somali",
  "sog": "sogdiansk",
  "sq": "albansk",
  "sr": "serbisk",
  "srn": "sranan tongo",
  "srr": "serer",
  "ss": "swati",
  "ssy": "saho",
  "st": "sydsotho",
  "su": "sundanesisk",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumerisk",
  "sv": "svensk",
  "sw": "swahili",
  "sw-CD": "congolesisk swahili",
  "swb": "shimaore",
  "syc": "klassisk syrisk",
  "syr": "syrisk",
  "ta": "tamil",
  "te": "telugu",
  "tem": "temne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tetum",
  "tg": "tadsjikisk",
  "th": "thai",
  "ti": "tigrinya",
  "tig": "tigre",
  "tiv": "tivi",
  "tk": "turkmensk",
  "tkl": "tokelau",
  "tl": "tagalog",
  "tlh": "klingon",
  "tli": "tlingit",
  "tmh": "tamashek",
  "tn": "tswana",
  "to": "tongansk",
  "tog": "nyasa tongansk",
  "tpi": "tok pisin",
  "tr": "tyrkisk",
  "trv": "taroko",
  "ts": "tsonga",
  "tsi": "tsimshisk",
  "tt": "tatarisk",
  "tum": "tumbuka",
  "tvl": "tuvaluansk",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahitiansk",
  "tyv": "tuvinian",
  "tzm": "centralmarokkansk tamazight",
  "udm": "udmurt",
  "ug": "uygurisk",
  "uga": "ugaristisk",
  "uk": "ukrainsk",
  "umb": "umbundu",
  "und": "ukendt sprog",
  "ur": "urdu",
  "uz": "usbekisk",
  "vai": "vai",
  "ve": "venda",
  "vi": "vietnamesisk",
  "vo": "volapyk",
  "vot": "votisk",
  "vun": "vunjo",
  "wa": "vallonsk",
  "wae": "walsertysk",
  "wal": "walamo",
  "war": "waray",
  "was": "washo",
  "wbp": "walbiri",
  "wo": "wolof",
  "wuu": "wu-kinesisk",
  "xal": "kalmyk",
  "xh": "xhosa",
  "xog": "soga",
  "yao": "yao",
  "yap": "yapese",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "jiddisch",
  "yo": "yoruba",
  "yrl": "yrl",
  "yue": "kantonesisk",
  "za": "zhuang",
  "zap": "zapotec",
  "zbl": "blissymboler",
  "zen": "zenaga",
  "zgh": "tamazight",
  "zh": "kinesisk",
  "zh-Hans": "forenklet kinesisk",
  "zh-Hant": "traditionelt kinesisk",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "intet sprogligt indhold",
  "zza": "zaza"
};

// src/l10n/locale/de.ts
var de_default = {
  "aa": "Afar",
  "ab": "Abchasisch",
  "ace": "Aceh",
  "ach": "Acholi",
  "ada": "Adangme",
  "ady": "Adygeisch",
  "ae": "Avestisch",
  "aeb": "Tunesisches Arabisch",
  "af": "Afrikaans",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Ainu",
  "ak": "Akan",
  "akk": "Akkadisch",
  "akz": "Alabama",
  "ale": "Aleutisch",
  "aln": "Gegisch",
  "alt": "S\xFCd-Altaisch",
  "am": "Amharisch",
  "an": "Aragonesisch",
  "ang": "Altenglisch",
  "anp": "Angika",
  "ar": "Arabisch",
  "ar-001": "Modernes Hocharabisch",
  "arc": "Aram\xE4isch",
  "arn": "Mapudungun",
  "aro": "Araona",
  "arp": "Arapaho",
  "arq": "Algerisches Arabisch",
  "ars": "Arabisch (Nadschd)",
  "arw": "Arawak",
  "ary": "Marokkanisches Arabisch",
  "arz": "\xC4gyptisches Arabisch",
  "as": "Assamesisch",
  "asa": "Asu",
  "ase": "Amerikanische Geb\xE4rdensprache",
  "ast": "Asturisch",
  "av": "Awarisch",
  "avk": "Kotava",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Aserbaidschanisch",
  "ba": "Baschkirisch",
  "bal": "Belutschisch",
  "ban": "Balinesisch",
  "bar": "Bairisch",
  "bas": "Bassa",
  "bax": "Bamun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala",
  "be": "Belarussisch",
  "bej": "Bedauye",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bfq": "Badaga",
  "bg": "Bulgarisch",
  "bgn": "Westliches Belutschi",
  "bho": "Bhodschpuri",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjaresisch",
  "bkm": "Kom",
  "bla": "Blackfoot",
  "bm": "Bambara",
  "bn": "Bengalisch",
  "bo": "Tibetisch",
  "bpy": "Bishnupriya",
  "bqi": "Bachtiarisch",
  "br": "Bretonisch",
  "bra": "Braj-Bhakha",
  "brh": "Brahui",
  "brx": "Bodo",
  "bs": "Bosnisch",
  "bss": "Akoose",
  "bua": "Burjatisch",
  "bug": "Buginesisch",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Katalanisch",
  "cad": "Caddo",
  "car": "Karibisch",
  "cay": "Cayuga",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "Tschetschenisch",
  "ceb": "Cebuano",
  "cgg": "Rukiga",
  "ch": "Chamorro",
  "chb": "Chibcha",
  "chg": "Tschagataisch",
  "chk": "Chuukesisch",
  "chm": "Mari",
  "chn": "Chinook",
  "cho": "Choctaw",
  "chp": "Chipewyan",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "ckb": "Zentralkurdisch",
  "co": "Korsisch",
  "cop": "Koptisch",
  "cps": "Capiznon",
  "cr": "Cree",
  "crh": "Krimtatarisch",
  "crs": "Seychellenkreol",
  "cs": "Tschechisch",
  "csb": "Kaschubisch",
  "cu": "Kirchenslawisch",
  "cv": "Tschuwaschisch",
  "cy": "Walisisch",
  "da": "D\xE4nisch",
  "dak": "Dakota",
  "dar": "Darginisch",
  "dav": "Taita",
  "de": "Deutsch",
  "de-AT": "\xD6sterreichisches Deutsch",
  "de-CH": "Schweizer Hochdeutsch",
  "del": "Delaware",
  "den": "Slave",
  "dgr": "Dogrib",
  "din": "Dinka",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Niedersorbisch",
  "dtp": "Zentral-Dusun",
  "dua": "Duala",
  "dum": "Mittelniederl\xE4ndisch",
  "dv": "Dhivehi",
  "dyo": "Diola",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egl": "Emilianisch",
  "egy": "\xC4gyptisch",
  "eka": "Ekajuk",
  "el": "Griechisch",
  "elx": "Elamisch",
  "en": "Englisch",
  "en-AU": "Englisch (Australien)",
  "en-CA": "Englisch (Kanada)",
  "en-GB": "Englisch (Vereinigtes K\xF6nigreich)",
  "en-US": "Englisch (Vereinigte Staaten)",
  "enm": "Mittelenglisch",
  "eo": "Esperanto",
  "es": "Spanisch",
  "es-419": "Spanisch (Lateinamerika)",
  "es-ES": "Spanisch (Spanien)",
  "es-MX": "Spanisch (Mexiko)",
  "esu": "Zentral-Alaska-Yupik",
  "et": "Estnisch",
  "eu": "Baskisch",
  "ewo": "Ewondo",
  "ext": "Extremadurisch",
  "fa": "Persisch",
  "fa-AF": "Dari",
  "fan": "Pangwe",
  "fat": "Fanti",
  "ff": "Ful",
  "fi": "Finnisch",
  "fil": "Filipino",
  "fit": "Me\xE4nkieli",
  "fj": "Fidschi",
  "fo": "F\xE4r\xF6isch",
  "fon": "Fon",
  "fr": "Franz\xF6sisch",
  "fr-CA": "Franz\xF6sisch (Kanada)",
  "fr-CH": "Franz\xF6sisch (Schweiz)",
  "frc": "Cajun",
  "frm": "Mittelfranz\xF6sisch",
  "fro": "Altfranz\xF6sisch",
  "frp": "Frankoprovenzalisch",
  "frr": "Nordfriesisch",
  "frs": "Ostfriesisch",
  "fur": "Friaulisch",
  "fy": "Westfriesisch",
  "ga": "Irisch",
  "gaa": "Ga",
  "gag": "Gagausisch",
  "gan": "Gan",
  "gay": "Gayo",
  "gba": "Gbaya",
  "gbz": "Gabri",
  "gd": "G\xE4lisch (Schottland)",
  "gez": "Geez",
  "gil": "Kiribatisch",
  "gl": "Galicisch",
  "glk": "Gilaki",
  "gmh": "Mittelhochdeutsch",
  "gn": "Guaran\xED",
  "goh": "Althochdeutsch",
  "gom": "Goa-Konkani",
  "gon": "Gondi",
  "gor": "Mongondou",
  "got": "Gotisch",
  "grb": "Grebo",
  "grc": "Altgriechisch",
  "gsw": "Schweizerdeutsch",
  "gu": "Gujarati",
  "guc": "Way\xFAu",
  "gur": "Farefare",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Kutchin",
  "ha": "Haussa",
  "hai": "Haida",
  "hak": "Hakka",
  "haw": "Hawaiisch",
  "he": "Hebr\xE4isch",
  "hi": "Hindi",
  "hif": "Fidschi-Hindi",
  "hil": "Hiligaynon",
  "hit": "Hethitisch",
  "hmn": "Miao",
  "ho": "Hiri-Motu",
  "hr": "Kroatisch",
  "hsb": "Obersorbisch",
  "hsn": "Xiang",
  "ht": "Haiti-Kreolisch",
  "hu": "Ungarisch",
  "hup": "Hupa",
  "hy": "Armenisch",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesisch",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Yi",
  "ik": "Inupiak",
  "ilo": "Ilokano",
  "inh": "Inguschisch",
  "io": "Ido",
  "is": "Isl\xE4ndisch",
  "it": "Italienisch",
  "iu": "Inuktitut",
  "izh": "Ischorisch",
  "ja": "Japanisch",
  "jam": "Jamaikanisch-Kreolisch",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "J\xFCdisch-Persisch",
  "jrb": "J\xFCdisch-Arabisch",
  "jut": "J\xFCtisch",
  "jv": "Javanisch",
  "ka": "Georgisch",
  "kaa": "Karakalpakisch",
  "kab": "Kabylisch",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardinisch",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongolesisch",
  "kgp": "Kaingang",
  "kha": "Khasi",
  "kho": "Sakisch",
  "khq": "Koyra Chiini",
  "khw": "Khowar",
  "ki": "Kikuyu",
  "kiu": "Kirmanjki",
  "kj": "Kwanyama",
  "kk": "Kasachisch",
  "kkj": "Kako",
  "kl": "Gr\xF6nl\xE4ndisch",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Koreanisch",
  "koi": "Komi-Permjakisch",
  "kok": "Konkani",
  "kos": "Kosraeanisch",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karatschaiisch-Balkarisch",
  "kri": "Krio",
  "krj": "Kinaray-a",
  "krl": "Karelisch",
  "kru": "Oraon",
  "ks": "Kaschmiri",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "K\xF6lsch",
  "ku": "Kurdisch",
  "kum": "Kum\xFCkisch",
  "kut": "Kutenai",
  "kv": "Komi",
  "kw": "Kornisch",
  "ky": "Kirgisisch",
  "la": "Latein",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba",
  "lb": "Luxemburgisch",
  "lez": "Lesgisch",
  "lfn": "Lingua Franca Nova",
  "lg": "Ganda",
  "li": "Limburgisch",
  "lij": "Ligurisch",
  "liv": "Livisch",
  "lkt": "Lakota",
  "lmo": "Lombardisch",
  "ln": "Lingala",
  "lo": "Laotisch",
  "lol": "Mongo",
  "lou": "Kreol (Louisiana)",
  "loz": "Lozi",
  "lrc": "N\xF6rdliches Luri",
  "lt": "Litauisch",
  "ltg": "Lettgallisch",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Lushai",
  "luy": "Luhya",
  "lv": "Lettisch",
  "lzh": "Klassisches Chinesisch",
  "lzz": "Lasisch",
  "mad": "Maduresisch",
  "maf": "Mafa",
  "mag": "Khotta",
  "mai": "Maithili",
  "mak": "Makassarisch",
  "man": "Malinke",
  "mas": "Massai",
  "mde": "Maba",
  "mdf": "Mokschanisch",
  "mdr": "Mandaresisch",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malagasy",
  "mga": "Mittelirisch",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u2019",
  "mh": "Marschallesisch",
  "mi": "M\u0101ori",
  "mic": "Micmac",
  "min": "Minangkabau",
  "mk": "Mazedonisch",
  "ml": "Malayalam",
  "mn": "Mongolisch",
  "mnc": "Mandschurisch",
  "mni": "Meithei",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "mrj": "Bergmari",
  "ms": "Malaiisch",
  "mt": "Maltesisch",
  "mua": "Mundang",
  "mul": "Mehrsprachig",
  "mus": "Muskogee",
  "mwl": "Mirandesisch",
  "mwr": "Marwari",
  "mwv": "Mentawai",
  "my": "Birmanisch",
  "mye": "Myene",
  "myv": "Ersja-Mordwinisch",
  "mzn": "Masanderanisch",
  "na": "Nauruisch",
  "nan": "Min Nan",
  "nap": "Neapolitanisch",
  "naq": "Nama",
  "nb": "Norwegisch (Bokm\xE5l)",
  "nd": "Nord-Ndebele",
  "nds": "Niederdeutsch",
  "nds-NL": "Nieders\xE4chsisch",
  "ne": "Nepalesisch",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niue",
  "njo": "Ao-Naga",
  "nl": "Niederl\xE4ndisch",
  "nl-BE": "Fl\xE4misch",
  "nmg": "Kwasio",
  "nn": "Norwegisch (Nynorsk)",
  "nnh": "Ngiemboon",
  "no": "Norwegisch",
  "nog": "Nogai",
  "non": "Altnordisch",
  "nov": "Novial",
  "nqo": "N\u2019Ko",
  "nr": "S\xFCd-Ndebele",
  "nso": "Nord-Sotho",
  "nus": "Nuer",
  "nv": "Navajo",
  "nwc": "Alt-Newari",
  "ny": "Nyanja",
  "nym": "Nyamwezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima",
  "oc": "Okzitanisch",
  "oj": "Ojibwa",
  "om": "Oromo",
  "or": "Oriya",
  "os": "Ossetisch",
  "osa": "Osage",
  "ota": "Osmanisch",
  "pa": "Punjabi",
  "pag": "Pangasinan",
  "pal": "Mittelpersisch",
  "pam": "Pampanggan",
  "pap": "Papiamento",
  "pau": "Palau",
  "pcd": "Picardisch",
  "pcm": "Nigerianisches Pidgin",
  "pdc": "Pennsylvaniadeutsch",
  "pdt": "Plautdietsch",
  "peo": "Altpersisch",
  "pfl": "Pf\xE4lzisch",
  "phn": "Ph\xF6nizisch",
  "pi": "Pali",
  "pl": "Polnisch",
  "pms": "Piemontesisch",
  "pnt": "Pontisch",
  "pon": "Ponapeanisch",
  "prg": "Altpreu\xDFisch",
  "pro": "Altprovenzalisch",
  "ps": "Paschtu",
  "pt": "Portugiesisch",
  "pt-BR": "Portugiesisch (Brasilien)",
  "pt-PT": "Portugiesisch (Portugal)",
  "qu": "Quechua",
  "quc": "K\u2019iche\u2019",
  "qug": "Chimborazo Hochland-Quechua",
  "raj": "Rajasthani",
  "rap": "Rapanui",
  "rar": "Rarotonganisch",
  "rgn": "Romagnol",
  "rhg": "Rohingyalisch",
  "rif": "Tarifit",
  "rm": "R\xE4toromanisch",
  "rn": "Rundi",
  "ro": "Rum\xE4nisch",
  "ro-MD": "Moldauisch",
  "rof": "Rombo",
  "rom": "Romani",
  "rtm": "Rotumanisch",
  "ru": "Russisch",
  "rue": "Russinisch",
  "rug": "Roviana",
  "rup": "Aromunisch",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskrit",
  "sad": "Sandawe",
  "sah": "Jakutisch",
  "sam": "Samaritanisch",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "saz": "Saurashtra",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardisch",
  "scn": "Sizilianisch",
  "sco": "Schottisch",
  "sd": "Sindhi",
  "sdc": "Sassarisch",
  "sdh": "S\xFCdkurdisch",
  "se": "Nordsamisch",
  "see": "Seneca",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkupisch",
  "ses": "Koyra Senni",
  "sg": "Sango",
  "sga": "Altirisch",
  "sgs": "Samogitisch",
  "sh": "Serbo-Kroatisch",
  "shi": "Taschelhit",
  "shn": "Schan",
  "shu": "Tschadisch-Arabisch",
  "si": "Singhalesisch",
  "sid": "Sidamo",
  "sk": "Slowakisch",
  "sl": "Slowenisch",
  "sli": "Schlesisch (Niederschlesisch)",
  "sly": "Selayar",
  "sm": "Samoanisch",
  "sma": "S\xFCdsamisch",
  "smj": "Lule-Samisch",
  "smn": "Inari-Samisch",
  "sms": "Skolt-Samisch",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somali",
  "sog": "Sogdisch",
  "sq": "Albanisch",
  "sr": "Serbisch",
  "srn": "Srananisch",
  "srr": "Serer",
  "ss": "Swazi",
  "ssy": "Saho",
  "st": "S\xFCd-Sotho",
  "stq": "Saterfriesisch",
  "su": "Sundanesisch",
  "suk": "Sukuma",
  "sus": "Susu",
  "sux": "Sumerisch",
  "sv": "Schwedisch",
  "sw": "Suaheli",
  "sw-CD": "Kongo-Swahili",
  "swb": "Komorisch",
  "syc": "Altsyrisch",
  "syr": "Syrisch",
  "szl": "Schlesisch (Wasserpolnisch)",
  "ta": "Tamil",
  "tcy": "Tulu",
  "te": "Telugu",
  "tem": "Temne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetum",
  "tg": "Tadschikisch",
  "th": "Thail\xE4ndisch",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "Turkmenisch",
  "tkl": "Tokelauanisch",
  "tkr": "Tsachurisch",
  "tl": "Tagalog",
  "tlh": "Klingonisch",
  "tli": "Tlingit",
  "tly": "Talisch",
  "tmh": "Tamaseq",
  "tn": "Tswana",
  "to": "Tongaisch",
  "tog": "Nyasa Tonga",
  "tpi": "Neumelanesisch",
  "tr": "T\xFCrkisch",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsd": "Tsakonisch",
  "tsi": "Tsimshian",
  "tt": "Tatarisch",
  "ttt": "Tatisch",
  "tum": "Tumbuka",
  "tvl": "Tuvaluisch",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahitisch",
  "tyv": "Tuwinisch",
  "tzm": "Zentralatlas-Tamazight",
  "udm": "Udmurtisch",
  "ug": "Uigurisch",
  "uga": "Ugaritisch",
  "uk": "Ukrainisch",
  "umb": "Umbundu",
  "und": "Unbekannte Sprache",
  "ur": "Urdu",
  "uz": "Usbekisch",
  "vai": "Vai",
  "ve": "Venda",
  "vec": "Venetisch",
  "vep": "Wepsisch",
  "vi": "Vietnamesisch",
  "vls": "Westfl\xE4misch",
  "vmf": "Mainfr\xE4nkisch",
  "vo": "Volap\xFCk",
  "vot": "Wotisch",
  "vro": "V\xF5ro",
  "vun": "Vunjo",
  "wa": "Wallonisch",
  "wae": "Walliserdeutsch",
  "wal": "Walamo",
  "war": "Waray",
  "was": "Washo",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "wuu": "Wu",
  "xal": "Kalm\xFCckisch",
  "xh": "Xhosa",
  "xmf": "Mingrelisch",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yapesisch",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Jiddisch",
  "yo": "Yoruba",
  "yrl": "Nheengatu",
  "yue": "Kantonesisch",
  "za": "Zhuang",
  "zap": "Zapotekisch",
  "zbl": "Bliss-Symbole",
  "zea": "Seel\xE4ndisch",
  "zen": "Zenaga",
  "zgh": "Tamazight",
  "zh": "Chinesisch",
  "zh-Hans": "Chinesisch (vereinfacht)",
  "zh-Hant": "Chinesisch (traditionell)",
  "zu": "Zulu",
  "zun": "Zuni",
  "zxx": "Keine Sprachinhalte",
  "zza": "Zaza"
};

// src/l10n/locale/el.ts
var el_default = {
  "aa": "\u0391\u03C6\u03AC\u03C1",
  "ab": "\u0391\u03BC\u03C0\u03C7\u03B1\u03B6\u03B9\u03BA\u03AC",
  "ace": "\u0391\u03C4\u03C3\u03B9\u03BD\u03B9\u03B6\u03B9\u03BA\u03AC",
  "ach": "\u0391\u03BA\u03BF\u03BB\u03AF",
  "ada": "\u0391\u03BD\u03C4\u03AC\u03BD\u03B3\u03BA\u03BC\u03B5",
  "ady": "\u0391\u03BD\u03C4\u03B9\u03B3\u03BA\u03AD\u03B1",
  "ae": "\u0391\u03B2\u03B5\u03C3\u03C4\u03AC\u03BD",
  "af": "\u0391\u03C6\u03C1\u03B9\u03BA\u03AC\u03B1\u03BD\u03C2",
  "afh": "\u0391\u03C6\u03C1\u03B9\u03C7\u03AF\u03BB\u03B9",
  "agq": "\u0391\u03B3\u03BA\u03AD\u03BC",
  "ain": "\u0391\u03CA\u03BD\u03BF\u03CD",
  "ak": "\u0391\u03BA\u03AC\u03BD",
  "akk": "\u0391\u03BA\u03AC\u03BD\u03C4\u03B9\u03B1\u03BD",
  "ale": "\u0391\u03BB\u03B5\u03BF\u03CD\u03C4",
  "alt": "\u039D\u03CC\u03C4\u03B9\u03B1 \u0391\u03BB\u03C4\u03AC\u03B9",
  "am": "\u0391\u03BC\u03C7\u03B1\u03C1\u03B9\u03BA\u03AC",
  "an": "\u0391\u03C1\u03B1\u03B3\u03BF\u03BD\u03B9\u03BA\u03AC",
  "ang": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC",
  "anp": "\u0391\u03BD\u03B3\u03BA\u03B9\u03BA\u03AC",
  "ar": "\u0391\u03C1\u03B1\u03B2\u03B9\u03BA\u03AC",
  "ar-001": "\u03A3\u03CD\u03B3\u03C7\u03C1\u03BF\u03BD\u03B1 \u03A4\u03C5\u03C0\u03B9\u03BA\u03AC \u0391\u03C1\u03B1\u03B2\u03B9\u03BA\u03AC",
  "arc": "\u0391\u03C1\u03B1\u03BC\u03B1\u03CA\u03BA\u03AC",
  "arn": "\u0391\u03C1\u03B1\u03BF\u03C5\u03BA\u03B1\u03BD\u03B9\u03BA\u03AC",
  "arp": "\u0391\u03C1\u03B1\u03C0\u03AC\u03C7\u03BF",
  "ars": "\u0391\u03C1\u03B1\u03B2\u03B9\u03BA\u03AC \u039D\u03AC\u03C4\u03B6\u03BD\u03C4\u03B9",
  "arw": "\u0391\u03C1\u03B1\u03B3\u03BF\u03C5\u03AC\u03BA",
  "as": "\u0391\u03C3\u03B1\u03BC\u03B9\u03BA\u03AC",
  "asa": "\u0386\u03C3\u03BF\u03C5",
  "ast": "\u0391\u03C3\u03C4\u03BF\u03C5\u03C1\u03B9\u03B1\u03BD\u03AC",
  "av": "\u0391\u03B2\u03B1\u03C1\u03B9\u03BA\u03AC",
  "awa": "\u0391\u03B3\u03BF\u03C5\u03B1\u03BD\u03C4\u03AF",
  "ay": "\u0391\u03CA\u03BC\u03AC\u03C1\u03B1",
  "az": "\u0391\u03B6\u03B5\u03C1\u03BC\u03C0\u03B1\u03CA\u03C4\u03B6\u03B1\u03BD\u03B9\u03BA\u03AC",
  "ba": "\u039C\u03C0\u03B1\u03C3\u03BA\u03AF\u03C1",
  "bal": "\u039C\u03C0\u03B1\u03BB\u03BF\u03CD\u03C4\u03C3\u03B9",
  "ban": "\u039C\u03C0\u03B1\u03BB\u03B9\u03BD\u03AF\u03B6",
  "bas": "\u039C\u03C0\u03AC\u03C3\u03B1",
  "bax": "\u039C\u03C0\u03B1\u03BC\u03BF\u03CD\u03BD",
  "bbj": "\u0393\u03BA\u03BF\u03BC\u03AC\u03BB\u03B1",
  "be": "\u039B\u03B5\u03C5\u03BA\u03BF\u03C1\u03C9\u03C3\u03B9\u03BA\u03AC",
  "bej": "\u039C\u03C0\u03AD\u03B6\u03B1",
  "bem": "\u039C\u03C0\u03AD\u03BC\u03C0\u03B1",
  "bez": "\u039C\u03C0\u03AD\u03BD\u03B1",
  "bfd": "\u039C\u03C0\u03B1\u03C6\u03BF\u03CD\u03C4",
  "bg": "\u0392\u03BF\u03C5\u03BB\u03B3\u03B1\u03C1\u03B9\u03BA\u03AC",
  "bgn": "\u0394\u03C5\u03C4\u03B9\u03BA\u03AC \u039C\u03C0\u03B1\u03BB\u03BF\u03C7\u03B9\u03BA\u03AC",
  "bho": "\u039C\u03C0\u03CC\u03C4\u03B6\u03C0\u03BF\u03C5\u03C1\u03B9",
  "bi": "\u039C\u03C0\u03B9\u03C3\u03BB\u03AC\u03BC\u03B1",
  "bik": "\u039C\u03C0\u03B9\u03BA\u03CC\u03BB",
  "bin": "\u039C\u03C0\u03AF\u03BD\u03B9",
  "bkm": "\u039A\u03BF\u03BC",
  "bla": "\u03A3\u03B9\u03BA\u03C3\u03AF\u03BA\u03B1",
  "bm": "\u039C\u03C0\u03B1\u03BC\u03C0\u03AC\u03C1\u03B1",
  "bn": "\u0392\u03B5\u03B3\u03B3\u03B1\u03BB\u03B9\u03BA\u03AC",
  "bo": "\u0398\u03B9\u03B2\u03B5\u03C4\u03B9\u03B1\u03BD\u03AC",
  "br": "\u0392\u03C1\u03B5\u03C4\u03BF\u03BD\u03B9\u03BA\u03AC",
  "bra": "\u039C\u03C0\u03C1\u03B1\u03C4\u03B6",
  "brx": "\u039C\u03C0\u03CC\u03BD\u03C4\u03BF",
  "bs": "\u0392\u03BF\u03C3\u03BD\u03B9\u03B1\u03BA\u03AC",
  "bss": "\u0391\u03BA\u03CC\u03C3\u03B9",
  "bua": "\u039C\u03C0\u03BF\u03C5\u03C1\u03B9\u03AC\u03C4",
  "bug": "\u039C\u03C0\u03BF\u03C5\u03B3\u03BA\u03AF\u03B6",
  "bum": "\u039C\u03C0\u03BF\u03C5\u03BB\u03BF\u03CD",
  "byn": "\u039C\u03C0\u03BB\u03B9\u03BD",
  "byv": "\u039C\u03B5\u03BD\u03C4\u03BF\u03CD\u03BC\u03C0\u03B1",
  "ca": "\u039A\u03B1\u03C4\u03B1\u03BB\u03B1\u03BD\u03B9\u03BA\u03AC",
  "cad": "\u039A\u03AC\u03BD\u03C4\u03BF",
  "car": "\u039A\u03B1\u03C1\u03AF\u03BC\u03C0",
  "cay": "\u039A\u03B1\u03B3\u03B9\u03BF\u03CD\u03B3\u03BA\u03B1",
  "cch": "\u0391\u03C4\u03C3\u03AC\u03BC",
  "ccp": "\u03A4\u03C3\u03AC\u03BA\u03BC\u03B1",
  "ce": "\u03A4\u03C3\u03B5\u03C4\u03C3\u03B5\u03BD\u03B9\u03BA\u03AC",
  "ceb": "\u03A3\u03B5\u03BC\u03C0\u03BF\u03C5\u03AC\u03BD\u03BF",
  "cgg": "\u03A4\u03C3\u03AF\u03B3\u03BA\u03B1",
  "ch": "\u03A4\u03C3\u03B1\u03BC\u03CC\u03C1\u03BF",
  "chb": "\u03A4\u03C3\u03AF\u03BC\u03C0\u03C4\u03C3\u03B1",
  "chg": "\u03A4\u03C3\u03B1\u03B3\u03BA\u03B1\u03C4\u03AC\u03B9",
  "chk": "\u03A4\u03C3\u03BF\u03C5\u03BA\u03AF\u03B6\u03B9",
  "chm": "\u039C\u03AC\u03C1\u03B9",
  "chn": "\u0399\u03B4\u03B9\u03C9\u03BC\u03B1\u03C4\u03B9\u03BA\u03AC \u03A3\u03B9\u03BD\u03BF\u03CD\u03BA",
  "cho": "\u03A4\u03C3\u03CC\u03BA\u03C4\u03BF",
  "chp": "\u03A4\u03C3\u03AF\u03C0\u03B9\u03BF\u03C5\u03B1\u03BD",
  "chr": "\u03A4\u03C3\u03B5\u03C1\u03CC\u03BA\u03B9",
  "chy": "\u03A4\u03C3\u03B5\u03B3\u03B9\u03AD\u03BD",
  "ckb": "\u039A\u03B5\u03BD\u03C4\u03C1\u03B9\u03BA\u03AC \u039A\u03BF\u03C5\u03C1\u03B4\u03B9\u03BA\u03AC",
  "co": "\u039A\u03BF\u03C1\u03C3\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AC",
  "cop": "\u039A\u03BF\u03C0\u03C4\u03B9\u03BA\u03AC",
  "cr": "\u039A\u03C1\u03B9",
  "crh": "\u03A4\u03BF\u03C5\u03C1\u03BA\u03B9\u03BA\u03AC \u039A\u03C1\u03B9\u03BC\u03B1\u03AF\u03B1\u03C2",
  "crs": "\u039A\u03C1\u03B5\u03BF\u03BB\u03B9\u03BA\u03AC \u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC \u03A3\u03B5\u03CB\u03C7\u03B5\u03BB\u03BB\u03CE\u03BD",
  "cs": "\u03A4\u03C3\u03B5\u03C7\u03B9\u03BA\u03AC",
  "csb": "\u039A\u03B1\u03C3\u03BF\u03CD\u03BC\u03C0\u03B9\u03B1\u03BD",
  "cu": "\u0395\u03BA\u03BA\u03BB\u03B7\u03C3\u03B9\u03B1\u03C3\u03C4\u03B9\u03BA\u03AC \u03A3\u03BB\u03B1\u03B2\u03B9\u03BA\u03AC",
  "cv": "\u03A4\u03C3\u03BF\u03C5\u03B2\u03B1\u03C3\u03B9\u03BA\u03AC",
  "cy": "\u039F\u03C5\u03B1\u03BB\u03B9\u03BA\u03AC",
  "da": "\u0394\u03B1\u03BD\u03B9\u03BA\u03AC",
  "dak": "\u039D\u03C4\u03B1\u03BA\u03CC\u03C4\u03B1",
  "dar": "\u039D\u03C4\u03AC\u03C1\u03B3\u03BA\u03BF\u03C5\u03B1",
  "dav": "\u03A4\u03AC\u03B9\u03C4\u03B1",
  "de": "\u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "de-AT": "\u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC \u0391\u03C5\u03C3\u03C4\u03C1\u03AF\u03B1\u03C2",
  "de-CH": "\u03A5\u03C8\u03B7\u03BB\u03AC \u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC \u0395\u03BB\u03B2\u03B5\u03C4\u03AF\u03B1\u03C2",
  "del": "\u039D\u03C4\u03AD\u03BB\u03B1\u03B3\u03BF\u03C5\u03B5\u03C1",
  "den": "\u03A3\u03BB\u03B1\u03B2\u03B9\u03BA\u03AC",
  "dgr": "\u039D\u03C4\u03CC\u03B3\u03BA\u03C1\u03B9\u03BC\u03C0",
  "din": "\u039D\u03C4\u03AF\u03BD\u03BA\u03B1",
  "dje": "\u0396\u03AC\u03C1\u03BC\u03B1",
  "doi": "\u039D\u03C4\u03CC\u03B3\u03BA\u03C1\u03B9",
  "dsb": "\u039A\u03AC\u03C4\u03C9 \u03A3\u03BF\u03C1\u03B2\u03B9\u03BA\u03AC",
  "dua": "\u039D\u03C4\u03BF\u03C5\u03AC\u03BB\u03B1",
  "dum": "\u039C\u03AD\u03C3\u03B1 \u039F\u03BB\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "dv": "\u039D\u03C4\u03B9\u03B2\u03AD\u03C7\u03B9",
  "dyo": "\u03A4\u03B6\u03CC\u03BB\u03B1-\u03A6\u03CC\u03BD\u03B9",
  "dyu": "\u039D\u03C4\u03BF\u03B3\u03B9\u03BF\u03CD\u03BB\u03B1",
  "dz": "\u039D\u03C4\u03B6\u03CC\u03BD\u03B3\u03BA\u03C7\u03B1",
  "dzg": "\u039D\u03C4\u03B1\u03B6\u03AC\u03B3\u03BA\u03B1",
  "ebu": "\u0388\u03BC\u03C0\u03BF\u03C5",
  "ee": "\u0388\u03BF\u03C5\u03B5",
  "efi": "\u0395\u03C6\u03AF\u03BA",
  "egy": "\u0391\u03C1\u03C7\u03B1\u03AF\u03B1 \u0391\u03B9\u03B3\u03C5\u03C0\u03C4\u03B9\u03B1\u03BA\u03AC",
  "eka": "\u0395\u03BA\u03B1\u03C4\u03B6\u03BF\u03CD\u03BA",
  "el": "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  "elx": "\u0395\u03BB\u03B1\u03BC\u03AC\u03B9\u03C4",
  "en": "\u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC",
  "en-AU": "\u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC \u0391\u03C5\u03C3\u03C4\u03C1\u03B1\u03BB\u03AF\u03B1\u03C2",
  "en-CA": "\u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC \u039A\u03B1\u03BD\u03B1\u03B4\u03AC",
  "en-GB": "\u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC \u0392\u03C1\u03B5\u03C4\u03B1\u03BD\u03AF\u03B1\u03C2",
  "en-US": "\u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC \u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03AE\u03C2",
  "enm": "\u039C\u03AD\u03C3\u03B1 \u0391\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC",
  "eo": "\u0395\u03C3\u03C0\u03B5\u03C1\u03AC\u03BD\u03C4\u03BF",
  "es": "\u0399\u03C3\u03C0\u03B1\u03BD\u03B9\u03BA\u03AC",
  "es-419": "\u0399\u03C3\u03C0\u03B1\u03BD\u03B9\u03BA\u03AC \u039B\u03B1\u03C4\u03B9\u03BD\u03B9\u03BA\u03AE\u03C2 \u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03AE\u03C2",
  "es-ES": "\u0399\u03C3\u03C0\u03B1\u03BD\u03B9\u03BA\u03AC \u0395\u03C5\u03C1\u03CE\u03C0\u03B7\u03C2",
  "es-MX": "\u0399\u03C3\u03C0\u03B1\u03BD\u03B9\u03BA\u03AC \u039C\u03B5\u03BE\u03B9\u03BA\u03BF\u03CD",
  "et": "\u0395\u03C3\u03B8\u03BF\u03BD\u03B9\u03BA\u03AC",
  "eu": "\u0392\u03B1\u03C3\u03BA\u03B9\u03BA\u03AC",
  "ewo": "\u0395\u03B3\u03BF\u03C5\u03CC\u03BD\u03C4\u03BF",
  "fa": "\u03A0\u03B5\u03C1\u03C3\u03B9\u03BA\u03AC",
  "fa-AF": "\u039D\u03C4\u03B1\u03C1\u03AF",
  "fan": "\u03A6\u03B1\u03BD\u03B3\u03BA",
  "fat": "\u03A6\u03AC\u03BD\u03C4\u03B9",
  "ff": "\u03A6\u03BF\u03C5\u03BB\u03AC",
  "fi": "\u03A6\u03B9\u03BD\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "fil": "\u03A6\u03B9\u03BB\u03B9\u03C0\u03C0\u03B9\u03BD\u03B9\u03BA\u03AC",
  "fj": "\u03A6\u03AF\u03C4\u03B6\u03B9",
  "fo": "\u03A6\u03B5\u03C1\u03BF\u03CA\u03BA\u03AC",
  "fon": "\u03A6\u03BF\u03BD",
  "fr": "\u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC",
  "fr-CA": "\u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC \u039A\u03B1\u03BD\u03B1\u03B4\u03AC",
  "fr-CH": "\u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC \u0395\u03BB\u03B2\u03B5\u03C4\u03AF\u03B1\u03C2",
  "frc": "\u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC (\u039B\u03BF\u03C5\u03B9\u03B6\u03B9\u03AC\u03BD\u03B1)",
  "frm": "\u039C\u03AD\u03C3\u03B1 \u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC",
  "fro": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u0393\u03B1\u03BB\u03BB\u03B9\u03BA\u03AC",
  "frr": "\u0392\u03CC\u03C1\u03B5\u03B9\u03B1 \u03A6\u03C1\u03B9\u03B6\u03B9\u03B1\u03BD\u03AC",
  "frs": "\u0391\u03BD\u03B1\u03C4\u03BF\u03BB\u03B9\u03BA\u03AC \u03A6\u03C1\u03B9\u03B6\u03B9\u03B1\u03BD\u03AC",
  "fur": "\u03A6\u03C1\u03B9\u03BF\u03C5\u03BB\u03B1\u03BD\u03B9\u03BA\u03AC",
  "fy": "\u0394\u03C5\u03C4\u03B9\u03BA\u03AC \u03A6\u03C1\u03B9\u03B6\u03B9\u03BA\u03AC",
  "ga": "\u0399\u03C1\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "gaa": "\u0393\u03BA\u03B1",
  "gag": "\u0393\u03BA\u03B1\u03B3\u03BA\u03AC\u03BF\u03C5\u03B6",
  "gay": "\u0393\u03BA\u03AC\u03B3\u03B9\u03BF",
  "gba": "\u0393\u03BA\u03BC\u03C0\u03AC\u03B3\u03B9\u03B1",
  "gd": "\u03A3\u03BA\u03C9\u03C4\u03B9\u03BA\u03AC \u039A\u03B5\u03BB\u03C4\u03B9\u03BA\u03AC",
  "gez": "\u0393\u03BA\u03B9\u03B6",
  "gil": "\u0393\u03BA\u03B9\u03BB\u03BC\u03C0\u03B5\u03C1\u03C4\u03AF\u03B6",
  "gl": "\u0393\u03B1\u03BB\u03B9\u03BA\u03B9\u03B1\u03BD\u03AC",
  "gmh": "\u039C\u03AD\u03C3\u03B1 \u0386\u03BD\u03C9 \u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "gn": "\u0393\u03BA\u03BF\u03C5\u03B1\u03C1\u03B1\u03BD\u03AF",
  "goh": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u0386\u03BD\u03C9 \u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "gon": "\u0393\u03BA\u03CC\u03BD\u03C4\u03B9",
  "gor": "\u0393\u03BA\u03BF\u03C1\u03BF\u03BD\u03C4\u03AC\u03BB\u03BF",
  "got": "\u0393\u03BF\u03C4\u03B8\u03B9\u03BA\u03AC",
  "grb": "\u0393\u03BA\u03C1\u03AF\u03BC\u03C0\u03BF",
  "grc": "\u0391\u03C1\u03C7\u03B1\u03AF\u03B1 \u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  "gsw": "\u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC \u0395\u03BB\u03B2\u03B5\u03C4\u03AF\u03B1\u03C2",
  "gu": "\u0393\u03BA\u03BF\u03C5\u03C4\u03B6\u03B1\u03C1\u03B1\u03C4\u03B9\u03BA\u03AC",
  "guz": "\u0393\u03BA\u03BF\u03CD\u03C3\u03B9",
  "gv": "\u039C\u03B1\u03BD\u03BE",
  "gwi": "\u0393\u03BA\u03BF\u03C5\u03AF\u03C4\u03C3\u03B9\u03BD",
  "ha": "\u03A7\u03AC\u03BF\u03C5\u03C3\u03B1",
  "hai": "\u03A7\u03AC\u03B9\u03BD\u03C4\u03B1",
  "haw": "\u03A7\u03B1\u03B2\u03B1\u03CA\u03BA\u03AC",
  "he": "\u0395\u03B2\u03C1\u03B1\u03CA\u03BA\u03AC",
  "hi": "\u03A7\u03AF\u03BD\u03C4\u03B9",
  "hil": "\u03A7\u03B9\u03BB\u03B9\u03B3\u03BA\u03B1\u03CA\u03BD\u03CC\u03BD",
  "hit": "\u03A7\u03B9\u03C4\u03AF\u03C4\u03B5",
  "hmn": "\u03A7\u03BC\u03BF\u03BD\u03B3\u03BA",
  "ho": "\u03A7\u03AF\u03C1\u03B9 \u039C\u03CC\u03C4\u03BF\u03C5",
  "hr": "\u039A\u03C1\u03BF\u03B1\u03C4\u03B9\u03BA\u03AC",
  "hsb": "\u0386\u03BD\u03C9 \u03A3\u03BF\u03C1\u03B2\u03B9\u03BA\u03AC",
  "ht": "\u0391\u03CA\u03C4\u03B9\u03B1\u03BD\u03AC",
  "hu": "\u039F\u03C5\u03B3\u03B3\u03C1\u03B9\u03BA\u03AC",
  "hup": "\u03A7\u03BF\u03CD\u03C0\u03B1",
  "hy": "\u0391\u03C1\u03BC\u03B5\u03BD\u03B9\u03BA\u03AC",
  "hz": "\u03A7\u03B5\u03C1\u03AD\u03C1\u03BF",
  "ia": "\u0399\u03BD\u03C4\u03B5\u03C1\u03BB\u03AF\u03BD\u03B3\u03BA\u03BF\u03C5\u03B1",
  "iba": "\u0399\u03BC\u03C0\u03AC\u03BD",
  "ibb": "\u0399\u03BC\u03C0\u03AF\u03BC\u03C0\u03B9\u03BF",
  "id": "\u0399\u03BD\u03B4\u03BF\u03BD\u03B7\u03C3\u03B9\u03B1\u03BA\u03AC",
  "ie": "\u0399\u03BD\u03C4\u03B5\u03C1\u03BB\u03AF\u03BD\u03B3\u03BA\u03BF\u03C5\u03B5",
  "ig": "\u038A\u03B3\u03BA\u03BC\u03C0\u03BF",
  "ii": "\u03A3\u03AF\u03C4\u03C3\u03BF\u03C5\u03B1\u03BD \u0393\u03B9",
  "ik": "\u0399\u03BD\u03BF\u03C5\u03C0\u03B9\u03AC\u03BA",
  "ilo": "\u0399\u03BB\u03CC\u03BA\u03BF",
  "inh": "\u0399\u03BD\u03B3\u03BA\u03BF\u03CD\u03C2",
  "io": "\u038A\u03BD\u03C4\u03BF",
  "is": "\u0399\u03C3\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "it": "\u0399\u03C4\u03B1\u03BB\u03B9\u03BA\u03AC",
  "iu": "\u0399\u03BD\u03BF\u03CD\u03BA\u03C4\u03B9\u03C4\u03BF\u03C5\u03C4",
  "ja": "\u0399\u03B1\u03C0\u03C9\u03BD\u03B9\u03BA\u03AC",
  "jbo": "\u039B\u03CC\u03B6\u03BC\u03C0\u03B1\u03BD",
  "jgo": "\u039D\u03B3\u03BA\u03CC\u03BC\u03C0\u03B1",
  "jmc": "\u039C\u03B1\u03C4\u03C3\u03AC\u03BC\u03B5",
  "jpr": "\u0399\u03BF\u03C5\u03B4\u03B1\u03CA\u03BA\u03AC-\u03A0\u03B5\u03C1\u03C3\u03B9\u03BA\u03AC",
  "jrb": "\u0399\u03BF\u03C5\u03B4\u03B1\u03CA\u03BA\u03AC-\u0391\u03C1\u03B1\u03B2\u03B9\u03BA\u03AC",
  "jv": "\u0399\u03B1\u03B2\u03B1\u03BD\u03B9\u03BA\u03AC",
  "ka": "\u0393\u03B5\u03C9\u03C1\u03B3\u03B9\u03B1\u03BD\u03AC",
  "kaa": "\u039A\u03AC\u03C1\u03B1-\u039A\u03B1\u03BB\u03C0\u03AC\u03BA",
  "kab": "\u039A\u03B1\u03BC\u03C0\u03AF\u03BB\u03B5",
  "kac": "\u039A\u03B1\u03C4\u03C3\u03AF\u03BD",
  "kaj": "\u03A4\u03B6\u03BF\u03C5",
  "kam": "\u039A\u03AC\u03BC\u03C0\u03B1",
  "kaw": "\u039A\u03AC\u03BF\u03C5\u03B9",
  "kbd": "\u039A\u03B1\u03BC\u03C0\u03B1\u03C1\u03BD\u03C4\u03B9\u03B1\u03BD\u03AC",
  "kbl": "\u039A\u03B1\u03BD\u03AD\u03BC\u03C0\u03BF\u03C5",
  "kcg": "\u03A4\u03B9\u03AC\u03C0",
  "kde": "\u039C\u03B1\u03BA\u03CC\u03BD\u03C4\u03B5",
  "kea": "\u0393\u03BB\u03CE\u03C3\u03C3\u03B1 \u03C4\u03BF\u03C5 \u03A0\u03C1\u03AC\u03C3\u03B9\u03BD\u03BF\u03C5 \u0391\u03BA\u03C1\u03C9\u03C4\u03B7\u03C1\u03AF\u03BF\u03C5",
  "kfo": "\u039A\u03CC\u03C1\u03BF",
  "kg": "\u039A\u03BF\u03BD\u03B3\u03BA\u03CC",
  "kgp": "kgp",
  "kha": "\u039A\u03AC\u03C3\u03B9",
  "kho": "\u039A\u03BF\u03C4\u03B1\u03BD\u03B9\u03BA\u03AC",
  "khq": "\u039A\u03CC\u03B9\u03C1\u03B1 \u03A4\u03C3\u03AF\u03BD\u03B9",
  "ki": "\u039A\u03B9\u03BA\u03BF\u03CD\u03B3\u03B9\u03BF\u03C5",
  "kj": "\u039A\u03BF\u03C5\u03B1\u03BD\u03B9\u03AC\u03BC\u03B1",
  "kk": "\u039A\u03B1\u03B6\u03B1\u03BA\u03B9\u03BA\u03AC",
  "kkj": "\u039A\u03AC\u03BA\u03BF",
  "kl": "\u039A\u03B1\u03BB\u03B1\u03AC\u03BB\u03B9\u03C3\u03BF\u03C5\u03C4",
  "kln": "\u039A\u03B1\u03BB\u03B5\u03BD\u03C4\u03B6\u03AF\u03BD",
  "km": "\u03A7\u03BC\u03B5\u03C1",
  "kmb": "\u039A\u03B9\u03BC\u03C0\u03BF\u03CD\u03BD\u03C4\u03BF\u03C5",
  "kn": "\u039A\u03B1\u03BD\u03AC\u03BD\u03C4\u03B1",
  "ko": "\u039A\u03BF\u03C1\u03B5\u03B1\u03C4\u03B9\u03BA\u03AC",
  "koi": "\u039A\u03CC\u03BC\u03B9-\u03A0\u03B5\u03C1\u03BC\u03B9\u03AC\u03BA",
  "kok": "\u039A\u03BF\u03BD\u03BA\u03B1\u03BD\u03B9\u03BA\u03AC",
  "kos": "\u039A\u03BF\u03C3\u03C1\u03B1\u03B5\u03BD\u03B9\u03BA\u03AC",
  "kpe": "\u039A\u03C0\u03AD\u03BB\u03B5",
  "kr": "\u039A\u03B1\u03BD\u03BF\u03CD\u03C1\u03B9",
  "krc": "\u039A\u03B1\u03C1\u03B1\u03C4\u03C3\u03AC\u03B9-\u039C\u03C0\u03B1\u03BB\u03BA\u03AC\u03C1",
  "krl": "\u039A\u03B1\u03C1\u03B5\u03BB\u03B9\u03BA\u03AC",
  "kru": "\u039A\u03BF\u03C5\u03C1\u03BF\u03CD\u03C7",
  "ks": "\u039A\u03B1\u03C3\u03BC\u03B9\u03C1\u03B9\u03BA\u03AC",
  "ksb": "\u03A3\u03B1\u03BC\u03C0\u03AC\u03BB\u03B1",
  "ksf": "\u039C\u03C0\u03AC\u03C6\u03B9\u03B1",
  "ksh": "\u039A\u03BF\u03BB\u03C9\u03BD\u03B9\u03BA\u03AC",
  "ku": "\u039A\u03BF\u03C5\u03C1\u03B4\u03B9\u03BA\u03AC",
  "kum": "\u039A\u03BF\u03C5\u03BC\u03B3\u03B9\u03BF\u03CD\u03BA",
  "kut": "\u039A\u03BF\u03C5\u03C4\u03B5\u03BD\u03AC\u03B9",
  "kv": "\u039A\u03CC\u03BC\u03B9",
  "kw": "\u039A\u03BF\u03C1\u03BD\u03BF\u03C5\u03B1\u03BB\u03B9\u03BA\u03AC",
  "ky": "\u039A\u03B9\u03C1\u03B3\u03B9\u03B6\u03B9\u03BA\u03AC",
  "la": "\u039B\u03B1\u03C4\u03B9\u03BD\u03B9\u03BA\u03AC",
  "lad": "\u039B\u03B1\u03B4\u03AF\u03BD\u03BF",
  "lag": "\u039B\u03AC\u03BD\u03B3\u03BA\u03B9",
  "lah": "\u039B\u03AC\u03C7\u03B4\u03B1",
  "lam": "\u039B\u03AC\u03BC\u03C0\u03B1",
  "lb": "\u039B\u03BF\u03C5\u03BE\u03B5\u03BC\u03B2\u03BF\u03C5\u03C1\u03B3\u03B9\u03B1\u03BD\u03AC",
  "lez": "\u039B\u03B5\u03B6\u03B3\u03BA\u03B9\u03BA\u03AC",
  "lg": "\u0393\u03BA\u03AC\u03BD\u03C4\u03B1",
  "li": "\u039B\u03B9\u03BC\u03B2\u03BF\u03C5\u03C1\u03B3\u03B9\u03B1\u03BD\u03AC",
  "lij": "lij",
  "lkt": "\u039B\u03B1\u03BA\u03CC\u03C4\u03B1",
  "ln": "\u039B\u03B9\u03BD\u03B3\u03BA\u03AC\u03BB\u03B1",
  "lo": "\u039B\u03B1\u03BF\u03C4\u03B9\u03BD\u03AC",
  "lol": "\u039C\u03CC\u03BD\u03B3\u03BA\u03BF",
  "lou": "\u039A\u03C1\u03B5\u03BF\u03BB\u03B9\u03BA\u03AC (\u039B\u03BF\u03C5\u03B9\u03B6\u03B9\u03AC\u03BD\u03B1)",
  "loz": "\u039B\u03CC\u03B6\u03B9",
  "lrc": "\u0392\u03CC\u03C1\u03B5\u03B9\u03B1 \u039B\u03BF\u03CD\u03C1\u03B9",
  "lt": "\u039B\u03B9\u03B8\u03BF\u03C5\u03B1\u03BD\u03B9\u03BA\u03AC",
  "lu": "\u039B\u03BF\u03CD\u03BC\u03C0\u03B1-\u039A\u03B1\u03C4\u03AC\u03BD\u03B3\u03BA\u03B1",
  "lua": "\u039B\u03BF\u03CD\u03BC\u03C0\u03B1-\u039B\u03BF\u03C5\u03BB\u03BF\u03CD\u03B1",
  "lui": "\u039B\u03BF\u03C5\u03B9\u03C3\u03AD\u03BD\u03BF",
  "lun": "\u039B\u03BF\u03CD\u03BD\u03C4\u03B1",
  "luo": "\u039B\u03BF\u03CD\u03BF",
  "lus": "\u039C\u03AF\u03B6\u03BF",
  "luy": "\u039B\u03BF\u03CD\u03C7\u03B9\u03B1",
  "lv": "\u039B\u03B5\u03C4\u03BF\u03BD\u03B9\u03BA\u03AC",
  "mad": "\u039C\u03B1\u03BD\u03C4\u03BF\u03C5\u03C1\u03AF\u03B6",
  "maf": "\u039C\u03AC\u03C6\u03B1",
  "mag": "\u039C\u03B1\u03B3\u03BA\u03AC\u03C7\u03B9",
  "mai": "\u039C\u03B1\u03CA\u03C4\u03C7\u03AF\u03BB\u03B9",
  "mak": "\u039C\u03B1\u03BA\u03B1\u03C3\u03AC\u03C1",
  "man": "\u039C\u03B1\u03BD\u03C4\u03AF\u03BD\u03B3\u03BA\u03BF",
  "mas": "\u039C\u03B1\u03C3\u03AC\u03B9",
  "mde": "\u039C\u03AC\u03BC\u03C0\u03B1",
  "mdf": "\u039C\u03CC\u03BA\u03C3\u03B1",
  "mdr": "\u039C\u03B1\u03BD\u03B4\u03AC\u03C1",
  "men": "\u039C\u03AD\u03BD\u03C4\u03B5",
  "mer": "\u039C\u03AD\u03C1\u03BF\u03C5",
  "mfe": "\u039C\u03BF\u03C1\u03B9\u03C3\u03B9\u03AD\u03BD",
  "mg": "\u039C\u03B1\u03BB\u03B3\u03B1\u03C3\u03B9\u03BA\u03AC",
  "mga": "\u039C\u03AD\u03C3\u03B1 \u0399\u03C1\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "mgh": "\u039C\u03B1\u03BA\u03BF\u03CD\u03B2\u03B1-\u039C\u03AD\u03C4\u03BF",
  "mgo": "\u039C\u03AD\u03C4\u03B1",
  "mh": "\u039C\u03B1\u03C1\u03C3\u03B1\u03BB\u03AD\u03B6\u03B9\u03BA\u03B1",
  "mi": "\u039C\u03B1\u03BF\u03C1\u03AF",
  "mic": "\u039C\u03B9\u03BA\u03BC\u03AC\u03BA",
  "min": "\u039C\u03B9\u03BD\u03B1\u03BD\u03B3\u03BA\u03B1\u03BC\u03C0\u03AC\u03BF\u03C5",
  "mk": "\u03A3\u03BB\u03B1\u03B2\u03BF\u03BC\u03B1\u03BA\u03B5\u03B4\u03BF\u03BD\u03B9\u03BA\u03AC",
  "ml": "\u039C\u03B1\u03BB\u03B1\u03B3\u03B9\u03B1\u03BB\u03B1\u03BC\u03B9\u03BA\u03AC",
  "mn": "\u039C\u03BF\u03B3\u03B3\u03BF\u03BB\u03B9\u03BA\u03AC",
  "mnc": "\u039C\u03B1\u03BD\u03C4\u03C3\u03BF\u03CD",
  "mni": "\u039C\u03B1\u03BD\u03B9\u03C0\u03BF\u03CD\u03C1\u03B9",
  "moh": "\u039C\u03BF\u03C7\u03CC\u03BA",
  "mos": "\u039C\u03CC\u03C3\u03B9",
  "mr": "\u039C\u03B1\u03C1\u03B1\u03B8\u03B9\u03BA\u03AC",
  "ms": "\u039C\u03B1\u03BB\u03B1\u03B9\u03C3\u03B9\u03B1\u03BD\u03AC",
  "mt": "\u039C\u03B1\u03BB\u03C4\u03B5\u03B6\u03B9\u03BA\u03AC",
  "mua": "\u039C\u03BF\u03C5\u03BD\u03C4\u03AC\u03BD\u03B3\u03BA",
  "mul": "\u03A0\u03BF\u03BB\u03BB\u03B1\u03C0\u03BB\u03AD\u03C2 \u03B3\u03BB\u03CE\u03C3\u03C3\u03B5\u03C2",
  "mus": "\u039A\u03C1\u03B9\u03BA",
  "mwl": "\u039C\u03B9\u03C1\u03B1\u03BD\u03C4\u03B5\u03B6\u03B9\u03BA\u03AC",
  "mwr": "\u039C\u03B1\u03C1\u03B3\u03BF\u03C5\u03AC\u03C1\u03B9",
  "my": "\u0392\u03B9\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "mye": "\u039C\u03B9\u03AD\u03BD\u03B5",
  "myv": "\u0388\u03C1\u03B6\u03B9\u03B1",
  "mzn": "\u039C\u03B1\u03B6\u03B1\u03BD\u03C4\u03B5\u03C1\u03AC\u03BD\u03B9",
  "na": "\u039D\u03B1\u03BF\u03CD\u03C1\u03BF\u03C5",
  "nap": "\u039D\u03B1\u03C0\u03BF\u03BB\u03B9\u03C4\u03B1\u03BD\u03B9\u03BA\u03AC",
  "naq": "\u039D\u03AC\u03BC\u03B1",
  "nb": "\u039D\u03BF\u03C1\u03B2\u03B7\u03B3\u03B9\u03BA\u03AC \u039C\u03C0\u03BF\u03BA\u03BC\u03AC\u03BB",
  "nd": "\u0392\u03CC\u03C1\u03B5\u03B9\u03B1 \u039D\u03C4\u03B5\u03BC\u03C0\u03AD\u03BB\u03B5",
  "nds": "\u039A\u03AC\u03C4\u03C9 \u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "nds-NL": "\u039A\u03AC\u03C4\u03C9 \u0393\u03B5\u03C1\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC \u039F\u03BB\u03BB\u03B1\u03BD\u03B4\u03AF\u03B1\u03C2",
  "ne": "\u039D\u03B5\u03C0\u03B1\u03BB\u03B9\u03BA\u03AC",
  "new": "\u039D\u03B5\u03B3\u03BF\u03C5\u03AC\u03C1\u03B9",
  "ng": "\u039D\u03C4\u03CC\u03BD\u03B3\u03BA\u03B1",
  "nia": "\u039D\u03AF\u03B1\u03C2",
  "niu": "\u039D\u03B9\u03BF\u03CD\u03B5",
  "nl": "\u039F\u03BB\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "nl-BE": "\u03A6\u03BB\u03B1\u03BC\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "nmg": "\u039A\u03B2\u03AC\u03C3\u03B9\u03BF",
  "nn": "\u039D\u03BF\u03C1\u03B2\u03B7\u03B3\u03B9\u03BA\u03AC \u039D\u03B9\u03BD\u03CC\u03C1\u03C3\u03BA",
  "nnh": "\u039D\u03B3\u03BA\u03B9\u03B5\u03BC\u03C0\u03BF\u03CD\u03BD",
  "no": "\u039D\u03BF\u03C1\u03B2\u03B7\u03B3\u03B9\u03BA\u03AC",
  "nog": "\u039D\u03BF\u03B3\u03BA\u03AC\u03B9",
  "non": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u039D\u03BF\u03C1\u03B2\u03B7\u03B3\u03B9\u03BA\u03AC",
  "nqo": "\u039D\u2019\u039A\u03BF",
  "nr": "\u039D\u03CC\u03C4\u03B9\u03B1 \u039D\u03C4\u03B5\u03BC\u03C0\u03AD\u03BB\u03B5",
  "nso": "\u0392\u03CC\u03C1\u03B5\u03B9\u03B1 \u03A3\u03CC\u03B8\u03BF",
  "nus": "\u039D\u03BF\u03CD\u03B5\u03C1",
  "nv": "\u039D\u03AC\u03B2\u03B1\u03C7\u03BF",
  "nwc": "\u039A\u03BB\u03B1\u03C3\u03B9\u03BA\u03AC \u039D\u03B5\u03BF\u03C5\u03AC\u03C1\u03B9",
  "ny": "\u039D\u03B9\u03AC\u03BD\u03C4\u03B6\u03B1",
  "nym": "\u039D\u03B9\u03B1\u03BC\u03B3\u03BF\u03C5\u03AD\u03B6\u03B9",
  "nyn": "\u039D\u03B9\u03B1\u03BD\u03BA\u03CC\u03BB\u03B5",
  "nyo": "\u039D\u03B9\u03CC\u03C1\u03BF",
  "nzi": "\u039D\u03B6\u03AF\u03BC\u03B1",
  "oc": "\u039F\u03BE\u03B9\u03C4\u03B1\u03BD\u03B9\u03BA\u03AC",
  "oj": "\u039F\u03B6\u03B9\u03B2\u03AF\u03B3\u03BF\u03C5\u03B1",
  "om": "\u039F\u03C1\u03CC\u03BC\u03BF",
  "or": "\u038C\u03BD\u03C4\u03B9\u03B1",
  "os": "\u039F\u03C3\u03B5\u03C4\u03B9\u03BA\u03AC",
  "osa": "\u039F\u03C3\u03AC\u03B6",
  "ota": "\u039F\u03B8\u03C9\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC \u03A4\u03BF\u03C5\u03C1\u03BA\u03B9\u03BA\u03AC",
  "pa": "\u03A0\u03B1\u03BD\u03C4\u03B6\u03B1\u03C0\u03B9\u03BA\u03AC",
  "pag": "\u03A0\u03B1\u03BD\u03B3\u03BA\u03B1\u03C3\u03B9\u03BD\u03AC\u03BD",
  "pal": "\u03A0\u03B1\u03C7\u03BB\u03AC\u03B2\u03B9",
  "pam": "\u03A0\u03B1\u03BC\u03C0\u03AC\u03BD\u03B3\u03BA\u03B1",
  "pap": "\u03A0\u03B1\u03C0\u03B9\u03B1\u03BC\u03AD\u03BD\u03C4\u03BF",
  "pau": "\u03A0\u03B1\u03BB\u03AC\u03BF\u03C5\u03B1\u03BD",
  "pcm": "\u03A0\u03AF\u03C4\u03B6\u03B9\u03BD \u039D\u03B9\u03B3\u03B7\u03C1\u03AF\u03B1\u03C2",
  "peo": "\u0391\u03C1\u03C7\u03B1\u03AF\u03B1 \u03A0\u03B5\u03C1\u03C3\u03B9\u03BA\u03AC",
  "phn": "\u03A6\u03BF\u03B9\u03BD\u03B9\u03BA\u03B9\u03BA\u03AC",
  "pi": "\u03A0\u03AC\u03BB\u03B9",
  "pl": "\u03A0\u03BF\u03BB\u03C9\u03BD\u03B9\u03BA\u03AC",
  "pon": "\u03A0\u03BF\u03BC\u03C0\u03B7\u03B9\u03BA\u03AC",
  "prg": "\u03A0\u03C1\u03C9\u03C3\u03B9\u03BA\u03AC",
  "pro": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u03A0\u03C1\u03BF\u03B2\u03B1\u03BD\u03C3\u03AC\u03BB",
  "ps": "\u03A0\u03AC\u03C3\u03C4\u03BF",
  "pt": "\u03A0\u03BF\u03C1\u03C4\u03BF\u03B3\u03B1\u03BB\u03B9\u03BA\u03AC",
  "pt-BR": "\u03A0\u03BF\u03C1\u03C4\u03BF\u03B3\u03B1\u03BB\u03B9\u03BA\u03AC \u0392\u03C1\u03B1\u03B6\u03B9\u03BB\u03AF\u03B1\u03C2",
  "pt-PT": "\u03A0\u03BF\u03C1\u03C4\u03BF\u03B3\u03B1\u03BB\u03B9\u03BA\u03AC \u0395\u03C5\u03C1\u03CE\u03C0\u03B7\u03C2",
  "qu": "\u039A\u03AD\u03C4\u03C3\u03BF\u03C5\u03B1",
  "quc": "\u039A\u03B9\u03C4\u03C3\u03AD",
  "raj": "\u03A1\u03B1\u03B6\u03B1\u03C3\u03B8\u03AC\u03BD\u03B9",
  "rap": "\u03A1\u03B1\u03C0\u03B1\u03BD\u03BF\u03CD\u03B9",
  "rar": "\u03A1\u03B1\u03C1\u03BF\u03C4\u03BF\u03BD\u03B3\u03BA\u03AC\u03BD",
  "rhg": "\u03A1\u03BF\u03C7\u03AF\u03BD\u03B3\u03BA\u03B9\u03B1",
  "rm": "\u03A1\u03BF\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "rn": "\u03A1\u03BF\u03CD\u03BD\u03C4\u03B9",
  "ro": "\u03A1\u03BF\u03C5\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "ro-MD": "\u039C\u03BF\u03BB\u03B4\u03B1\u03B2\u03B9\u03BA\u03AC",
  "rof": "\u03A1\u03CC\u03BC\u03C0\u03BF",
  "rom": "\u03A1\u03BF\u03BC\u03B1\u03BD\u03AF",
  "ru": "\u03A1\u03C9\u03C3\u03B9\u03BA\u03AC",
  "rup": "\u0391\u03C1\u03BF\u03BC\u03B1\u03BD\u03B9\u03BA\u03AC",
  "rw": "\u039A\u03B9\u03BD\u03B9\u03B1\u03C1\u03BF\u03C5\u03AC\u03BD\u03C4\u03B1",
  "rwk": "\u03A1\u03BF\u03C5\u03AC",
  "sa": "\u03A3\u03B1\u03BD\u03C3\u03BA\u03C1\u03B9\u03C4\u03B9\u03BA\u03AC",
  "sad": "\u03A3\u03B1\u03BD\u03C4\u03AC\u03B3\u03BF\u03C5\u03B5",
  "sah": "\u03A3\u03B1\u03C7\u03AC",
  "sam": "\u03A3\u03B1\u03BC\u03B1\u03C1\u03AF\u03C4\u03B9\u03BA\u03B1 \u0391\u03C1\u03B1\u03BC\u03B1\u03CA\u03BA\u03AC",
  "saq": "\u03A3\u03B1\u03BC\u03C0\u03BF\u03CD\u03C1\u03BF\u03C5",
  "sas": "\u03A3\u03B1\u03C3\u03AC\u03BA",
  "sat": "\u03A3\u03B1\u03BD\u03C4\u03AC\u03BB\u03B9",
  "sba": "\u039D\u03B3\u03BA\u03B1\u03BC\u03C0\u03AD\u03B9",
  "sbp": "\u03A3\u03AC\u03BD\u03B3\u03BA\u03BF\u03C5",
  "sc": "\u03A3\u03B1\u03C1\u03B4\u03B7\u03BD\u03B9\u03B1\u03BA\u03AC",
  "scn": "\u03A3\u03B9\u03BA\u03B5\u03BB\u03B9\u03BA\u03AC",
  "sco": "\u03A3\u03BA\u03C9\u03C4\u03B9\u03BA\u03AC",
  "sd": "\u03A3\u03AF\u03BD\u03C4\u03B9",
  "sdh": "\u039D\u03CC\u03C4\u03B9\u03B1 \u039A\u03BF\u03C5\u03C1\u03B4\u03B9\u03BA\u03AC",
  "se": "\u0392\u03CC\u03C1\u03B5\u03B9\u03B1 \u03A3\u03AC\u03BC\u03B9",
  "see": "\u03A3\u03AD\u03BD\u03B5\u03BA\u03B1",
  "seh": "\u03A3\u03AD\u03BD\u03B1",
  "sel": "\u03A3\u03B5\u03BB\u03BA\u03BF\u03CD\u03C0",
  "ses": "\u039A\u03BF\u03CA\u03C1\u03B1\u03BC\u03C0\u03CC\u03C1\u03BF \u03A3\u03AD\u03BD\u03B9",
  "sg": "\u03A3\u03AC\u03BD\u03B3\u03BA\u03BF",
  "sga": "\u03A0\u03B1\u03BB\u03B1\u03B9\u03AC \u0399\u03C1\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "sh": "\u03A3\u03B5\u03C1\u03B2\u03BF\u03BA\u03C1\u03BF\u03B1\u03C4\u03B9\u03BA\u03AC",
  "shi": "\u03A4\u03B1\u03C3\u03B5\u03BB\u03C7\u03AF\u03C4",
  "shn": "\u03A3\u03B1\u03BD",
  "shu": "\u0391\u03C1\u03B1\u03B2\u03B9\u03BA\u03AC \u03C4\u03BF\u03C5 \u03A4\u03C3\u03B1\u03BD\u03C4",
  "si": "\u03A3\u03B9\u03BD\u03C7\u03B1\u03BB\u03B5\u03B6\u03B9\u03BA\u03AC",
  "sid": "\u03A3\u03B9\u03BD\u03C4\u03AC\u03BC\u03BF",
  "sk": "\u03A3\u03BB\u03BF\u03B2\u03B1\u03BA\u03B9\u03BA\u03AC",
  "sl": "\u03A3\u03BB\u03BF\u03B2\u03B5\u03BD\u03B9\u03BA\u03AC",
  "sm": "\u03A3\u03B1\u03BC\u03BF\u03B1\u03BD\u03AC",
  "sma": "\u039D\u03CC\u03C4\u03B9\u03B1 \u03A3\u03AC\u03BC\u03B9",
  "smj": "\u039B\u03BF\u03CD\u03BB\u03B5 \u03A3\u03AC\u03BC\u03B9",
  "smn": "\u0399\u03BD\u03AC\u03C1\u03B9 \u03A3\u03AC\u03BC\u03B9",
  "sms": "\u03A3\u03BA\u03BF\u03BB\u03C4 \u03A3\u03AC\u03BC\u03B9",
  "sn": "\u03A3\u03CC\u03BD\u03B1",
  "snk": "\u03A3\u03BF\u03BD\u03AF\u03BD\u03BA\u03B5",
  "so": "\u03A3\u03BF\u03BC\u03B1\u03BB\u03B9\u03BA\u03AC",
  "sog": "\u03A3\u03BF\u03B3\u03BA\u03BD\u03C4\u03B9\u03AD\u03BD",
  "sq": "\u0391\u03BB\u03B2\u03B1\u03BD\u03B9\u03BA\u03AC",
  "sr": "\u03A3\u03B5\u03C1\u03B2\u03B9\u03BA\u03AC",
  "srn": "\u03A3\u03C1\u03B1\u03BD\u03AC\u03BD \u03A4\u03CC\u03BD\u03B3\u03BA\u03BF",
  "srr": "\u03A3\u03B5\u03C1\u03AD\u03C1",
  "ss": "\u03A3\u03BF\u03C5\u03AC\u03C4\u03B9",
  "ssy": "\u03A3\u03AC\u03C7\u03BF",
  "st": "\u039D\u03CC\u03C4\u03B9\u03B1 \u03A3\u03CC\u03B8\u03BF",
  "su": "\u03A3\u03BF\u03C5\u03BD\u03B4\u03B1\u03BD\u03B9\u03BA\u03AC",
  "suk": "\u03A3\u03BF\u03C5\u03BA\u03BF\u03CD\u03BC\u03B1",
  "sus": "\u03A3\u03BF\u03CD\u03C3\u03BF\u03C5",
  "sux": "\u03A3\u03BF\u03C5\u03BC\u03B5\u03C1\u03B9\u03BA\u03AC",
  "sv": "\u03A3\u03BF\u03C5\u03B7\u03B4\u03B9\u03BA\u03AC",
  "sw": "\u03A3\u03BF\u03C5\u03B1\u03C7\u03AF\u03BB\u03B9",
  "sw-CD": "\u039A\u03BF\u03BD\u03B3\u03BA\u03CC \u03A3\u03BF\u03C5\u03B1\u03C7\u03AF\u03BB\u03B9",
  "swb": "\u039A\u03BF\u03BC\u03BF\u03C1\u03B9\u03B1\u03BD\u03AC",
  "syc": "\u039A\u03BB\u03B1\u03C3\u03B9\u03BA\u03AC \u03A3\u03C5\u03C1\u03B9\u03B1\u03BA\u03AC",
  "syr": "\u03A3\u03C5\u03C1\u03B9\u03B1\u03BA\u03AC",
  "ta": "\u03A4\u03B1\u03BC\u03B9\u03BB\u03B9\u03BA\u03AC",
  "te": "\u03A4\u03B5\u03BB\u03BF\u03CD\u03B3\u03BA\u03BF\u03C5",
  "tem": "\u03A4\u03AF\u03BC\u03BD\u03B5",
  "teo": "\u03A4\u03AD\u03C3\u03BF",
  "ter": "\u03A4\u03B5\u03C1\u03AD\u03BD\u03BF",
  "tet": "\u03A4\u03AD\u03C4\u03BF\u03C5\u03BC",
  "tg": "\u03A4\u03B1\u03C4\u03B6\u03B9\u03BA\u03B9\u03BA\u03AC",
  "th": "\u03A4\u03B1\u03CA\u03BB\u03B1\u03BD\u03B4\u03B9\u03BA\u03AC",
  "ti": "\u03A4\u03B9\u03B3\u03BA\u03C1\u03B9\u03BD\u03B9\u03BA\u03AC",
  "tig": "\u03A4\u03AF\u03B3\u03BA\u03C1\u03B5",
  "tiv": "\u03A4\u03B9\u03B2",
  "tk": "\u03A4\u03BF\u03C5\u03C1\u03BA\u03BC\u03B5\u03BD\u03B9\u03BA\u03AC",
  "tkl": "\u03A4\u03BF\u03BA\u03B5\u03BB\u03AC\u03BF\u03C5",
  "tl": "\u03A4\u03AC\u03B3\u03BA\u03B1\u03BB\u03BF\u03B3\u03BA",
  "tlh": "\u039A\u03BB\u03AF\u03BD\u03B3\u03BA\u03BF\u03BD",
  "tli": "\u03A4\u03BB\u03AF\u03BD\u03B3\u03BA\u03B9\u03C4",
  "tmh": "\u03A4\u03B1\u03BC\u03B1\u03C3\u03AD\u03BA",
  "tn": "\u03A4\u03C3\u03BF\u03C5\u03AC\u03BD\u03B1",
  "to": "\u03A4\u03BF\u03BD\u03B3\u03BA\u03B1\u03BD\u03B9\u03BA\u03AC",
  "tog": "\u039D\u03B9\u03AC\u03C3\u03B1 \u03A4\u03CC\u03BD\u03B3\u03BA\u03B1",
  "tpi": "\u03A4\u03BF\u03BA \u03A0\u03B9\u03C3\u03AF\u03BD",
  "tr": "\u03A4\u03BF\u03C5\u03C1\u03BA\u03B9\u03BA\u03AC",
  "trv": "\u03A4\u03B1\u03C1\u03CC\u03BA\u03BF",
  "ts": "\u03A4\u03C3\u03CC\u03BD\u03B3\u03BA\u03B1",
  "tsi": "\u03A4\u03C3\u03AF\u03BC\u03C3\u03B9\u03B1\u03BD",
  "tt": "\u03A4\u03B1\u03C4\u03B1\u03C1\u03B9\u03BA\u03AC",
  "tum": "\u03A4\u03BF\u03C5\u03BC\u03C0\u03BF\u03CD\u03BA\u03B1",
  "tvl": "\u03A4\u03BF\u03C5\u03B2\u03B1\u03BB\u03BF\u03CD",
  "tw": "\u03A4\u03BF\u03CD\u03B9",
  "twq": "\u03A4\u03B1\u03C3\u03B1\u03B2\u03AC\u03BA",
  "ty": "\u03A4\u03B1\u03CA\u03C4\u03B9\u03B1\u03BD\u03AC",
  "tyv": "\u03A4\u03BF\u03C5\u03B2\u03B9\u03BD\u03B9\u03BA\u03AC",
  "tzm": "\u03A4\u03B1\u03BC\u03B1\u03B6\u03AF\u03C4 \u039A\u03B5\u03BD\u03C4\u03C1\u03B9\u03BA\u03BF\u03CD \u039C\u03B1\u03C1\u03CC\u03BA\u03BF",
  "udm": "\u039F\u03C5\u03BD\u03C4\u03BC\u03BF\u03CD\u03C1\u03C4",
  "ug": "\u039F\u03C5\u03B9\u03B3\u03BF\u03C5\u03C1\u03B9\u03BA\u03AC",
  "uga": "\u039F\u03C5\u03B3\u03BA\u03B1\u03C1\u03B9\u03C4\u03B9\u03BA\u03AC",
  "uk": "\u039F\u03C5\u03BA\u03C1\u03B1\u03BD\u03B9\u03BA\u03AC",
  "umb": "\u039F\u03C5\u03BC\u03C0\u03BF\u03CD\u03BD\u03C4\u03BF\u03C5",
  "und": "\u0386\u03B3\u03BD\u03C9\u03C3\u03C4\u03B7 \u03B3\u03BB\u03CE\u03C3\u03C3\u03B1",
  "ur": "\u039F\u03CD\u03C1\u03BD\u03C4\u03BF\u03C5",
  "uz": "\u039F\u03C5\u03B6\u03BC\u03C0\u03B5\u03BA\u03B9\u03BA\u03AC",
  "vai": "\u0392\u03AC\u03B9",
  "ve": "\u0392\u03AD\u03BD\u03C4\u03B1",
  "vi": "\u0392\u03B9\u03B5\u03C4\u03BD\u03B1\u03BC\u03B9\u03BA\u03AC",
  "vo": "\u0392\u03BF\u03BB\u03B1\u03C0\u03B9\u03BF\u03CD\u03BA",
  "vot": "\u0392\u03CC\u03C4\u03B9\u03BA",
  "vun": "\u0392\u03BF\u03CD\u03BD\u03C4\u03B6\u03BF",
  "wa": "\u0392\u03B1\u03BB\u03BB\u03C9\u03BD\u03B9\u03BA\u03AC",
  "wae": "\u0392\u03AC\u03BB\u03C3\u03B5\u03C1",
  "wal": "\u0393\u03BF\u03C5\u03BF\u03BB\u03AC\u03B9\u03C4\u03B1",
  "war": "\u0393\u03BF\u03C5\u03AC\u03C1\u03B1\u03CA",
  "was": "\u0393\u03BF\u03C5\u03B1\u03C3\u03CC",
  "wbp": "\u0393\u03BF\u03C5\u03B1\u03C1\u03BB\u03C0\u03AF\u03C1\u03B9",
  "wo": "\u0393\u03BF\u03C5\u03CC\u03BB\u03BF\u03C6",
  "wuu": "\u039A\u03B9\u03BD\u03B5\u03B6\u03B9\u03BA\u03AC \u0393\u03BF\u03C5",
  "xal": "\u039A\u03B1\u03BB\u03BC\u03AF\u03BA",
  "xh": "\u039A\u03CC\u03C3\u03B1",
  "xog": "\u03A3\u03CC\u03B3\u03BA\u03B1",
  "yao": "\u0393\u03B9\u03AC\u03BF",
  "yap": "\u0393\u03B9\u03B1\u03C0\u03AF\u03B6",
  "yav": "\u0393\u03B9\u03B1\u03BD\u03B3\u03BA\u03BC\u03C0\u03AD\u03BD",
  "ybb": "\u0393\u03B9\u03AD\u03BC\u03C0\u03B1",
  "yi": "\u0393\u03AF\u03BD\u03C4\u03B9\u03C2",
  "yo": "\u0393\u03B9\u03BF\u03C1\u03BF\u03CD\u03BC\u03C0\u03B1",
  "yrl": "yrl",
  "yue": "\u039A\u03B1\u03BD\u03C4\u03BF\u03BD\u03AD\u03B6\u03B9\u03BA\u03B1",
  "za": "\u0396\u03BF\u03C5\u03AC\u03BD\u03B3\u03BA",
  "zap": "\u0396\u03AC\u03C0\u03BF\u03C4\u03B5\u03BA",
  "zbl": "\u03A3\u03CD\u03BC\u03B2\u03BF\u03BB\u03B1 Bliss",
  "zen": "\u0396\u03B5\u03BD\u03AC\u03B3\u03BA\u03B1",
  "zgh": "\u03A4\u03C5\u03C0\u03B9\u03BA\u03AC \u03A4\u03B1\u03BC\u03B1\u03B6\u03AF\u03C4 \u039C\u03B1\u03C1\u03CC\u03BA\u03BF\u03C5",
  "zh": "\u039A\u03B9\u03BD\u03B5\u03B6\u03B9\u03BA\u03AC",
  "zh-Hans": "\u0391\u03C0\u03BB\u03BF\u03C0\u03BF\u03B9\u03B7\u03BC\u03AD\u03BD\u03B1 \u039A\u03B9\u03BD\u03B5\u03B6\u03B9\u03BA\u03AC",
  "zh-Hant": "\u03A0\u03B1\u03C1\u03B1\u03B4\u03BF\u03C3\u03B9\u03B1\u03BA\u03AC \u039A\u03B9\u03BD\u03B5\u03B6\u03B9\u03BA\u03AC",
  "zu": "\u0396\u03BF\u03C5\u03BB\u03BF\u03CD",
  "zun": "\u0396\u03BF\u03CD\u03BD\u03B9",
  "zxx": "\u03A7\u03C9\u03C1\u03AF\u03C2 \u03B3\u03BB\u03C9\u03C3\u03C3\u03BF\u03BB\u03BF\u03B3\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03CC\u03BC\u03B5\u03BD\u03BF",
  "zza": "\u0396\u03AC\u03B6\u03B1"
};

// src/l10n/locale/en.ts
var en_default = {
  // ---------------------------------------      main.ts      --------------------------------------
  "translator-open-view": "Open translation view",
  "translator-change-service": "Change translation service",
  // (also used in ui/translator-components/ViewPage and modals/switch-service.ts)
  // ------------------------------------------------------------------------------------------------
  // -------------------------------------    handlers/*.ts    --------------------------------------
  "translator-invalid-api-key": "API key was not specified",
  "translator-invalid-region": "Region was not specified",
  "translator-invalid-host": "Host was not specified",
  "translator-invalid-other": "Something else went wrong",
  // ------------------------------------------------------------------------------------------------
  // ----------------------------------------    Hotkeys    -----------------------------------------
  "view-translate": "Translate in focused view",
  "view-language-switch": "Switch languages of focused view",
  "view-action-copy": "Quickaction: Copy text in focused textarea",
  "view-action-clear": "Quickaction: Clear text in focused textarea",
  "view-action-paste": "Quickaction: Paste text in focused textarea",
  // ------------------------------------------------------------------------------------------------
  // -------------------------   ui/translator-components/ViewPage.svelte   -------------------------
  "service-not-validated": "Translation service is not validated",
  "revalidate-blocked-service": "Translation service was blocked, please validate the service again to unblock it",
  "auto-translate-off": "Turn auto-translate off",
  "auto-translate-on": "Turn auto-translate on",
  "show-all-languages": "Show all available languages",
  "show-spellchecker-languages": "Show spellchecker languages",
  "show-selected-languages": "Show manually selected languages",
  "detect-language": "Detect Language",
  // You can use the {} brackets to determine where the language name will be inserted.
  "detect-language-active": "Detect Language ({})",
  // Detected Language (English)
  // ------------------------------------------------------------------------------------------------
  // -----------------------   ui/translator-components/SettingsPage.svelte   -----------------------
  "translation-service": "Translation Service",
  "display-language": "Language display name",
  "settings-display-language-help": "Select in which language the language name should be displayed",
  "settings-select-languages": "Translator languages",
  "settings-select-languages-help": "Choose languages to include in translator selection",
  "filter-languages": "Filter languages",
  "settings-filter-languages-help": "Determine which languages should be available for translation",
  "settings-filter-languages-0": "All languages",
  "settings-filter-languages-1": "Synced with spellchecker",
  "settings-filter-languages-2": "Manual selection",
  "api-key": "API key",
  "settings-api-key-help": "API key for translation service",
  "region": "Region",
  "settings-region-help": "If applicable, set the issue region of the API key",
  "host": "Host",
  "settings-host-help": "Enter the URL of the translation service",
  "settings-host-help-localhost": "\u{1F6C8} You can host this service locally",
  "validate": "Validate",
  "test": "Test",
  "settings-validate-help": "Ensure that the translation service is set-up properly",
  "auto-translate": "Automatic translate",
  "settings-auto-translate-help": "Translate text as it is being typed",
  "settings-auto-translate-help-warning": "\u26A0 May quickly use up the APIs character quota",
  "update-languages": "Update languages",
  "settings-update-languages-help": "Update the list of available languages",
  "settings-update-languages-succes": "Language selection updated",
  "settings-update-languages-error": "Failed to fetch languages, check host or API key",
  // ------------------------------------------------------------------------------------------------
  // Extra locale information (such as en-gb, zh-tw, etc.)
  "HANS": "Simplified",
  "HANT": "Traditional",
  "LATN": "Latin",
  "CYRL": "Cyrillic",
  // TODO: Ask a Star Trek fan what PIQD is supposed to be (besides Picard)
  // "PIQD": "",
  "MONG": "Mongolian",
  "MTEI": "Meitei",
  "CHS": "Simplified",
  "CHT": "Traditional",
  // Region specifiers for locales
  "TW": "Taiwanese",
  "GB": "British",
  "US": "American",
  "BR": "Brazilian",
  "PT": "Portuguese",
  "CA": "Canadian",
  "CN": "PRC",
  // Locales that were not included in DisplayNames
  "iw": "Hebrew",
  "ikt": "Inuinnaqtun",
  "jw": "Javanese",
  "kmr": "Kurmanji",
  "mhr": "Eastern Mari",
  "mww": "Hmong Daw",
  "otq": "Otomi",
  "prs": "Dari",
  "yua": "Yucatec Maya",
  "Mtei": "Meitei",
  // Locales introduced by Fanyi Baidu
  "ber": "Berber",
  "bli": "Bilingual",
  "cnh": "Hakachin",
  "cnr": "Montenegrin",
  "pes": "Iranian Persian",
  "son": "Songhay",
  // Locales introduced by Azure Translator
  "nya": "Nyanja",
  "lug": "Ganda",
  "run": "Rundi",
  // Locales, you definitely do not need to add these, they are already provided for all of Obsidian's display languages
  "aa": "Afar",
  "ab": "Abkhazian",
  "ace": "Achinese",
  "ach": "Acoli",
  "ada": "Adangme",
  "ady": "Adyghe",
  "ae": "Avestan",
  "aeb": "Tunisian Arabic",
  "af": "Afrikaans",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Ainu",
  "ak": "Akan",
  "akk": "Akkadian",
  "akz": "Alabama",
  "ale": "Aleut",
  "aln": "Gheg Albanian",
  "alt": "Southern Altai",
  "am": "Amharic",
  "an": "Aragonese",
  "ang": "Old English",
  "anp": "Angika",
  "ar": "Arabic",
  "ar-001": "Modern Standard Arabic",
  "arc": "Aramaic",
  "arn": "Mapuche",
  "aro": "Araona",
  "arp": "Arapaho",
  "arq": "Algerian Arabic",
  "ars": "Najdi Arabic",
  "arw": "Arawak",
  "ary": "Moroccan Arabic",
  "arz": "Egyptian Arabic",
  "as": "Assamese",
  "asa": "Asu",
  "ase": "American Sign Language",
  "ast": "Asturian",
  "av": "Avaric",
  "avk": "Kotava",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbaijani",
  "ba": "Bashkir",
  "bal": "Baluchi",
  "ban": "Balinese",
  "bar": "Bavarian",
  "bas": "Basaa",
  "bax": "Bamun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala",
  "be": "Belarusian",
  "bej": "Beja",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bfq": "Badaga",
  "bg": "Bulgarian",
  "bgn": "Western Balochi",
  "bho": "Bhojpuri",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjar",
  "bkm": "Kom",
  "bla": "Siksika",
  "bm": "Bambara",
  "bn": "Bangla",
  "bo": "Tibetan",
  "bpy": "Bishnupriya",
  "bqi": "Bakhtiari",
  "br": "Breton",
  "bra": "Braj",
  "brh": "Brahui",
  "brx": "Bodo",
  "bs": "Bosnian",
  "bss": "Akoose",
  "bua": "Buriat",
  "bug": "Buginese",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Catalan",
  "cad": "Caddo",
  "car": "Carib",
  "cay": "Cayuga",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "Chechen",
  "ceb": "Cebuano",
  "cgg": "Chiga",
  "ch": "Chamorro",
  "chb": "Chibcha",
  "chg": "Chagatai",
  "chk": "Chuukese",
  "chm": "Mari",
  "chn": "Chinook Jargon",
  "cho": "Choctaw",
  "chp": "Chipewyan",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "cic": "Chickasaw",
  "ckb": "Central Kurdish",
  "co": "Corsican",
  "cop": "Coptic",
  "cps": "Capiznon",
  "cr": "Cree",
  "crh": "Crimean Turkish",
  "crs": "Seselwa Creole French",
  "cs": "Czech",
  "csb": "Kashubian",
  "cu": "Church Slavic",
  "cv": "Chuvash",
  "cy": "Welsh",
  "da": "Danish",
  "dak": "Dakota",
  "dar": "Dargwa",
  "dav": "Taita",
  "de": "German",
  "de-AT": "Austrian German",
  "de-CH": "Swiss High German",
  "del": "Delaware",
  "den": "Slave",
  "dgr": "Dogrib",
  "din": "Dinka",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Lower Sorbian",
  "dtp": "Central Dusun",
  "dua": "Duala",
  "dum": "Middle Dutch",
  "dv": "Divehi",
  "dyo": "Jola-Fonyi",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egl": "Emilian",
  "egy": "Ancient Egyptian",
  "eka": "Ekajuk",
  "el": "Greek",
  "elx": "Elamite",
  "en": "English",
  "en-AU": "Australian English",
  "en-CA": "Canadian English",
  "en-GB": "British English",
  "en-US": "American English",
  "enm": "Middle English",
  "eo": "Esperanto",
  "es": "Spanish",
  "es-419": "Latin American Spanish",
  "es-ES": "European Spanish",
  "es-MX": "Mexican Spanish",
  "esu": "Central Yupik",
  "et": "Estonian",
  "eu": "Basque",
  "ewo": "Ewondo",
  "ext": "Extremaduran",
  "fa": "Persian",
  "fa-AF": "Dari",
  "fan": "Fang",
  "fat": "Fanti",
  "ff": "Fulah",
  "fi": "Finnish",
  "fil": "Filipino",
  "fit": "Tornedalen Finnish",
  "fj": "Fijian",
  "fo": "Faroese",
  "fon": "Fon",
  "fr": "French",
  "fr-CA": "Canadian French",
  "fr-CH": "Swiss French",
  "frc": "Cajun French",
  "frm": "Middle French",
  "fro": "Old French",
  "frp": "Arpitan",
  "frr": "Northern Frisian",
  "frs": "Eastern Frisian",
  "fur": "Friulian",
  "fy": "Western Frisian",
  "ga": "Irish",
  "gaa": "Ga",
  "gag": "Gagauz",
  "gan": "Gan Chinese",
  "gay": "Gayo",
  "gba": "Gbaya",
  "gbz": "Zoroastrian Dari",
  "gd": "Scottish Gaelic",
  "gez": "Geez",
  "gil": "Gilbertese",
  "gl": "Galician",
  "glk": "Gilaki",
  "gmh": "Middle High German",
  "gn": "Guarani",
  "goh": "Old High German",
  "gom": "Goan Konkani",
  "gon": "Gondi",
  "gor": "Gorontalo",
  "got": "Gothic",
  "grb": "Grebo",
  "grc": "Ancient Greek",
  "gsw": "Swiss German",
  "gu": "Gujarati",
  "guc": "Wayuu",
  "gur": "Frafra",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Gwich\u02BCin",
  "ha": "Hausa",
  "hai": "Haida",
  "hak": "Hakka Chinese",
  "haw": "Hawaiian",
  "he": "Hebrew",
  "hi": "Hindi",
  "hif": "Fiji Hindi",
  "hil": "Hiligaynon",
  "hit": "Hittite",
  "hmn": "Hmong",
  "ho": "Hiri Motu",
  "hr": "Croatian",
  "hsb": "Upper Sorbian",
  "hsn": "Xiang Chinese",
  "ht": "Haitian Creole",
  "hu": "Hungarian",
  "hup": "Hupa",
  "hy": "Armenian",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesian",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Sichuan Yi",
  "ik": "Inupiaq",
  "ilo": "Iloko",
  "inh": "Ingush",
  "io": "Ido",
  "is": "Icelandic",
  "it": "Italian",
  "iu": "Inuktitut",
  "izh": "Ingrian",
  "ja": "Japanese",
  "jam": "Jamaican Creole English",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "Judeo-Persian",
  "jrb": "Judeo-Arabic",
  "jut": "Jutish",
  "jv": "Javanese",
  "ka": "Georgian",
  "kaa": "Kara-Kalpak",
  "kab": "Kabyle",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardian",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongo",
  "kgp": "Kaingang",
  "kha": "Khasi",
  "kho": "Khotanese",
  "khq": "Koyra Chiini",
  "khw": "Khowar",
  "ki": "Kikuyu",
  "kiu": "Kirmanjki",
  "kj": "Kuanyama",
  "kk": "Kazakh",
  "kkj": "Kako",
  "kl": "Kalaallisut",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Korean",
  "koi": "Komi-Permyak",
  "kok": "Konkani",
  "kos": "Kosraean",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karachay-Balkar",
  "kri": "Krio",
  "krj": "Kinaray-a",
  "krl": "Karelian",
  "kru": "Kurukh",
  "ks": "Kashmiri",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "Colognian",
  "ku": "Kurdish",
  "kum": "Kumyk",
  "kut": "Kutenai",
  "kv": "Komi",
  "kw": "Cornish",
  "ky": "Kyrgyz",
  "la": "Latin",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba",
  "lb": "Luxembourgish",
  "lez": "Lezghian",
  "lfn": "Lingua Franca Nova",
  "lg": "Ganda",
  "li": "Limburgish",
  "lij": "Ligurian",
  "liv": "Livonian",
  "lkt": "Lakota",
  "lmo": "Lombard",
  "ln": "Lingala",
  "lo": "Lao",
  "lol": "Mongo",
  "lou": "Louisiana Creole",
  "loz": "Lozi",
  "lrc": "Northern Luri",
  "lt": "Lithuanian",
  "ltg": "Latgalian",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Mizo",
  "luy": "Luyia",
  "lv": "Latvian",
  "lzh": "Literary Chinese",
  "lzz": "Laz",
  "mad": "Madurese",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makasar",
  "man": "Mandingo",
  "mas": "Masai",
  "mde": "Maba",
  "mdf": "Moksha",
  "mdr": "Mandar",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malagasy",
  "mga": "Middle Irish",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u02BC",
  "mh": "Marshallese",
  "mi": "M\u0101ori",
  "mic": "Mi'kmaq",
  "min": "Minangkabau",
  "mk": "Macedonian",
  "ml": "Malayalam",
  "mn": "Mongolian",
  "mnc": "Manchu",
  "mni": "Manipuri",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "mrj": "Western Mari",
  "ms": "Malay",
  "mt": "Maltese",
  "mua": "Mundang",
  "mul": "Multiple languages",
  "mus": "Muscogee",
  "mwl": "Mirandese",
  "mwr": "Marwari",
  "mwv": "Mentawai",
  "my": "Burmese",
  "mye": "Myene",
  "myv": "Erzya",
  "mzn": "Mazanderani",
  "na": "Nauru",
  "nan": "Min Nan Chinese",
  "nap": "Neapolitan",
  "naq": "Nama",
  "nb": "Norwegian Bokm\xE5l",
  "nd": "North Ndebele",
  "nds": "Low German",
  "nds-NL": "Low Saxon",
  "ne": "Nepali",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niuean",
  "njo": "Ao Naga",
  "nl": "Dutch",
  "nl-BE": "Flemish",
  "nmg": "Kwasio",
  "nn": "Norwegian Nynorsk",
  "nnh": "Ngiemboon",
  "no": "Norwegian",
  "nog": "Nogai",
  "non": "Old Norse",
  "nov": "Novial",
  "nqo": "N\u2019Ko",
  "nr": "South Ndebele",
  "nso": "Northern Sotho",
  "nus": "Nuer",
  "nv": "Navajo",
  "nwc": "Classical Newari",
  "ny": "Nyanja",
  "nym": "Nyamwezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima",
  "oc": "Occitan",
  "oj": "Ojibwa",
  "om": "Oromo",
  "or": "Odia",
  "os": "Ossetic",
  "osa": "Osage",
  "ota": "Ottoman Turkish",
  "pa": "Punjabi",
  "pag": "Pangasinan",
  "pal": "Pahlavi",
  "pam": "Pampanga",
  "pap": "Papiamento",
  "pau": "Palauan",
  "pcd": "Picard",
  "pcm": "Nigerian Pidgin",
  "pdc": "Pennsylvania German",
  "pdt": "Plautdietsch",
  "peo": "Old Persian",
  "pfl": "Palatine German",
  "phn": "Phoenician",
  "pi": "Pali",
  "pl": "Polish",
  "pms": "Piedmontese",
  "pnt": "Pontic",
  "pon": "Pohnpeian",
  "prg": "Prussian",
  "pro": "Old Proven\xE7al",
  "ps": "Pashto",
  "pt": "Portuguese",
  "pt-BR": "Brazilian Portuguese",
  "pt-PT": "European Portuguese",
  "qu": "Quechua",
  "quc": "K\u02BCiche\u02BC",
  "qug": "Chimborazo Highland Quichua",
  "raj": "Rajasthani",
  "rap": "Rapanui",
  "rar": "Rarotongan",
  "rgn": "Romagnol",
  "rhg": "Rohingya",
  "rif": "Riffian",
  "rm": "Romansh",
  "rn": "Rundi",
  "ro": "Romanian",
  "ro-MD": "Moldavian",
  "rof": "Rombo",
  "rom": "Romany",
  "rtm": "Rotuman",
  "ru": "Russian",
  "rue": "Rusyn",
  "rug": "Roviana",
  "rup": "Aromanian",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskrit",
  "sad": "Sandawe",
  "sah": "Sakha",
  "sam": "Samaritan Aramaic",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "saz": "Saurashtra",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardinian",
  "scn": "Sicilian",
  "sco": "Scots",
  "sd": "Sindhi",
  "sdc": "Sassarese Sardinian",
  "sdh": "Southern Kurdish",
  "se": "Northern Sami",
  "see": "Seneca",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkup",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sga": "Old Irish",
  "sgs": "Samogitian",
  "sh": "Serbo-Croatian",
  "shi": "Tachelhit",
  "shn": "Shan",
  "shu": "Chadian Arabic",
  "si": "Sinhala",
  "sid": "Sidamo",
  "sk": "Slovak",
  "sl": "Slovenian",
  "sli": "Lower Silesian",
  "sly": "Selayar",
  "sm": "Samoan",
  "sma": "Southern Sami",
  "smj": "Lule Sami",
  "smn": "Inari Sami",
  "sms": "Skolt Sami",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somali",
  "sog": "Sogdien",
  "sq": "Albanian",
  "sr": "Serbian",
  "sr-ME": "Montenegrin",
  "srn": "Sranan Tongo",
  "srr": "Serer",
  "ss": "Swati",
  "ssy": "Saho",
  "st": "Southern Sotho",
  "stq": "Saterland Frisian",
  "su": "Sundanese",
  "suk": "Sukuma",
  "sus": "Susu",
  "sux": "Sumerian",
  "sv": "Swedish",
  "sw": "Swahili",
  "sw-CD": "Congo Swahili",
  "swb": "Comorian",
  "syc": "Classical Syriac",
  "syr": "Syriac",
  "szl": "Silesian",
  "ta": "Tamil",
  "tcy": "Tulu",
  "te": "Telugu",
  "tem": "Timne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetum",
  "tg": "Tajik",
  "th": "Thai",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "Turkmen",
  "tkl": "Tokelau",
  "tkr": "Tsakhur",
  "tl": "Tagalog",
  "tlh": "Klingon",
  "tli": "Tlingit",
  "tly": "Talysh",
  "tmh": "Tamashek",
  "tn": "Tswana",
  "to": "Tongan",
  "tog": "Nyasa Tonga",
  "tpi": "Tok Pisin",
  "tr": "Turkish",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsd": "Tsakonian",
  "tsi": "Tsimshian",
  "tt": "Tatar",
  "ttt": "Muslim Tat",
  "tum": "Tumbuka",
  "tvl": "Tuvalu",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahitian",
  "tyv": "Tuvinian",
  "tzm": "Central Atlas Tamazight",
  "udm": "Udmurt",
  "ug": "Uyghur",
  "uga": "Ugaritic",
  "uk": "Ukrainian",
  "umb": "Umbundu",
  "und": "Unknown language",
  "ur": "Urdu",
  "uz": "Uzbek",
  "vai": "Vai",
  "ve": "Venda",
  "vec": "Venetian",
  "vep": "Veps",
  "vi": "Vietnamese",
  "vls": "West Flemish",
  "vmf": "Main-Franconian",
  "vo": "Volap\xFCk",
  "vot": "Votic",
  "vro": "V\xF5ro",
  "vun": "Vunjo",
  "wa": "Walloon",
  "wae": "Walser",
  "wal": "Wolaytta",
  "war": "Waray",
  "was": "Washo",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "wuu": "Wu Chinese",
  "xal": "Kalmyk",
  "xh": "Xhosa",
  "xmf": "Mingrelian",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yapese",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Yiddish",
  "yo": "Yoruba",
  "yrl": "Nheengatu",
  "yue": "Cantonese",
  "za": "Zhuang",
  "zap": "Zapotec",
  "zbl": "Blissymbols",
  "zea": "Zeelandic",
  "zen": "Zenaga",
  "zgh": "Standard Moroccan Tamazight",
  "zh": "Chinese",
  "zh-Hans": "Simplified Chinese",
  "zh-Hant": "Traditional Chinese",
  "zu": "Zulu",
  "zun": "Zuni",
  "zxx": "No linguistic content",
  "zza": "Zaza"
};

// src/l10n/locale/en-gb.ts
var en_gb_default = {
  "aa": "Afar",
  "ab": "Abkhazian",
  "ace": "Achinese",
  "ach": "Acoli",
  "ada": "Adangme",
  "ady": "Adyghe",
  "ae": "Avestan",
  "aeb": "Tunisian Arabic",
  "af": "Afrikaans",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Ainu",
  "ak": "Akan",
  "akk": "Akkadian",
  "akz": "Alabama",
  "ale": "Aleut",
  "aln": "Gheg Albanian",
  "alt": "Southern Altai",
  "am": "Amharic",
  "an": "Aragonese",
  "ang": "Old English",
  "anp": "Angika",
  "ar": "Arabic",
  "ar-001": "Modern Standard Arabic",
  "arc": "Aramaic",
  "arn": "Mapuche",
  "aro": "Araona",
  "arp": "Arapaho",
  "arq": "Algerian Arabic",
  "ars": "Najdi Arabic",
  "arw": "Arawak",
  "ary": "Moroccan Arabic",
  "arz": "Egyptian Arabic",
  "as": "Assamese",
  "asa": "Asu",
  "ase": "American Sign Language",
  "ast": "Asturian",
  "av": "Avaric",
  "avk": "Kotava",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbaijani",
  "ba": "Bashkir",
  "bal": "Baluchi",
  "ban": "Balinese",
  "bar": "Bavarian",
  "bas": "Basaa",
  "bax": "Bamun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala",
  "be": "Belarusian",
  "bej": "Beja",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bfq": "Badaga",
  "bg": "Bulgarian",
  "bgn": "Western Balochi",
  "bho": "Bhojpuri",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjar",
  "bkm": "Kom",
  "bla": "Siksika",
  "bm": "Bambara",
  "bn": "Bangla",
  "bo": "Tibetan",
  "bpy": "Bishnupriya",
  "bqi": "Bakhtiari",
  "br": "Breton",
  "bra": "Braj",
  "brh": "Brahui",
  "brx": "Bodo",
  "bs": "Bosnian",
  "bss": "Akoose",
  "bua": "Buriat",
  "bug": "Buginese",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Catalan",
  "cad": "Caddo",
  "car": "Carib",
  "cay": "Cayuga",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "Chechen",
  "ceb": "Cebuano",
  "cgg": "Chiga",
  "ch": "Chamorro",
  "chb": "Chibcha",
  "chg": "Chagatai",
  "chk": "Chuukese",
  "chm": "Mari",
  "chn": "Chinook Jargon",
  "cho": "Choctaw",
  "chp": "Chipewyan",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "cic": "Chickasaw",
  "ckb": "Central Kurdish",
  "co": "Corsican",
  "cop": "Coptic",
  "cps": "Capiznon",
  "cr": "Cree",
  "crh": "Crimean Turkish",
  "crs": "Seselwa Creole French",
  "cs": "Czech",
  "csb": "Kashubian",
  "cu": "Church Slavic",
  "cv": "Chuvash",
  "cy": "Welsh",
  "da": "Danish",
  "dak": "Dakota",
  "dar": "Dargwa",
  "dav": "Taita",
  "de": "German",
  "de-AT": "Austrian German",
  "de-CH": "Swiss High German",
  "del": "Delaware",
  "den": "Slave",
  "dgr": "Dogrib",
  "din": "Dinka",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Lower Sorbian",
  "dtp": "Central Dusun",
  "dua": "Duala",
  "dum": "Middle Dutch",
  "dv": "Divehi",
  "dyo": "Jola-Fonyi",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egl": "Emilian",
  "egy": "Ancient Egyptian",
  "eka": "Ekajuk",
  "el": "Greek",
  "elx": "Elamite",
  "en": "English",
  "en-AU": "Australian English",
  "en-CA": "Canadian English",
  "en-GB": "British English",
  "en-US": "American English",
  "enm": "Middle English",
  "eo": "Esperanto",
  "es": "Spanish",
  "es-419": "Latin American Spanish",
  "es-ES": "European Spanish",
  "es-MX": "Mexican Spanish",
  "esu": "Central Yupik",
  "et": "Estonian",
  "eu": "Basque",
  "ewo": "Ewondo",
  "ext": "Extremaduran",
  "fa": "Persian",
  "fa-AF": "Dari",
  "fan": "Fang",
  "fat": "Fanti",
  "ff": "Fulah",
  "fi": "Finnish",
  "fil": "Filipino",
  "fit": "Tornedalen Finnish",
  "fj": "Fijian",
  "fo": "Faroese",
  "fon": "Fon",
  "fr": "French",
  "fr-CA": "Canadian French",
  "fr-CH": "Swiss French",
  "frc": "Cajun French",
  "frm": "Middle French",
  "fro": "Old French",
  "frp": "Arpitan",
  "frr": "Northern Frisian",
  "frs": "Eastern Frisian",
  "fur": "Friulian",
  "fy": "Western Frisian",
  "ga": "Irish",
  "gaa": "Ga",
  "gag": "Gagauz",
  "gan": "Gan Chinese",
  "gay": "Gayo",
  "gba": "Gbaya",
  "gbz": "Zoroastrian Dari",
  "gd": "Scottish Gaelic",
  "gez": "Geez",
  "gil": "Gilbertese",
  "gl": "Galician",
  "glk": "Gilaki",
  "gmh": "Middle High German",
  "gn": "Guarani",
  "goh": "Old High German",
  "gom": "Goan Konkani",
  "gon": "Gondi",
  "gor": "Gorontalo",
  "got": "Gothic",
  "grb": "Grebo",
  "grc": "Ancient Greek",
  "gsw": "Swiss German",
  "gu": "Gujarati",
  "guc": "Wayuu",
  "gur": "Frafra",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Gwich\u02BCin",
  "ha": "Hausa",
  "hai": "Haida",
  "hak": "Hakka Chinese",
  "haw": "Hawaiian",
  "he": "Hebrew",
  "hi": "Hindi",
  "hif": "Fiji Hindi",
  "hil": "Hiligaynon",
  "hit": "Hittite",
  "hmn": "Hmong",
  "ho": "Hiri Motu",
  "hr": "Croatian",
  "hsb": "Upper Sorbian",
  "hsn": "Xiang Chinese",
  "ht": "Haitian Creole",
  "hu": "Hungarian",
  "hup": "Hupa",
  "hy": "Armenian",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesian",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Sichuan Yi",
  "ik": "Inupiaq",
  "ilo": "Iloko",
  "inh": "Ingush",
  "io": "Ido",
  "is": "Icelandic",
  "it": "Italian",
  "iu": "Inuktitut",
  "izh": "Ingrian",
  "ja": "Japanese",
  "jam": "Jamaican Creole English",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "Judeo-Persian",
  "jrb": "Judeo-Arabic",
  "jut": "Jutish",
  "jv": "Javanese",
  "ka": "Georgian",
  "kaa": "Kara-Kalpak",
  "kab": "Kabyle",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardian",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongo",
  "kgp": "Kaingang",
  "kha": "Khasi",
  "kho": "Khotanese",
  "khq": "Koyra Chiini",
  "khw": "Khowar",
  "ki": "Kikuyu",
  "kiu": "Kirmanjki",
  "kj": "Kuanyama",
  "kk": "Kazakh",
  "kkj": "Kako",
  "kl": "Kalaallisut",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Korean",
  "koi": "Komi-Permyak",
  "kok": "Konkani",
  "kos": "Kosraean",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karachay-Balkar",
  "kri": "Krio",
  "krj": "Kinaray-a",
  "krl": "Karelian",
  "kru": "Kurukh",
  "ks": "Kashmiri",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "Colognian",
  "ku": "Kurdish",
  "kum": "Kumyk",
  "kut": "Kutenai",
  "kv": "Komi",
  "kw": "Cornish",
  "ky": "Kyrgyz",
  "la": "Latin",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba",
  "lb": "Luxembourgish",
  "lez": "Lezghian",
  "lfn": "Lingua Franca Nova",
  "lg": "Ganda",
  "li": "Limburgish",
  "lij": "Ligurian",
  "liv": "Livonian",
  "lkt": "Lakota",
  "lmo": "Lombard",
  "ln": "Lingala",
  "lo": "Lao",
  "lol": "Mongo",
  "lou": "Louisiana Creole",
  "loz": "Lozi",
  "lrc": "Northern Luri",
  "lt": "Lithuanian",
  "ltg": "Latgalian",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Mizo",
  "luy": "Luyia",
  "lv": "Latvian",
  "lzh": "Literary Chinese",
  "lzz": "Laz",
  "mad": "Madurese",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makasar",
  "man": "Mandingo",
  "mas": "Masai",
  "mde": "Maba",
  "mdf": "Moksha",
  "mdr": "Mandar",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malagasy",
  "mga": "Middle Irish",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u02BC",
  "mh": "Marshallese",
  "mi": "M\u0101ori",
  "mic": "Mi'kmaq",
  "min": "Minangkabau",
  "mk": "Macedonian",
  "ml": "Malayalam",
  "mn": "Mongolian",
  "mnc": "Manchu",
  "mni": "Manipuri",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "mrj": "Western Mari",
  "ms": "Malay",
  "mt": "Maltese",
  "mua": "Mundang",
  "mul": "Multiple languages",
  "mus": "Creek",
  "mwl": "Mirandese",
  "mwr": "Marwari",
  "mwv": "Mentawai",
  "my": "Burmese",
  "mye": "Myene",
  "myv": "Erzya",
  "mzn": "Mazanderani",
  "na": "Nauru",
  "nan": "Min Nan Chinese",
  "nap": "Neapolitan",
  "naq": "Nama",
  "nb": "Norwegian Bokm\xE5l",
  "nd": "North Ndebele",
  "nds": "Low German",
  "nds-NL": "West Low German",
  "ne": "Nepali",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niuean",
  "njo": "Ao Naga",
  "nl": "Dutch",
  "nl-BE": "Flemish",
  "nmg": "Kwasio",
  "nn": "Norwegian Nynorsk",
  "nnh": "Ngiemboon",
  "no": "Norwegian",
  "nog": "Nogai",
  "non": "Old Norse",
  "nov": "Novial",
  "nqo": "N\u2019Ko",
  "nr": "South Ndebele",
  "nso": "Northern Sotho",
  "nus": "Nuer",
  "nv": "Navajo",
  "nwc": "Classical Newari",
  "ny": "Nyanja",
  "nym": "Nyamwezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima",
  "oc": "Occitan",
  "oj": "Ojibwa",
  "om": "Oromo",
  "or": "Odia",
  "os": "Ossetic",
  "osa": "Osage",
  "ota": "Ottoman Turkish",
  "pa": "Punjabi",
  "pag": "Pangasinan",
  "pal": "Pahlavi",
  "pam": "Pampanga",
  "pap": "Papiamento",
  "pau": "Palauan",
  "pcd": "Picard",
  "pcm": "Nigerian Pidgin",
  "pdc": "Pennsylvania German",
  "pdt": "Plautdietsch",
  "peo": "Old Persian",
  "pfl": "Palatine German",
  "phn": "Phoenician",
  "pi": "Pali",
  "pl": "Polish",
  "pms": "Piedmontese",
  "pnt": "Pontic",
  "pon": "Pohnpeian",
  "prg": "Prussian",
  "pro": "Old Proven\xE7al",
  "ps": "Pashto",
  "pt": "Portuguese",
  "pt-BR": "Brazilian Portuguese",
  "pt-PT": "European Portuguese",
  "qu": "Quechua",
  "quc": "K\u02BCiche\u02BC",
  "qug": "Chimborazo Highland Quichua",
  "raj": "Rajasthani",
  "rap": "Rapanui",
  "rar": "Rarotongan",
  "rgn": "Romagnol",
  "rhg": "Rohingya",
  "rif": "Riffian",
  "rm": "Romansh",
  "rn": "Rundi",
  "ro": "Romanian",
  "ro-MD": "Moldavian",
  "rof": "Rombo",
  "rom": "Romany",
  "rtm": "Rotuman",
  "ru": "Russian",
  "rue": "Rusyn",
  "rug": "Roviana",
  "rup": "Aromanian",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskrit",
  "sad": "Sandawe",
  "sah": "Yakut",
  "sam": "Samaritan Aramaic",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "saz": "Saurashtra",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardinian",
  "scn": "Sicilian",
  "sco": "Scots",
  "sd": "Sindhi",
  "sdc": "Sassarese Sardinian",
  "sdh": "Southern Kurdish",
  "se": "Northern Sami",
  "see": "Seneca",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkup",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sga": "Old Irish",
  "sgs": "Samogitian",
  "sh": "Serbo-Croatian",
  "shi": "Tachelhit",
  "shn": "Shan",
  "shu": "Chadian Arabic",
  "si": "Sinhala",
  "sid": "Sidamo",
  "sk": "Slovak",
  "sl": "Slovenian",
  "sli": "Lower Silesian",
  "sly": "Selayar",
  "sm": "Samoan",
  "sma": "Southern Sami",
  "smj": "Lule Sami",
  "smn": "Inari Sami",
  "sms": "Skolt Sami",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somali",
  "sog": "Sogdien",
  "sq": "Albanian",
  "sr": "Serbian",
  "sr-ME": "Montenegrin",
  "srn": "Sranan Tongo",
  "srr": "Serer",
  "ss": "Swati",
  "ssy": "Saho",
  "st": "Southern Sotho",
  "stq": "Saterland Frisian",
  "su": "Sundanese",
  "suk": "Sukuma",
  "sus": "Susu",
  "sux": "Sumerian",
  "sv": "Swedish",
  "sw": "Swahili",
  "sw-CD": "Congo Swahili",
  "swb": "Comorian",
  "syc": "Classical Syriac",
  "syr": "Syriac",
  "szl": "Silesian",
  "ta": "Tamil",
  "tcy": "Tulu",
  "te": "Telugu",
  "tem": "Timne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetum",
  "tg": "Tajik",
  "th": "Thai",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "Turkmen",
  "tkl": "Tokelau",
  "tkr": "Tsakhur",
  "tl": "Tagalog",
  "tlh": "Klingon",
  "tli": "Tlingit",
  "tly": "Talysh",
  "tmh": "Tamashek",
  "tn": "Tswana",
  "to": "Tongan",
  "tog": "Nyasa Tonga",
  "tpi": "Tok Pisin",
  "tr": "Turkish",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsd": "Tsakonian",
  "tsi": "Tsimshian",
  "tt": "Tatar",
  "ttt": "Muslim Tat",
  "tum": "Tumbuka",
  "tvl": "Tuvalu",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahitian",
  "tyv": "Tuvinian",
  "tzm": "Central Atlas Tamazight",
  "udm": "Udmurt",
  "ug": "Uyghur",
  "uga": "Ugaritic",
  "uk": "Ukrainian",
  "umb": "Umbundu",
  "und": "Unknown language",
  "ur": "Urdu",
  "uz": "Uzbek",
  "vai": "Vai",
  "ve": "Venda",
  "vec": "Venetian",
  "vep": "Veps",
  "vi": "Vietnamese",
  "vls": "West Flemish",
  "vmf": "Main-Franconian",
  "vo": "Volap\xFCk",
  "vot": "Votic",
  "vro": "V\xF5ro",
  "vun": "Vunjo",
  "wa": "Walloon",
  "wae": "Walser",
  "wal": "Wolaytta",
  "war": "Waray",
  "was": "Washo",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "wuu": "Wu Chinese",
  "xal": "Kalmyk",
  "xh": "Xhosa",
  "xmf": "Mingrelian",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yapese",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Yiddish",
  "yo": "Yoruba",
  "yrl": "Nheengatu",
  "yue": "Cantonese",
  "za": "Zhuang",
  "zap": "Zapotec",
  "zbl": "Blissymbols",
  "zea": "Zeelandic",
  "zen": "Zenaga",
  "zgh": "Standard Moroccan Tamazight",
  "zh": "Chinese",
  "zh-Hans": "Simplified Chinese",
  "zh-Hant": "Traditional Chinese",
  "zu": "Zulu",
  "zun": "Zuni",
  "zxx": "No linguistic content",
  "zza": "Zaza"
};

// src/l10n/locale/es.ts
var es_default = {
  "aa": "afar",
  "ab": "abjasio",
  "ace": "acehn\xE9s",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adigu\xE9",
  "ae": "av\xE9stico",
  "af": "afrik\xE1ans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "acadio",
  "ale": "aleutiano",
  "alt": "alt\xE1i meridional",
  "am": "am\xE1rico",
  "an": "aragon\xE9s",
  "ang": "ingl\xE9s antiguo",
  "anp": "angika",
  "ar": "\xE1rabe",
  "ar-001": "\xE1rabe est\xE1ndar moderno",
  "arc": "arameo",
  "arn": "mapuche",
  "arp": "arapaho",
  "ars": "\xE1rabe najd\xED",
  "arw": "arahuaco",
  "as": "asam\xE9s",
  "asa": "asu",
  "ast": "asturiano",
  "av": "avar",
  "awa": "avadhi",
  "ay": "aimara",
  "az": "azerbaiyano",
  "ba": "baskir",
  "bal": "baluchi",
  "ban": "balin\xE9s",
  "bas": "basaa",
  "bax": "bam\xFAn",
  "bbj": "ghomala",
  "be": "bielorruso",
  "bej": "beja",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bg": "b\xFAlgaro",
  "bgn": "baluchi occidental",
  "bho": "bhoyapur\xED",
  "bi": "bislama",
  "bik": "bicol",
  "bin": "bini",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengal\xED",
  "bo": "tibetano",
  "br": "bret\xF3n",
  "bra": "braj",
  "brx": "bodo",
  "bs": "bosnio",
  "bss": "akoose",
  "bua": "buriato",
  "bug": "bugin\xE9s",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "catal\xE1n",
  "cad": "caddo",
  "car": "caribe",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "checheno",
  "ceb": "cebuano",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "chagat\xE1i",
  "chk": "truk\xE9s",
  "chm": "mar\xED",
  "chn": "jerga chinuk",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cheroqui",
  "chy": "cheyene",
  "ckb": "kurdo sorani",
  "co": "corso",
  "cop": "copto",
  "cr": "cree",
  "crh": "t\xE1rtaro de Crimea",
  "crs": "criollo seychelense",
  "cs": "checo",
  "csb": "casubio",
  "cu": "eslavo eclesi\xE1stico",
  "cv": "chuvasio",
  "cy": "gal\xE9s",
  "da": "dan\xE9s",
  "dak": "dakota",
  "dar": "dargva",
  "dav": "taita",
  "de": "alem\xE1n",
  "de-AT": "alem\xE1n austr\xEDaco",
  "de-CH": "alto alem\xE1n suizo",
  "del": "delaware",
  "den": "slave",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "bajo sorbio",
  "dua": "duala",
  "dum": "neerland\xE9s medio",
  "dv": "divehi",
  "dyo": "jola-fonyi",
  "dyu": "diula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ew\xE9",
  "efi": "efik",
  "egy": "egipcio antiguo",
  "eka": "ekajuk",
  "el": "griego",
  "elx": "elamita",
  "en": "ingl\xE9s",
  "en-AU": "ingl\xE9s australiano",
  "en-CA": "ingl\xE9s canadiense",
  "en-GB": "ingl\xE9s brit\xE1nico",
  "en-US": "ingl\xE9s estadounidense",
  "enm": "ingl\xE9s medio",
  "eo": "esperanto",
  "es": "espa\xF1ol",
  "es-419": "espa\xF1ol latinoamericano",
  "es-ES": "espa\xF1ol de Espa\xF1a",
  "es-MX": "espa\xF1ol de M\xE9xico",
  "et": "estonio",
  "eu": "euskera",
  "ewo": "ewondo",
  "fa": "persa",
  "fa-AF": "dar\xED",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fula",
  "fi": "fin\xE9s",
  "fil": "filipino",
  "fj": "fiyiano",
  "fo": "fero\xE9s",
  "fon": "fon",
  "fr": "franc\xE9s",
  "fr-CA": "franc\xE9s canadiense",
  "fr-CH": "franc\xE9s suizo",
  "frc": "franc\xE9s caj\xFAn",
  "frm": "franc\xE9s medio",
  "fro": "franc\xE9s antiguo",
  "frr": "fris\xF3n septentrional",
  "frs": "fris\xF3n oriental",
  "fur": "friulano",
  "fy": "fris\xF3n occidental",
  "ga": "irland\xE9s",
  "gaa": "ga",
  "gag": "gagauzo",
  "gan": "chino gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gd": "ga\xE9lico escoc\xE9s",
  "gez": "geez",
  "gil": "gilbert\xE9s",
  "gl": "gallego",
  "gmh": "alto alem\xE1n medio",
  "gn": "guaran\xED",
  "goh": "alto alem\xE1n antiguo",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "g\xF3tico",
  "grb": "grebo",
  "grc": "griego antiguo",
  "gsw": "alem\xE1n suizo",
  "gu": "guyarat\xED",
  "guz": "gusii",
  "gv": "man\xE9s",
  "gwi": "kutchin",
  "ha": "hausa",
  "hai": "haida",
  "hak": "chino hakka",
  "haw": "hawaiano",
  "he": "hebreo",
  "hi": "hindi",
  "hil": "hiligaynon",
  "hit": "hitita",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croata",
  "hsb": "alto sorbio",
  "hsn": "chino xiang",
  "ht": "criollo haitiano",
  "hu": "h\xFAngaro",
  "hup": "hupa",
  "hy": "armenio",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonesio",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "yi de Sichu\xE1n",
  "ik": "inupiaq",
  "ilo": "ilocano",
  "inh": "ingush",
  "io": "ido",
  "is": "island\xE9s",
  "it": "italiano",
  "iu": "inuktitut",
  "ja": "japon\xE9s",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "machame",
  "jpr": "judeo-persa",
  "jrb": "judeo-\xE1rabe",
  "jv": "javan\xE9s",
  "ka": "georgiano",
  "kaa": "karakalpako",
  "kab": "cabila",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardiano",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "criollo caboverdiano",
  "kfo": "koro",
  "kg": "kongo",
  "kgp": "kgp",
  "kha": "khasi",
  "kho": "kotan\xE9s",
  "khq": "koyra chiini",
  "ki": "kikuyu",
  "kj": "kuanyama",
  "kk": "kazajo",
  "kkj": "kako",
  "kl": "groenland\xE9s",
  "kln": "kalenjin",
  "km": "jemer",
  "kmb": "kimbundu",
  "kn": "canar\xE9s",
  "ko": "coreano",
  "koi": "komi permio",
  "kok": "konkan\xED",
  "kos": "kosraeano",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karachay-balkar",
  "krl": "carelio",
  "kru": "kurukh",
  "ks": "cachemir",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "kurdo",
  "kum": "kumyk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "c\xF3rnico",
  "ky": "kirgu\xEDs",
  "la": "lat\xEDn",
  "lad": "ladino",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxemburgu\xE9s",
  "lez": "lezgiano",
  "lg": "ganda",
  "li": "limburgu\xE9s",
  "lij": "lij",
  "lkt": "lakota",
  "ln": "lingala",
  "lo": "lao",
  "lol": "mongo",
  "lou": "criollo de Luisiana",
  "loz": "lozi",
  "lrc": "lor\xED septentrional",
  "lt": "lituano",
  "lu": "luba-katanga",
  "lua": "luba-lulua",
  "lui": "luise\xF1o",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizo",
  "luy": "luyia",
  "lv": "let\xF3n",
  "mad": "madur\xE9s",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "macasar",
  "man": "mandingo",
  "mas": "mas\xE1i",
  "mde": "maba",
  "mdf": "moksha",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "criollo mauriciano",
  "mg": "malgache",
  "mga": "irland\xE9s medio",
  "mgh": "makhuwa-meetto",
  "mgo": "meta\u2019",
  "mh": "marshal\xE9s",
  "mi": "maor\xED",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "macedonio",
  "ml": "malay\xE1lam",
  "mn": "mongol",
  "mnc": "manch\xFA",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marat\xED",
  "ms": "malayo",
  "mt": "malt\xE9s",
  "mua": "mundang",
  "mul": "varios idiomas",
  "mus": "creek",
  "mwl": "mirand\xE9s",
  "mwr": "marwari",
  "my": "birmano",
  "mye": "myene",
  "myv": "erzya",
  "mzn": "mazandaran\xED",
  "na": "nauruano",
  "nan": "chino min nan",
  "nap": "napolitano",
  "naq": "nama",
  "nb": "noruego bokmal",
  "nd": "ndebele septentrional",
  "nds": "bajo alem\xE1n",
  "nds-NL": "bajo saj\xF3n",
  "ne": "nepal\xED",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niueano",
  "nl": "neerland\xE9s",
  "nl-BE": "flamenco",
  "nmg": "kwasio",
  "nn": "noruego nynorsk",
  "nnh": "ngiemboon",
  "no": "noruego",
  "nog": "nogai",
  "non": "n\xF3rdico antiguo",
  "nqo": "n\u2019ko",
  "nr": "ndebele meridional",
  "nso": "sotho septentrional",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "newari cl\xE1sico",
  "ny": "nyanja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzima",
  "oc": "occitano",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "oriya",
  "os": "os\xE9tico",
  "osa": "osage",
  "ota": "turco otomano",
  "pa": "punyab\xED",
  "pag": "pangasin\xE1n",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palauano",
  "pcm": "pidgin de Nigeria",
  "peo": "persa antiguo",
  "phn": "fenicio",
  "pi": "pali",
  "pl": "polaco",
  "pon": "pohnpeiano",
  "prg": "prusiano",
  "pro": "provenzal antiguo",
  "ps": "past\xFAn",
  "pt": "portugu\xE9s",
  "pt-BR": "portugu\xE9s de Brasil",
  "pt-PT": "portugu\xE9s de Portugal",
  "qu": "quechua",
  "quc": "quich\xE9",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotongano",
  "rhg": "rohiny\xE1",
  "rm": "romanche",
  "rn": "kirundi",
  "ro": "rumano",
  "ro-MD": "moldavo",
  "rof": "rombo",
  "rom": "roman\xED",
  "ru": "ruso",
  "rup": "arrumano",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "s\xE1nscrito",
  "sad": "sandawe",
  "sah": "sakha",
  "sam": "arameo samaritano",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardo",
  "scn": "siciliano",
  "sco": "escoc\xE9s",
  "sd": "sindhi",
  "sdh": "kurdo meridional",
  "se": "sami septentrional",
  "see": "seneca",
  "seh": "sena",
  "sel": "selkup",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "irland\xE9s antiguo",
  "sh": "serbocroata",
  "shi": "tashelhit",
  "shn": "shan",
  "shu": "\xE1rabe chadiano",
  "si": "cingal\xE9s",
  "sid": "sidamo",
  "sk": "eslovaco",
  "sl": "esloveno",
  "sm": "samoano",
  "sma": "sami meridional",
  "smj": "sami lule",
  "smn": "sami inari",
  "sms": "sami skolt",
  "sn": "shona",
  "snk": "sonink\xE9",
  "so": "somal\xED",
  "sog": "sogdiano",
  "sq": "alban\xE9s",
  "sr": "serbio",
  "srn": "sranan tongo",
  "srr": "serer",
  "ss": "suazi",
  "ssy": "saho",
  "st": "sotho meridional",
  "su": "sundan\xE9s",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumerio",
  "sv": "sueco",
  "sw": "suajili",
  "sw-CD": "suajili del Congo",
  "swb": "comorense",
  "syc": "sir\xEDaco cl\xE1sico",
  "syr": "siriaco",
  "ta": "tamil",
  "te": "telugu",
  "tem": "temne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tet\xFAn",
  "tg": "tayiko",
  "th": "tailand\xE9s",
  "ti": "tigri\xF1a",
  "tig": "tigr\xE9",
  "tiv": "tiv",
  "tk": "turcomano",
  "tkl": "tokelauano",
  "tl": "tagalo",
  "tlh": "klingon",
  "tli": "tlingit",
  "tmh": "tamashek",
  "tn": "setsuana",
  "to": "tongano",
  "tog": "tonga del Nyasa",
  "tpi": "tok pisin",
  "tr": "turco",
  "trv": "taroko",
  "ts": "tsonga",
  "tsi": "tsimshiano",
  "tt": "t\xE1rtaro",
  "tum": "tumbuka",
  "tvl": "tuvaluano",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahitiano",
  "tyv": "tuviniano",
  "tzm": "tamazight del Atlas Central",
  "udm": "udmurt",
  "ug": "uigur",
  "uga": "ugar\xEDtico",
  "uk": "ucraniano",
  "umb": "umbundu",
  "und": "lengua desconocida",
  "ur": "urdu",
  "uz": "uzbeko",
  "vai": "vai",
  "ve": "venda",
  "vi": "vietnamita",
  "vo": "volap\xFCk",
  "vot": "v\xF3tico",
  "vun": "vunjo",
  "wa": "val\xF3n",
  "wae": "walser",
  "wal": "wolayta",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "w\xF3lof",
  "wuu": "chino wu",
  "xal": "kalmyk",
  "xh": "xhosa",
  "xog": "soga",
  "yao": "yao",
  "yap": "yap\xE9s",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "yidis",
  "yo": "yoruba",
  "yrl": "yrl",
  "yue": "canton\xE9s",
  "za": "zhuang",
  "zap": "zapoteco",
  "zbl": "s\xEDmbolos Bliss",
  "zen": "zenaga",
  "zgh": "tamazight est\xE1ndar marroqu\xED",
  "zh": "chino",
  "zh-Hans": "chino simplificado",
  "zh-Hant": "chino tradicional",
  "zu": "zul\xFA",
  "zun": "zu\xF1i",
  "zxx": "sin contenido ling\xFC\xEDstico",
  "zza": "zazaki"
};

// src/l10n/locale/eu.ts
var eu_default = {
  "aa": "afarera",
  "ab": "abkhaziera",
  "ace": "acehnera",
  "ach": "acholiera",
  "ada": "adangmera",
  "ady": "adigera",
  "af": "afrikaans",
  "agq": "aghemera",
  "ain": "ainuera",
  "ak": "akanera",
  "ale": "aleutera",
  "alt": "hegoaldeko altaiera",
  "am": "amharera",
  "an": "aragoiera",
  "anp": "angikera",
  "ar": "arabiera",
  "ar-001": "arabiera moderno estandarra",
  "arn": "maputxe",
  "arp": "arapaho",
  "as": "assamera",
  "asa": "asu",
  "ast": "asturiera",
  "av": "avarera",
  "awa": "awadhiera",
  "ay": "aimara",
  "az": "azerbaijanera",
  "ba": "baxkirera",
  "ban": "baliera",
  "bas": "basaa",
  "be": "bielorrusiera",
  "bem": "bembera",
  "bez": "benera",
  "bg": "bulgariera",
  "bho": "bhojpurera",
  "bi": "bislama",
  "bin": "edoera",
  "bla": "siksikera",
  "bm": "bambarera",
  "bn": "bengalera",
  "bo": "tibetera",
  "br": "bretoiera",
  "brx": "bodoera",
  "bs": "bosniera",
  "bug": "buginera",
  "byn": "bilena",
  "ca": "katalan",
  "ccp": "chakmera",
  "ce": "txetxenera",
  "ceb": "cebuanoera",
  "cgg": "chiga",
  "ch": "chamorrera",
  "chk": "chuukera",
  "chm": "mariera",
  "cho": "choctaw",
  "chr": "txerokiera",
  "chy": "cheyennera",
  "ckb": "erdialdeko kurduera",
  "co": "korsikera",
  "crs": "Seychelleetako kreolera",
  "cs": "txekiera",
  "cu": "elizako eslaviera",
  "cv": "txuvaxera",
  "cy": "gales",
  "da": "daniera",
  "dak": "dakotera",
  "dar": "dargvera",
  "dav": "taitera",
  "de": "aleman",
  "de-AT": "Austriako aleman",
  "de-CH": "Suitzako aleman garai",
  "dgr": "dogribera",
  "dje": "zarma",
  "doi": "dogria",
  "dsb": "behe-sorabiera",
  "dua": "dualera",
  "dv": "divehiera",
  "dyo": "fonyi jolera",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embuera",
  "ee": "eweera",
  "efi": "efikera",
  "eka": "akajuka",
  "el": "greziera",
  "en": "ingeles",
  "en-AU": "Australiako ingeles",
  "en-CA": "Kanadako ingeles",
  "en-GB": "Britania Handiko ingeles",
  "en-US": "AEBko ingeles",
  "eo": "esperanto",
  "es": "espainiera",
  "es-419": "Latinoamerikako espainiera",
  "es-ES": "espainiera (Europa)",
  "es-MX": "Mexikoko espainiera",
  "et": "estoniera",
  "eu": "euskara",
  "ewo": "ewondera",
  "fa": "persiera",
  "fa-AF": "daria",
  "ff": "fula",
  "fi": "finlandiera",
  "fil": "filipinera",
  "fj": "fijiera",
  "fo": "faroera",
  "fon": "fona",
  "fr": "frantses",
  "fr-CA": "Kanadako frantses",
  "fr-CH": "Suitzako frantses",
  "frc": "cajun frantsesa",
  "fur": "fruilera",
  "fy": "frisiera",
  "ga": "irlandera",
  "gaa": "ga",
  "gag": "gagauzera",
  "gd": "Eskoziako gaeliko",
  "gez": "ge\u2019ez",
  "gil": "gilbertera",
  "gl": "galiziera",
  "gn": "guaraniera",
  "gor": "gorontaloa",
  "gsw": "Suitzako aleman",
  "gu": "gujaratera",
  "guz": "gusiiera",
  "gv": "manxera",
  "gwi": "gwich\u02BCin",
  "ha": "hausa",
  "haw": "hawaiiera",
  "he": "hebreera",
  "hi": "hindi",
  "hil": "hiligainon",
  "hmn": "hmong",
  "hr": "kroaziera",
  "hsb": "goi-sorabiera",
  "ht": "Haitiko kreolera",
  "hu": "hungariera",
  "hup": "hupera",
  "hy": "armeniera",
  "hz": "hereroera",
  "ia": "interlingua",
  "iba": "ibanera",
  "ibb": "ibibioera",
  "id": "indonesiera",
  "ie": "interlingue",
  "ig": "igboera",
  "ii": "Sichuango yiera",
  "ilo": "ilokanera",
  "inh": "ingushera",
  "io": "ido",
  "is": "islandiera",
  "it": "italiera",
  "iu": "inuktitut",
  "ja": "japoniera",
  "jbo": "lojbanera",
  "jgo": "ngomba",
  "jmc": "machame",
  "jv": "javera",
  "ka": "georgiera",
  "kab": "kabilera",
  "kac": "jingpoera",
  "kaj": "kaiji",
  "kam": "kambera",
  "kbd": "kabardiera",
  "kcg": "kataba",
  "kde": "makondeera",
  "kea": "Cabo Verdeko kreolera",
  "kfo": "koroa",
  "kg": "kikongoa",
  "kgp": "kaingang",
  "kha": "kashia",
  "khq": "koyra chiini",
  "ki": "kikuyuera",
  "kj": "kuanyama",
  "kk": "kazakhera",
  "kkj": "kako",
  "kl": "groenlandiera",
  "kln": "kalenjinera",
  "km": "khemerera",
  "kmb": "kimbundua",
  "kn": "kannada",
  "ko": "koreera",
  "koi": "komi-permyakera",
  "kok": "konkanera",
  "kpe": "kpellea",
  "kr": "kanuriera",
  "krc": "karachayera-balkarera",
  "krl": "kareliera",
  "kru": "kurukhera",
  "ks": "kaxmirera",
  "ksb": "shambalera",
  "ksf": "bafiera",
  "ksh": "koloniera",
  "ku": "kurduera",
  "kum": "kumykera",
  "kv": "komiera",
  "kw": "kornubiera",
  "ky": "kirgizera",
  "la": "latin",
  "lad": "ladino",
  "lag": "langiera",
  "lb": "luxenburgera",
  "lez": "lezgiera",
  "lg": "luganda",
  "li": "limburgera",
  "lij": "liguriera",
  "lkt": "lakotera",
  "ln": "lingala",
  "lo": "laosera",
  "lou": "Louisianako kreolera",
  "loz": "loziera",
  "lrc": "iparraldeko lurera",
  "lt": "lituaniera",
  "lu": "Katangako lubera",
  "lua": "txilubera",
  "lun": "lundera",
  "luo": "luoera",
  "lus": "mizoa",
  "luy": "luhyera",
  "lv": "letoniera",
  "mad": "madurera",
  "mag": "magahiera",
  "mai": "maithilera",
  "mak": "makasarera",
  "mas": "masaiera",
  "mdf": "mokxera",
  "men": "mendeera",
  "mer": "meruera",
  "mfe": "Mauritaniako kreolera",
  "mg": "malgaxe",
  "mgh": "makhuwa-meettoera",
  "mgo": "meta\u02BCera",
  "mh": "marshallera",
  "mi": "maoriera",
  "mic": "mikmakera",
  "min": "minangkabauera",
  "mk": "mazedoniera",
  "ml": "malabarera",
  "mn": "mongoliera",
  "mni": "manipurera",
  "moh": "mohawkera",
  "mos": "moreera",
  "mr": "marathera",
  "ms": "malaysiera",
  "mt": "maltera",
  "mua": "mudangera",
  "mul": "zenbait hizkuntza",
  "mus": "creera",
  "mwl": "mirandera",
  "my": "birmaniera",
  "myv": "erziera",
  "mzn": "mazandarandera",
  "na": "nauruera",
  "nap": "napoliera",
  "naq": "namera",
  "nb": "bokm\xE5l (norvegiera)",
  "nd": "iparraldeko ndebeleera",
  "nds": "behe-aleman",
  "nds-NL": "behe-saxoiera",
  "ne": "nepalera",
  "new": "newarera",
  "ng": "ndongera",
  "nia": "niasera",
  "niu": "niueera",
  "nl": "nederlandera",
  "nl-BE": "flandriera",
  "nmg": "kwasiera",
  "nn": "nynorsk (norvegiera)",
  "nnh": "ngiemboonera",
  "no": "norvegiera",
  "nog": "nogaiera",
  "nqo": "n\u2019koera",
  "nr": "hegoaldeko ndebelera",
  "nso": "pediera",
  "nus": "nuerera",
  "nv": "navajoera",
  "ny": "chewera",
  "nyn": "ankolera",
  "oc": "okzitaniera",
  "om": "oromoera",
  "or": "oriya",
  "os": "osetiera",
  "pa": "punjabera",
  "pag": "pangasinanera",
  "pam": "pampangera",
  "pap": "papiamento",
  "pau": "palauera",
  "pcm": "Nigeriako pidgina",
  "pl": "poloniera",
  "prg": "prusiera",
  "ps": "paxtuera",
  "pt": "portuges",
  "pt-BR": "Brasilgo portuges",
  "pt-PT": "Europako portuges",
  "qu": "kitxua",
  "quc": "quicheera",
  "rap": "rapa nui",
  "rar": "rarotongera",
  "rhg": "rohingyera",
  "rm": "erretorromaniera",
  "rn": "rundiera",
  "ro": "errumaniera",
  "ro-MD": "moldaviera",
  "rof": "rombo",
  "ru": "errusiera",
  "rup": "aromaniera",
  "rw": "kinyaruanda",
  "rwk": "rwera",
  "sa": "sanskrito",
  "sad": "sandaweera",
  "sah": "sakhera",
  "saq": "samburuera",
  "sat": "santalera",
  "sba": "ngambayera",
  "sbp": "sanguera",
  "sc": "sardiniera",
  "scn": "siziliera",
  "sco": "eskoziera",
  "sd": "sindhi",
  "se": "iparraldeko samiera",
  "seh": "senera",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sh": "serbokroaziera",
  "shi": "tachelhit",
  "shn": "shanera",
  "si": "sinhala",
  "sk": "eslovakiera",
  "sl": "esloveniera",
  "sm": "samoera",
  "sma": "hegoaldeko samiera",
  "smj": "Luleko samiera",
  "smn": "Inariko samiera",
  "sms": "skolten samiera",
  "sn": "shonera",
  "snk": "soninkera",
  "so": "somaliera",
  "sq": "albaniera",
  "sr": "serbiera",
  "srn": "srananera",
  "ss": "swatiera",
  "ssy": "sahoa",
  "st": "hegoaldeko sothoera",
  "su": "sundanera",
  "suk": "sukumera",
  "sv": "suediera",
  "sw": "swahilia",
  "sw-CD": "Kongoko swahilia",
  "swb": "komoreera",
  "syr": "asiriera",
  "ta": "tamilera",
  "te": "telugu",
  "tem": "temnea",
  "teo": "tesoera",
  "tet": "tetum",
  "tg": "tajikera",
  "th": "thailandiera",
  "ti": "tigrinyera",
  "tig": "tigrea",
  "tk": "turkmenera",
  "tl": "tagaloa",
  "tlh": "klingonera",
  "tn": "tswanera",
  "to": "tongera",
  "tpi": "tok pisin",
  "tr": "turkiera",
  "trv": "tarokoa",
  "ts": "tsongera",
  "tt": "tatarera",
  "tum": "tumbukera",
  "tvl": "tuvaluera",
  "tw": "twia",
  "twq": "tasawaq",
  "ty": "tahitiera",
  "tyv": "tuvera",
  "tzm": "Erdialdeko Atlaseko amazigera",
  "udm": "udmurtera",
  "ug": "uigurrera",
  "uk": "ukrainera",
  "umb": "umbundu",
  "und": "hizkuntza ezezaguna",
  "ur": "urdu",
  "uz": "uzbekera",
  "vai": "vaiera",
  "ve": "vendera",
  "vi": "vietnamera",
  "vo": "volap\xFCk",
  "vun": "vunjo",
  "wa": "waloiera",
  "wae": "walserera",
  "wal": "welayta",
  "war": "samerera",
  "wo": "wolofera",
  "xal": "kalmykera",
  "xh": "xhosera",
  "xog": "sogera",
  "yav": "yangbenera",
  "ybb": "yemba",
  "yi": "yiddish",
  "yo": "jorubera",
  "yrl": "yrl",
  "yue": "kantonera",
  "zgh": "amazigera estandarra",
  "zh": "txinera",
  "zh-Hans": "txinera sinplifikatu",
  "zh-Hant": "txinera tradizionala",
  "zu": "zuluera",
  "zun": "zu\xF1ia",
  "zxx": "ez dago eduki linguistikorik",
  "zza": "zazera"
};

// src/l10n/locale/fa.ts
var fa_default = {
  "aa": "\u0622\u0641\u0627\u0631\u06CC",
  "ab": "\u0622\u0628\u062E\u0627\u0632\u06CC",
  "ace": "\u0622\u0686\u0626\u06CC",
  "ach": "\u0622\u0686\u0648\u0644\u06CC\u0627\u06CC\u06CC",
  "ada": "\u0622\u062F\u0627\u0646\u06AF\u0645\u0647\u200C\u0627\u06CC",
  "ady": "\u0622\u062F\u06CC\u062C\u06CC\u0627\u06CC\u06CC",
  "ae": "\u0627\u0648\u0633\u062A\u0627\u06CC\u06CC",
  "aeb": "\u0639\u0631\u0628\u06CC \u062A\u0648\u0646\u0633\u06CC",
  "af": "\u0622\u0641\u0631\u06CC\u06A9\u0627\u0646\u0633",
  "afh": "\u0622\u0641\u0631\u06CC\u0647\u06CC\u0644\u06CC",
  "agq": "\u0622\u06AF\u06CC\u0645",
  "ain": "\u0622\u06CC\u0646\u0648\u06CC\u06CC",
  "ak": "\u0622\u06A9\u0627\u0646",
  "akk": "\u0627\u06A9\u062F\u06CC",
  "akz": "\u0622\u0644\u0627\u0628\u0627\u0645\u0627\u06CC\u06CC",
  "ale": "\u0622\u0644\u0626\u0648\u062A\u06CC",
  "alt": "\u0622\u0644\u062A\u0627\u06CC\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "am": "\u0627\u0645\u0647\u0631\u06CC",
  "an": "\u0622\u0631\u0627\u06AF\u0648\u0646\u06CC",
  "ang": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "anp": "\u0622\u0646\u06AF\u06CC\u06A9\u0627",
  "ar": "\u0639\u0631\u0628\u06CC",
  "ar-001": "\u0639\u0631\u0628\u06CC \u0631\u0633\u0645\u06CC",
  "arc": "\u0622\u0631\u0627\u0645\u06CC",
  "arn": "\u0645\u0627\u067E\u0648\u0686\u0647\u200C\u0627\u06CC",
  "arp": "\u0622\u0631\u0627\u067E\u0627\u0647\u0648\u06CC\u06CC",
  "arq": "\u0639\u0631\u0628\u06CC \u0627\u0644\u062C\u0632\u0627\u06CC\u0631\u06CC",
  "arw": "\u0622\u0631\u0627\u0648\u0627\u06A9\u06CC",
  "ary": "\u0639\u0631\u0628\u06CC \u0645\u0631\u0627\u06A9\u0634\u06CC",
  "arz": "\u0639\u0631\u0628\u06CC \u0645\u0635\u0631\u06CC",
  "as": "\u0622\u0633\u0627\u0645\u06CC",
  "asa": "\u0622\u0633\u0648",
  "ast": "\u0622\u0633\u062A\u0648\u0631\u06CC",
  "av": "\u0622\u0648\u0627\u0631\u06CC",
  "awa": "\u0627\u0648\u062F\u0647\u06CC",
  "ay": "\u0622\u06CC\u0645\u0627\u0631\u0627\u06CC\u06CC",
  "az": "\u062A\u0631\u06A9\u06CC \u0622\u0630\u0631\u0628\u0627\u06CC\u062C\u0627\u0646\u06CC",
  "az-Arab": "\u062A\u0631\u06A9\u06CC \u0622\u0630\u0631\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "ba": "\u0628\u0627\u0634\u0642\u06CC\u0631\u06CC",
  "bal": "\u0628\u0644\u0648\u0686\u06CC",
  "ban": "\u0628\u0627\u0644\u06CC\u0627\u06CC\u06CC",
  "bar": "\u0628\u0627\u0648\u0627\u0631\u06CC\u0627\u06CC\u06CC",
  "bas": "\u0628\u0627\u0633\u0627\u06CC\u06CC",
  "bax": "\u0628\u0645\u0648\u0646\u06CC",
  "be": "\u0628\u0644\u0627\u0631\u0648\u0633\u06CC",
  "bej": "\u0628\u062C\u0627\u06CC\u06CC",
  "bem": "\u0628\u0645\u0628\u0627\u06CC\u06CC",
  "bez": "\u0628\u0646\u0627\u06CC\u06CC",
  "bg": "\u0628\u0644\u063A\u0627\u0631\u06CC",
  "bgn": "\u0628\u0644\u0648\u0686\u06CC \u063A\u0631\u0628\u06CC",
  "bho": "\u0628\u0648\u062C\u067E\u0648\u0631\u06CC",
  "bi": "\u0628\u06CC\u0633\u0644\u0627\u0645\u0627",
  "bik": "\u0628\u06CC\u06A9\u0648\u0644\u06CC",
  "bin": "\u0628\u06CC\u0646\u06CC",
  "bla": "\u0633\u06CC\u06A9\u0633\u06CC\u06A9\u0627",
  "bm": "\u0628\u0627\u0645\u0628\u0627\u0631\u0627\u06CC\u06CC",
  "bn": "\u0628\u0646\u06AF\u0627\u0644\u06CC",
  "bo": "\u062A\u0628\u062A\u06CC",
  "bqi": "\u0644\u0631\u06CC \u0628\u062E\u062A\u06CC\u0627\u0631\u06CC",
  "br": "\u0628\u0631\u062A\u0648\u0646",
  "bra": "\u0628\u0631\u0627\u062C",
  "brh": "\u0628\u0631\u0627\u0647\u0648\u06CC\u06CC",
  "brx": "\u0628\u0648\u062F\u0648\u06CC\u06CC",
  "bs": "\u0628\u0648\u0633\u0646\u06CC\u0627\u06CC\u06CC",
  "bua": "\u0628\u0648\u0631\u06CC\u0627\u062A\u06CC",
  "bug": "\u0628\u0648\u06AF\u06CC\u0627\u06CC\u06CC",
  "byn": "\u0628\u0644\u06CC\u0646",
  "ca": "\u06A9\u0627\u062A\u0627\u0644\u0627\u0646",
  "cad": "\u06A9\u0627\u062F\u0648\u06CC\u06CC",
  "car": "\u06A9\u0627\u0631\u06CC\u0628\u06CC",
  "ccp": "\u0686\u0627\u06A9\u0645\u0627",
  "ce": "\u0686\u0686\u0646\u06CC",
  "ceb": "\u0633\u0628\u0648\u06CC\u06CC",
  "cgg": "\u0686\u06CC\u06AF\u0627",
  "ch": "\u0686\u0627\u0645\u0648\u0631\u0648\u06CC\u06CC",
  "chb": "\u0686\u06CC\u0628\u0686\u0627",
  "chg": "\u062C\u063A\u062A\u0627\u06CC\u06CC",
  "chk": "\u0686\u0648\u06A9\u06CC",
  "chm": "\u0645\u0627\u0631\u06CC\u0627\u06CC\u06CC",
  "cho": "\u0686\u0648\u06A9\u062A\u0648\u06CC\u06CC",
  "chp": "\u0686\u06CC\u067E\u0647\u200C\u0648\u06CC\u0647\u200C\u0627\u06CC",
  "chr": "\u0686\u0631\u0648\u06A9\u06CC",
  "chy": "\u0634\u0627\u06CC\u0627\u0646\u06CC",
  "ckb": "\u06A9\u0631\u062F\u06CC \u0645\u0631\u06A9\u0632\u06CC",
  "co": "\u06A9\u0648\u0631\u0633\u06CC",
  "cop": "\u0642\u0628\u0637\u06CC",
  "cr": "\u06A9\u0631\u06CC\u0627\u06CC\u06CC",
  "crh": "\u062A\u0631\u06A9\u06CC \u06A9\u0631\u06CC\u0645\u0647",
  "crs": "\u0633\u06CC\u0634\u0644 \u0622\u0645\u06CC\u062E\u062A\u0647\u0654 \u0641\u0631\u0627\u0646\u0633\u0648\u06CC",
  "cs": "\u0686\u06A9\u06CC",
  "csb": "\u06A9\u0627\u0634\u0648\u0628\u06CC",
  "cu": "\u0627\u0633\u0644\u0627\u0648\u06CC \u06A9\u0644\u06CC\u0633\u0627\u06CC\u06CC",
  "cv": "\u0686\u0648\u0648\u0627\u0634\u06CC",
  "cy": "\u0648\u0644\u0632\u06CC",
  "da": "\u062F\u0627\u0646\u0645\u0627\u0631\u06A9\u06CC",
  "dak": "\u062F\u0627\u06A9\u0648\u062A\u0627\u06CC\u06CC",
  "dar": "\u062F\u0627\u0631\u0642\u06CC\u0646\u06CC",
  "dav": "\u062A\u0627\u06CC\u062A\u0627",
  "de": "\u0622\u0644\u0645\u0627\u0646\u06CC",
  "de-AT": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0627\u062A\u0631\u06CC\u0634",
  "de-CH": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0645\u0639\u06CC\u0627\u0631 \u0633\u0648\u0626\u06CC\u0633",
  "del": "\u062F\u0644\u0627\u0648\u0627\u0631\u06CC",
  "dgr": "\u062F\u0648\u06AF\u0631\u06CC\u0628",
  "din": "\u062F\u06CC\u0646\u06A9\u0627\u06CC\u06CC",
  "dje": "\u0632\u0631\u0645\u0627",
  "doi": "\u062F\u0648\u06AF\u0631\u06CC",
  "dsb": "\u0635\u064F\u0631\u0628\u06CC \u0633\u0641\u0644\u06CC",
  "dua": "\u062F\u0648\u0622\u0644\u0627\u06CC\u06CC",
  "dum": "\u0647\u0644\u0646\u062F\u06CC \u0645\u06CC\u0627\u0646\u0647",
  "dv": "\u062F\u06CC\u0648\u0647\u06CC",
  "dyo": "\u062F\u06CC\u0648\u0644\u0627 \u0641\u0648\u0646\u06CC",
  "dyu": "\u062F\u0627\u06CC\u0648\u0644\u0627\u06CC\u06CC",
  "dz": "\u062F\u0632\u0648\u0646\u06AF\u062E\u0627",
  "dzg": "\u062F\u0627\u0632\u0627\u06AF\u0627\u06CC\u06CC",
  "ebu": "\u0627\u0645\u0628\u0648",
  "ee": "\u0627\u0648\u0647\u200C\u0627\u06CC",
  "efi": "\u0627\u0641\u06CC\u06A9\u06CC",
  "egy": "\u0645\u0635\u0631\u06CC \u06A9\u0647\u0646",
  "eka": "\u0627\u06A9\u0627\u062C\u0648\u06A9",
  "el": "\u06CC\u0648\u0646\u0627\u0646\u06CC",
  "elx": "\u0639\u06CC\u0644\u0627\u0645\u06CC",
  "en": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC",
  "en-AU": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u0627\u0633\u062A\u0631\u0627\u0644\u06CC\u0627",
  "en-CA": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u06A9\u0627\u0646\u0627\u062F\u0627",
  "en-GB": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627",
  "en-US": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627",
  "enm": "\u0627\u0646\u06AF\u0644\u06CC\u0633\u06CC \u0645\u06CC\u0627\u0646\u0647",
  "eo": "\u0627\u0633\u067E\u0631\u0627\u0646\u062A\u0648",
  "es": "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627\u06CC\u06CC",
  "es-419": "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627\u06CC\u06CC \u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0644\u0627\u062A\u06CC\u0646",
  "es-ES": "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627\u06CC\u06CC \u0627\u0631\u0648\u067E\u0627",
  "es-MX": "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627\u06CC\u06CC \u0645\u06A9\u0632\u06CC\u06A9",
  "et": "\u0627\u0633\u062A\u0648\u0646\u06CC\u0627\u06CC\u06CC",
  "eu": "\u0628\u0627\u0633\u06A9\u06CC",
  "ewo": "\u0627\u0648\u0627\u0646\u062F\u0648",
  "fa": "\u0641\u0627\u0631\u0633\u06CC",
  "fa-AF": "\u062F\u0631\u06CC",
  "fan": "\u0641\u0627\u0646\u06AF\u06CC",
  "fat": "\u0641\u0627\u0646\u062A\u06CC\u0627\u06CC\u06CC",
  "ff": "\u0641\u0648\u0644\u0627\u0646\u06CC",
  "fi": "\u0641\u0646\u0644\u0627\u0646\u062F\u06CC",
  "fil": "\u0641\u06CC\u0644\u06CC\u067E\u06CC\u0646\u06CC",
  "fj": "\u0641\u06CC\u062C\u06CC\u0627\u06CC\u06CC",
  "fo": "\u0641\u0627\u0631\u0648\u06CC\u06CC",
  "fon": "\u0641\u0648\u0646\u06CC",
  "fr": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC",
  "fr-CA": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC \u06A9\u0627\u0646\u0627\u062F\u0627",
  "fr-CH": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC \u0633\u0648\u0626\u06CC\u0633",
  "frc": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC \u06A9\u0627\u062F\u06CC\u0646",
  "frm": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC \u0645\u06CC\u0627\u0646\u0647",
  "fro": "\u0641\u0631\u0627\u0646\u0633\u0648\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "frr": "\u0641\u0631\u06CC\u0632\u06CC \u0634\u0645\u0627\u0644\u06CC",
  "frs": "\u0641\u0631\u06CC\u0632\u06CC \u0634\u0631\u0642\u06CC",
  "fur": "\u0641\u0631\u06CC\u0648\u0644\u06CC\u0627\u06CC\u06CC",
  "fy": "\u0641\u0631\u06CC\u0633\u06CC \u063A\u0631\u0628\u06CC",
  "ga": "\u0627\u06CC\u0631\u0644\u0646\u062F\u06CC",
  "gaa": "\u06AF\u0627\u06CC\u06CC",
  "gag": "\u06AF\u0627\u06AF\u0627\u0626\u0648\u0632\u06CC\u0627\u06CC\u06CC",
  "gay": "\u06AF\u0627\u06CC\u0648\u06CC\u06CC",
  "gba": "\u06AF\u0628\u0627\u06CC\u0627\u06CC\u06CC",
  "gbz": "\u062F\u0631\u06CC \u0632\u0631\u062A\u0634\u062A\u06CC",
  "gd": "\u06AF\u06CC\u0644\u06CC \u0627\u0633\u06A9\u0627\u062A\u0644\u0646\u062F\u06CC",
  "gez": "\u06AF\u06CC\u200C\u0626\u0632\u06CC",
  "gil": "\u06AF\u06CC\u0644\u0628\u0631\u062A\u06CC",
  "gl": "\u06AF\u0627\u0644\u06CC\u0633\u06CC\u0627\u06CC\u06CC",
  "glk": "\u06AF\u06CC\u0644\u06A9\u06CC",
  "gmh": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0645\u0639\u06CC\u0627\u0631 \u0645\u06CC\u0627\u0646\u0647",
  "gn": "\u06AF\u0648\u0627\u0631\u0627\u0646\u06CC",
  "goh": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0639\u0644\u06CC\u0627\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "gon": "\u06AF\u0648\u0646\u062F\u06CC",
  "gor": "\u06AF\u0648\u0631\u0648\u0646\u062A\u0627\u0644\u0648",
  "got": "\u06AF\u0648\u062A\u06CC",
  "grb": "\u06AF\u0631\u06CC\u0628\u0648\u06CC\u06CC",
  "grc": "\u06CC\u0648\u0646\u0627\u0646\u06CC \u06A9\u0647\u0646",
  "gsw": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0633\u0648\u0626\u06CC\u0633\u06CC",
  "gu": "\u06AF\u062C\u0631\u0627\u062A\u06CC",
  "guz": "\u06AF\u0648\u0633\u06CC",
  "gv": "\u0645\u0627\u0646\u06CC",
  "gwi": "\u06AF\u0648\u06CC\u0686 \u0627\u06CC\u0646",
  "ha": "\u0647\u0648\u0633\u0627\u06CC\u06CC",
  "hai": "\u0647\u0627\u06CC\u062F\u0627\u06CC\u06CC",
  "haw": "\u0647\u0627\u0648\u0627\u06CC\u06CC",
  "he": "\u0639\u0628\u0631\u06CC",
  "hi": "\u0647\u0646\u062F\u06CC",
  "hif": "\u0647\u0646\u062F\u06CC \u0641\u06CC\u062C\u06CC\u0627\u06CC\u06CC",
  "hil": "\u0647\u06CC\u0644\u06CC\u200C\u06AF\u0627\u06CC\u0646\u0648\u0646\u06CC",
  "hit": "\u0647\u06CC\u062A\u06CC",
  "hmn": "\u0647\u0645\u0648\u0646\u06AF",
  "ho": "\u0645\u0648\u062A\u0648\u06CC\u06CC \u0647\u06CC\u0631\u06CC",
  "hr": "\u06A9\u0631\u0648\u0627\u062A",
  "hsb": "\u0635\u064F\u0631\u0628\u06CC \u0639\u0644\u06CC\u0627",
  "ht": "\u0647\u0627\u0626\u06CC\u062A\u06CC\u0627\u06CC\u06CC",
  "hu": "\u0645\u062C\u0627\u0631\u06CC",
  "hup": "\u0647\u0648\u067E\u0627",
  "hy": "\u0627\u0631\u0645\u0646\u06CC",
  "hz": "\u0647\u0631\u06CC\u0631\u0648\u06CC\u06CC",
  "ia": "\u0627\u06CC\u0646\u062A\u0631\u0644\u06CC\u0646\u06AF\u0648\u0627",
  "iba": "\u0627\u06CC\u0628\u0627\u0646\u06CC",
  "ibb": "\u0627\u06CC\u0628\u06CC\u0628\u06CC\u0648",
  "id": "\u0627\u0646\u062F\u0648\u0646\u0632\u06CC\u0627\u06CC\u06CC",
  "ie": "\u0627\u06A9\u0633\u06CC\u062F\u0646\u062A\u0627\u0644",
  "ig": "\u0627\u06CC\u06AF\u0628\u0648\u06CC\u06CC",
  "ii": "\u06CC\u06CC \u0633\u06CC\u0686\u0648\u0627\u0646",
  "ik": "\u0627\u06CC\u0646\u0648\u067E\u06CC\u06A9",
  "ilo": "\u0627\u06CC\u0644\u0648\u06A9\u0648\u06CC\u06CC",
  "inh": "\u0627\u06CC\u0646\u06AF\u0648\u0634\u06CC",
  "io": "\u0627\u06CC\u062F\u0648",
  "is": "\u0627\u06CC\u0633\u0644\u0646\u062F\u06CC",
  "it": "\u0627\u06CC\u062A\u0627\u0644\u06CC\u0627\u06CC\u06CC",
  "iu": "\u0627\u06CC\u0646\u0648\u06A9\u062A\u06CC\u062A\u0648\u062A",
  "ja": "\u0698\u0627\u067E\u0646\u06CC",
  "jbo": "\u0644\u0648\u062C\u0628\u0627\u0646",
  "jgo": "\u0646\u06AF\u0648\u0645\u0628\u0627",
  "jmc": "\u0645\u0627\u0686\u0627\u0645\u0647\u200C\u0627\u06CC",
  "jpr": "\u0641\u0627\u0631\u0633\u06CC \u06CC\u0647\u0648\u062F\u06CC",
  "jrb": "\u0639\u0631\u0628\u06CC \u06CC\u0647\u0648\u062F\u06CC",
  "jv": "\u062C\u0627\u0648\u0647\u200C\u0627\u06CC",
  "ka": "\u06AF\u0631\u062C\u06CC",
  "kaa": "\u0642\u0631\u0647\u200C\u0642\u0627\u0644\u067E\u0627\u0642\u06CC",
  "kab": "\u0642\u0628\u0627\u06CC\u0644\u06CC",
  "kac": "\u06A9\u0627\u0686\u06CC\u0646\u06CC",
  "kaj": "\u062C\u0648",
  "kam": "\u06A9\u0627\u0645\u0628\u0627\u06CC\u06CC",
  "kaw": "\u06A9\u0627\u0648\u06CC\u0627\u06CC\u06CC",
  "kbd": "\u06A9\u0627\u0628\u0627\u0631\u062F\u06CC\u0646\u06CC",
  "kcg": "\u062A\u06CC\u0627\u067E\u06CC",
  "kde": "\u0645\u0627\u06A9\u0648\u0646\u062F\u0647",
  "kea": "\u06A9\u0627\u0628\u0648\u0648\u0631\u062F\u06CC\u0627\u0646\u0648",
  "kfo": "\u06A9\u0648\u0631\u0648",
  "kg": "\u06A9\u0646\u06AF\u0648\u06CC\u06CC",
  "kgp": "kgp",
  "kha": "\u062E\u0627\u0633\u06CC\u0627\u06CC\u06CC",
  "kho": "\u062E\u062A\u0646\u06CC",
  "khq": "\u06A9\u0648\u062C\u0631\u0627\u0686\u06CC\u0646\u06CC",
  "khw": "\u06A9\u0647\u0648\u0627\u0631",
  "ki": "\u06A9\u06CC\u06A9\u0648\u06CC\u0648\u06CC\u06CC",
  "kiu": "\u06A9\u0631\u0645\u0627\u0646\u062C\u06CC",
  "kj": "\u06A9\u0648\u0627\u0646\u06CC\u0627\u0645\u0627",
  "kk": "\u0642\u0632\u0627\u0642\u06CC",
  "kkj": "\u06A9\u0627\u06A9\u0627\u06CC\u06CC",
  "kl": "\u06AF\u0631\u06CC\u0646\u0644\u0646\u062F\u06CC",
  "kln": "\u06A9\u0627\u0644\u0646\u062C\u06CC\u0646",
  "km": "\u062E\u0645\u0631\u06CC",
  "kmb": "\u06A9\u06CC\u0645\u0628\u0648\u0646\u062F\u0648\u06CC\u06CC",
  "kn": "\u06A9\u0627\u0646\u0627\u0631\u0627",
  "ko": "\u06A9\u0631\u0647\u200C\u0627\u06CC",
  "koi": "\u06A9\u0648\u0645\u06CC \u067E\u0631\u0645\u06CC\u0627\u06A9",
  "kok": "\u06A9\u0646\u06A9\u0627\u0646\u06CC",
  "kpe": "\u06A9\u067E\u0644\u0647\u200C\u0627\u06CC",
  "kr": "\u06A9\u0627\u0646\u0648\u0631\u06CC\u0627\u06CC\u06CC",
  "krc": "\u0642\u0631\u0647\u200C\u0686\u0627\u06CC\u06CC\u2010\u0628\u0627\u0644\u06A9\u0627\u0631\u06CC",
  "krl": "\u06A9\u0627\u0631\u06CC\u0644\u06CC\u0627\u0646\u06CC",
  "kru": "\u06A9\u0648\u0631\u0648\u062E\u06CC",
  "ks": "\u06A9\u0634\u0645\u06CC\u0631\u06CC",
  "ksb": "\u0634\u0627\u0645\u0628\u0627\u0644\u0627",
  "ksf": "\u0628\u0627\u0641\u06CC\u0627\u06CC\u06CC",
  "ksh": "\u06A9\u0648\u0644\u0634",
  "ku": "\u06A9\u0631\u062F\u06CC",
  "kum": "\u06A9\u0648\u0645\u06CC\u06A9\u06CC",
  "kut": "\u06A9\u0648\u062A\u0646\u06CC",
  "kv": "\u06A9\u0648\u0645\u06CC\u0627\u06CC\u06CC",
  "kw": "\u06A9\u0648\u0631\u0646\u06CC",
  "ky": "\u0642\u0631\u0642\u06CC\u0632\u06CC",
  "la": "\u0644\u0627\u062A\u06CC\u0646",
  "lad": "\u0644\u0627\u062F\u06CC\u0646\u0648",
  "lag": "\u0644\u0627\u0646\u06AF\u06CC",
  "lah": "\u0644\u0627\u0647\u0646\u062F\u0627",
  "lam": "\u0644\u0627\u0645\u0628\u0627",
  "lb": "\u0644\u0648\u06AF\u0632\u0627\u0645\u0628\u0648\u0631\u06AF\u06CC",
  "lez": "\u0644\u0632\u06AF\u06CC",
  "lg": "\u06AF\u0627\u0646\u062F\u0627\u06CC\u06CC",
  "li": "\u0644\u06CC\u0645\u0628\u0648\u0631\u06AF\u06CC",
  "lij": "lij",
  "lkt": "\u0644\u0627\u06A9\u0648\u062A\u0627",
  "ln": "\u0644\u06CC\u0646\u06AF\u0627\u0644\u0627",
  "lo": "\u0644\u0627\u0626\u0648\u0633\u06CC",
  "lol": "\u0645\u0648\u0646\u06AF\u0648\u06CC\u06CC",
  "lou": "\u0632\u0628\u0627\u0646 \u0622\u0645\u06CC\u062E\u062A\u0647\u0654 \u0645\u0627\u062F\u0631\u06CC \u0644\u0648\u0626\u06CC\u0632\u06CC\u0627\u0646\u0627",
  "loz": "\u0644\u0648\u0632\u06CC\u0627\u06CC\u06CC",
  "lrc": "\u0644\u0631\u06CC \u0634\u0645\u0627\u0644\u06CC",
  "lt": "\u0644\u06CC\u062A\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC",
  "lu": "\u0644\u0648\u0628\u0627\u06CC\u06CC\u2010\u06A9\u0627\u062A\u0627\u0646\u06AF\u0627",
  "lua": "\u0644\u0648\u0628\u0627\u06CC\u06CC\u2010\u0644\u0648\u0644\u0648\u0627",
  "lui": "\u0644\u0648\u06CC\u0633\u0646\u0648",
  "lun": "\u0644\u0648\u0646\u062F\u0627\u06CC\u06CC",
  "luo": "\u0644\u0648\u0626\u0648\u06CC\u06CC",
  "lus": "\u0644\u0648\u0634\u0647\u200C\u0627\u06CC",
  "luy": "\u0644\u0648\u06CC\u0627",
  "lv": "\u0644\u062A\u0648\u0646\u06CC\u0627\u06CC\u06CC",
  "lzh": "\u0686\u06CC\u0646\u06CC \u0627\u062F\u0628\u06CC",
  "mad": "\u0645\u0627\u062F\u0648\u0631\u0627\u06CC\u06CC",
  "mag": "\u0645\u0627\u06AF\u0627\u0647\u06CC\u0627\u06CC\u06CC",
  "mai": "\u0645\u0627\u06CC\u062F\u06CC\u0644\u06CC",
  "mak": "\u0645\u0627\u06A9\u0627\u0633\u0627\u0631",
  "man": "\u0645\u0627\u0646\u062F\u06CC\u0646\u06AF\u0648\u06CC\u06CC",
  "mas": "\u0645\u0627\u0633\u0627\u06CC\u06CC",
  "mdf": "\u0645\u06A9\u0634\u0627\u06CC\u06CC",
  "mdr": "\u0645\u0627\u0646\u062F\u0627\u0631",
  "men": "\u0645\u0646\u062F\u0647\u200C\u0627\u06CC",
  "mer": "\u0645\u0631\u0648\u06CC\u06CC",
  "mfe": "\u0645\u0648\u0631\u06CC\u0633\u06CC\u0646",
  "mg": "\u0645\u0627\u0644\u0627\u06AF\u0627\u0633\u06CC",
  "mga": "\u0627\u06CC\u0631\u0644\u0646\u062F\u06CC \u0645\u06CC\u0627\u0646\u0647",
  "mgh": "\u0645\u0627\u06A9\u0648\u0627 \u0645\u062A\u0648",
  "mgo": "\u0645\u062A\u0627\u06CC\u06CC",
  "mh": "\u0645\u0627\u0631\u0634\u0627\u0644\u06CC",
  "mi": "\u0645\u0627\u0626\u0648\u0631\u06CC",
  "mic": "\u0645\u06CC\u06A9\u0645\u0627\u06A9\u06CC",
  "min": "\u0645\u06CC\u0646\u0627\u0646\u06AF\u200C\u06A9\u0627\u0628\u0648\u06CC\u06CC",
  "mk": "\u0645\u0642\u062F\u0648\u0646\u06CC",
  "ml": "\u0645\u0627\u0644\u0627\u06CC\u0627\u0644\u0627\u0645\u06CC",
  "mn": "\u0645\u063A\u0648\u0644\u06CC",
  "mnc": "\u0645\u0627\u0646\u0686\u0648\u06CC\u06CC",
  "mni": "\u0645\u0627\u0646\u06CC\u067E\u0648\u0631\u06CC",
  "moh": "\u0645\u0648\u0647\u0627\u06A9\u06CC",
  "mos": "\u0645\u0627\u0633\u06CC\u0627\u06CC\u06CC",
  "mr": "\u0645\u0631\u0627\u062A\u06CC",
  "ms": "\u0645\u0627\u0644\u0627\u06CC\u06CC",
  "mt": "\u0645\u0627\u0644\u062A\u06CC",
  "mua": "\u0645\u0627\u0646\u062F\u0627\u0646\u06AF\u06CC",
  "mul": "\u0686\u0646\u062F\u06CC\u0646 \u0632\u0628\u0627\u0646",
  "mus": "\u06A9\u0631\u06CC\u06A9\u06CC",
  "mwl": "\u0645\u06CC\u0631\u0627\u0646\u062F\u06CC",
  "mwr": "\u0645\u0627\u0631\u0648\u0627\u0631\u06CC",
  "my": "\u0628\u0631\u0645\u0647\u200C\u0627\u06CC",
  "myv": "\u0627\u0631\u0632\u06CC\u0627\u06CC\u06CC",
  "mzn": "\u0645\u0627\u0632\u0646\u062F\u0631\u0627\u0646\u06CC",
  "na": "\u0646\u0627\u0626\u0648\u0631\u0648\u06CC\u06CC",
  "nap": "\u0646\u0627\u067E\u0644\u06CC",
  "naq": "\u0646\u0627\u0645\u0627\u06CC\u06CC",
  "nb": "\u0646\u0631\u0648\u0698\u06CC \u0628\u0648\u06A9\u200C\u0645\u064F\u0644",
  "nd": "\u0627\u0646\u062F\u0647\u200C\u0628\u0644\u0647\u200C\u0627\u06CC \u0634\u0645\u0627\u0644\u06CC",
  "nds": "\u0622\u0644\u0645\u0627\u0646\u06CC \u0633\u0641\u0644\u06CC",
  "nds-NL": "\u0633\u0627\u06A9\u0633\u0648\u0646\u06CC \u0633\u0641\u0644\u06CC",
  "ne": "\u0646\u067E\u0627\u0644\u06CC",
  "new": "\u0646\u0648\u0627\u0631\u06CC\u0627\u06CC\u06CC",
  "ng": "\u0627\u0646\u062F\u0648\u0646\u06AF\u0627\u06CC\u06CC",
  "nia": "\u0646\u06CC\u0627\u0633\u06CC",
  "niu": "\u0646\u06CC\u0648\u06CC\u06CC",
  "nl": "\u0647\u0644\u0646\u062F\u06CC",
  "nl-BE": "\u0641\u0644\u0645\u0646\u06AF\u06CC",
  "nmg": "\u06A9\u0648\u0627\u0632\u06CC\u0648",
  "nn": "\u0646\u0631\u0648\u0698\u06CC \u0646\u06CC\u200C\u0646\u064F\u0634\u06A9",
  "nnh": "\u0646\u06CC\u0627\u0645\u0628\u0648\u0646",
  "no": "\u0646\u0631\u0648\u0698\u06CC",
  "nog": "\u0646\u063A\u0627\u06CC\u06CC",
  "non": "\u0646\u0631\u0633 \u0628\u0627\u0633\u062A\u0627\u0646",
  "nqo": "\u0646\u06A9\u0648",
  "nr": "\u0627\u0646\u062F\u0647\u200C\u0628\u0644\u0647\u200C\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "nso": "\u0633\u0648\u062A\u0648\u06CC\u06CC \u0634\u0645\u0627\u0644\u06CC",
  "nus": "\u0646\u0648\u06CC\u0631",
  "nv": "\u0646\u0627\u0648\u0627\u0647\u0648\u06CC\u06CC",
  "nwc": "\u0646\u0648\u0627\u0631\u06CC\u0627\u06CC\u06CC \u06A9\u0644\u0627\u0633\u06CC\u06A9",
  "ny": "\u0646\u06CC\u0627\u0646\u062C\u0627\u06CC\u06CC",
  "nym": "\u0646\u06CC\u0627\u0645\u200C\u0648\u0632\u06CC\u0627\u06CC\u06CC",
  "nyn": "\u0646\u06CC\u0627\u0646\u06A9\u0648\u0644\u0647\u200C\u0627\u06CC",
  "nyo": "\u0646\u06CC\u0648\u0631\u0648\u06CC\u06CC",
  "nzi": "\u0646\u0632\u06CC\u0645\u0627\u06CC\u06CC",
  "oc": "\u0627\u06A9\u0633\u06CC\u062A\u0627\u0646",
  "oj": "\u0627\u0648\u062C\u06CC\u0628\u0648\u0627\u06CC\u06CC",
  "om": "\u0627\u0648\u0631\u0648\u0645\u0648\u06CC\u06CC",
  "or": "\u0627\u0648\u0631\u06CC\u0647\u200C\u0627\u06CC",
  "os": "\u0622\u0633\u06CC",
  "osa": "\u0627\u0648\u0633\u06CC\u062C\u06CC",
  "ota": "\u062A\u0631\u06A9\u06CC \u0639\u062B\u0645\u0627\u0646\u06CC",
  "pa": "\u067E\u0646\u062C\u0627\u0628\u06CC",
  "pag": "\u067E\u0627\u0646\u06AF\u0627\u0633\u06CC\u0646\u0627\u0646\u06CC",
  "pal": "\u067E\u0647\u0644\u0648\u06CC",
  "pam": "\u067E\u0627\u0645\u067E\u0627\u0646\u06AF\u0627\u06CC\u06CC",
  "pap": "\u067E\u0627\u067E\u06CC\u0627\u0645\u0646\u062A\u0648",
  "pau": "\u067E\u0627\u0644\u0627\u0626\u0648\u06CC\u06CC",
  "pcm": "\u0646\u06CC\u0645\u200C\u0632\u0628\u0627\u0646 \u0646\u06CC\u062C\u0631\u06CC\u0647\u200C\u0627\u06CC",
  "pdc": "\u0622\u0644\u0645\u0627\u0646\u06CC \u067E\u0646\u0633\u06CC\u0644\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC",
  "peo": "\u0641\u0627\u0631\u0633\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "phn": "\u0641\u0646\u06CC\u0642\u06CC",
  "pi": "\u067E\u0627\u0644\u06CC",
  "pl": "\u0644\u0647\u0633\u062A\u0627\u0646\u06CC",
  "pon": "\u067E\u0627\u0646\u067E\u06CC\u06CC",
  "prg": "\u067E\u0631\u0648\u0633\u06CC",
  "pro": "\u067E\u0631\u0648\u0648\u0627\u0646\u0633\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "ps": "\u067E\u0634\u062A\u0648",
  "pt": "\u067E\u0631\u062A\u063A\u0627\u0644\u06CC",
  "pt-BR": "\u067E\u0631\u062A\u063A\u0627\u0644\u06CC \u0628\u0631\u0632\u06CC\u0644",
  "pt-PT": "\u067E\u0631\u062A\u063A\u0627\u0644\u06CC \u0627\u0631\u0648\u067E\u0627",
  "qu": "\u06A9\u0686\u0648\u0627\u06CC\u06CC",
  "quc": "\u06A9\u06CC\u0686\u0647\u200C",
  "raj": "\u0631\u0627\u062C\u0633\u062A\u0627\u0646\u06CC",
  "rap": "\u0631\u0627\u067E\u0627\u0646\u0648\u06CC\u06CC",
  "rar": "\u0631\u0627\u0631\u0648\u062A\u0648\u0646\u06AF\u0627\u06CC\u06CC",
  "rhg": "\u0631\u0648\u0647\u06CC\u0646\u06AF\u06CC\u0627",
  "rm": "\u0631\u0648\u0645\u0627\u0646\u0634",
  "rn": "\u0631\u0648\u0646\u062F\u06CC\u0627\u06CC\u06CC",
  "ro": "\u0631\u0648\u0645\u0627\u0646\u06CC\u0627\u06CC\u06CC",
  "ro-MD": "\u0645\u0648\u0644\u062F\u0627\u0648\u06CC\u0627\u06CC\u06CC",
  "rof": "\u0631\u0648\u0645\u0628\u0648\u06CC\u06CC",
  "rom": "\u0631\u0648\u0645\u0627\u0646\u0648\u06CC\u06CC",
  "ru": "\u0631\u0648\u0633\u06CC",
  "rup": "\u0622\u0631\u0648\u0645\u0627\u0646\u06CC",
  "rw": "\u06A9\u06CC\u0646\u06CC\u0627\u0631\u0648\u0627\u0646\u062F\u0627\u06CC\u06CC",
  "rwk": "\u0631\u0648\u0627\u06CC\u06CC",
  "sa": "\u0633\u0627\u0646\u0633\u06A9\u0631\u06CC\u062A",
  "sad": "\u0633\u0627\u0646\u062F\u0627\u0648\u0647\u200C\u0627\u06CC",
  "sah": "\u06CC\u0627\u0642\u0648\u062A\u06CC",
  "sam": "\u0622\u0631\u0627\u0645\u06CC \u0633\u0627\u0645\u0631\u06CC",
  "saq": "\u0633\u0627\u0645\u0628\u0648\u0631\u0648",
  "sas": "\u0633\u0627\u0633\u0627\u06A9\u06CC",
  "sat": "\u0633\u0627\u0646\u062A\u0627\u0644\u06CC",
  "sba": "\u0627\u0646\u06AF\u0627\u0645\u0628\u0627\u06CC\u06CC",
  "sbp": "\u0633\u0627\u0646\u06AF\u0648\u06CC\u06CC",
  "sc": "\u0633\u0627\u0631\u062F\u06CC\u0646\u06CC\u0627\u06CC\u06CC",
  "scn": "\u0633\u06CC\u0633\u06CC\u0644\u06CC",
  "sco": "\u0627\u0633\u06A9\u0627\u062A\u0644\u0646\u062F\u06CC",
  "sd": "\u0633\u0646\u062F\u06CC",
  "sdh": "\u06A9\u0631\u062F\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "se": "\u0633\u0627\u0645\u06CC \u0634\u0645\u0627\u0644\u06CC",
  "seh": "\u0633\u0646\u0627",
  "sel": "\u0633\u0644\u06A9\u0648\u067E\u06CC",
  "ses": "\u06A9\u0648\u06CC\u0631\u0627\u0628\u0648\u0631\u0627 \u0633\u0646\u06CC",
  "sg": "\u0633\u0627\u0646\u06AF\u0648",
  "sga": "\u0627\u06CC\u0631\u0644\u0646\u062F\u06CC \u0628\u0627\u0633\u062A\u0627\u0646",
  "sh": "\u0635\u0631\u0628 \u0648 \u06A9\u0631\u0648\u0627\u062A\u06CC",
  "shi": "\u062A\u0627\u0686\u0644\u200C\u0647\u06CC\u062A",
  "shn": "\u0634\u0627\u0646\u06CC",
  "shu": "\u0639\u0631\u0628\u06CC \u0686\u0627\u062F\u06CC",
  "si": "\u0633\u06CC\u0646\u0647\u0627\u0644\u06CC",
  "sid": "\u0633\u06CC\u062F\u0627\u0645\u0648\u06CC\u06CC",
  "sk": "\u0627\u0633\u0644\u0648\u0627\u06A9\u06CC",
  "sl": "\u0627\u0633\u0644\u0648\u0648\u0646\u06CC\u0627\u06CC\u06CC",
  "sli": "\u0633\u06CC\u0644\u0632\u06CC\u0627\u06CC\u06CC \u0633\u0641\u0644\u06CC",
  "sm": "\u0633\u0627\u0645\u0648\u0622\u06CC\u06CC",
  "sma": "\u0633\u0627\u0645\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "smj": "\u0644\u0648\u0644\u0647 \u0633\u0627\u0645\u06CC",
  "smn": "\u0627\u06CC\u0646\u0627\u0631\u06CC \u0633\u0627\u0645\u06CC",
  "sms": "\u0627\u0633\u06A9\u0648\u0644\u062A \u0633\u0627\u0645\u06CC",
  "sn": "\u0634\u0648\u0646\u0627\u06CC\u06CC",
  "snk": "\u0633\u0648\u0646\u06CC\u0646\u06A9\u0647\u200C\u0627\u06CC",
  "so": "\u0633\u0648\u0645\u0627\u0644\u06CC\u0627\u06CC\u06CC",
  "sog": "\u0633\u063A\u062F\u06CC",
  "sq": "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627\u06CC\u06CC",
  "sr": "\u0635\u0631\u0628\u06CC",
  "srn": "\u062A\u0627\u06A9\u06CC\u200C\u062A\u0627\u06A9\u06CC",
  "srr": "\u0633\u0631\u06CC\u0631\u06CC",
  "ss": "\u0633\u0648\u0627\u0632\u06CC\u0627\u06CC\u06CC",
  "ssy": "\u0633\u0627\u0647\u0648",
  "st": "\u0633\u0648\u062A\u0648\u06CC \u062C\u0646\u0648\u0628\u06CC",
  "su": "\u0633\u0648\u0646\u062F\u0627\u06CC\u06CC",
  "suk": "\u0633\u0648\u06A9\u0648\u0645\u0627\u06CC\u06CC",
  "sus": "\u0633\u0648\u0633\u0648\u06CC\u06CC",
  "sux": "\u0633\u0648\u0645\u0631\u06CC",
  "sv": "\u0633\u0648\u0626\u062F\u06CC",
  "sw": "\u0633\u0648\u0627\u062D\u06CC\u0644\u06CC",
  "sw-CD": "\u0633\u0648\u0627\u062D\u06CC\u0644\u06CC \u06A9\u0646\u06AF\u0648",
  "swb": "\u06A9\u0648\u0645\u0648\u0631\u06CC",
  "syc": "\u0633\u0631\u06CC\u0627\u0646\u06CC \u06A9\u0644\u0627\u0633\u06CC\u06A9",
  "syr": "\u0633\u0631\u06CC\u0627\u0646\u06CC",
  "szl": "\u0633\u06CC\u0644\u0632\u06CC\u0627\u06CC\u06CC",
  "ta": "\u062A\u0627\u0645\u06CC\u0644\u06CC",
  "te": "\u062A\u0644\u0648\u06AF\u0648\u06CC\u06CC",
  "tem": "\u062A\u0645\u0646\u0647\u200C\u0627\u06CC",
  "teo": "\u062A\u0633\u0648\u06CC\u06CC",
  "ter": "\u062A\u0631\u0646\u0648",
  "tet": "\u062A\u062A\u0648\u0645\u06CC",
  "tg": "\u062A\u0627\u062C\u06CC\u06A9\u06CC",
  "th": "\u062A\u0627\u06CC\u0644\u0646\u062F\u06CC",
  "ti": "\u062A\u06CC\u06AF\u0631\u06CC\u0646\u06CC\u0627\u06CC\u06CC",
  "tig": "\u062A\u06CC\u06AF\u0631\u0647\u200C\u0627\u06CC",
  "tiv": "\u062A\u06CC\u0648\u06CC",
  "tk": "\u062A\u0631\u06A9\u0645\u0646\u06CC",
  "tl": "\u062A\u0627\u06AF\u0627\u0644\u0648\u06AF\u06CC",
  "tlh": "\u06A9\u0644\u06CC\u0646\u06AF\u0648\u0646",
  "tli": "\u062A\u0644\u06CC\u0646\u200C\u06AF\u06CC\u062A\u06CC",
  "tmh": "\u062A\u0627\u0645\u0627\u0634\u0642\u06CC",
  "tn": "\u062A\u0633\u0648\u0627\u0646\u0627\u06CC\u06CC",
  "to": "\u062A\u0648\u0646\u06AF\u0627\u06CC\u06CC",
  "tog": "\u062A\u0648\u0646\u06AF\u0627\u06CC\u06CC \u0646\u06CC\u0627\u0633\u0627",
  "tpi": "\u062A\u0648\u06A9\u200C\u067E\u06CC\u0633\u06CC\u0646\u06CC",
  "tr": "\u062A\u0631\u06A9\u06CC \u0627\u0633\u062A\u0627\u0646\u0628\u0648\u0644\u06CC",
  "trv": "\u062A\u0627\u0631\u0648\u06A9\u0648\u06CC\u06CC",
  "ts": "\u062A\u0633\u0648\u0646\u06AF\u0627\u06CC\u06CC",
  "tsi": "\u062A\u0633\u06CC\u0645\u200C\u0634\u06CC\u0627\u0646\u06CC",
  "tt": "\u062A\u0627\u062A\u0627\u0631\u06CC",
  "tum": "\u062A\u0648\u0645\u0628\u0648\u06A9\u0627\u06CC\u06CC",
  "tvl": "\u062A\u0648\u0648\u0627\u0644\u0648\u06CC\u06CC",
  "tw": "\u062A\u0648\u06CC\u200C\u06CC\u0627\u06CC\u06CC",
  "twq": "\u062A\u0633\u0648\u0627\u06A9\u06CC",
  "ty": "\u062A\u0627\u0647\u06CC\u062A\u06CC\u0627\u06CC\u06CC",
  "tyv": "\u062A\u0648\u0648\u0627\u06CC\u06CC",
  "tzm": "\u0622\u0645\u0627\u0632\u06CC\u063A\u06CC \u0627\u0637\u0644\u0633 \u0645\u0631\u06A9\u0632\u06CC",
  "udm": "\u0627\u0648\u062F\u0645\u0648\u0631\u062A\u06CC",
  "ug": "\u0627\u0648\u06CC\u063A\u0648\u0631\u06CC",
  "uga": "\u0627\u0648\u06AF\u0627\u0631\u06CC\u062A\u06CC",
  "uk": "\u0627\u0648\u06A9\u0631\u0627\u06CC\u0646\u06CC",
  "umb": "\u0627\u0645\u0628\u0648\u0646\u062F\u0648\u06CC\u06CC",
  "und": "\u0632\u0628\u0627\u0646 \u0646\u0627\u0645\u0634\u062E\u0635",
  "ur": "\u0627\u0631\u062F\u0648",
  "uz": "\u0627\u0632\u0628\u06A9\u06CC",
  "vai": "\u0648\u06CC\u0627\u06CC\u06CC",
  "ve": "\u0648\u0646\u062F\u0627\u06CC\u06CC",
  "vi": "\u0648\u06CC\u062A\u0646\u0627\u0645\u06CC",
  "vo": "\u0648\u0644\u0627\u067E\u0648\u06A9",
  "vot": "\u0648\u062A\u06CC",
  "vun": "\u0648\u0646\u062C\u0648",
  "wa": "\u0648\u0627\u0644\u0648\u0646\u06CC",
  "wae": "\u0648\u0627\u0644\u0633\u0631",
  "wal": "\u0648\u0627\u0644\u0627\u0645\u0648",
  "war": "\u0648\u0627\u0631\u0627\u06CC\u06CC",
  "was": "\u0648\u0627\u0634\u0648\u06CC\u06CC",
  "wbp": "\u0648\u0627\u0631\u0644\u067E\u06CC\u0631\u06CC",
  "wo": "\u0648\u0644\u0648\u0641\u06CC",
  "xal": "\u0642\u0644\u0645\u0648\u0642\u06CC",
  "xh": "\u062E\u0648\u0633\u0627\u06CC\u06CC",
  "xog": "\u0633\u0648\u06AF\u0627\u06CC\u06CC",
  "yao": "\u06CC\u0627\u0626\u0648\u06CC\u06CC",
  "yap": "\u06CC\u0627\u067E\u06CC",
  "yav": "\u06CC\u0627\u0646\u06AF\u0628\u0646\u06CC",
  "ybb": "\u06CC\u0645\u0628\u0627\u06CC\u06CC",
  "yi": "\u06CC\u062F\u06CC",
  "yo": "\u06CC\u0648\u0631\u0648\u0628\u0627\u06CC\u06CC",
  "yrl": "yrl",
  "yue": "\u06A9\u0627\u0646\u062A\u0648\u0646\u06CC",
  "za": "\u0686\u0648\u0627\u0646\u06AF\u06CC",
  "zap": "\u0632\u0627\u067E\u0648\u062A\u06A9\u06CC",
  "zen": "\u0632\u0646\u0627\u06AF\u0627",
  "zgh": "\u0622\u0645\u0627\u0632\u06CC\u063A\u06CC \u0645\u0639\u06CC\u0627\u0631 \u0645\u0631\u0627\u06A9\u0634",
  "zh": "\u0686\u06CC\u0646\u06CC",
  "zh-Hans": "\u0686\u06CC\u0646\u06CC \u0633\u0627\u062F\u0647\u200C\u0634\u062F\u0647",
  "zh-Hant": "\u0686\u06CC\u0646\u06CC \u0633\u0646\u062A\u06CC",
  "zu": "\u0632\u0648\u0644\u0648\u06CC\u06CC",
  "zun": "\u0632\u0648\u0646\u06CC\u0627\u06CC\u06CC",
  "zxx": "\u0628\u062F\u0648\u0646 \u0645\u062D\u062A\u0648\u0627\u06CC \u0632\u0628\u0627\u0646\u06CC",
  "zza": "\u0632\u0627\u0632\u0627\u06CC\u06CC"
};

// src/l10n/locale/fr.ts
var fr_default = {
  "aa": "afar",
  "ab": "abkhaze",
  "ace": "aceh",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adygu\xE9en",
  "ae": "avestique",
  "aeb": "arabe tunisien",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "a\xEFnou",
  "ak": "akan",
  "akk": "akkadien",
  "akz": "alabama",
  "ale": "al\xE9oute",
  "aln": "gu\xE8gue",
  "alt": "alta\xEF du Sud",
  "am": "amharique",
  "an": "aragonais",
  "ang": "ancien anglais",
  "anp": "angika",
  "ar": "arabe",
  "ar-001": "arabe standard moderne",
  "arc": "aram\xE9en",
  "arn": "mapuche",
  "aro": "araona",
  "arp": "arapaho",
  "arq": "arabe alg\xE9rien",
  "ars": "arabe najdi",
  "arw": "arawak",
  "ary": "arabe marocain",
  "arz": "arabe \xE9gyptien",
  "as": "assamais",
  "asa": "asu",
  "ase": "langue des signes am\xE9ricaine",
  "ast": "asturien",
  "av": "avar",
  "avk": "kotava",
  "awa": "awadhi",
  "ay": "aymara",
  "az": "azerba\xEFdjanais",
  "ba": "bachkir",
  "bal": "baloutchi",
  "ban": "balinais",
  "bar": "bavarois",
  "bas": "bassa",
  "bax": "bamoun",
  "bbc": "batak toba",
  "bbj": "ghomala\u02BC",
  "be": "bi\xE9lorusse",
  "bej": "bedja",
  "bem": "bemba",
  "bew": "betawi",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badaga",
  "bg": "bulgare",
  "bgn": "baloutchi occidental",
  "bho": "bhodjpouri",
  "bi": "bichelamar",
  "bik": "bikol",
  "bin": "bini",
  "bjn": "banjar",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengali",
  "bo": "tib\xE9tain",
  "bpy": "bishnupriya",
  "bqi": "bakhtiari",
  "br": "breton",
  "bra": "braj",
  "brh": "brahoui",
  "brx": "bodo",
  "bs": "bosniaque",
  "bss": "akoose",
  "bua": "bouriate",
  "bug": "bugi",
  "bum": "boulou",
  "byn": "blin",
  "byv": "m\xE9dumba",
  "ca": "catalan",
  "cad": "caddo",
  "car": "caribe",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "changma kodha",
  "ce": "tch\xE9tch\xE8ne",
  "ceb": "cebuano",
  "cgg": "kiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "tchaghata\xEF",
  "chk": "chuuk",
  "chm": "mari",
  "chn": "jargon chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cherokee",
  "chy": "cheyenne",
  "ckb": "sorani",
  "co": "corse",
  "cop": "copte",
  "cps": "capiznon",
  "cr": "cree",
  "crh": "turc de Crim\xE9e",
  "crs": "cr\xE9ole seychellois",
  "cs": "tch\xE8que",
  "csb": "kachoube",
  "cu": "slavon d\u2019\xE9glise",
  "cv": "tchouvache",
  "cy": "gallois",
  "da": "danois",
  "dak": "dakota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "allemand",
  "de-AT": "allemand autrichien",
  "de-CH": "allemand suisse",
  "del": "delaware",
  "den": "esclave",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "bas-sorabe",
  "dtp": "dusun central",
  "dua": "douala",
  "dum": "moyen n\xE9erlandais",
  "dv": "maldivien",
  "dyo": "diola-fogny",
  "dyu": "dioula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "\xE9w\xE9",
  "efi": "\xE9fik",
  "egl": "\xE9milien",
  "egy": "\xE9gyptien ancien",
  "eka": "\xE9kadjouk",
  "el": "grec",
  "elx": "\xE9lamite",
  "en": "anglais",
  "en-AU": "anglais australien",
  "en-CA": "anglais canadien",
  "en-GB": "anglais britannique",
  "en-US": "anglais am\xE9ricain",
  "enm": "moyen anglais",
  "eo": "esp\xE9ranto",
  "es": "espagnol",
  "es-419": "espagnol d\u2019Am\xE9rique latine",
  "es-ES": "espagnol d\u2019Espagne",
  "es-MX": "espagnol du Mexique",
  "esu": "youpik central",
  "et": "estonien",
  "eu": "basque",
  "ewo": "\xE9wondo",
  "ext": "estr\xE9m\xE8gne",
  "fa": "persan",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "peul",
  "fi": "finnois",
  "fil": "filipino",
  "fit": "finnois torn\xE9dalien",
  "fj": "fidjien",
  "fo": "f\xE9ro\xEFen",
  "fon": "fon",
  "fr": "fran\xE7ais",
  "fr-CA": "fran\xE7ais canadien",
  "fr-CH": "fran\xE7ais suisse",
  "frc": "fran\xE7ais cadien",
  "frm": "moyen fran\xE7ais",
  "fro": "ancien fran\xE7ais",
  "frp": "francoproven\xE7al",
  "frr": "frison du Nord",
  "frs": "frison oriental",
  "fur": "frioulan",
  "fy": "frison occidental",
  "ga": "irlandais",
  "gaa": "ga",
  "gag": "gagaouze",
  "gan": "gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gbz": "dari zoroastrien",
  "gd": "ga\xE9lique \xE9cossais",
  "gez": "gu\xE8ze",
  "gil": "gilbertin",
  "gl": "galicien",
  "glk": "gilaki",
  "gmh": "moyen haut-allemand",
  "gn": "guarani",
  "goh": "ancien haut allemand",
  "gom": "konkani de Goa",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gotique",
  "grb": "grebo",
  "grc": "grec ancien",
  "gsw": "suisse allemand",
  "gu": "goudjarati",
  "guc": "wayuu",
  "gur": "gurenne",
  "guz": "gusii",
  "gv": "mannois",
  "gwi": "gwich\u02BCin",
  "ha": "haoussa",
  "hai": "haida",
  "hak": "hakka",
  "haw": "hawa\xEFen",
  "he": "h\xE9breu",
  "hi": "hindi",
  "hif": "hindi fidjien",
  "hil": "hiligaynon",
  "hit": "hittite",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croate",
  "hsb": "haut-sorabe",
  "hsn": "xiang",
  "ht": "cr\xE9ole ha\xEFtien",
  "hu": "hongrois",
  "hup": "hupa",
  "hy": "arm\xE9nien",
  "hz": "h\xE9r\xE9ro",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indon\xE9sien",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "yi du Sichuan",
  "ik": "inupiaq",
  "ilo": "ilocano",
  "inh": "ingouche",
  "io": "ido",
  "is": "islandais",
  "it": "italien",
  "iu": "inuktitut",
  "izh": "ingrien",
  "ja": "japonais",
  "jam": "cr\xE9ole jama\xEFcain",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "matcham\xE9",
  "jpr": "jud\xE9o-persan",
  "jrb": "jud\xE9o-arabe",
  "jut": "jute",
  "jv": "javanais",
  "ka": "g\xE9orgien",
  "kaa": "karakalpak",
  "kab": "kabyle",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabarde",
  "kbl": "kanembou",
  "kcg": "tyap",
  "kde": "makond\xE9",
  "kea": "capverdien",
  "ken": "k\xE9nyang",
  "kfo": "koro",
  "kg": "kikongo",
  "kgp": "caingangue",
  "kha": "khasi",
  "kho": "khotanais",
  "khq": "koyra chiini",
  "khw": "khowar",
  "ki": "kikuyu",
  "kiu": "kirmanjki",
  "kj": "kuanyama",
  "kk": "kazakh",
  "kkj": "kako",
  "kl": "groenlandais",
  "kln": "kalendjin",
  "km": "khmer",
  "kmb": "kimboundou",
  "kn": "kannada",
  "ko": "cor\xE9en",
  "koi": "komi-permiak",
  "kok": "konkani",
  "kos": "kosra\xE9en",
  "kpe": "kpell\xE9",
  "kr": "kanouri",
  "krc": "karatcha\xEF balkar",
  "kri": "krio",
  "krj": "kinaray-a",
  "krl": "car\xE9lien",
  "kru": "kouroukh",
  "ks": "cachemiri",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "kurde",
  "kum": "koumyk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "cornique",
  "ky": "kirghize",
  "la": "latin",
  "lad": "ladino",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxembourgeois",
  "lez": "lezghien",
  "lfn": "lingua franca nova",
  "lg": "ganda",
  "li": "limbourgeois",
  "lij": "ligure",
  "liv": "livonien",
  "lkt": "lakota",
  "lmo": "lombard",
  "ln": "lingala",
  "lo": "lao",
  "lol": "mongo",
  "lou": "cr\xE9ole louisianais",
  "loz": "lozi",
  "lrc": "lori du Nord",
  "lt": "lituanien",
  "ltg": "latgalien",
  "lu": "luba-katanga (kiluba)",
  "lua": "luba-kasa\xEF (ciluba)",
  "lui": "luise\xF1o",
  "lun": "lunda",
  "luo": "luo",
  "lus": "lusha\xEF",
  "luy": "luyia",
  "lv": "letton",
  "lzh": "chinois litt\xE9raire",
  "lzz": "laze",
  "mad": "madurais",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "ma\xEFthili",
  "mak": "makassar",
  "man": "mandingue",
  "mas": "maasa\xEF",
  "mde": "maba",
  "mdf": "mokcha",
  "mdr": "mandar",
  "men": "mend\xE9",
  "mer": "meru",
  "mfe": "cr\xE9ole mauricien",
  "mg": "malgache",
  "mga": "moyen irlandais",
  "mgh": "makua",
  "mgo": "meta\u02BC",
  "mh": "marshallais",
  "mi": "maori",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "mac\xE9donien",
  "ml": "malayalam",
  "mn": "mongol",
  "mnc": "mandchou",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mor\xE9",
  "mr": "marathi",
  "mrj": "mari occidental",
  "ms": "malais",
  "mt": "maltais",
  "mua": "moundang",
  "mul": "multilingue",
  "mus": "creek",
  "mwl": "mirandais",
  "mwr": "marwar\xEE",
  "mwv": "mentawa\xEF",
  "my": "birman",
  "mye": "my\xE8n\xE8",
  "myv": "erzya",
  "mzn": "mazand\xE9rani",
  "na": "nauruan",
  "nan": "minnan",
  "nap": "napolitain",
  "naq": "nama",
  "nb": "norv\xE9gien bokm\xE5l",
  "nd": "nd\xE9b\xE9l\xE9 du Nord",
  "nds": "bas-allemand",
  "nds-NL": "bas-saxon n\xE9erlandais",
  "ne": "n\xE9palais",
  "new": "newari",
  "ng": "ndonga",
  "nia": "niha",
  "niu": "niu\xE9en",
  "njo": "Ao",
  "nl": "n\xE9erlandais",
  "nl-BE": "flamand",
  "nmg": "ngoumba",
  "nn": "norv\xE9gien nynorsk",
  "nnh": "ngiemboon",
  "no": "norv\xE9gien",
  "nog": "noga\xEF",
  "non": "vieux norrois",
  "nov": "novial",
  "nqo": "n\u2019ko",
  "nr": "nd\xE9b\xE9l\xE9 du Sud",
  "nso": "sotho du Nord",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "newar\xEE classique",
  "ny": "chewa",
  "nym": "nyamwezi",
  "nyn": "nyankol\xE9",
  "nyo": "nyoro",
  "nzi": "nzema",
  "oc": "occitan",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "odia",
  "os": "oss\xE8te",
  "osa": "osage",
  "ota": "turc ottoman",
  "pa": "pendjabi",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampangan",
  "pap": "papiamento",
  "pau": "palau",
  "pcd": "picard",
  "pcm": "pidgin nig\xE9rian",
  "pdc": "pennsilfaanisch",
  "pdt": "bas-prussien",
  "peo": "persan ancien",
  "pfl": "allemand palatin",
  "phn": "ph\xE9nicien",
  "pi": "pali",
  "pl": "polonais",
  "pms": "pi\xE9montais",
  "pnt": "pontique",
  "pon": "pohnpei",
  "prg": "prussien",
  "pro": "proven\xE7al ancien",
  "ps": "pachto",
  "pt": "portugais",
  "pt-BR": "portugais br\xE9silien",
  "pt-PT": "portugais europ\xE9en",
  "qu": "quechua",
  "quc": "quich\xE9",
  "qug": "quichua du Haut-Chimborazo",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotongien",
  "rgn": "romagnol",
  "rhg": "rohingya",
  "rif": "rifain",
  "rm": "romanche",
  "rn": "roundi",
  "ro": "roumain",
  "ro-MD": "moldave",
  "rof": "rombo",
  "rom": "romani",
  "rtm": "rotuman",
  "ru": "russe",
  "rue": "ruth\xE8ne",
  "rug": "roviana",
  "rup": "aroumain",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "sanskrit",
  "sad": "sandawe",
  "sah": "iakoute",
  "sam": "aram\xE9en samaritain",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "saz": "saurashtra",
  "sba": "ngambay",
  "sbp": "isangu",
  "sc": "sarde",
  "scn": "sicilien",
  "sco": "\xE9cossais",
  "sd": "sindhi",
  "sdc": "sarde sassarais",
  "sdh": "kurde du Sud",
  "se": "same du Nord",
  "see": "seneca",
  "seh": "cisena",
  "sei": "s\xE9ri",
  "sel": "selkoupe",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "ancien irlandais",
  "sgs": "samogitien",
  "sh": "serbo-croate",
  "shi": "chleuh",
  "shn": "shan",
  "shu": "arabe tchadien",
  "si": "cingalais",
  "sid": "sidamo",
  "sk": "slovaque",
  "sl": "slov\xE8ne",
  "sli": "bas-sil\xE9sien",
  "sly": "s\xE9layar",
  "sm": "samoan",
  "sma": "same du Sud",
  "smj": "same de Lule",
  "smn": "same d\u2019Inari",
  "sms": "same skolt",
  "sn": "shona",
  "snk": "sonink\xE9",
  "so": "somali",
  "sog": "sogdien",
  "sq": "albanais",
  "sr": "serbe",
  "srn": "sranan tongo",
  "srr": "s\xE9r\xE8re",
  "ss": "swati",
  "ssy": "saho",
  "st": "sotho du Sud",
  "stq": "saterlandais",
  "su": "soundanais",
  "suk": "soukouma",
  "sus": "soussou",
  "sux": "sum\xE9rien",
  "sv": "su\xE9dois",
  "sw": "swahili",
  "sw-CD": "swahili du Congo",
  "swb": "comorien",
  "syc": "syriaque classique",
  "syr": "syriaque",
  "szl": "sil\xE9sien",
  "ta": "tamoul",
  "tcy": "toulou",
  "te": "t\xE9lougou",
  "tem": "timn\xE9",
  "teo": "teso",
  "ter": "tereno",
  "tet": "t\xE9toum",
  "tg": "tadjik",
  "th": "tha\xEF",
  "ti": "tigrigna",
  "tig": "tigr\xE9",
  "tiv": "tiv",
  "tk": "turkm\xE8ne",
  "tkl": "tokelau",
  "tkr": "tsakhour",
  "tl": "tagalog",
  "tlh": "klingon",
  "tli": "tlingit",
  "tly": "talysh",
  "tmh": "tamacheq",
  "tn": "tswana",
  "to": "tongien",
  "tog": "tonga nyasa",
  "tpi": "tok pisin",
  "tr": "turc",
  "tru": "touroyo",
  "trv": "taroko",
  "ts": "tsonga",
  "tsd": "tsakonien",
  "tsi": "tsimshian",
  "tt": "tatar",
  "ttt": "tati caucasien",
  "tum": "tumbuka",
  "tvl": "tuvalu",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahitien",
  "tyv": "touvain",
  "tzm": "amazighe de l\u2019Atlas central",
  "udm": "oudmourte",
  "ug": "ou\xEFghour",
  "uga": "ougaritique",
  "uk": "ukrainien",
  "umb": "umbundu",
  "und": "langue ind\xE9termin\xE9e",
  "ur": "ourdou",
  "uz": "ouzbek",
  "vai": "va\xEF",
  "ve": "venda",
  "vec": "v\xE9nitien",
  "vep": "vepse",
  "vi": "vietnamien",
  "vls": "flamand occidental",
  "vmf": "franconien du Main",
  "vo": "volap\xFCk",
  "vot": "vote",
  "vro": "v\xF5ro",
  "vun": "vunjo",
  "wa": "wallon",
  "wae": "walser",
  "wal": "walamo",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof",
  "wuu": "wu",
  "xal": "kalmouk",
  "xh": "xhosa",
  "xmf": "mingr\xE9lien",
  "xog": "soga",
  "yao": "yao",
  "yap": "yapois",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "yiddish",
  "yo": "yoruba",
  "yrl": "nheengatou",
  "yue": "cantonais",
  "za": "zhuang",
  "zap": "zapot\xE8que",
  "zbl": "symboles Bliss",
  "zea": "z\xE9landais",
  "zen": "zenaga",
  "zgh": "amazighe standard marocain",
  "zh": "chinois",
  "zh-Hans": "chinois simplifi\xE9",
  "zh-Hant": "chinois traditionnel",
  "zu": "zoulou",
  "zun": "zu\xF1i",
  "zxx": "sans contenu linguistique",
  "zza": "zazaki"
};

// src/l10n/locale/hi.ts
var hi_default = {
  "aa": "\u0905\u092B\u093C\u093E\u0930",
  "ab": "\u0905\u092C\u094D\u0916\u093C\u093E\u091C\u093C\u093F\u092F\u0928",
  "ace": "\u0905\u091A\u093E\u0907\u0928\u0940\u0938",
  "ach": "\u0905\u0915\u094B\u0932\u0940",
  "ada": "\u0905\u0926\u093E\u0928\u094D\u0917\u092E\u0947",
  "ady": "\u0905\u0926\u093F\u0918\u0947",
  "ae": "\u0905\u0935\u0938\u094D\u0924\u093E\u0908",
  "af": "\u0905\u092B\u093C\u094D\u0930\u0940\u0915\u0940",
  "afh": "\u0905\u092B\u094D\u0930\u093F\u0939\u093F\u0932\u0940",
  "agq": "\u0905\u0917\u094D\u0939\u0947\u092E",
  "ain": "\u0910\u0928\u0942",
  "ak": "\u0905\u0915\u0928",
  "akk": "\u0905\u0915\u094D\u0915\u093E\u0926\u0940",
  "ale": "\u0905\u0932\u0947\u0909\u0924",
  "alt": "\u0926\u0915\u094D\u0937\u093F\u0923\u0940 \u0905\u0932\u094D\u0924\u093E\u0908",
  "am": "\u0905\u092E\u094D\u0939\u0947\u0930\u0940",
  "an": "\u0905\u0930\u094D\u0917\u094B\u0928\u0940",
  "ang": "\u092A\u0941\u0930\u093E\u0928\u0940 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "anp": "\u0905\u0902\u0917\u093F\u0915\u093E",
  "ar": "\u0905\u0930\u092C\u0940",
  "ar-001": "\u0906\u0927\u0941\u0928\u093F\u0915 \u092E\u093E\u0928\u0915 \u0905\u0930\u092C\u0940",
  "arc": "\u0910\u0930\u0947\u092E\u0947\u0915",
  "arn": "\u092E\u093E\u092A\u0942\u091A\u0947",
  "arp": "\u0905\u0930\u093E\u092A\u093E\u0939\u094B",
  "ars": "\u0928\u091C\u094D\u0926\u0940 \u0905\u0930\u092C\u0940",
  "arw": "\u0905\u0930\u093E\u0935\u0915",
  "as": "\u0905\u0938\u092E\u093F\u092F\u093E",
  "asa": "\u0905\u0938\u0941",
  "ast": "\u0905\u0938\u094D\u0924\u0941\u0930\u093F\u092F\u0928",
  "av": "\u0905\u0935\u0947\u0930\u093F\u0915",
  "awa": "\u0905\u0935\u0927\u0940",
  "ay": "\u0906\u092F\u092E\u093E\u0930\u093E",
  "az": "\u0905\u091C\u093C\u0930\u092C\u0948\u091C\u093E\u0928\u0940",
  "ba": "\u092C\u0936\u0916\u093C\u093F\u0930",
  "bal": "\u092C\u0932\u0942\u091A\u0940",
  "ban": "\u092C\u093E\u0932\u093F\u0928\u0940\u0938",
  "bas": "\u092C\u0938\u093E",
  "be": "\u092C\u0947\u0932\u093E\u0930\u0942\u0938\u0940",
  "bej": "\u092C\u0947\u091C\u093E",
  "bem": "\u092C\u0947\u092E\u094D\u092C\u093E",
  "bez": "\u092C\u0947\u0928\u093E",
  "bg": "\u092C\u0941\u0932\u094D\u0917\u093E\u0930\u093F\u092F\u093E\u0908",
  "bgn": "\u092A\u0936\u094D\u091A\u093F\u092E\u0940 \u092C\u0932\u094B\u091A\u0940",
  "bho": "\u092D\u094B\u091C\u092A\u0941\u0930\u0940",
  "bi": "\u092C\u093F\u0938\u094D\u0932\u093E\u092E\u093E",
  "bik": "\u092C\u093F\u0915\u094B\u0932",
  "bin": "\u092C\u093F\u0928\u0940",
  "bla": "\u0938\u093F\u0915\u094D\u0938\u093F\u0915\u093E",
  "bm": "\u092C\u093E\u092E\u094D\u092C\u093E\u0930\u093E",
  "bn": "\u092C\u0902\u0917\u093E\u0932\u0940",
  "bo": "\u0924\u093F\u092C\u094D\u092C\u0924\u0940",
  "br": "\u092C\u094D\u0930\u0947\u091F\u0928",
  "bra": "\u092C\u094D\u0930\u091C",
  "brx": "\u092C\u094B\u0921\u094B",
  "bs": "\u092C\u094B\u0938\u094D\u0928\u093F\u092F\u093E\u0908",
  "bua": "\u092C\u0941\u0930\u093F\u092F\u093E\u0924",
  "bug": "\u092C\u0917\u093F\u0928\u0940\u0938",
  "byn": "\u092C\u094D\u0932\u093F\u0928",
  "ca": "\u0915\u093E\u0924\u093E\u0932\u093E\u0928",
  "cad": "\u0915\u0948\u0921\u094D\u0921\u094B",
  "car": "\u0915\u0948\u0930\u093F\u092C",
  "cch": "\u0905\u0924\u094D\u0938\u092E",
  "ccp": "\u091A\u0915\u092E\u093E",
  "ce": "\u091A\u0947\u091A\u0928",
  "ceb": "\u0938\u093F\u092C\u0941\u0906\u0928\u094B",
  "cgg": "\u0936\u093F\u0917\u093E",
  "ch": "\u0915\u092E\u094B\u0930\u094B",
  "chb": "\u091A\u093F\u092C\u094D\u091A\u093E",
  "chg": "\u091B\u0917\u093E\u0924\u093E\u0908",
  "chk": "\u091A\u0942\u0915\u0940\u0938",
  "chm": "\u092E\u093E\u0930\u0940",
  "chn": "\u091A\u093F\u0928\u0942\u0915 \u091C\u093E\u0930\u0917\u0949\u0928",
  "cho": "\u091A\u094B\u0915\u094D\u0924\u094C",
  "chp": "\u0936\u093F\u092A\u0947\u0935\u094D\u092F\u093E\u0928",
  "chr": "\u091A\u0947\u0930\u094B\u0915\u0940",
  "chy": "\u0936\u0947\u092F\u0947\u0928\u094D\u0928",
  "ckb": "\u0938\u094B\u0930\u093E\u0928\u0940 \u0915\u0941\u0930\u094D\u0926\u093F\u0936",
  "co": "\u0915\u094B\u0930\u094D\u0938\u0940\u0915\u0928",
  "cop": "\u0915\u0949\u092A\u094D\u091F\u093F\u0915",
  "cr": "\u0915\u094D\u0930\u0940",
  "crh": "\u0915\u094D\u0930\u0940\u092E\u0940\u0928 \u0924\u0941\u0930\u094D\u0915\u0940",
  "crs": "\u0938\u0947\u0938\u0947\u0932\u094D\u0935\u093E \u0915\u094D\u0930\u093F\u0913\u0932 \u092B\u094D\u0930\u0947\u0902\u091A",
  "cs": "\u091A\u0947\u0915",
  "csb": "\u0915\u093E\u0936\u0941\u092C\u093F\u092F\u0928",
  "cu": "\u091A\u0930\u094D\u091A \u0938\u093E\u0932\u094D\u0935\u093F\u0915",
  "cv": "\u091A\u0942\u0935\u093E\u0936",
  "cy": "\u0935\u0947\u0932\u094D\u0936",
  "da": "\u0921\u0947\u0928\u093F\u0936",
  "dak": "\u0926\u093E\u0915\u094B\u0924\u093E",
  "dar": "\u0926\u093E\u0930\u094D\u0917\u0935\u093E",
  "dav": "\u0924\u0948\u0924\u093E",
  "de": "\u091C\u0930\u094D\u092E\u0928",
  "de-AT": "\u0911\u0938\u094D\u091F\u094D\u0930\u093F\u092F\u093E\u0908 \u091C\u0930\u094D\u092E\u0928",
  "de-CH": "\u0938\u094D\u0935\u093F\u0938 \u0909\u091A\u094D\u091A \u091C\u0930\u094D\u092E\u0928",
  "del": "\u0921\u093F\u0932\u0948\u0935\u0947\u092F\u0930",
  "den": "\u0938\u094D\u0932\u0947\u0935",
  "dgr": "\u0921\u094B\u0917\u094D\u0930\u093F\u092C",
  "din": "\u0926\u093F\u0928\u094D\u0915\u093E",
  "dje": "\u091D\u093E\u0930\u094D\u092E\u093E",
  "doi": "\u0921\u094B\u0917\u0930\u0940",
  "dsb": "\u0928\u093F\u091A\u0932\u093E \u0938\u0949\u0930\u094D\u092C\u093F\u092F\u0928",
  "dua": "\u0926\u0941\u0906\u0932\u093E",
  "dum": "\u092E\u0927\u094D\u092F\u0915\u093E\u0932\u0940\u0928 \u092A\u0941\u0930\u094D\u0924\u0917\u093E\u0932\u0940",
  "dv": "\u0926\u093F\u0935\u0947\u0939\u0940",
  "dyo": "\u091C\u094B\u0932\u093E-\u092B\u094B\u0902\u0908",
  "dyu": "\u0921\u094D\u092F\u0941\u0932\u093E",
  "dz": "\u091C\u093C\u094B\u0928\u094D\u0917\u0916\u093E",
  "dzg": "\u0926\u091C\u093C\u093E\u0917\u093E",
  "ebu": "\u090F\u092E\u094D\u092C\u0941",
  "ee": "\u0908\u0935\u0947",
  "efi": "\u090F\u092B\u093F\u0915",
  "egy": "\u092A\u094D\u0930\u093E\u091A\u0940\u0928 \u092E\u093F\u0938\u094D\u0930\u0940",
  "eka": "\u090F\u0915\u093E\u091C\u0941\u0915",
  "el": "\u092F\u0942\u0928\u093E\u0928\u0940",
  "elx": "\u090F\u0932\u093E\u092E\u093E\u0907\u091F",
  "en": "\u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "en-AU": "\u0911\u0938\u094D\u091F\u094D\u0930\u0947\u0932\u093F\u092F\u093E\u0908 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "en-CA": "\u0915\u0928\u093E\u0921\u093E\u0908 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "en-GB": "\u092C\u094D\u0930\u093F\u091F\u093F\u0936 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "en-US": "\u0905\u092E\u0947\u0930\u093F\u0915\u0940 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "enm": "\u092E\u0927\u094D\u092F\u0915\u093E\u0932\u0940\u0928 \u0905\u0902\u0917\u094D\u0930\u0947\u091C\u093C\u0940",
  "eo": "\u090F\u0938\u094D\u092A\u0947\u0930\u0947\u0902\u0924\u094B",
  "es": "\u0938\u094D\u092A\u0947\u0928\u0940",
  "es-419": "\u0932\u0948\u091F\u093F\u0928 \u0905\u092E\u0947\u0930\u093F\u0915\u0940 \u0938\u094D\u092A\u0947\u0928\u093F\u0936",
  "es-ES": "\u092F\u0942\u0930\u094B\u092A\u0940\u092F \u0938\u094D\u092A\u0947\u0928\u093F\u0936",
  "es-MX": "\u092E\u0948\u0915\u094D\u0938\u093F\u0915\u0928 \u0938\u094D\u092A\u0947\u0928\u093F\u0936",
  "et": "\u090F\u0938\u094D\u091F\u094B\u0928\u093F\u092F\u093E\u0908",
  "eu": "\u092C\u093E\u0938\u094D\u0915",
  "ewo": "\u0907\u0935\u094B\u0928\u094D\u0921\u094B",
  "fa": "\u092B\u093C\u093E\u0930\u0938\u0940",
  "fa-AF": "\u0926\u093E\u0930\u0940",
  "fan": "\u092B\u0948\u0928\u094D\u0917",
  "fat": "\u092B\u0928\u094D\u091F\u0940",
  "ff": "\u092B\u0941\u0932\u093E\u0939",
  "fi": "\u092B\u093C\u093F\u0928\u093F\u0936",
  "fil": "\u092B\u093C\u093F\u0932\u093F\u092A\u0940\u0928\u094B",
  "fj": "\u092B\u093F\u091C\u093F\u092F\u0928",
  "fo": "\u092B\u093C\u0948\u0930\u094B\u0907\u091C\u093C",
  "fon": "\u092B\u0949\u0928",
  "fr": "\u092B\u093C\u094D\u0930\u0947\u0902\u091A",
  "fr-CA": "\u0915\u0928\u093E\u0921\u093E\u0908 \u092B\u093C\u094D\u0930\u0947\u0902\u091A",
  "fr-CH": "\u0938\u094D\u0935\u093F\u0938 \u092B\u093C\u094D\u0930\u0947\u0902\u091A",
  "frc": "\u0915\u0947\u091C\u0928 \u092B\u093C\u094D\u0930\u0947\u0902\u091A",
  "frm": "\u092E\u0927\u094D\u092F\u0915\u093E\u0932\u0940\u0928 \u092B\u093C\u094D\u0930\u093E\u0902\u0938\u0940\u0938\u0940",
  "fro": "\u092A\u0941\u0930\u093E\u0924\u0928 \u092B\u093C\u094D\u0930\u093E\u0902\u0938\u0940\u0938\u0940",
  "frr": "\u0909\u0924\u094D\u0924\u0930\u0940 \u092B\u093C\u094D\u0930\u0940\u0938\u093F\u092F\u093E\u0908",
  "frs": "\u092A\u0942\u0930\u094D\u0935\u0940 \u092B\u093C\u094D\u0930\u0940\u0938\u093F\u092F\u093E\u0908",
  "fur": "\u092B\u094D\u0930\u0940\u092F\u0941\u0932\u0940\u092F\u093E\u0928",
  "fy": "\u092A\u0936\u094D\u091A\u093F\u092E\u0940 \u092B\u093C\u094D\u0930\u093F\u0938\u093F\u092F\u093E\u0908",
  "ga": "\u0906\u092F\u0930\u093F\u0936",
  "gaa": "\u0917\u093E",
  "gag": "\u0917\u093E\u0917\u094C\u091C\u093C",
  "gay": "\u0917\u093E\u092F\u094B",
  "gba": "\u0917\u094D\u092C\u093E\u092F\u093E",
  "gd": "\u0938\u094D\u0915\u0949\u091F\u093F\u0936 \u0917\u093E\u090F\u0932\u093F\u0915",
  "gez": "\u0917\u0940\u091C\u093C",
  "gil": "\u0917\u093F\u0932\u094D\u092C\u0930\u0924\u0940\u0938",
  "gl": "\u0917\u0948\u0932\u093F\u0936\u093F\u092F\u0928",
  "gmh": "\u092E\u0927\u094D\u092F\u0915\u093E\u0932\u0940\u0928 \u0939\u093E\u0907 \u091C\u0930\u094D\u092E\u0928",
  "gn": "\u0917\u0941\u0906\u0930\u093E\u0928\u0940",
  "goh": "\u092A\u0941\u0930\u093E\u0924\u0928 \u0939\u093E\u0907 \u091C\u0930\u094D\u092E\u0928",
  "gon": "\u0917\u093E\u0901\u0921\u0940",
  "gor": "\u0917\u094B\u0930\u094B\u0928\u094D\u0924\u093E\u0932\u094B",
  "got": "\u0917\u0949\u0925\u093F\u0915",
  "grb": "\u0917\u094D\u0930\u0947\u092C\u094B",
  "grc": "\u092A\u094D\u0930\u093E\u091A\u0940\u0928 \u092F\u0942\u0928\u093E\u0928\u0940",
  "gsw": "\u0938\u094D\u0935\u093F\u0938 \u091C\u0930\u094D\u092E\u0928",
  "gu": "\u0917\u0941\u091C\u0930\u093E\u0924\u0940",
  "guz": "\u0917\u0941\u0938\u0940",
  "gv": "\u092E\u0948\u0902\u0915\u094D\u0938",
  "gwi": "\u0917\u094D\u0935\u093F\u091A\u0907\u0928",
  "ha": "\u0939\u094C\u0938\u093E",
  "hai": "\u0939\u0948\u0921\u093E",
  "haw": "\u0939\u0935\u093E\u0908",
  "he": "\u0939\u093F\u092C\u094D\u0930\u0942",
  "hi": "\u0939\u093F\u0928\u094D\u0926\u0940",
  "hil": "\u0939\u093F\u0932\u093F\u0917\u0947\u0928\u0928",
  "hit": "\u0939\u093F\u0924\u093E\u0907\u0924",
  "hmn": "\u0939\u094D\u092E\u0949\u0902\u0917",
  "ho": "\u0939\u093F\u0930\u0940 \u092E\u094B\u091F\u0942",
  "hr": "\u0915\u094D\u0930\u094B\u090F\u0936\u093F\u092F\u093E\u0908",
  "hsb": "\u090A\u092A\u0930\u0940 \u0938\u0949\u0930\u094D\u092C\u093F\u092F\u0928",
  "ht": "\u0939\u0948\u0924\u093F\u092F\u093E\u0908",
  "hu": "\u0939\u0902\u0917\u0947\u0930\u093F\u092F\u093E\u0908",
  "hup": "\u0939\u0942\u092A\u093E",
  "hy": "\u0906\u0930\u094D\u092E\u0947\u0928\u093F\u092F\u093E\u0908",
  "hz": "\u0939\u0930\u0948\u0930\u094B",
  "ia": "\u0907\u0902\u091F\u0930\u0932\u093F\u0902\u0917\u0941\u0906",
  "iba": "\u0907\u092C\u093E\u0928",
  "ibb": "\u0907\u092C\u093F\u092C\u093F\u092F\u094B",
  "id": "\u0907\u0902\u0921\u094B\u0928\u0947\u0936\u093F\u092F\u093E\u0908",
  "ie": "\u0908\u0928\u094D\u091F\u0930\u0932\u093F\u0902\u0917\u0941\u0907",
  "ig": "\u0908\u0917\u094D\u092C\u094B",
  "ii": "\u0938\u093F\u091A\u0941\u0906\u0928 \u092F\u0940",
  "ik": "\u0907\u0928\u0941\u092A\u093F\u092F\u093E\u0915\u094D",
  "ilo": "\u0907\u0932\u094B\u0915\u094B",
  "inh": "\u0907\u0902\u0917\u0941\u0936",
  "io": "\u0907\u0921\u094C",
  "is": "\u0906\u0907\u0938\u0932\u0948\u0902\u0921\u093F\u0915",
  "it": "\u0907\u0924\u093E\u0932\u0935\u0940",
  "iu": "\u0907\u0928\u0942\u0915\u0940\u091F\u0942\u0924\u094D",
  "ja": "\u091C\u093E\u092A\u093E\u0928\u0940",
  "jbo": "\u0932\u094B\u091C\u094D\u092C\u093E\u0928",
  "jgo": "\u0928\u0917\u094B\u0902\u092C\u093E",
  "jmc": "\u092E\u0948\u0915\u0939\u0948\u092E\u0947",
  "jpr": "\u091C\u0941\u0926\u0947\u0913-\u092A\u0930\u094D\u0936\u093F\u092F\u0928",
  "jrb": "\u091C\u0941\u0926\u0947\u0913-\u0905\u0930\u0947\u092C\u093F\u0915",
  "jv": "\u091C\u093E\u0935\u093E\u0928\u0940\u091C\u093C",
  "ka": "\u091C\u0949\u0930\u094D\u091C\u093F\u092F\u093E\u0908",
  "kaa": "\u0915\u093E\u0930\u093E-\u0915\u0932\u094D\u092A\u0915",
  "kab": "\u0915\u092C\u093E\u0907\u0932",
  "kac": "\u0915\u093E\u091A\u093F\u0928",
  "kaj": "\u091C\u094D\u091C\u0941",
  "kam": "\u0915\u092E\u094D\u092C\u093E",
  "kaw": "\u0915\u093E\u0935\u0940",
  "kbd": "\u0915\u092C\u093E\u0930\u094D\u0921\u093F\u092F\u0928",
  "kcg": "\u0924\u094D\u092F\u093E\u092A",
  "kde": "\u092E\u0948\u0915\u094B\u0902\u0921",
  "kea": "\u0915\u093E\u092C\u0941\u0935\u0947\u0930\u094D\u0926\u093F\u092F\u093E\u0928\u0941",
  "kfo": "\u0915\u094B\u0930\u094B",
  "kg": "\u0915\u094B\u0902\u0917\u094B",
  "kgp": "kgp",
  "kha": "\u0916\u093E\u0938\u0940",
  "kho": "\u0916\u094B\u0924\u093E\u0928\u0940\u0938",
  "khq": "\u0915\u094B\u092F\u0930\u093E \u091A\u0940\u0928\u0940",
  "ki": "\u0915\u093F\u0915\u0941\u092F\u0942",
  "kj": "\u0915\u094D\u0935\u093E\u0928\u094D\u092F\u093E\u092E\u093E",
  "kk": "\u0915\u091C\u093C\u093E\u0916\u093C",
  "kkj": "\u0915\u093E\u0915\u094B",
  "kl": "\u0915\u0932\u093E\u0932\u0940\u0938\u0941\u0924",
  "kln": "\u0915\u0932\u0947\u0902\u091C\u093F\u0928",
  "km": "\u0916\u092E\u0947\u0930",
  "kmb": "\u0915\u093F\u092E\u094D\u092C\u0928\u094D\u0926\u0941",
  "kn": "\u0915\u0928\u094D\u0928\u0921\u093C",
  "ko": "\u0915\u094B\u0930\u093F\u092F\u093E\u0908",
  "koi": "\u0915\u094B\u092E\u0940-\u092A\u0930\u094D\u092E\u092F\u093E\u0915",
  "kok": "\u0915\u094B\u0902\u0915\u0923\u0940",
  "kos": "\u0915\u094B\u0938\u0930\u0948\u0928",
  "kpe": "\u0915\u094D\u092A\u0947\u0932",
  "kr": "\u0915\u0928\u0941\u0930\u0940",
  "krc": "\u0915\u0930\u093E\u091A\u092F-\u092C\u0932\u094D\u0915\u093E\u0930",
  "krl": "\u0915\u0930\u0947\u0932\u093F\u092F\u0928",
  "kru": "\u0915\u0941\u0930\u0942\u0916",
  "ks": "\u0915\u0936\u094D\u092E\u0940\u0930\u0940",
  "ksb": "\u0936\u092E\u094D\u092C\u093E\u0932\u093E",
  "ksf": "\u092C\u092B\u093F\u0906",
  "ksh": "\u0915\u094B\u0932\u094B\u0928\u093F\u092F\u093E\u0908",
  "ku": "\u0915\u0941\u0930\u094D\u0926\u093F\u0936",
  "kum": "\u0915\u0941\u092E\u0940\u0915",
  "kut": "\u0915\u094D\u092F\u0942\u0924\u0928\u093E\u0908",
  "kv": "\u0915\u094B\u092E\u0940",
  "kw": "\u0915\u094B\u0930\u094D\u0928\u093F\u0936",
  "ky": "\u0915\u093F\u0930\u094D\u0917\u0940\u091C\u093C",
  "la": "\u0932\u0948\u091F\u093F\u0928",
  "lad": "\u0932\u093E\u0926\u0940\u0928\u094B",
  "lag": "\u0932\u093E\u0902\u0917\u093F",
  "lah": "\u0932\u093E\u0939\u094D\u0928\u094D\u0921\u093E",
  "lam": "\u0932\u093E\u092E\u094D\u092C\u093E",
  "lb": "\u0932\u0917\u094D\u091C\u093C\u092E\u092C\u0930\u094D\u0917\u0940",
  "lez": "\u0932\u0947\u091C\u093C\u094D\u0918\u0940\u092F\u0928",
  "lg": "\u0917\u093E\u0902\u0921\u093E",
  "li": "\u0932\u093F\u0902\u092C\u0930\u094D\u0917\u093F\u0936",
  "lij": "lij",
  "lkt": "\u0932\u0948\u0915\u094B\u091F\u093E",
  "ln": "\u0932\u093F\u0902\u0917\u093E\u0932\u093E",
  "lo": "\u0932\u093E\u0913",
  "lol": "\u092E\u094B\u0902\u0917\u094B",
  "lou": "\u0932\u0941\u0908\u091C\u093C\u093F\u092F\u093E\u0928\u093E \u0915\u094D\u0930\u093F\u092F\u094B\u0932",
  "loz": "\u0932\u094B\u091C\u093C\u0940",
  "lrc": "\u0909\u0924\u094D\u0924\u0930\u0940 \u0932\u0942\u0930\u0940",
  "lt": "\u0932\u093F\u0925\u0941\u0906\u0928\u093F\u092F\u093E\u0908",
  "lu": "\u0932\u094D\u092F\u0942\u092C\u093E-\u0915\u091F\u093E\u0902\u0917\u093E",
  "lua": "\u0932\u094D\u092F\u0942\u092C\u093E-\u0932\u0941\u0932\u0941\u0906",
  "lui": "\u0932\u0941\u0907\u0938\u0947\u0928\u094B",
  "lun": "\u0932\u0941\u0928\u094D\u0921\u093E",
  "luo": "\u0932\u094D\u092F\u0941\u0913",
  "lus": "\u092E\u093F\u091C\u093C\u094B",
  "luy": "\u0932\u094D\u092F\u0941\u0908\u0906",
  "lv": "\u0932\u093E\u0924\u0935\u093F\u092F\u093E\u0908",
  "mad": "\u092E\u093E\u0926\u0941\u0930\u0940\u0938",
  "mag": "\u092E\u0917\u0939\u0940",
  "mai": "\u092E\u0948\u0925\u093F\u0932\u0940",
  "mak": "\u092E\u0915\u093E\u0938\u0930",
  "man": "\u092E\u0928\u094D\u0921\u093F\u0928\u094D\u0917\u094B",
  "mas": "\u092E\u0938\u093E\u0908",
  "mdf": "\u092E\u094B\u0915\u094D\u0937",
  "mdr": "\u092E\u0902\u0926\u093E\u0930",
  "men": "\u092E\u0947\u0928\u094D\u0921\u0947",
  "mer": "\u092E\u0947\u0930\u0941",
  "mfe": "\u092E\u094B\u0930\u0940\u0938\u094D\u092F\u0947\u0928",
  "mg": "\u092E\u093E\u0932\u093E\u0917\u093E\u0938\u0940",
  "mga": "\u092E\u0927\u094D\u092F\u0915\u093E\u0932\u0940\u0928 \u0906\u0907\u0930\u093F\u0936",
  "mgh": "\u092E\u0948\u0916\u0941\u0935\u093E-\u092E\u0940\u091F\u094D\u091F\u094B",
  "mgo": "\u092E\u0947\u091F\u093E",
  "mh": "\u092E\u093E\u0930\u094D\u0936\u0932\u0940\u091C\u093C",
  "mi": "\u092E\u093E\u0913\u0930\u0940",
  "mic": "\u092E\u093F\u0915\u092E\u0948\u0915",
  "min": "\u092E\u093F\u0928\u093E\u0902\u0917\u094D\u0915\u093E\u092C\u093E\u0909",
  "mk": "\u092E\u0915\u0926\u0942\u0928\u093F\u092F\u093E\u0908",
  "ml": "\u092E\u0932\u092F\u093E\u0932\u092E",
  "mn": "\u092E\u0902\u0917\u094B\u0932\u093F\u092F\u093E\u0908",
  "mnc": "\u092E\u0928\u094D\u091A\u0941",
  "mni": "\u092E\u0923\u093F\u092A\u0941\u0930\u0940",
  "moh": "\u092E\u094B\u0939\u094C\u0915",
  "mos": "\u092E\u094B\u0938\u094D\u0938\u0940",
  "mr": "\u092E\u0930\u093E\u0920\u0940",
  "ms": "\u092E\u0932\u092F",
  "mt": "\u092E\u093E\u0932\u094D\u091F\u0940\u091C\u093C",
  "mua": "\u092E\u0941\u0902\u0921\u0948\u0902\u0917",
  "mul": "\u090F\u0915\u093E\u0927\u093F\u0915 \u092D\u093E\u0937\u093E\u090F\u0901",
  "mus": "\u0915\u094D\u0930\u0940\u0915",
  "mwl": "\u092E\u093F\u0930\u093E\u0902\u0921\u0940",
  "mwr": "\u092E\u093E\u0930\u0935\u093E\u0921\u093C\u0940",
  "my": "\u092C\u0930\u094D\u092E\u0940\u091C\u093C",
  "myv": "\u090F\u0930\u094D\u091C\u093C\u092F\u093E",
  "mzn": "\u092E\u093E\u091C\u093C\u0928\u094D\u0926\u0947\u0930\u093E\u0928\u0940",
  "na": "\u0928\u093E\u0909\u0930\u0942",
  "nan": "\u092E\u093F\u0928 \u0928\u093E\u0928",
  "nap": "\u0928\u0940\u092A\u094B\u0932\u093F\u091F\u0928",
  "naq": "\u0928\u093E\u092E\u093E",
  "nb": "\u0928\u0949\u0930\u094D\u0935\u0947\u091C\u093F\u092F\u093E\u0908 \u092C\u094B\u0915\u092E\u093E\u0932",
  "nd": "\u0909\u0924\u094D\u0924\u0930\u0940 \u0926\u0947\u092C\u0947\u0932",
  "nds": "\u0928\u093F\u091A\u0932\u093E \u091C\u0930\u094D\u092E\u0928",
  "nds-NL": "\u0928\u093F\u091A\u0932\u0940 \u0938\u0948\u0915\u094D\u0938\u0928",
  "ne": "\u0928\u0947\u092A\u093E\u0932\u0940",
  "new": "\u0928\u0947\u0935\u093E\u0921\u093C\u0940",
  "ng": "\u0921\u094B\u0928\u094D\u0917\u093E",
  "nia": "\u0928\u093F\u092F\u093E\u0938",
  "niu": "\u0928\u093F\u092F\u0941\u0906\u0928",
  "nl": "\u0921\u091A",
  "nl-BE": "\u092B\u093C\u094D\u0932\u0947\u092E\u093F\u0936",
  "nmg": "\u0915\u094D\u0935\u093E\u0938\u093F\u0913",
  "nn": "\u0928\u0949\u0930\u094D\u0935\u0947\u091C\u093F\u092F\u093E\u0908 \u0928\u0949\u092F\u0928\u0949\u0930\u094D\u0938\u094D\u0915",
  "nnh": "\u0917\u0948\u092E\u094D\u092C\u0942",
  "no": "\u0928\u0949\u0930\u094D\u0935\u0947\u091C\u093F\u092F\u093E\u0908",
  "nog": "\u0928\u094B\u0917\u093E\u0908",
  "non": "\u092A\u0941\u0930\u093E\u0928\u093E \u0928\u0949\u0930\u094D\u0938",
  "nqo": "\u090F\u0928\u094D\u0915\u094B",
  "nr": "\u0926\u0915\u094D\u0937\u093F\u0923 \u0926\u0947\u092C\u0947\u0932",
  "nso": "\u0909\u0924\u094D\u0924\u0930\u0940 \u0938\u094B\u0925\u094B",
  "nus": "\u0928\u0941\u090F\u0930",
  "nv": "\u0928\u093E\u0935\u093E\u091C\u094B",
  "nwc": "\u092A\u093E\u0930\u092E\u094D\u092A\u0930\u093F\u0915 \u0928\u0947\u0935\u093E\u0930\u0940",
  "ny": "\u0928\u094D\u092F\u093E\u0928\u091C\u093E",
  "nym": "\u0928\u094D\u092F\u093E\u092E\u0935\u0947\u091C\u093C\u0940",
  "nyn": "\u0928\u094D\u092F\u093E\u0928\u0915\u094B\u0932",
  "nyo": "\u0928\u094D\u092F\u094B\u0930\u094B",
  "nzi": "\u0928\u094D\u091C\u093C\u0940\u092E\u093E",
  "oc": "\u0913\u0938\u0940\u091F\u093E\u0928",
  "oj": "\u0913\u091C\u093F\u092C\u094D\u0935\u093E",
  "om": "\u0913\u0930\u094B\u092E\u094B",
  "or": "\u0909\u0921\u093C\u093F\u092F\u093E",
  "os": "\u0913\u0938\u094D\u0938\u0947\u091F\u093F\u0915",
  "osa": "\u0913\u0938\u0947\u091C",
  "ota": "\u0913\u091F\u094B\u092E\u093E\u0928 \u0924\u0941\u0930\u094D\u0915\u093F\u0936",
  "pa": "\u092A\u0902\u091C\u093E\u092C\u0940",
  "pag": "\u092A\u0902\u0917\u093E\u0938\u0940\u0928\u093E\u0928",
  "pal": "\u092A\u093E\u0939\u094D\u0932\u093E\u0935\u0940",
  "pam": "\u092A\u093E\u092E\u094D\u092A\u093E\u0928\u094D\u0917\u093E",
  "pap": "\u092A\u093E\u092A\u093F\u092F\u093E\u092E\u0947\u0928\u094D\u091F\u094B",
  "pau": "\u092A\u0932\u094B\u0909\u0906\u0928",
  "pcm": "\u0928\u093E\u0907\u091C\u0940\u0930\u093F\u092F\u093E\u0908 \u092A\u093F\u0921\u0917\u093F\u0928",
  "peo": "\u092A\u0941\u0930\u093E\u0928\u0940 \u092B\u093E\u0930\u0938\u0940",
  "phn": "\u092B\u094B\u090F\u0928\u093F\u0936\u093F\u092F\u0928",
  "pi": "\u092A\u093E\u0932\u0940",
  "pl": "\u092A\u094B\u0932\u093F\u0936",
  "pon": "\u092A\u094B\u0939\u094D\u0928\u092A\u093F\u090F\u0928",
  "prg": "\u092A\u094D\u0930\u0941\u0936\u093F\u092F\u093E\u0908",
  "pro": "\u092A\u0941\u0930\u093E\u0928\u0940 \u092A\u094D\u0930\u094B\u0935\u0947\u0928\u094D\u0938\u0932",
  "ps": "\u092A\u0936\u094D\u0924\u094B",
  "pt": "\u092A\u0941\u0930\u094D\u0924\u0917\u093E\u0932\u0940",
  "pt-BR": "\u092C\u094D\u0930\u093E\u091C\u093C\u0940\u0932\u0940 \u092A\u0941\u0930\u094D\u0924\u0917\u093E\u0932\u0940",
  "pt-PT": "\u092F\u0942\u0930\u094B\u092A\u0940\u092F \u092A\u0941\u0930\u094D\u0924\u0917\u093E\u0932\u0940",
  "qu": "\u0915\u094D\u0935\u0947\u091A\u0941\u0906",
  "quc": "\u0915\u093F\u0936",
  "raj": "\u0930\u093E\u091C\u0938\u094D\u0925\u093E\u0928\u0940",
  "rap": "\u0930\u093E\u092A\u093E\u0928\u0941\u0908",
  "rar": "\u0930\u093E\u0930\u094B\u0924\u094B\u0902\u0917\u0928",
  "rhg": "\u0930\u094B\u0939\u093F\u0902\u0917\u094D\u092F\u093E",
  "rm": "\u0930\u094B\u092E\u093E\u0928\u094D\u0936",
  "rn": "\u0930\u0941\u0928\u094D\u0926\u0940",
  "ro": "\u0930\u094B\u092E\u093E\u0928\u093F\u092F\u093E\u0908",
  "ro-MD": "\u092E\u094B\u0932\u0921\u093E\u0935\u093F\u092F\u0928",
  "rof": "\u0930\u094B\u092E\u094D\u092C\u094B",
  "rom": "\u0930\u094B\u092E\u093E\u0928\u0940",
  "ru": "\u0930\u0942\u0938\u0940",
  "rup": "\u0905\u0930\u094B\u092E\u093E\u0928\u093F\u092F\u0928",
  "rw": "\u0915\u093F\u0928\u094D\u092F\u093E\u0930\u0935\u093E\u0902\u0921\u093E",
  "rwk": "\u0930\u0935\u093E",
  "sa": "\u0938\u0902\u0938\u094D\u0915\u0943\u0924",
  "sad": "\u0938\u0928\u094D\u0921\u093E\u0935\u0947",
  "sah": "\u092F\u093E\u0915\u0942\u0924",
  "sam": "\u0938\u093E\u092E\u0948\u0930\u093F\u091F\u0928 \u0905\u0930\u0948\u092E\u093F\u0915",
  "saq": "\u0938\u0948\u092E\u094D\u092C\u0941\u0930\u0941",
  "sas": "\u0938\u093E\u0938\u093E\u0915",
  "sat": "\u0938\u0902\u0925\u093E\u0932\u0940",
  "sba": "\u0928\u094D\u0917\u093E\u092E\u094D\u092C\u0947",
  "sbp": "\u0938\u0948\u0902\u0917\u0941",
  "sc": "\u0938\u093E\u0930\u094D\u0926\u093F\u0928\u093F\u092F\u0928",
  "scn": "\u0938\u093F\u0938\u093F\u0932\u093F\u092F\u0928",
  "sco": "\u0938\u094D\u0915\u0949\u091F\u094D\u0938",
  "sd": "\u0938\u093F\u0902\u0927\u0940",
  "sdh": "\u0926\u0915\u094D\u0937\u093F\u0923\u0940 \u0915\u093E\u0930\u094D\u0921\u093F\u0936",
  "se": "\u0928\u0949\u0930\u094D\u0926\u0928 \u0938\u093E\u092E\u0940",
  "seh": "\u0938\u0947\u0928\u093E",
  "sel": "\u0938\u0947\u0932\u094D\u0915\u092A",
  "ses": "\u0915\u094B\u092F\u0930\u093E\u092C\u094B\u0930\u094B \u0938\u0947\u0928\u094D\u0928\u0940",
  "sg": "\u0938\u093E\u0902\u0917\u094B",
  "sga": "\u092A\u0941\u0930\u093E\u0928\u0940 \u0906\u0907\u0930\u093F\u0936",
  "sh": "\u0938\u0947\u0930\u094D\u092C\u094B-\u0915\u094D\u0930\u094B\u090F\u0936\u093F\u092F\u093E\u0908",
  "shi": "\u0924\u0948\u091A\u0947\u0932\u094D\u0939\u093F\u0924",
  "shn": "\u0936\u0948\u0928",
  "si": "\u0938\u093F\u0902\u0939\u0932\u0940",
  "sid": "\u0938\u093F\u0926\u093E\u092E\u094B",
  "sk": "\u0938\u094D\u0932\u094B\u0935\u093E\u0915",
  "sl": "\u0938\u094D\u0932\u094B\u0935\u0947\u0928\u093F\u092F\u093E\u0908",
  "sm": "\u0938\u093E\u092E\u094B\u0928",
  "sma": "\u0926\u0915\u094D\u0937\u093F\u0923\u0940 \u0938\u093E\u092E\u0940",
  "smj": "\u0932\u094D\u092F\u0941\u0932 \u0938\u093E\u092E\u0940",
  "smn": "\u0907\u0928\u093E\u0930\u0940 \u0938\u093E\u092E\u0940",
  "sms": "\u0938\u094D\u0915\u094B\u0932\u094D\u091F \u0938\u093E\u092E\u0940",
  "sn": "\u0936\u094B\u0923\u093E",
  "snk": "\u0938\u094B\u0928\u093F\u0928\u094D\u0915\u0947",
  "so": "\u0938\u094B\u092E\u093E\u0932\u0940",
  "sog": "\u0938\u094B\u0917\u094D\u0921\u093F\u090F\u0928",
  "sq": "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E\u0908",
  "sr": "\u0938\u0930\u094D\u092C\u093F\u092F\u093E\u0908",
  "srn": "\u0938\u094D\u0930\u093E\u0928\u093E\u0928 \u091F\u0949\u0928\u094D\u0917\u094B",
  "srr": "\u0938\u0947\u0930\u0947\u0930",
  "ss": "\u0938\u094D\u0935\u093E\u0924\u0940",
  "ssy": "\u0938\u093E\u0939\u094B",
  "st": "\u0926\u0915\u094D\u0937\u093F\u0923\u0940 \u0938\u0947\u0938\u0947\u0925\u094B",
  "su": "\u0938\u0941\u0902\u0921\u093E\u0928\u0940",
  "suk": "\u0938\u0941\u0915\u0941\u092E\u093E",
  "sus": "\u0938\u0941\u0938\u0941",
  "sux": "\u0938\u0941\u092E\u0947\u0930\u093F\u092F\u0928",
  "sv": "\u0938\u094D\u0935\u0940\u0921\u093F\u0936",
  "sw": "\u0938\u094D\u0935\u093E\u0939\u093F\u0932\u0940",
  "sw-CD": "\u0915\u093E\u0902\u0917\u094B \u0938\u094D\u0935\u093E\u0939\u093F\u0932\u0940",
  "swb": "\u0915\u094B\u092E\u094B\u0930\u093F\u092F\u0928",
  "syc": "\u0915\u094D\u0932\u093E\u0938\u093F\u0915\u0932 \u0938\u093F\u0930\u093F\u090F\u0915",
  "syr": "\u0938\u093F\u0930\u093F\u090F\u0915",
  "ta": "\u0924\u092E\u093F\u0932",
  "te": "\u0924\u0947\u0932\u0941\u0917\u0942",
  "tem": "\u091F\u093F\u092E\u094D\u0928\u0947",
  "teo": "\u091F\u0947\u0938\u094B",
  "ter": "\u0924\u0947\u0930\u0947\u0928\u094B",
  "tet": "\u0924\u0947\u0924\u0941\u092E",
  "tg": "\u0924\u093E\u091C\u093F\u0915",
  "th": "\u0925\u093E\u0908",
  "ti": "\u0924\u093F\u0917\u094D\u0930\u0940\u0928\u094D\u092F\u093E",
  "tig": "\u091F\u093E\u0907\u0917\u094D\u0930\u0947",
  "tiv": "\u0924\u093F\u0935",
  "tk": "\u0924\u0941\u0930\u094D\u0915\u092E\u0947\u0928",
  "tkl": "\u0924\u094B\u0915\u0947\u0932\u093E\u090A",
  "tl": "\u091F\u0948\u0917\u0932\u0949\u0917",
  "tlh": "\u0915\u094D\u0932\u093F\u0902\u0917\u0928",
  "tli": "\u0924\u094D\u0932\u093F\u0902\u0917\u093F\u0924",
  "tmh": "\u0924\u093E\u092E\u093E\u0936\u0947\u0915",
  "tn": "\u0938\u0947\u0924\u094D\u0938\u094D\u0935\u093E\u0928\u093E",
  "to": "\u091F\u094B\u0902\u0917\u0928",
  "tog": "\u0928\u094D\u092F\u093E\u0938\u093E \u091F\u094B\u0928\u094D\u0917\u093E",
  "tpi": "\u091F\u094B\u0915 \u092A\u093F\u0938\u093F\u0928",
  "tr": "\u0924\u0941\u0930\u094D\u0915\u0940",
  "trv": "\u0924\u093E\u0930\u094B\u0915\u094B",
  "ts": "\u0938\u094B\u0902\u0917\u093E",
  "tsi": "\u0924\u094D\u0938\u093F\u092E\u0940\u0936\u093F\u092F\u0928",
  "tt": "\u0924\u093E\u0924\u093E\u0930",
  "tum": "\u0924\u092E\u094D\u092C\u0942\u0915\u093E",
  "tvl": "\u0924\u0941\u0935\u093E\u0932\u0941",
  "tw": "\u091F\u094D\u0935\u0940",
  "twq": "\u091F\u093E\u0938\u0935\u093E\u0915",
  "ty": "\u0924\u093E\u0939\u093F\u0924\u093F\u092F\u0928",
  "tyv": "\u0924\u0941\u0935\u0940\u0928\u093F\u092F\u0928",
  "tzm": "\u092E\u0927\u094D\u092F \u090F\u091F\u0932\u0938 \u0924\u092E\u093E\u091C\u093C\u093F\u0924",
  "udm": "\u0909\u0926\u092E\u0941\u0930\u094D\u0924",
  "ug": "\u0909\u0907\u0917\u0930",
  "uga": "\u092F\u0941\u0917\u0948\u0930\u093F\u091F\u093F\u0915",
  "uk": "\u092F\u0942\u0915\u094D\u0930\u0947\u0928\u093F\u092F\u093E\u0908",
  "umb": "\u0909\u092E\u094D\u092C\u0941\u0928\u094D\u0921\u0941",
  "und": "\u0905\u091C\u094D\u091E\u093E\u0924 \u092D\u093E\u0937\u093E",
  "ur": "\u0909\u0930\u094D\u0926\u0942",
  "uz": "\u0909\u091C\u093C\u094D\u092C\u0947\u0915",
  "vai": "\u0935\u093E\u0908",
  "ve": "\u0935\u0947\u0928\u094D\u0926\u093E",
  "vi": "\u0935\u093F\u092F\u0924\u0928\u093E\u092E\u0940",
  "vo": "\u0935\u094B\u0932\u093E\u092A\u0941\u0915",
  "vot": "\u0935\u0949\u091F\u093F\u0915",
  "vun": "\u0935\u0941\u0902\u091C\u094B",
  "wa": "\u0935\u093E\u0932\u094D\u0932\u0942\u0928",
  "wae": "\u0935\u093E\u0932\u094D\u0938\u0930",
  "wal": "\u0935\u0932\u093E\u092E\u094B",
  "war": "\u0935\u093E\u0930\u0948",
  "was": "\u0935\u093E\u0936\u094B",
  "wbp": "\u0935\u0949\u0932\u094D\u092A\u0947\u0930\u0940",
  "wo": "\u0935\u094B\u0932\u094B\u092B\u093C",
  "wuu": "\u0935\u0942 \u091A\u0940\u0928\u0940",
  "xal": "\u0915\u093E\u0932\u094D\u092E\u093F\u0915",
  "xh": "\u0916\u093C\u094B\u0938\u093E",
  "xog": "\u0938\u094B\u0917\u093E",
  "yao": "\u092F\u093E\u0913",
  "yap": "\u092F\u093E\u092A\u0940\u0938",
  "yav": "\u092F\u093E\u0902\u0917\u092C\u0947\u0928",
  "ybb": "\u092F\u0947\u0902\u092C\u093E",
  "yi": "\u092F\u0939\u0942\u0926\u0940",
  "yo": "\u092F\u094B\u0930\u0942\u092C\u093E",
  "yrl": "yrl",
  "yue": "\u0915\u0948\u0902\u091F\u094B\u0928\u0940\u091C\u093C",
  "za": "\u091C\u093C\u0941\u0906\u0902\u0917",
  "zap": "\u091C\u093C\u0947\u092A\u094B\u091F\u0947\u0915",
  "zbl": "\u092C\u094D\u0932\u093F\u0938\u093F\u092E\u094D\u092C\u0949\u0932\u094D\u0938",
  "zen": "\u091C\u093C\u0947\u0928\u093E\u0928\u094D\u0917\u093E",
  "zgh": "\u092E\u093E\u0928\u0915 \u092E\u094B\u0930\u0915\u094D\u0915\u0928 \u0924\u093E\u092E\u093E\u091C\u093C\u093E\u0907\u091F",
  "zh": "\u091A\u0940\u0928\u0940",
  "zh-Hans": "\u0938\u0930\u0932\u0940\u0915\u0943\u0924 \u091A\u0940\u0928\u0940",
  "zh-Hant": "\u092A\u093E\u0930\u0902\u092A\u0930\u093F\u0915 \u091A\u0940\u0928\u0940",
  "zu": "\u091C\u093C\u0941\u0932\u0942",
  "zun": "\u091C\u093C\u0942\u0928\u0940",
  "zxx": "\u0915\u094B\u0908 \u092D\u093E\u0937\u093E \u0938\u093E\u092E\u0917\u094D\u0930\u0940 \u0928\u0939\u0940\u0902",
  "zza": "\u091C\u093C\u093E\u091C\u093C\u093E"
};

// src/l10n/locale/id.ts
var id_default = {
  "aa": "Afar",
  "ab": "Abkhaz",
  "ace": "Aceh",
  "ach": "Acoli",
  "ada": "Adangme",
  "ady": "Adygei",
  "ae": "Avesta",
  "aeb": "Arab Tunisia",
  "af": "Afrikaans",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Ainu",
  "ak": "Akan",
  "akk": "Akkadia",
  "akz": "Alabama",
  "ale": "Aleut",
  "alt": "Altai Selatan",
  "am": "Amharik",
  "an": "Aragon",
  "ang": "Inggris Kuno",
  "anp": "Angika",
  "ar": "Arab",
  "ar-001": "Arab Standar Modern",
  "arc": "Aram",
  "arn": "Mapuche",
  "arp": "Arapaho",
  "arq": "Arab Aljazair",
  "ars": "Arab Najdi",
  "arw": "Arawak",
  "ary": "Arab Maroko",
  "arz": "Arab Mesir",
  "as": "Assam",
  "asa": "Asu",
  "ase": "Bahasa Isyarat Amerika",
  "ast": "Asturia",
  "av": "Avar",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbaijani",
  "ba": "Bashkir",
  "bal": "Baluchi",
  "ban": "Bali",
  "bar": "Bavaria",
  "bas": "Basa",
  "bax": "Bamun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala",
  "be": "Belarusia",
  "bej": "Beja",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bg": "Bulgaria",
  "bgn": "Balochi Barat",
  "bho": "Bhojpuri",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjar",
  "bkm": "Kom",
  "bla": "Siksika",
  "bm": "Bambara",
  "bn": "Bengali",
  "bo": "Tibet",
  "br": "Breton",
  "bra": "Braj",
  "brx": "Bodo",
  "bs": "Bosnia",
  "bss": "Akoose",
  "bua": "Buriat",
  "bug": "Bugis",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Katalan",
  "cad": "Kado",
  "car": "Karib",
  "cay": "Cayuga",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "Chechen",
  "ceb": "Cebuano",
  "cgg": "Kiga",
  "ch": "Chamorro",
  "chb": "Chibcha",
  "chg": "Chagatai",
  "chk": "Chuuke",
  "chm": "Mari",
  "chn": "Jargon Chinook",
  "cho": "Koktaw",
  "chp": "Chipewyan",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "ckb": "Kurdi Sorani",
  "co": "Korsika",
  "cop": "Koptik",
  "cr": "Kree",
  "crh": "Tatar Krimea",
  "crs": "Seselwa Kreol Prancis",
  "cs": "Cheska",
  "csb": "Kashubia",
  "cu": "Bahasa Gereja Slavonia",
  "cv": "Chuvash",
  "cy": "Welsh",
  "da": "Dansk",
  "dak": "Dakota",
  "dar": "Dargwa",
  "dav": "Taita",
  "de": "Jerman",
  "de-AT": "Jerman (Austria)",
  "de-CH": "Jerman Tinggi (Swiss)",
  "del": "Delaware",
  "den": "Slave",
  "dgr": "Dogrib",
  "din": "Dinka",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Sorbia Hilir",
  "dua": "Duala",
  "dum": "Belanda Abad Pertengahan",
  "dv": "Divehi",
  "dyo": "Jola-Fonyi",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egy": "Mesir Kuno",
  "eka": "Ekajuk",
  "el": "Yunani",
  "elx": "Elam",
  "en": "Inggris",
  "en-AU": "Inggris (Australia)",
  "en-CA": "Inggris (Kanada)",
  "en-GB": "Inggris (Inggris)",
  "en-US": "Inggris (Amerika Serikat)",
  "enm": "Inggris Abad Pertengahan",
  "eo": "Esperanto",
  "es": "Spanyol",
  "es-419": "Spanyol (Amerika Latin)",
  "es-ES": "Spanyol (Eropa)",
  "es-MX": "Spanyol (Meksiko)",
  "et": "Esti",
  "eu": "Basque",
  "ewo": "Ewondo",
  "fa": "Persia",
  "fa-AF": "Persia Dari",
  "fan": "Fang",
  "fat": "Fanti",
  "ff": "Fula",
  "fi": "Suomi",
  "fil": "Filipino",
  "fj": "Fiji",
  "fo": "Faroe",
  "fon": "Fon",
  "fr": "Prancis",
  "fr-CA": "Prancis (Kanada)",
  "fr-CH": "Prancis (Swiss)",
  "frc": "Prancis Cajun",
  "frm": "Prancis Abad Pertengahan",
  "fro": "Prancis Kuno",
  "frp": "Arpitan",
  "frr": "Frisia Utara",
  "frs": "Frisia Timur",
  "fur": "Friuli",
  "fy": "Frisia Barat",
  "ga": "Irlandia",
  "gaa": "Ga",
  "gag": "Gagauz",
  "gay": "Gayo",
  "gba": "Gbaya",
  "gd": "Gaelik Skotlandia",
  "gez": "Geez",
  "gil": "Gilbert",
  "gl": "Galisia",
  "glk": "Gilaki",
  "gmh": "Jerman Abad Pertengahan",
  "gn": "Guarani",
  "goh": "Jerman Kuno",
  "gon": "Gondi",
  "gor": "Gorontalo",
  "got": "Gotik",
  "grb": "Grebo",
  "grc": "Yunani Kuno",
  "gsw": "Jerman (Swiss)",
  "gu": "Gujarat",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Gwich\u2019in",
  "ha": "Hausa",
  "hai": "Haida",
  "haw": "Hawaii",
  "he": "Ibrani",
  "hi": "Hindi",
  "hif": "Hindi Fiji",
  "hil": "Hiligaynon",
  "hit": "Hitit",
  "hmn": "Hmong",
  "ho": "Hiri Motu",
  "hr": "Kroasia",
  "hsb": "Sorbia Hulu",
  "ht": "Kreol Haiti",
  "hu": "Hungaria",
  "hup": "Hupa",
  "hy": "Armenia",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesia",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Sichuan Yi",
  "ik": "Inupiak",
  "ilo": "Iloko",
  "inh": "Ingushetia",
  "io": "Ido",
  "is": "Islandia",
  "it": "Italia",
  "iu": "Inuktitut",
  "ja": "Jepang",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "Ibrani-Persia",
  "jrb": "Ibrani-Arab",
  "jv": "Jawa",
  "ka": "Georgia",
  "kaa": "Kara-Kalpak",
  "kab": "Kabyle",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardi",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongo",
  "kgp": "Kaingang",
  "kha": "Khasi",
  "kho": "Khotan",
  "khq": "Koyra Chiini",
  "ki": "Kikuyu",
  "kj": "Kuanyama",
  "kk": "Kazakh",
  "kkj": "Kako",
  "kl": "Kalaallisut",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Korea",
  "koi": "Komi-Permyak",
  "kok": "Konkani",
  "kos": "Kosre",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karachai Balkar",
  "kri": "Krio",
  "krl": "Karelia",
  "kru": "Kuruk",
  "ks": "Kashmir",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "Dialek Kolsch",
  "ku": "Kurdi",
  "kum": "Kumyk",
  "kut": "Kutenai",
  "kv": "Komi",
  "kw": "Kornish",
  "ky": "Kirgiz",
  "la": "Latin",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba",
  "lb": "Luksemburg",
  "lez": "Lezghia",
  "lg": "Ganda",
  "li": "Limburgia",
  "lij": "Liguria",
  "lkt": "Lakota",
  "ln": "Lingala",
  "lo": "Lao",
  "lol": "Mongo",
  "lou": "Kreol Louisiana",
  "loz": "Lozi",
  "lrc": "Luri Utara",
  "lt": "Lituavi",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Mizo",
  "luy": "Luyia",
  "lv": "Latvi",
  "lzz": "Laz",
  "mad": "Madura",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makasar",
  "man": "Mandingo",
  "mas": "Masai",
  "mde": "Maba",
  "mdf": "Moksha",
  "mdr": "Mandar",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisien",
  "mg": "Malagasi",
  "mga": "Irlandia Abad Pertengahan",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u2019",
  "mh": "Marshall",
  "mi": "Maori",
  "mic": "Mikmak",
  "min": "Minangkabau",
  "mk": "Makedonia",
  "ml": "Malayalam",
  "mn": "Mongolia",
  "mnc": "Manchuria",
  "mni": "Manipuri",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "ms": "Melayu",
  "mt": "Malta",
  "mua": "Mundang",
  "mul": "Beberapa Bahasa",
  "mus": "Bahasa Muskogee",
  "mwl": "Miranda",
  "mwr": "Marwari",
  "mwv": "Mentawai",
  "my": "Burma",
  "mye": "Myene",
  "myv": "Eryza",
  "mzn": "Mazanderani",
  "na": "Nauru",
  "nap": "Neapolitan",
  "naq": "Nama",
  "nb": "Bokm\xE5l Norwegia",
  "nd": "Ndebele Utara",
  "nds": "Jerman Rendah",
  "nds-NL": "Jerman Rendah (Belanda)",
  "ne": "Nepali",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niuea",
  "nl": "Belanda",
  "nl-BE": "Belanda (Belgia)",
  "nmg": "Kwasio",
  "nn": "Nynorsk Norwegia",
  "nnh": "Ngiemboon",
  "no": "Norwegia",
  "nog": "Nogai",
  "non": "Norse Kuno",
  "nqo": "N\u2019Ko",
  "nr": "Ndebele Selatan",
  "nso": "Sotho Utara",
  "nus": "Nuer",
  "nv": "Navajo",
  "nwc": "Newari Klasik",
  "ny": "Nyanja",
  "nym": "Nyamwezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima",
  "oc": "Ositania",
  "oj": "Ojibwa",
  "om": "Oromo",
  "or": "Oriya",
  "os": "Ossetia",
  "osa": "Osage",
  "ota": "Turki Osmani",
  "pa": "Punjabi",
  "pag": "Pangasina",
  "pal": "Pahlevi",
  "pam": "Pampanga",
  "pap": "Papiamento",
  "pau": "Palau",
  "pcm": "Pidgin Nigeria",
  "pdc": "Jerman Pennsylvania",
  "peo": "Persia Kuno",
  "phn": "Funisia",
  "pi": "Pali",
  "pl": "Polski",
  "pon": "Pohnpeia",
  "prg": "Prusia",
  "pro": "Provencal Lama",
  "ps": "Pashto",
  "pt": "Portugis",
  "pt-BR": "Portugis (Brasil)",
  "pt-PT": "Portugis (Eropa)",
  "qu": "Quechua",
  "quc": "K\u02BCiche\u02BC",
  "raj": "Rajasthani",
  "rap": "Rapanui",
  "rar": "Rarotonga",
  "rhg": "Rohingya",
  "rm": "Reto-Roman",
  "rn": "Rundi",
  "ro": "Rumania",
  "ro-MD": "Moldavia",
  "rof": "Rombo",
  "rom": "Romani",
  "rtm": "Rotuma",
  "ru": "Rusia",
  "rup": "Aromania",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskerta",
  "sad": "Sandawe",
  "sah": "Sakha",
  "sam": "Aram Samaria",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "sba": "Ngambai",
  "sbp": "Sangu",
  "sc": "Sardinia",
  "scn": "Sisilia",
  "sco": "Skotlandia",
  "sd": "Sindhi",
  "sdh": "Kurdi Selatan",
  "se": "Sami Utara",
  "see": "Seneca",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkup",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sga": "Irlandia Kuno",
  "sh": "Serbo-Kroasia",
  "shi": "Tachelhit",
  "shn": "Shan",
  "shu": "Arab Suwa",
  "si": "Sinhala",
  "sid": "Sidamo",
  "sk": "Slovak",
  "sl": "Sloven",
  "sli": "Silesia Rendah",
  "sly": "Selayar",
  "sm": "Samoa",
  "sma": "Sami Selatan",
  "smj": "Lule Sami",
  "smn": "Inari Sami",
  "sms": "Skolt Sami",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somalia",
  "sog": "Sogdien",
  "sq": "Albania",
  "sr": "Serbia",
  "srn": "Sranan Tongo",
  "srr": "Serer",
  "ss": "Swati",
  "ssy": "Saho",
  "st": "Sotho Selatan",
  "su": "Sunda",
  "suk": "Sukuma",
  "sus": "Susu",
  "sux": "Sumeria",
  "sv": "Swedia",
  "sw": "Swahili",
  "sw-CD": "Swahili (Kongo)",
  "swb": "Komoria",
  "syc": "Suriah Klasik",
  "syr": "Suriah",
  "szl": "Silesia",
  "ta": "Tamil",
  "tcy": "Tulu",
  "te": "Telugu",
  "tem": "Timne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetun",
  "tg": "Tajik",
  "th": "Thai",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "Turkmen",
  "tkl": "Tokelau",
  "tl": "Tagalog",
  "tlh": "Klingon",
  "tli": "Tlingit",
  "tmh": "Tamashek",
  "tn": "Tswana",
  "to": "Tonga",
  "tog": "Nyasa Tonga",
  "tpi": "Tok Pisin",
  "tr": "Turki",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsi": "Tsimshia",
  "tt": "Tatar",
  "ttt": "Tat Muslim",
  "tum": "Tumbuka",
  "tvl": "Tuvalu",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahiti",
  "tyv": "Tuvinia",
  "tzm": "Tamazight Maroko Tengah",
  "udm": "Udmurt",
  "ug": "Uyghur",
  "uga": "Ugarit",
  "uk": "Ukraina",
  "umb": "Umbundu",
  "und": "Bahasa Tidak Dikenal",
  "ur": "Urdu",
  "uz": "Uzbek",
  "vai": "Vai",
  "ve": "Venda",
  "vec": "Venesia",
  "vi": "Vietnam",
  "vo": "Volapuk",
  "vot": "Votia",
  "vun": "Vunjo",
  "wa": "Walloon",
  "wae": "Walser",
  "wal": "Walamo",
  "war": "Warai",
  "was": "Washo",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "xal": "Kalmuk",
  "xh": "Xhosa",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yapois",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Yiddish",
  "yo": "Yoruba",
  "yrl": "yrl",
  "yue": "Kanton",
  "za": "Zhuang",
  "zap": "Zapotek",
  "zbl": "Blissymbol",
  "zen": "Zenaga",
  "zgh": "Tamazight Maroko Standar",
  "zh": "Tionghoa",
  "zh-Hans": "Tionghoa (Sederhana)",
  "zh-Hant": "Tionghoa (Tradisional)",
  "zu": "Zulu",
  "zun": "Zuni",
  "zxx": "Tidak ada konten linguistik",
  "zza": "Zaza"
};

// src/l10n/locale/it.ts
var it_default = {
  "aa": "afar",
  "ab": "abcaso",
  "ace": "accinese",
  "ach": "acioli",
  "ada": "adangme",
  "ady": "adyghe",
  "ae": "avestan",
  "aeb": "arabo tunisino",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "accado",
  "akz": "alabama",
  "ale": "aleuto",
  "aln": "albanese ghego",
  "alt": "altai meridionale",
  "am": "amarico",
  "an": "aragonese",
  "ang": "inglese antico",
  "anp": "angika",
  "ar": "arabo",
  "ar-001": "arabo moderno standard",
  "arc": "aramaico",
  "arn": "mapudungun",
  "aro": "araona",
  "arp": "arapaho",
  "arq": "arabo algerino",
  "ars": "arabo najd",
  "arw": "aruaco",
  "ary": "arabo marocchino",
  "arz": "arabo egiziano",
  "as": "assamese",
  "asa": "asu",
  "ase": "lingua dei segni americana",
  "ast": "asturiano",
  "av": "avaro",
  "avk": "kotava",
  "awa": "awadhi",
  "ay": "aymara",
  "az": "azerbaigiano",
  "ba": "baschiro",
  "bal": "beluci",
  "ban": "balinese",
  "bar": "bavarese",
  "bas": "basa",
  "bax": "bamun",
  "bbc": "batak toba",
  "bbj": "ghomala",
  "be": "bielorusso",
  "bej": "begia",
  "bem": "wemba",
  "bew": "betawi",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badaga",
  "bg": "bulgaro",
  "bgn": "beluci occidentale",
  "bho": "bhojpuri",
  "bi": "bislama",
  "bik": "bicol",
  "bin": "bini",
  "bjn": "banjar",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengalese",
  "bo": "tibetano",
  "bpy": "bishnupriya",
  "bqi": "bakhtiari",
  "br": "bretone",
  "bra": "braj",
  "brh": "brahui",
  "brx": "bodo",
  "bs": "bosniaco",
  "bss": "akoose",
  "bua": "buriat",
  "bug": "bugi",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "catalano",
  "cad": "caddo",
  "car": "caribico",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "ceceno",
  "ceb": "cebuano",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "ciagataico",
  "chk": "chuukese",
  "chm": "mari",
  "chn": "gergo chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cherokee",
  "chy": "cheyenne",
  "ckb": "curdo sorani",
  "co": "corso",
  "cop": "copto",
  "cps": "capiznon",
  "cr": "cree",
  "crh": "turco crimeo",
  "crs": "creolo delle Seychelles",
  "cs": "ceco",
  "csb": "kashubian",
  "cu": "slavo ecclesiastico",
  "cv": "ciuvascio",
  "cy": "gallese",
  "da": "danese",
  "dak": "dakota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "tedesco",
  "de-AT": "tedesco austriaco",
  "de-CH": "alto tedesco svizzero",
  "del": "delaware",
  "den": "slave",
  "dgr": "dogrib",
  "din": "dinca",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "basso sorabo",
  "dtp": "dusun centrale",
  "dua": "duala",
  "dum": "olandese medio",
  "dv": "divehi",
  "dyo": "jola-fony",
  "dyu": "diula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe",
  "efi": "efik",
  "egl": "emiliano",
  "egy": "egiziano antico",
  "eka": "ekajuka",
  "el": "greco",
  "elx": "elamitico",
  "en": "inglese",
  "en-AU": "inglese australiano",
  "en-CA": "inglese canadese",
  "en-GB": "inglese britannico",
  "en-US": "inglese americano",
  "enm": "inglese medio",
  "eo": "esperanto",
  "es": "spagnolo",
  "es-419": "spagnolo latinoamericano",
  "es-ES": "spagnolo europeo",
  "es-MX": "spagnolo messicano",
  "esu": "yupik centrale",
  "et": "estone",
  "eu": "basco",
  "ewo": "ewondo",
  "ext": "estremegno",
  "fa": "persiano",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fulah",
  "fi": "finlandese",
  "fil": "filippino",
  "fit": "finlandese del Tornedalen",
  "fj": "figiano",
  "fo": "faroese",
  "fon": "fon",
  "fr": "francese",
  "fr-CA": "francese canadese",
  "fr-CH": "francese svizzero",
  "frc": "francese cajun",
  "frm": "francese medio",
  "fro": "francese antico",
  "frp": "francoprovenzale",
  "frr": "frisone settentrionale",
  "frs": "frisone orientale",
  "fur": "friulano",
  "fy": "frisone occidentale",
  "ga": "irlandese",
  "gaa": "ga",
  "gag": "gagauzo",
  "gan": "gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gbz": "dari zoroastriano",
  "gd": "gaelico scozzese",
  "gez": "geez",
  "gil": "gilbertese",
  "gl": "galiziano",
  "glk": "gilaki",
  "gmh": "tedesco medio alto",
  "gn": "guaran\xED",
  "goh": "tedesco antico alto",
  "gom": "konkani goano",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gotico",
  "grb": "grebo",
  "grc": "greco antico",
  "gsw": "tedesco svizzero",
  "gu": "gujarati",
  "guc": "wayuu",
  "guz": "gusii",
  "gv": "mannese",
  "gwi": "gwich\u02BCin",
  "ha": "hausa",
  "hai": "haida",
  "hak": "hakka",
  "haw": "hawaiano",
  "he": "ebraico",
  "hi": "hindi",
  "hif": "hindi figiano",
  "hil": "ilongo",
  "hit": "hittite",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croato",
  "hsb": "alto sorabo",
  "hsn": "xiang",
  "ht": "creolo haitiano",
  "hu": "ungherese",
  "hup": "hupa",
  "hy": "armeno",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonesiano",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "sichuan yi",
  "ik": "inupiak",
  "ilo": "ilocano",
  "inh": "ingush",
  "io": "ido",
  "is": "islandese",
  "it": "italiano",
  "iu": "inuktitut",
  "izh": "ingrico",
  "ja": "giapponese",
  "jam": "creolo giamaicano",
  "jbo": "lojban",
  "jgo": "ngamambo",
  "jmc": "machame",
  "jpr": "giudeo persiano",
  "jrb": "giudeo arabo",
  "jut": "jutlandico",
  "jv": "giavanese",
  "ka": "georgiano",
  "kaa": "kara-kalpak",
  "kab": "cabilo",
  "kac": "kachin",
  "kaj": "kai",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "cabardino",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "capoverdiano",
  "kfo": "koro",
  "kg": "kongo",
  "kgp": "kaingang",
  "kha": "khasi",
  "kho": "khotanese",
  "khq": "koyra chiini",
  "khw": "khowar",
  "ki": "kikuyu",
  "kiu": "kirmanjki",
  "kj": "kuanyama",
  "kk": "kazako",
  "kkj": "kako",
  "kl": "groenlandese",
  "kln": "kalenjin",
  "km": "khmer",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "coreano",
  "koi": "permiaco",
  "kok": "konkani",
  "kos": "kosraean",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karachay-Balkar",
  "krl": "careliano",
  "kru": "kurukh",
  "ks": "kashmiri",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "coloniese",
  "ku": "curdo",
  "kum": "kumyk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "cornico",
  "ky": "kirghiso",
  "la": "latino",
  "lad": "giudeo-spagnolo",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "lussemburghese",
  "lez": "lesgo",
  "lfn": "Lingua Franca Nova",
  "lg": "ganda",
  "li": "limburghese",
  "lij": "ligure",
  "liv": "livone",
  "lkt": "lakota",
  "lmo": "lombardo",
  "ln": "lingala",
  "lo": "lao",
  "lol": "lolo bantu",
  "lou": "creolo della Louisiana",
  "loz": "lozi",
  "lrc": "luri settentrionale",
  "lt": "lituano",
  "ltg": "letgallo",
  "lu": "luba-katanga",
  "lua": "luba-lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "lushai",
  "luy": "luyia",
  "lv": "lettone",
  "lzh": "cinese classico",
  "lzz": "laz",
  "mad": "madurese",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandingo",
  "mas": "masai",
  "mde": "maba",
  "mdf": "moksha",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "creolo mauriziano",
  "mg": "malgascio",
  "mga": "irlandese medio",
  "mgh": "makhuwa-meetto",
  "mgo": "meta\u2019",
  "mh": "marshallese",
  "mi": "maori",
  "mic": "micmac",
  "min": "menangkabau",
  "mk": "macedone",
  "ml": "malayalam",
  "mn": "mongolo",
  "mnc": "manchu",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marathi",
  "mrj": "mari occidentale",
  "ms": "malese",
  "mt": "maltese",
  "mua": "mundang",
  "mul": "multilingua",
  "mus": "creek",
  "mwl": "mirandese",
  "mwr": "marwari",
  "mwv": "mentawai",
  "my": "birmano",
  "mye": "myene",
  "myv": "erzya",
  "mzn": "mazandarani",
  "na": "nauru",
  "nan": "min nan",
  "nap": "napoletano",
  "naq": "nama",
  "nb": "norvegese bokm\xE5l",
  "nd": "ndebele del nord",
  "nds": "basso tedesco",
  "nds-NL": "basso tedesco olandese",
  "ne": "nepalese",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niue",
  "njo": "ao",
  "nl": "olandese",
  "nl-BE": "fiammingo",
  "nmg": "kwasio",
  "nn": "norvegese nynorsk",
  "nnh": "ngiemboon",
  "no": "norvegese",
  "nog": "nogai",
  "non": "norse antico",
  "nov": "novial",
  "nqo": "n\u2019ko",
  "nr": "ndebele del sud",
  "nso": "sotho del nord",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "newari classico",
  "ny": "nyanja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzima",
  "oc": "occitano",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "odia",
  "os": "ossetico",
  "osa": "osage",
  "ota": "turco ottomano",
  "pa": "punjabi",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palau",
  "pcd": "piccardo",
  "pcm": "pidgin nigeriano",
  "pdc": "tedesco della Pennsylvania",
  "peo": "persiano antico",
  "pfl": "tedesco palatino",
  "phn": "fenicio",
  "pi": "pali",
  "pl": "polacco",
  "pms": "piemontese",
  "pnt": "pontico",
  "pon": "ponape",
  "prg": "prussiano",
  "pro": "provenzale antico",
  "ps": "pashto",
  "pt": "portoghese",
  "pt-BR": "portoghese brasiliano",
  "pt-PT": "portoghese europeo",
  "qu": "quechua",
  "quc": "k\u2019iche\u2019",
  "qug": "quechua dell\u2019altopiano del Chimborazo",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotonga",
  "rgn": "romagnolo",
  "rhg": "rohingya",
  "rif": "tarifit",
  "rm": "romancio",
  "rn": "rundi",
  "ro": "rumeno",
  "ro-MD": "moldavo",
  "rof": "rombo",
  "rom": "romani",
  "rtm": "rotumano",
  "ru": "russo",
  "rue": "ruteno",
  "rug": "roviana",
  "rup": "arumeno",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "sanscrito",
  "sad": "sandawe",
  "sah": "sacha",
  "sam": "aramaico samaritano",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "saz": "saurashtra",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardo",
  "scn": "siciliano",
  "sco": "scozzese",
  "sd": "sindhi",
  "sdc": "sassarese",
  "sdh": "curdo meridionale",
  "se": "sami del nord",
  "see": "seneca",
  "seh": "sena",
  "sei": "seri",
  "sel": "selkup",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "irlandese antico",
  "sgs": "samogitico",
  "sh": "serbo-croato",
  "shi": "tashelhit",
  "shn": "shan",
  "shu": "arabo ciadiano",
  "si": "singalese",
  "sid": "sidamo",
  "sk": "slovacco",
  "sl": "sloveno",
  "sli": "tedesco slesiano",
  "sly": "selayar",
  "sm": "samoano",
  "sma": "sami del sud",
  "smj": "sami di Lule",
  "smn": "sami di Inari",
  "sms": "sami skolt",
  "sn": "shona",
  "snk": "soninke",
  "so": "somalo",
  "sog": "sogdiano",
  "sq": "albanese",
  "sr": "serbo",
  "srn": "sranan tongo",
  "srr": "serer",
  "ss": "swati",
  "ssy": "saho",
  "st": "sotho del sud",
  "stq": "saterfriesisch",
  "su": "sundanese",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumero",
  "sv": "svedese",
  "sw": "swahili",
  "sw-CD": "swahili del Congo",
  "swb": "comoriano",
  "syc": "siriaco classico",
  "syr": "siriaco",
  "szl": "slesiano",
  "ta": "tamil",
  "tcy": "tulu",
  "te": "telugu",
  "tem": "temne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tetum",
  "tg": "tagico",
  "th": "thai",
  "ti": "tigrino",
  "tig": "tigre",
  "tiv": "tiv",
  "tk": "turcomanno",
  "tkl": "tokelau",
  "tkr": "tsakhur",
  "tl": "tagalog",
  "tlh": "klingon",
  "tli": "tlingit",
  "tly": "taliscio",
  "tmh": "tamashek",
  "tn": "tswana",
  "to": "tongano",
  "tog": "nyasa del Tonga",
  "tpi": "tok pisin",
  "tr": "turco",
  "tru": "turoyo",
  "trv": "taroko",
  "ts": "tsonga",
  "tsd": "zaconico",
  "tsi": "tsimshian",
  "tt": "tataro",
  "ttt": "tat islamico",
  "tum": "tumbuka",
  "tvl": "tuvalu",
  "tw": "ci",
  "twq": "tasawaq",
  "ty": "taitiano",
  "tyv": "tuvinian",
  "tzm": "tamazight",
  "udm": "udmurt",
  "ug": "uiguro",
  "uga": "ugaritico",
  "uk": "ucraino",
  "umb": "mbundu",
  "und": "lingua imprecisata",
  "ur": "urdu",
  "uz": "uzbeco",
  "vai": "vai",
  "ve": "venda",
  "vec": "veneto",
  "vep": "vepso",
  "vi": "vietnamita",
  "vls": "fiammingo occidentale",
  "vo": "volap\xFCk",
  "vot": "voto",
  "vro": "v\xF5ro",
  "vun": "vunjo",
  "wa": "vallone",
  "wae": "walser",
  "wal": "walamo",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof",
  "wuu": "wu",
  "xal": "kalmyk",
  "xh": "xhosa",
  "xmf": "mengrelio",
  "xog": "soga",
  "yao": "yao (bantu)",
  "yap": "yapese",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "yiddish",
  "yo": "yoruba",
  "yrl": "nheengatu",
  "yue": "cantonese",
  "za": "zhuang",
  "zap": "zapotec",
  "zbl": "blissymbol",
  "zea": "zelandese",
  "zen": "zenaga",
  "zgh": "tamazight del Marocco standard",
  "zh": "cinese",
  "zh-Hans": "cinese semplificato",
  "zh-Hant": "cinese tradizionale",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "nessun contenuto linguistico",
  "zza": "zaza"
};

// src/l10n/locale/ja.ts
var ja_default = {
  "aa": "\u30A2\u30D5\u30A1\u30EB\u8A9E",
  "ab": "\u30A2\u30D6\u30CF\u30BA\u8A9E",
  "ace": "\u30A2\u30C1\u30A7\u8A9E",
  "ach": "\u30A2\u30C1\u30E7\u30EA\u8A9E",
  "ada": "\u30A2\u30C0\u30F3\u30B0\u30E1\u8A9E",
  "ady": "\u30A2\u30C7\u30A3\u30B2\u8A9E",
  "ae": "\u30A2\u30F4\u30A7\u30B9\u30BF\u8A9E",
  "aeb": "\u30C1\u30E5\u30CB\u30B8\u30A2\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "af": "\u30A2\u30D5\u30EA\u30AB\u30FC\u30F3\u30B9\u8A9E",
  "afh": "\u30A2\u30D5\u30EA\u30D2\u30EA\u8A9E",
  "agq": "\u30A2\u30B2\u30E0\u8A9E",
  "ain": "\u30A2\u30A4\u30CC\u8A9E",
  "ak": "\u30A2\u30AB\u30F3\u8A9E",
  "akk": "\u30A2\u30C3\u30AB\u30C9\u8A9E",
  "akz": "\u30A2\u30E9\u30D0\u30DE\u8A9E",
  "ale": "\u30A2\u30EC\u30A6\u30C8\u8A9E",
  "aln": "\u30B2\u30B0\u30FB\u30A2\u30EB\u30D0\u30CB\u30A2\u8A9E",
  "alt": "\u5357\u30A2\u30EB\u30BF\u30A4\u8A9E",
  "am": "\u30A2\u30E0\u30CF\u30E9\u8A9E",
  "an": "\u30A2\u30E9\u30B4\u30F3\u8A9E",
  "ang": "\u53E4\u82F1\u8A9E",
  "anp": "\u30A2\u30F3\u30AE\u30AB\u8A9E",
  "ar": "\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "ar-001": "\u73FE\u4EE3\u6A19\u6E96\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "arc": "\u30A2\u30E9\u30E0\u8A9E",
  "arn": "\u30DE\u30D7\u30C1\u30A7\u8A9E",
  "aro": "\u30A2\u30E9\u30AA\u30CA\u8A9E",
  "arp": "\u30A2\u30E9\u30D1\u30DB\u30FC\u8A9E",
  "arq": "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "ars": "\u30CA\u30B8\u30E5\u30C9\u5730\u65B9\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "arw": "\u30A2\u30E9\u30EF\u30AF\u8A9E",
  "ary": "\u30E2\u30ED\u30C3\u30B3\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "arz": "\u30A8\u30B8\u30D7\u30C8\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "as": "\u30A2\u30C3\u30B5\u30E0\u8A9E",
  "asa": "\u30A2\u30B9\u8A9E",
  "ase": "\u30A2\u30E1\u30EA\u30AB\u624B\u8A71",
  "ast": "\u30A2\u30B9\u30C8\u30A5\u30EA\u30A2\u30B9\u8A9E",
  "av": "\u30A2\u30F4\u30A1\u30EB\u8A9E",
  "avk": "\u30B3\u30BF\u30F4\u30A1",
  "awa": "\u30A2\u30EF\u30C7\u30A3\u30FC\u8A9E",
  "ay": "\u30A2\u30A4\u30DE\u30E9\u8A9E",
  "az": "\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u8A9E",
  "ba": "\u30D0\u30B7\u30AD\u30FC\u30EB\u8A9E",
  "bal": "\u30D0\u30EB\u30FC\u30C1\u30FC\u8A9E",
  "ban": "\u30D0\u30EA\u8A9E",
  "bar": "\u30D0\u30A4\u30A8\u30EB\u30F3\u30FB\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2\u8A9E",
  "bas": "\u30D0\u30B5\u8A9E",
  "bax": "\u30D0\u30E0\u30F3\u8A9E",
  "bbc": "\u30C8\u30D0\u30FB\u30D0\u30BF\u30AF\u8A9E",
  "bbj": "\u30B4\u30FC\u30DE\u30E9\u8A9E",
  "be": "\u30D9\u30E9\u30EB\u30FC\u30B7\u8A9E",
  "bej": "\u30D9\u30B8\u30E3\u8A9E",
  "bem": "\u30D9\u30F3\u30D0\u8A9E",
  "bew": "\u30D9\u30BF\u30A6\u30A3\u8A9E",
  "bez": "\u30D9\u30CA\u8A9E",
  "bfd": "\u30D0\u30D5\u30C3\u30C8\u8A9E",
  "bfq": "\u30D0\u30C0\u30AC\u8A9E",
  "bg": "\u30D6\u30EB\u30AC\u30EA\u30A2\u8A9E",
  "bgn": "\u897F\u30D0\u30ED\u30FC\u30C1\u30FC\u8A9E",
  "bho": "\u30DC\u30FC\u30B8\u30E5\u30D7\u30EA\u30FC\u8A9E",
  "bi": "\u30D3\u30B9\u30E9\u30DE\u8A9E",
  "bik": "\u30D3\u30B3\u30EB\u8A9E",
  "bin": "\u30D3\u30CB\u8A9E",
  "bjn": "\u30D0\u30F3\u30B8\u30E3\u30EB\u8A9E",
  "bkm": "\u30B3\u30E0\u8A9E",
  "bla": "\u30B7\u30AF\u30B7\u30AB\u8A9E",
  "bm": "\u30D0\u30F3\u30D0\u30E9\u8A9E",
  "bn": "\u30D9\u30F3\u30AC\u30EB\u8A9E",
  "bo": "\u30C1\u30D9\u30C3\u30C8\u8A9E",
  "bpy": "\u30D3\u30B7\u30E5\u30CC\u30D7\u30EA\u30E4\u30FB\u30DE\u30CB\u30D7\u30EA\u8A9E",
  "bqi": "\u30D0\u30D5\u30C6\u30A3\u30E4\u30FC\u30EA\u30FC\u8A9E",
  "br": "\u30D6\u30EB\u30C8\u30F3\u8A9E",
  "bra": "\u30D6\u30E9\u30B8\u8A9E",
  "brh": "\u30D6\u30E9\u30D5\u30A4\u8A9E",
  "brx": "\u30DC\u30C9\u8A9E",
  "bs": "\u30DC\u30B9\u30CB\u30A2\u8A9E",
  "bss": "\u30A2\u30B3\u30FC\u30B9\u8A9E",
  "bua": "\u30D6\u30EA\u30E4\u30FC\u30C8\u8A9E",
  "bug": "\u30D6\u30AE\u8A9E",
  "bum": "\u30D6\u30EB\u8A9E",
  "byn": "\u30D3\u30EA\u30F3\u8A9E",
  "byv": "\u30E1\u30C9\u30A5\u30F3\u30D0\u8A9E",
  "ca": "\u30AB\u30BF\u30ED\u30CB\u30A2\u8A9E",
  "cad": "\u30AB\u30C9\u30FC\u8A9E",
  "car": "\u30AB\u30EA\u30D6\u8A9E",
  "cay": "\u30AB\u30E6\u30FC\u30AC\u8A9E",
  "cch": "\u30C1\u30E3\u30EF\u30A4\u8A9E",
  "ccp": "\u30C1\u30E3\u30AF\u30DE\u8A9E",
  "ce": "\u30C1\u30A7\u30C1\u30A7\u30F3\u8A9E",
  "ceb": "\u30BB\u30D6\u30A2\u30CE\u8A9E",
  "cgg": "\u30C1\u30AC\u8A9E",
  "ch": "\u30C1\u30E3\u30E2\u30ED\u8A9E",
  "chb": "\u30C1\u30D6\u30C1\u30E3\u8A9E",
  "chg": "\u30C1\u30E3\u30AC\u30BF\u30A4\u8A9E",
  "chk": "\u30C1\u30E5\u30FC\u30AF\u8A9E",
  "chm": "\u30DE\u30EA\u8A9E",
  "chn": "\u30C1\u30CC\u30FC\u30AF\u6DF7\u6210\u8A9E",
  "cho": "\u30C1\u30E7\u30AF\u30C8\u30FC\u8A9E",
  "chp": "\u30C1\u30DA\u30EF\u30A4\u30A2\u30F3\u8A9E",
  "chr": "\u30C1\u30A7\u30ED\u30AD\u30FC\u8A9E",
  "chy": "\u30B7\u30E3\u30A4\u30A2\u30F3\u8A9E",
  "ckb": "\u4E2D\u592E\u30AF\u30EB\u30C9\u8A9E",
  "co": "\u30B3\u30EB\u30B7\u30AB\u8A9E",
  "cop": "\u30B3\u30D7\u30C8\u8A9E",
  "cps": "\u30AB\u30D4\u30B9\u8A9E",
  "cr": "\u30AF\u30EA\u30FC\u8A9E",
  "crh": "\u30AF\u30EA\u30DF\u30A2\u30FB\u30BF\u30BF\u30FC\u30EB\u8A9E",
  "crs": "\u30BB\u30FC\u30B7\u30A7\u30EB\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "cs": "\u30C1\u30A7\u30B3\u8A9E",
  "csb": "\u30AB\u30B7\u30E5\u30FC\u30D6\u8A9E",
  "cu": "\u6559\u4F1A\u30B9\u30E9\u30D6\u8A9E",
  "cv": "\u30C1\u30E5\u30F4\u30A1\u30B7\u8A9E",
  "cy": "\u30A6\u30A7\u30FC\u30EB\u30BA\u8A9E",
  "da": "\u30C7\u30F3\u30DE\u30FC\u30AF\u8A9E",
  "dak": "\u30C0\u30B3\u30BF\u8A9E",
  "dar": "\u30C0\u30EB\u30B0\u30EF\u8A9E",
  "dav": "\u30BF\u30A4\u30BF\u8A9E",
  "de": "\u30C9\u30A4\u30C4\u8A9E",
  "de-AT": "\u30C9\u30A4\u30C4\u8A9E (\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2)",
  "de-CH": "\u6A19\u6E96\u30C9\u30A4\u30C4\u8A9E (\u30B9\u30A4\u30B9)",
  "del": "\u30C7\u30E9\u30A6\u30A7\u30A2\u8A9E",
  "den": "\u30B9\u30EC\u30A4\u30D3\u30FC\u8A9E",
  "dgr": "\u30C9\u30B0\u30EA\u30D6\u8A9E",
  "din": "\u30C7\u30A3\u30F3\u30AB\u8A9E",
  "dje": "\u30B6\u30EB\u30DE\u8A9E",
  "doi": "\u30C9\u30FC\u30B0\u30EA\u30FC\u8A9E",
  "dsb": "\u4F4E\u5730\u30BD\u30EB\u30D6\u8A9E",
  "dtp": "\u4E2D\u592E\u30C9\u30A5\u30B9\u30F3\u8A9E",
  "dua": "\u30C9\u30A5\u30A2\u30E9\u8A9E",
  "dum": "\u4E2D\u4E16\u30AA\u30E9\u30F3\u30C0\u8A9E",
  "dv": "\u30C7\u30A3\u30D9\u30D2\u8A9E",
  "dyo": "\u30B8\u30E7\u30E9\uFF1D\u30D5\u30A9\u30CB\u30A3\u8A9E",
  "dyu": "\u30B8\u30E5\u30E9\u8A9E",
  "dz": "\u30BE\u30F3\u30AB\u8A9E",
  "dzg": "\u30C0\u30B6\u30AC\u8A9E",
  "ebu": "\u30A8\u30F3\u30D6\u8A9E",
  "ee": "\u30A8\u30A6\u30A7\u8A9E",
  "efi": "\u30A8\u30D5\u30A3\u30AF\u8A9E",
  "egl": "\u30A8\u30DF\u30EA\u30A2\u8A9E",
  "egy": "\u53E4\u4EE3\u30A8\u30B8\u30D7\u30C8\u8A9E",
  "eka": "\u30A8\u30AB\u30B8\u30E5\u30AF\u8A9E",
  "el": "\u30AE\u30EA\u30B7\u30E3\u8A9E",
  "elx": "\u30A8\u30E9\u30E0\u8A9E",
  "en": "\u82F1\u8A9E",
  "en-AU": "\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\u82F1\u8A9E",
  "en-CA": "\u30AB\u30CA\u30C0\u82F1\u8A9E",
  "en-GB": "\u30A4\u30AE\u30EA\u30B9\u82F1\u8A9E",
  "en-US": "\u30A2\u30E1\u30EA\u30AB\u82F1\u8A9E",
  "enm": "\u4E2D\u82F1\u8A9E",
  "eo": "\u30A8\u30B9\u30DA\u30E9\u30F3\u30C8\u8A9E",
  "es": "\u30B9\u30DA\u30A4\u30F3\u8A9E",
  "es-419": "\u30B9\u30DA\u30A4\u30F3\u8A9E (\u30E9\u30C6\u30F3\u30A2\u30E1\u30EA\u30AB)",
  "es-ES": "\u30B9\u30DA\u30A4\u30F3\u8A9E (\u30A4\u30D9\u30EA\u30A2\u534A\u5CF6)",
  "es-MX": "\u30B9\u30DA\u30A4\u30F3\u8A9E (\u30E1\u30AD\u30B7\u30B3)",
  "esu": "\u4E2D\u592E\u30A2\u30E9\u30B9\u30AB\u30FB\u30E6\u30D4\u30C3\u30AF\u8A9E",
  "et": "\u30A8\u30B9\u30C8\u30CB\u30A2\u8A9E",
  "eu": "\u30D0\u30B9\u30AF\u8A9E",
  "ewo": "\u30A8\u30A6\u30A9\u30F3\u30C9\u8A9E",
  "ext": "\u30A8\u30B9\u30C8\u30EC\u30DE\u30C9\u30A5\u30FC\u30E9\u8A9E",
  "fa": "\u30DA\u30EB\u30B7\u30A2\u8A9E",
  "fa-AF": "\u30C0\u30EA\u30FC\u8A9E",
  "fan": "\u30D5\u30A1\u30F3\u30B0\u8A9E",
  "fat": "\u30D5\u30A1\u30F3\u30C6\u30A3\u30FC\u8A9E",
  "ff": "\u30D5\u30E9\u8A9E",
  "fi": "\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9\u8A9E",
  "fil": "\u30D5\u30A3\u30EA\u30D4\u30CE\u8A9E",
  "fit": "\u30C8\u30EB\u30CD\u30C0\u30FC\u30EB\u30FB\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9\u8A9E",
  "fj": "\u30D5\u30A3\u30B8\u30FC\u8A9E",
  "fo": "\u30D5\u30A7\u30ED\u30FC\u8A9E",
  "fon": "\u30D5\u30A9\u30F3\u8A9E",
  "fr": "\u30D5\u30E9\u30F3\u30B9\u8A9E",
  "fr-CA": "\u30D5\u30E9\u30F3\u30B9\u8A9E (\u30AB\u30CA\u30C0)",
  "fr-CH": "\u30D5\u30E9\u30F3\u30B9\u8A9E (\u30B9\u30A4\u30B9)",
  "frc": "\u30B1\u30A4\u30B8\u30E3\u30F3\u30FB\u30D5\u30E9\u30F3\u30B9\u8A9E",
  "frm": "\u4E2D\u671F\u30D5\u30E9\u30F3\u30B9\u8A9E",
  "fro": "\u53E4\u30D5\u30E9\u30F3\u30B9\u8A9E",
  "frp": "\u30A2\u30EB\u30D4\u30BF\u30F3\u8A9E",
  "frr": "\u5317\u30D5\u30EA\u30B8\u30A2\u8A9E",
  "frs": "\u6771\u30D5\u30EA\u30B8\u30A2\u8A9E",
  "fur": "\u30D5\u30EA\u30A6\u30EA\u8A9E",
  "fy": "\u897F\u30D5\u30EA\u30B8\u30A2\u8A9E",
  "ga": "\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u8A9E",
  "gaa": "\u30AC\u8A9E",
  "gag": "\u30AC\u30AC\u30A6\u30BA\u8A9E",
  "gan": "\u8D1B\u8A9E",
  "gay": "\u30AC\u30E8\u8A9E",
  "gba": "\u30D0\u30E4\u8A9E",
  "gbz": "\u30C0\u30EA\u30FC\u8A9E(\u30BE\u30ED\u30A2\u30B9\u30BF\u30FC\u6559)",
  "gd": "\u30B9\u30B3\u30C3\u30C8\u30E9\u30F3\u30C9\u30FB\u30B2\u30FC\u30EB\u8A9E",
  "gez": "\u30B2\u30A8\u30BA\u8A9E",
  "gil": "\u30AD\u30EA\u30D0\u30B9\u8A9E",
  "gl": "\u30AC\u30EA\u30B7\u30A2\u8A9E",
  "glk": "\u30AE\u30E9\u30AD\u8A9E",
  "gmh": "\u4E2D\u9AD8\u30C9\u30A4\u30C4\u8A9E",
  "gn": "\u30B0\u30A2\u30E9\u30CB\u30FC\u8A9E",
  "goh": "\u53E4\u9AD8\u30C9\u30A4\u30C4\u8A9E",
  "gom": "\u30B4\u30A2\u30FB\u30B3\u30F3\u30AB\u30CB\u8A9E",
  "gon": "\u30B4\u30FC\u30F3\u30C7\u30A3\u30FC\u8A9E",
  "gor": "\u30B4\u30ED\u30F3\u30BF\u30ED\u8A9E",
  "got": "\u30B4\u30FC\u30C8\u8A9E",
  "grb": "\u30B0\u30EC\u30DC\u8A9E",
  "grc": "\u53E4\u4EE3\u30AE\u30EA\u30B7\u30E3\u8A9E",
  "gsw": "\u30B9\u30A4\u30B9\u30C9\u30A4\u30C4\u8A9E",
  "gu": "\u30B0\u30B8\u30E3\u30E9\u30FC\u30C8\u8A9E",
  "guc": "\u30EF\u30E6\u8A9E",
  "gur": "\u30D5\u30E9\u30D5\u30E9\u8A9E",
  "guz": "\u30B0\u30B7\u30A4\u8A9E",
  "gv": "\u30DE\u30F3\u5CF6\u8A9E",
  "gwi": "\u30B0\u30A6\u30A3\u30C3\u30C1\u30F3\u8A9E",
  "ha": "\u30CF\u30A6\u30B5\u8A9E",
  "hai": "\u30CF\u30A4\u30C0\u8A9E",
  "hak": "\u5BA2\u5BB6\u8A9E",
  "haw": "\u30CF\u30EF\u30A4\u8A9E",
  "he": "\u30D8\u30D6\u30E9\u30A4\u8A9E",
  "hi": "\u30D2\u30F3\u30C7\u30A3\u30FC\u8A9E",
  "hif": "\u30D5\u30A3\u30B8\u30FC\u30FB\u30D2\u30F3\u30C7\u30A3\u30FC\u8A9E",
  "hil": "\u30D2\u30EA\u30AC\u30A4\u30CE\u30F3\u8A9E",
  "hit": "\u30D2\u30C3\u30BF\u30A4\u30C8\u8A9E",
  "hmn": "\u30D5\u30E2\u30F3\u8A9E",
  "ho": "\u30D2\u30EA\u30E2\u30C4\u8A9E",
  "hr": "\u30AF\u30ED\u30A2\u30C1\u30A2\u8A9E",
  "hsb": "\u9AD8\u5730\u30BD\u30EB\u30D6\u8A9E",
  "hsn": "\u6E58\u8A9E",
  "ht": "\u30CF\u30A4\u30C1\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "hu": "\u30CF\u30F3\u30AC\u30EA\u30FC\u8A9E",
  "hup": "\u30D5\u30D1\u8A9E",
  "hy": "\u30A2\u30EB\u30E1\u30CB\u30A2\u8A9E",
  "hz": "\u30D8\u30EC\u30ED\u8A9E",
  "ia": "\u30A4\u30F3\u30BF\u30FC\u30EA\u30F3\u30B0\u30A2",
  "iba": "\u30A4\u30D0\u30F3\u8A9E",
  "ibb": "\u30A4\u30D3\u30D3\u30AA\u8A9E",
  "id": "\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u8A9E",
  "ie": "\u30A4\u30F3\u30BF\u30FC\u30EA\u30F3\u30B0",
  "ig": "\u30A4\u30DC\u8A9E",
  "ii": "\u56DB\u5DDD\u30A4\u8A9E",
  "ik": "\u30A4\u30CC\u30D4\u30A2\u30C3\u30AF\u8A9E",
  "ilo": "\u30A4\u30ED\u30AB\u30CE\u8A9E",
  "inh": "\u30A4\u30F3\u30B0\u30FC\u30B7\u8A9E",
  "io": "\u30A4\u30C9\u8A9E",
  "is": "\u30A2\u30A4\u30B9\u30E9\u30F3\u30C9\u8A9E",
  "it": "\u30A4\u30BF\u30EA\u30A2\u8A9E",
  "iu": "\u30A4\u30CC\u30AF\u30C6\u30A3\u30C8\u30C3\u30C8\u8A9E",
  "izh": "\u30A4\u30F3\u30B0\u30EA\u30A2\u8A9E",
  "ja": "\u65E5\u672C\u8A9E",
  "jam": "\u30B8\u30E3\u30DE\u30A4\u30AB\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "jbo": "\u30ED\u30B8\u30D0\u30F3\u8A9E",
  "jgo": "\u30F3\u30B4\u30F3\u30D0\u8A9E",
  "jmc": "\u30DE\u30C1\u30E3\u30E1\u8A9E",
  "jpr": "\u30E6\u30C0\u30E4\u30FB\u30DA\u30EB\u30B7\u30A2\u8A9E",
  "jrb": "\u30E6\u30C0\u30E4\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "jut": "\u30E6\u30C8\u30E9\u30F3\u30C9\u8A9E",
  "jv": "\u30B8\u30E3\u30EF\u8A9E",
  "ka": "\u30B8\u30E7\u30FC\u30B8\u30A2\u8A9E",
  "kaa": "\u30AB\u30E9\u30AB\u30EB\u30D1\u30AF\u8A9E",
  "kab": "\u30AB\u30D3\u30EB\u8A9E",
  "kac": "\u30AB\u30C1\u30F3\u8A9E",
  "kaj": "\u30AB\u30B8\u30A7\u8A9E",
  "kam": "\u30AB\u30F3\u30D0\u8A9E",
  "kaw": "\u30AB\u30A6\u30A3\u8A9E",
  "kbd": "\u30AB\u30D0\u30EB\u30C9\u8A9E",
  "kbl": "\u30AB\u30CD\u30F3\u30D6\u8A9E",
  "kcg": "\u30AB\u30BF\u30D6\u8A9E",
  "kde": "\u30DE\u30B3\u30F3\u30C7\u8A9E",
  "kea": "\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "ken": "\u30CB\u30E3\u30F3\u8A9E",
  "kfo": "\u30B3\u30ED\u8A9E",
  "kg": "\u30B3\u30F3\u30B4\u8A9E",
  "kgp": "\u30AB\u30A4\u30F3\u30AC\u30F3\u30B0\u8A9E",
  "kha": "\u30AB\u30B7\u8A9E",
  "kho": "\u30B3\u30FC\u30BF\u30F3\u8A9E",
  "khq": "\u30B3\u30A4\u30E9\u30FB\u30C1\u30FC\u30CB\u8A9E",
  "khw": "\u30B3\u30EF\u30FC\u30EB\u8A9E",
  "ki": "\u30AD\u30AF\u30E6\u8A9E",
  "kiu": "\u30AD\u30EB\u30DE\u30F3\u30B8\u30E5\u30AD\u8A9E",
  "kj": "\u30AF\u30EF\u30CB\u30E3\u30DE\u8A9E",
  "kk": "\u30AB\u30B6\u30D5\u8A9E",
  "kkj": "\u30AB\u30B3\u8A9E",
  "kl": "\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u8A9E",
  "kln": "\u30AB\u30EC\u30F3\u30B8\u30F3\u8A9E",
  "km": "\u30AF\u30E1\u30FC\u30EB\u8A9E",
  "kmb": "\u30AD\u30F3\u30D6\u30F3\u30C9\u8A9E",
  "kn": "\u30AB\u30F3\u30CA\u30C0\u8A9E",
  "ko": "\u97D3\u56FD\u8A9E",
  "koi": "\u30B3\u30DF\u30FB\u30DA\u30EB\u30DF\u30E3\u30AF\u8A9E",
  "kok": "\u30B3\u30F3\u30AB\u30CB\u8A9E",
  "kos": "\u30B3\u30B9\u30E9\u30A8\u8A9E",
  "kpe": "\u30AF\u30DA\u30EC\u8A9E",
  "kr": "\u30AB\u30CC\u30EA\u8A9E",
  "krc": "\u30AB\u30E9\u30C1\u30E3\u30A4\u30FB\u30D0\u30EB\u30AB\u30EB\u8A9E",
  "kri": "\u30AF\u30EA\u30AA\u8A9E",
  "krj": "\u30AD\u30CA\u30E9\u30A4\u30A2\u8A9E",
  "krl": "\u30AB\u30EC\u30EA\u30A2\u8A9E",
  "kru": "\u30AF\u30EB\u30AF\u8A9E",
  "ks": "\u30AB\u30B7\u30DF\u30FC\u30EB\u8A9E",
  "ksb": "\u30B5\u30F3\u30D0\u30FC\u8A9E",
  "ksf": "\u30D0\u30D5\u30A3\u30A2\u8A9E",
  "ksh": "\u30B1\u30EB\u30F3\u8A9E",
  "ku": "\u30AF\u30EB\u30C9\u8A9E",
  "kum": "\u30AF\u30E0\u30AF\u8A9E",
  "kut": "\u30AF\u30C6\u30CA\u30A4\u8A9E",
  "kv": "\u30B3\u30DF\u8A9E",
  "kw": "\u30B3\u30FC\u30F3\u30A6\u30A9\u30FC\u30EB\u8A9E",
  "ky": "\u30AD\u30EB\u30AE\u30B9\u8A9E",
  "la": "\u30E9\u30C6\u30F3\u8A9E",
  "lad": "\u30E9\u30C7\u30A3\u30CE\u8A9E",
  "lag": "\u30E9\u30F3\u30AE\u8A9E",
  "lah": "\u30E9\u30D5\u30F3\u30C0\u30FC\u8A9E",
  "lam": "\u30E9\u30F3\u30D0\u8A9E",
  "lb": "\u30EB\u30AF\u30BB\u30F3\u30D6\u30EB\u30AF\u8A9E",
  "lez": "\u30EC\u30BA\u30AE\u8A9E",
  "lfn": "\u30EA\u30F3\u30B0\u30A2\u30FB\u30D5\u30E9\u30F3\u30AB\u30FB\u30CE\u30D0",
  "lg": "\u30AC\u30F3\u30C0\u8A9E",
  "li": "\u30EA\u30F3\u30D6\u30EB\u30D5\u8A9E",
  "lij": "\u30EA\u30B0\u30EA\u30A2\u8A9E",
  "liv": "\u30EA\u30F4\u30A9\u30CB\u30A2\u8A9E",
  "lkt": "\u30E9\u30B3\u30BF\u8A9E",
  "lmo": "\u30ED\u30F3\u30D0\u30EB\u30C9\u8A9E",
  "ln": "\u30EA\u30F3\u30AC\u30E9\u8A9E",
  "lo": "\u30E9\u30AA\u8A9E",
  "lol": "\u30E2\u30F3\u30B4\u8A9E",
  "lou": "\u30EB\u30A4\u30B8\u30A2\u30CA\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "loz": "\u30ED\u30B8\u8A9E",
  "lrc": "\u5317\u30ED\u30EB\u8A9E",
  "lt": "\u30EA\u30C8\u30A2\u30CB\u30A2\u8A9E",
  "ltg": "\u30E9\u30C8\u30AC\u30EA\u30A2\u8A9E",
  "lu": "\u30EB\u30D0\u30FB\u30AB\u30BF\u30F3\u30AC\u8A9E",
  "lua": "\u30EB\u30D0\u30FB\u30EB\u30EB\u30A2\u8A9E",
  "lui": "\u30EB\u30A4\u30BB\u30FC\u30CB\u30E7\u8A9E",
  "lun": "\u30EB\u30F3\u30C0\u8A9E",
  "luo": "\u30EB\u30AA\u8A9E",
  "lus": "\u30DF\u30BE\u8A9E",
  "luy": "\u30EB\u30D2\u30E4\u8A9E",
  "lv": "\u30E9\u30C8\u30D3\u30A2\u8A9E",
  "lzh": "\u6F22\u6587",
  "lzz": "\u30E9\u30BA\u8A9E",
  "mad": "\u30DE\u30C9\u30A5\u30E9\u8A9E",
  "maf": "\u30DE\u30D5\u30A1\u8A9E",
  "mag": "\u30DE\u30AC\u30D2\u30FC\u8A9E",
  "mai": "\u30DE\u30A4\u30C6\u30A3\u30EA\u30FC\u8A9E",
  "mak": "\u30DE\u30AB\u30C3\u30B5\u30EB\u8A9E",
  "man": "\u30DE\u30F3\u30C7\u30A3\u30F3\u30B4\u8A9E",
  "mas": "\u30DE\u30B5\u30A4\u8A9E",
  "mde": "\u30DE\u30D0\u8A9E",
  "mdf": "\u30E2\u30AF\u30B7\u30E3\u8A9E",
  "mdr": "\u30DE\u30F3\u30C0\u30EB\u8A9E",
  "men": "\u30E1\u30F3\u30C7\u8A9E",
  "mer": "\u30E1\u30EB\u8A9E",
  "mfe": "\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u30FB\u30AF\u30EC\u30AA\u30FC\u30EB\u8A9E",
  "mg": "\u30DE\u30C0\u30AC\u30B9\u30AB\u30EB\u8A9E",
  "mga": "\u4E2D\u671F\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u8A9E",
  "mgh": "\u30DE\u30AF\u30A2\u30FB\u30DF\u30FC\u30C8\u8A9E",
  "mgo": "\u30E1\u30BF\u8A9E",
  "mh": "\u30DE\u30FC\u30B7\u30E3\u30EB\u8A9E",
  "mi": "\u30DE\u30AA\u30EA\u8A9E",
  "mic": "\u30DF\u30AF\u30DE\u30AF\u8A9E",
  "min": "\u30DF\u30CA\u30F3\u30AB\u30D0\u30A6\u8A9E",
  "mk": "\u30DE\u30B1\u30C9\u30CB\u30A2\u8A9E",
  "ml": "\u30DE\u30E9\u30E4\u30FC\u30E9\u30E0\u8A9E",
  "mn": "\u30E2\u30F3\u30B4\u30EB\u8A9E",
  "mnc": "\u6E80\u5DDE\u8A9E",
  "mni": "\u30DE\u30CB\u30D7\u30EA\u8A9E",
  "moh": "\u30E2\u30FC\u30DB\u30FC\u30AF\u8A9E",
  "mos": "\u30E2\u30B7\u8A9E",
  "mr": "\u30DE\u30E9\u30FC\u30C6\u30A3\u30FC\u8A9E",
  "mrj": "\u5C71\u5730\u30DE\u30EA\u8A9E",
  "ms": "\u30DE\u30EC\u30FC\u8A9E",
  "mt": "\u30DE\u30EB\u30BF\u8A9E",
  "mua": "\u30E0\u30F3\u30C0\u30F3\u8A9E",
  "mul": "\u8907\u6570\u8A00\u8A9E",
  "mus": "\u30AF\u30EA\u30FC\u30AF\u8A9E",
  "mwl": "\u30DF\u30E9\u30F3\u30C0\u8A9E",
  "mwr": "\u30DE\u30FC\u30EB\u30EF\u30FC\u30EA\u30FC\u8A9E",
  "mwv": "\u30E1\u30F3\u30BF\u30EF\u30A4\u8A9E",
  "my": "\u30DF\u30E3\u30F3\u30DE\u30FC\u8A9E",
  "mye": "\u30DF\u30A8\u30CD\u8A9E",
  "myv": "\u30A8\u30EB\u30B8\u30E3\u8A9E",
  "mzn": "\u30DE\u30FC\u30B6\u30F3\u30C0\u30E9\u30FC\u30F3\u8A9E",
  "na": "\u30CA\u30A6\u30EB\u8A9E",
  "nan": "\u95A9\u5357\u8A9E",
  "nap": "\u30CA\u30DD\u30EA\u8A9E",
  "naq": "\u30CA\u30DE\u8A9E",
  "nb": "\u30CE\u30EB\u30A6\u30A7\u30FC\u8A9E(\u30D6\u30FC\u30AF\u30E2\u30FC\u30EB)",
  "nd": "\u5317\u30F3\u30C7\u30D9\u30EC\u8A9E",
  "nds": "\u4F4E\u5730\u30C9\u30A4\u30C4\u8A9E",
  "nds-NL": "\u4F4E\u5730\u30C9\u30A4\u30C4\u8A9E (\u30AA\u30E9\u30F3\u30C0)",
  "ne": "\u30CD\u30D1\u30FC\u30EB\u8A9E",
  "new": "\u30CD\u30EF\u30FC\u30EB\u8A9E",
  "ng": "\u30F3\u30C9\u30F3\u30AC\u8A9E",
  "nia": "\u30CB\u30A2\u30B9\u8A9E",
  "niu": "\u30CB\u30A6\u30FC\u30A8\u30A4\u8A9E",
  "njo": "\u30A2\u30AA\u30FB\u30CA\u30AC\u8A9E",
  "nl": "\u30AA\u30E9\u30F3\u30C0\u8A9E",
  "nl-BE": "\u30D5\u30E9\u30DE\u30F3\u8A9E",
  "nmg": "\u30AF\u30EF\u30B7\u30AA\u8A9E",
  "nn": "\u30CE\u30EB\u30A6\u30A7\u30FC\u8A9E(\u30CB\u30FC\u30CE\u30B7\u30E5\u30AF)",
  "nnh": "\u30F3\u30B8\u30A8\u30E0\u30D6\u30FC\u30F3\u8A9E",
  "no": "\u30CE\u30EB\u30A6\u30A7\u30FC\u8A9E",
  "nog": "\u30CE\u30AC\u30A4\u8A9E",
  "non": "\u53E4\u30CE\u30EB\u30C9\u8A9E",
  "nov": "\u30CE\u30F4\u30A3\u30A2\u30EB",
  "nqo": "\u30F3\u30B3\u8A9E",
  "nr": "\u5357\u30F3\u30C7\u30D9\u30EC\u8A9E",
  "nso": "\u5317\u90E8\u30BD\u30C8\u8A9E",
  "nus": "\u30CC\u30A8\u30EB\u8A9E",
  "nv": "\u30CA\u30D0\u30DB\u8A9E",
  "nwc": "\u53E4\u5178\u30CD\u30EF\u30FC\u30EB\u8A9E",
  "ny": "\u30CB\u30E3\u30F3\u30B8\u30E3\u8A9E",
  "nym": "\u30CB\u30E3\u30E0\u30A6\u30A7\u30B8\u8A9E",
  "nyn": "\u30CB\u30E3\u30F3\u30B3\u30EC\u8A9E",
  "nyo": "\u30CB\u30E7\u30ED\u8A9E",
  "nzi": "\u30F3\u30BC\u30DE\u8A9E",
  "oc": "\u30AA\u30C3\u30AF\u8A9E",
  "oj": "\u30AA\u30B8\u30D6\u30A6\u30A7\u30FC\u8A9E",
  "om": "\u30AA\u30ED\u30E2\u8A9E",
  "or": "\u30AA\u30C7\u30A3\u30A2\u8A9E",
  "os": "\u30AA\u30BB\u30C3\u30C8\u8A9E",
  "osa": "\u30AA\u30BB\u30FC\u30B8\u8A9E",
  "ota": "\u30AA\u30B9\u30DE\u30F3\u30C8\u30EB\u30B3\u8A9E",
  "pa": "\u30D1\u30F3\u30B8\u30E3\u30D6\u8A9E",
  "pag": "\u30D1\u30F3\u30AC\u30B7\u30CA\u30F3\u8A9E",
  "pal": "\u30D1\u30D5\u30E9\u30F4\u30A3\u30FC\u8A9E",
  "pam": "\u30D1\u30F3\u30D1\u30F3\u30AC\u8A9E",
  "pap": "\u30D1\u30D4\u30A2\u30E1\u30F3\u30C8\u8A9E",
  "pau": "\u30D1\u30E9\u30AA\u8A9E",
  "pcd": "\u30D4\u30AB\u30EB\u30C7\u30A3\u8A9E",
  "pcm": "\u30CA\u30A4\u30B8\u30A7\u30EA\u30A2\u30FB\u30D4\u30B8\u30F3\u8A9E",
  "pdc": "\u30DA\u30F3\u30B7\u30EB\u30D9\u30CB\u30A2\u30FB\u30C9\u30A4\u30C4\u8A9E",
  "pdt": "\u30E1\u30CE\u30CA\u30A4\u30C8\u4F4E\u5730\u30C9\u30A4\u30C4\u8A9E",
  "peo": "\u53E4\u4EE3\u30DA\u30EB\u30B7\u30A2\u8A9E",
  "pfl": "\u30D7\u30D5\u30A1\u30EB\u30C4\u8A9E",
  "phn": "\u30D5\u30A7\u30CB\u30AD\u30A2\u8A9E",
  "pi": "\u30D1\u30FC\u30EA\u8A9E",
  "pl": "\u30DD\u30FC\u30E9\u30F3\u30C9\u8A9E",
  "pms": "\u30D4\u30A8\u30E2\u30F3\u30C6\u8A9E",
  "pnt": "\u30DD\u30F3\u30C8\u30B9\u30FB\u30AE\u30EA\u30B7\u30E3\u8A9E",
  "pon": "\u30DD\u30F3\u30DA\u30A4\u8A9E",
  "prg": "\u30D7\u30ED\u30B7\u30A2\u8A9E",
  "pro": "\u53E4\u671F\u30D7\u30ED\u30D0\u30F3\u30B9\u8A9E",
  "ps": "\u30D1\u30B7\u30E5\u30C8\u30A5\u30FC\u8A9E",
  "pt": "\u30DD\u30EB\u30C8\u30AC\u30EB\u8A9E",
  "pt-BR": "\u30DD\u30EB\u30C8\u30AC\u30EB\u8A9E (\u30D6\u30E9\u30B8\u30EB)",
  "pt-PT": "\u30DD\u30EB\u30C8\u30AC\u30EB\u8A9E (\u30A4\u30D9\u30EA\u30A2\u534A\u5CF6)",
  "qu": "\u30B1\u30C1\u30E5\u30A2\u8A9E",
  "quc": "\u30AD\u30C1\u30A7\u8A9E",
  "qug": "\u30C1\u30F3\u30DC\u30E9\u30BD\u9AD8\u5730\u30B1\u30C1\u30E5\u30A2\u8A9E",
  "raj": "\u30E9\u30FC\u30B8\u30E3\u30B9\u30BF\u30FC\u30F3\u8A9E",
  "rap": "\u30E9\u30D1\u30CC\u30A4\u8A9E",
  "rar": "\u30E9\u30ED\u30C8\u30F3\u30AC\u8A9E",
  "rgn": "\u30ED\u30DE\u30FC\u30CB\u30E3\u8A9E",
  "rhg": "\u30ED\u30D2\u30F3\u30AE\u30E3\u8A9E",
  "rif": "\u30EA\u30FC\u30D5\u8A9E",
  "rm": "\u30ED\u30DE\u30F3\u30B7\u30E5\u8A9E",
  "rn": "\u30EB\u30F3\u30C7\u30A3\u8A9E",
  "ro": "\u30EB\u30FC\u30DE\u30CB\u30A2\u8A9E",
  "ro-MD": "\u30E2\u30EB\u30C0\u30D3\u30A2\u8A9E",
  "rof": "\u30ED\u30F3\u30DC\u8A9E",
  "rom": "\u30ED\u30DE\u30FC\u30CB\u30FC\u8A9E",
  "rtm": "\u30ED\u30C4\u30DE\u8A9E",
  "ru": "\u30ED\u30B7\u30A2\u8A9E",
  "rue": "\u30EB\u30B7\u30F3\u8A9E",
  "rug": "\u30ED\u30F4\u30A3\u30A2\u30CA\u8A9E",
  "rup": "\u30A2\u30EB\u30FC\u30DE\u30CB\u30A2\u8A9E",
  "rw": "\u30AD\u30CB\u30A2\u30EB\u30EF\u30F3\u30C0\u8A9E",
  "rwk": "\u30EB\u30EF\u8A9E",
  "sa": "\u30B5\u30F3\u30B9\u30AF\u30EA\u30C3\u30C8\u8A9E",
  "sad": "\u30B5\u30F3\u30C0\u30A6\u30A7\u8A9E",
  "sah": "\u30B5\u30CF\u8A9E",
  "sam": "\u30B5\u30DE\u30EA\u30A2\u30FB\u30A2\u30E9\u30E0\u8A9E",
  "saq": "\u30B5\u30F3\u30D6\u30EB\u8A9E",
  "sas": "\u30B5\u30B5\u30AF\u8A9E",
  "sat": "\u30B5\u30F3\u30BF\u30FC\u30EA\u30FC\u8A9E",
  "saz": "\u30B5\u30A6\u30E9\u30FC\u30B7\u30E5\u30C8\u30E9\u8A9E",
  "sba": "\u30F3\u30AC\u30E0\u30D0\u30A4\u8A9E",
  "sbp": "\u30B5\u30F3\u30B0\u8A9E",
  "sc": "\u30B5\u30EB\u30C7\u30FC\u30CB\u30E3\u8A9E",
  "scn": "\u30B7\u30C1\u30EA\u30A2\u8A9E",
  "sco": "\u30B9\u30B3\u30C3\u30C8\u30E9\u30F3\u30C9\u8A9E",
  "sd": "\u30B7\u30F3\u30C9\u8A9E",
  "sdc": "\u30B5\u30C3\u30B5\u30EA\u30FB\u30B5\u30EB\u30C7\u30FC\u30CB\u30E3\u8A9E",
  "sdh": "\u5357\u90E8\u30AF\u30EB\u30C9\u8A9E",
  "se": "\u5317\u30B5\u30FC\u30DF\u8A9E",
  "see": "\u30BB\u30CD\u30AB\u8A9E",
  "seh": "\u30BB\u30CA\u8A9E",
  "sei": "\u30BB\u30EA\u8A9E",
  "sel": "\u30BB\u30EA\u30AF\u30D7\u8A9E",
  "ses": "\u30B3\u30A4\u30E9\u30DC\u30ED\u30FB\u30BB\u30F3\u30CB\u8A9E",
  "sg": "\u30B5\u30F3\u30B4\u8A9E",
  "sga": "\u53E4\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u8A9E",
  "sgs": "\u30B5\u30E2\u30AE\u30C6\u30A3\u30A2\u8A9E",
  "sh": "\u30BB\u30EB\u30DC\u30FB\u30AF\u30ED\u30A2\u30C1\u30A2\u8A9E",
  "shi": "\u30BF\u30B7\u30EB\u30CF\u30A4\u30C8\u8A9E",
  "shn": "\u30B7\u30E3\u30F3\u8A9E",
  "shu": "\u30C1\u30E3\u30C9\u30FB\u30A2\u30E9\u30D3\u30A2\u8A9E",
  "si": "\u30B7\u30F3\u30CF\u30E9\u8A9E",
  "sid": "\u30B7\u30C0\u30E2\u8A9E",
  "sk": "\u30B9\u30ED\u30D0\u30AD\u30A2\u8A9E",
  "sl": "\u30B9\u30ED\u30D9\u30CB\u30A2\u8A9E",
  "sli": "\u4F4E\u30B7\u30EC\u30B8\u30A2\u8A9E",
  "sly": "\u30B9\u30E9\u30E4\u30FC\u30EB\u8A9E",
  "sm": "\u30B5\u30E2\u30A2\u8A9E",
  "sma": "\u5357\u30B5\u30FC\u30DF\u8A9E",
  "smj": "\u30EB\u30EC\u30FB\u30B5\u30FC\u30DF\u8A9E",
  "smn": "\u30A4\u30CA\u30EA\u30FB\u30B5\u30FC\u30DF\u8A9E",
  "sms": "\u30B9\u30B3\u30EB\u30C8\u30FB\u30B5\u30FC\u30DF\u8A9E",
  "sn": "\u30B7\u30E7\u30CA\u8A9E",
  "snk": "\u30BD\u30CB\u30F3\u30B1\u8A9E",
  "so": "\u30BD\u30DE\u30EA\u8A9E",
  "sog": "\u30BD\u30B0\u30C9\u8A9E",
  "sq": "\u30A2\u30EB\u30D0\u30CB\u30A2\u8A9E",
  "sr": "\u30BB\u30EB\u30D3\u30A2\u8A9E",
  "srn": "\u30B9\u30EA\u30CA\u30E0\u8A9E",
  "srr": "\u30BB\u30EC\u30EB\u8A9E",
  "ss": "\u30B9\u30EF\u30B8\u8A9E",
  "ssy": "\u30B5\u30DB\u8A9E",
  "st": "\u5357\u90E8\u30BD\u30C8\u8A9E",
  "stq": "\u30B6\u30FC\u30BF\u30FC\u30D5\u30EA\u30B8\u30A2\u8A9E",
  "su": "\u30B9\u30F3\u30C0\u8A9E",
  "suk": "\u30B9\u30AF\u30DE\u8A9E",
  "sus": "\u30B9\u30B9\u8A9E",
  "sux": "\u30B7\u30E5\u30E1\u30FC\u30EB\u8A9E",
  "sv": "\u30B9\u30A6\u30A7\u30FC\u30C7\u30F3\u8A9E",
  "sw": "\u30B9\u30EF\u30D2\u30EA\u8A9E",
  "sw-CD": "\u30B3\u30F3\u30B4\u30FB\u30B9\u30EF\u30D2\u30EA\u8A9E",
  "swb": "\u30B3\u30E2\u30ED\u8A9E",
  "syc": "\u53E4\u5178\u30B7\u30EA\u30A2\u8A9E",
  "syr": "\u30B7\u30EA\u30A2\u8A9E",
  "szl": "\u30B7\u30EC\u30B8\u30A2\u8A9E",
  "ta": "\u30BF\u30DF\u30EB\u8A9E",
  "tcy": "\u30C8\u30A5\u30EB\u8A9E",
  "te": "\u30C6\u30EB\u30B0\u8A9E",
  "tem": "\u30C6\u30E0\u30CD\u8A9E",
  "teo": "\u30C6\u30BD\u8A9E",
  "ter": "\u30C6\u30EC\u30FC\u30CE\u8A9E",
  "tet": "\u30C6\u30C8\u30A5\u30F3\u8A9E",
  "tg": "\u30BF\u30B8\u30AF\u8A9E",
  "th": "\u30BF\u30A4\u8A9E",
  "ti": "\u30C6\u30A3\u30B0\u30EA\u30CB\u30A2\u8A9E",
  "tig": "\u30C6\u30A3\u30B0\u30EC\u8A9E",
  "tiv": "\u30C6\u30A3\u30D6\u8A9E",
  "tk": "\u30C8\u30EB\u30AF\u30E1\u30F3\u8A9E",
  "tkl": "\u30C8\u30B1\u30E9\u30A6\u8A9E",
  "tkr": "\u30C4\u30A1\u30D5\u30EB\u8A9E",
  "tl": "\u30BF\u30AC\u30ED\u30B0\u8A9E",
  "tlh": "\u30AF\u30EA\u30F3\u30B4\u30F3\u8A9E",
  "tli": "\u30C8\u30EA\u30F3\u30AE\u30C3\u30C8\u8A9E",
  "tly": "\u30BF\u30EA\u30B7\u30E5\u8A9E",
  "tmh": "\u30BF\u30DE\u30B7\u30A7\u30AF\u8A9E",
  "tn": "\u30C4\u30EF\u30CA\u8A9E",
  "to": "\u30C8\u30F3\u30AC\u8A9E",
  "tog": "\u30C8\u30F3\u30AC\u8A9E(\u30CB\u30A2\u30B5)",
  "tpi": "\u30C8\u30AF\u30FB\u30D4\u30B7\u30F3\u8A9E",
  "tr": "\u30C8\u30EB\u30B3\u8A9E",
  "tru": "\u30C8\u30A5\u30ED\u30E8\u8A9E",
  "trv": "\u30BF\u30ED\u30B3\u8A9E",
  "ts": "\u30C4\u30A9\u30F3\u30AC\u8A9E",
  "tsd": "\u30C4\u30A1\u30B3\u30F3\u8A9E",
  "tsi": "\u30C1\u30E0\u30B7\u30E5\u8A9E",
  "tt": "\u30BF\u30BF\u30FC\u30EB\u8A9E",
  "ttt": "\u30E0\u30B9\u30EA\u30E0\u30FB\u30BF\u30BF\u30FC\u30EB\u8A9E",
  "tum": "\u30C8\u30A5\u30F3\u30D6\u30AB\u8A9E",
  "tvl": "\u30C4\u30D0\u30EB\u8A9E",
  "tw": "\u30C8\u30A6\u30A3\u8A9E",
  "twq": "\u30BF\u30B5\u30EF\u30AF\u8A9E",
  "ty": "\u30BF\u30D2\u30C1\u8A9E",
  "tyv": "\u30C8\u30A5\u30F4\u30A1\u8A9E",
  "tzm": "\u4E2D\u592E\u30A2\u30C8\u30E9\u30B9\u30FB\u30BF\u30DE\u30B8\u30AF\u30C8\u8A9E",
  "udm": "\u30A6\u30C9\u30E0\u30EB\u30C8\u8A9E",
  "ug": "\u30A6\u30A4\u30B0\u30EB\u8A9E",
  "uga": "\u30A6\u30AC\u30EA\u30C8\u8A9E",
  "uk": "\u30A6\u30AF\u30E9\u30A4\u30CA\u8A9E",
  "umb": "\u30E0\u30D6\u30F3\u30C9\u30A5\u8A9E",
  "und": "\u8A00\u8A9E\u4E0D\u660E",
  "ur": "\u30A6\u30EB\u30C9\u30A5\u30FC\u8A9E",
  "uz": "\u30A6\u30BA\u30D9\u30AF\u8A9E",
  "vai": "\u30F4\u30A1\u30A4\u8A9E",
  "ve": "\u30D9\u30F3\u30C0\u8A9E",
  "vec": "\u30F4\u30A7\u30CD\u30C8\u8A9E",
  "vep": "\u30F4\u30A7\u30D7\u30B9\u8A9E",
  "vi": "\u30D9\u30C8\u30CA\u30E0\u8A9E",
  "vls": "\u897F\u30D5\u30E9\u30DE\u30F3\u8A9E",
  "vmf": "\u30DE\u30A4\u30F3\u30D5\u30E9\u30F3\u30AF\u8A9E",
  "vo": "\u30F4\u30A9\u30E9\u30D4\u30E5\u30AF\u8A9E",
  "vot": "\u30F4\u30A9\u30FC\u30C8\u8A9E",
  "vro": "\u30F4\u30A9\u30ED\u8A9E",
  "vun": "\u30F4\u30F3\u30B8\u30E7\u8A9E",
  "wa": "\u30EF\u30ED\u30F3\u8A9E",
  "wae": "\u30F4\u30A1\u30EA\u30B9\u8A9E",
  "wal": "\u30A6\u30A9\u30E9\u30A4\u30BF\u8A9E",
  "war": "\u30EF\u30E9\u30A4\u8A9E",
  "was": "\u30EF\u30B7\u30E7\u8A9E",
  "wbp": "\u30EF\u30EB\u30D4\u30EA\u8A9E",
  "wo": "\u30A6\u30A9\u30ED\u30D5\u8A9E",
  "wuu": "\u5449\u8A9E",
  "xal": "\u30AB\u30EB\u30E0\u30A4\u30AF\u8A9E",
  "xh": "\u30B3\u30B5\u8A9E",
  "xmf": "\u30E1\u30B0\u30EC\u30EB\u8A9E",
  "xog": "\u30BD\u30AC\u8A9E",
  "yao": "\u30E4\u30AA\u8A9E",
  "yap": "\u30E4\u30C3\u30D7\u8A9E",
  "yav": "\u30E4\u30F3\u30D9\u30F3\u8A9E",
  "ybb": "\u30A4\u30A8\u30F3\u30D0\u8A9E",
  "yi": "\u30A4\u30C7\u30A3\u30C3\u30B7\u30E5\u8A9E",
  "yo": "\u30E8\u30EB\u30D0\u8A9E",
  "yrl": "\u30CB\u30A7\u30A8\u30F3\u30AC\u30C8\u30A5\u8A9E",
  "yue": "\u5E83\u6771\u8A9E",
  "za": "\u30C1\u30EF\u30F3\u8A9E",
  "zap": "\u30B5\u30DD\u30C6\u30AB\u8A9E",
  "zbl": "\u30D6\u30EA\u30B9\u30B7\u30F3\u30DC\u30EB",
  "zea": "\u30BC\u30FC\u30E9\u30F3\u30C8\u8A9E",
  "zen": "\u30BC\u30CA\u30AC\u8A9E",
  "zgh": "\u6A19\u6E96\u30E2\u30ED\u30C3\u30B3 \u30BF\u30DE\u30B8\u30AF\u30C8\u8A9E",
  "zh": "\u4E2D\u56FD\u8A9E",
  "zh-Hans": "\u7C21\u4F53\u4E2D\u56FD\u8A9E",
  "zh-Hant": "\u7E41\u4F53\u4E2D\u56FD\u8A9E",
  "zu": "\u30BA\u30FC\u30EB\u30FC\u8A9E",
  "zun": "\u30BA\u30CB\u8A9E",
  "zxx": "\u8A00\u8A9E\u7684\u5185\u5BB9\u306A\u3057",
  "zza": "\u30B6\u30B6\u8A9E"
};

// src/l10n/locale/ko.ts
var ko_default = {
  "aa": "\uC544\uD30C\uB974\uC5B4",
  "ab": "\uC555\uCE74\uC988\uC5B4",
  "ace": "\uC544\uCCB4\uC5B4",
  "ach": "\uC544\uCF5C\uB9AC\uC5B4",
  "ada": "\uC544\uB2F9\uBA54\uC5B4",
  "ady": "\uC544\uB514\uAC8C\uC5B4",
  "ae": "\uC544\uBCA0\uC2A4\uD0C0\uC5B4",
  "aeb": "\uD280\uB2C8\uC9C0 \uC544\uB78D\uC5B4",
  "af": "\uC544\uD504\uB9AC\uCE78\uC2A4\uC5B4",
  "afh": "\uC544\uD504\uB9AC\uD790\uB9AC\uC5B4",
  "agq": "\uC544\uADF8\uD584\uC5B4",
  "ain": "\uC544\uC774\uB204\uC5B4",
  "ak": "\uC544\uCE78\uC5B4",
  "akk": "\uC544\uCE74\uB4DC\uC5B4",
  "ale": "\uC54C\uB958\uD2B8\uC5B4",
  "alt": "\uB0A8\uBD80 \uC54C\uD0C0\uC774\uC5B4",
  "am": "\uC554\uD558\uB77C\uC5B4",
  "an": "\uC544\uB77C\uACE4\uC5B4",
  "ang": "\uACE0\uB300 \uC601\uC5B4",
  "anp": "\uC559\uAC00\uC5B4",
  "ar": "\uC544\uB78D\uC5B4",
  "ar-001": "\uD604\uB300 \uD45C\uC900 \uC544\uB78D\uC5B4",
  "arc": "\uC544\uB78C\uC5B4",
  "arn": "\uB9C8\uD478\uB465\uAD70\uC5B4",
  "arp": "\uC544\uB77C\uD30C\uD638\uC5B4",
  "arq": "\uC54C\uC81C\uB9AC \uC544\uB78D\uC5B4",
  "ars": "\uC544\uB78D\uC5B4(\uB098\uC988\uB514)",
  "arw": "\uC544\uB77C\uC640\uD06C\uC5B4",
  "ary": "\uBAA8\uB85C\uCF54 \uC544\uB78D\uC5B4",
  "arz": "\uC774\uC9D1\uD2B8 \uC544\uB78D\uC5B4",
  "as": "\uC544\uC0BC\uC5B4",
  "asa": "\uC544\uC218\uC5B4",
  "ast": "\uC544\uC2A4\uD22C\uB9AC\uC544\uC5B4",
  "av": "\uC544\uBC14\uB9AD\uC5B4",
  "awa": "\uC544\uC640\uD788\uC5B4",
  "ay": "\uC544\uC774\uB9C8\uB77C\uC5B4",
  "az": "\uC544\uC81C\uB974\uBC14\uC774\uC794\uC5B4",
  "ba": "\uBC14\uC288\uD0A4\uB974\uC5B4",
  "bal": "\uBC1C\uB8E8\uCE58\uC5B4",
  "ban": "\uBC1C\uB9AC\uC5B4",
  "bas": "\uBC14\uC0AC\uC5B4",
  "bax": "\uBC14\uBB38\uC5B4",
  "bbj": "\uACE0\uB9D0\uB77C\uC5B4",
  "be": "\uBCA8\uB77C\uB8E8\uC2A4\uC5B4",
  "bej": "\uBCA0\uC790\uC5B4",
  "bem": "\uBCB0\uBC14\uC5B4",
  "bez": "\uBCA0\uB098\uC5B4",
  "bfd": "\uBC14\uD478\uD2B8\uC5B4",
  "bg": "\uBD88\uAC00\uB9AC\uC544\uC5B4",
  "bgn": "\uC11C\uBD80 \uBC1C\uB85C\uCE58\uC5B4",
  "bho": "\uD638\uC988\uD478\uB9AC\uC5B4",
  "bi": "\uBE44\uC2AC\uB77C\uB9C8\uC5B4",
  "bik": "\uBE44\uCF5C\uC5B4",
  "bin": "\uBE44\uB2C8\uC5B4",
  "bkm": "\uCF64\uC5B4",
  "bla": "\uC2DD\uC2DC\uCE74\uC5B4",
  "bm": "\uBC24\uBC14\uB77C\uC5B4",
  "bn": "\uBCB5\uACE8\uC5B4",
  "bo": "\uD2F0\uBCA0\uD2B8\uC5B4",
  "br": "\uBE0C\uB974\uD0C0\uB274\uC5B4",
  "bra": "\uBE0C\uB77C\uC9C0\uC5B4",
  "brh": "\uBE0C\uB77C\uD6C4\uC774\uC5B4",
  "brx": "\uBCF4\uB3C4\uC5B4",
  "bs": "\uBCF4\uC2A4\uB2C8\uC544\uC5B4",
  "bss": "\uC544\uCFE0\uC988\uC5B4",
  "bua": "\uBD80\uB9AC\uC544\uD0C0",
  "bug": "\uBD80\uAE30\uC5B4",
  "bum": "\uBD88\uB8E8\uC5B4",
  "byn": "\uBE0C\uB9B0\uC5B4",
  "byv": "\uBA54\uB460\uBC14\uC5B4",
  "ca": "\uCE74\uD0C8\uB85C\uB2C8\uC544\uC5B4",
  "cad": "\uCE74\uB3C4\uC5B4",
  "car": "\uCE74\uB9AC\uBE0C\uC5B4",
  "cay": "\uCE74\uC720\uAC00\uC5B4",
  "cch": "\uC557\uC0BC\uC5B4",
  "ccp": "\uCC28\uD06C\uB9C8\uC5B4",
  "ce": "\uCCB4\uCCB8\uC5B4",
  "ceb": "\uC138\uBD80\uC544\uB178\uC5B4",
  "cgg": "\uCE58\uAC00\uC5B4",
  "ch": "\uCC28\uBAA8\uB85C\uC5B4",
  "chb": "\uCE58\uBE0C\uCC28\uC5B4",
  "chg": "\uCC28\uAC00\uD0C0\uC774\uC5B4",
  "chk": "\uCD94\uD06C\uC5B4",
  "chm": "\uB9C8\uB9AC\uC5B4",
  "chn": "\uCE58\uB204\uD06C \uC790\uACE4",
  "cho": "\uCD09\uD1A0\uC5B4",
  "chp": "\uCE58\uD398\uC6B0\uC580",
  "chr": "\uCCB4\uB85C\uD0A4\uC5B4",
  "chy": "\uC0E4\uC774\uC5D4\uC5B4",
  "ckb": "\uC18C\uB77C\uB2C8 \uCFE0\uB974\uB4DC\uC5B4",
  "co": "\uCF54\uB974\uC2DC\uCE74\uC5B4",
  "cop": "\uCF65\uD2B8\uC5B4",
  "cr": "\uD06C\uB9AC\uC5B4",
  "crh": "\uD06C\uB9AC\uBBFC \uD130\uD0A4\uC5B4; \uD06C\uB9AC\uBBFC \uD0C0\uD0C0\uB974\uC5B4",
  "crs": "\uC138\uC774\uC178 \uD06C\uB9AC\uC62C \uD504\uB791\uC2A4\uC5B4",
  "cs": "\uCCB4\uCF54\uC5B4",
  "csb": "\uCE74\uC288\uBE44\uC544\uC5B4",
  "cu": "\uAD50\uD68C \uC2AC\uB77C\uBE0C\uC5B4",
  "cv": "\uCD94\uBC14\uC2DC\uC5B4",
  "cy": "\uC6E8\uC77C\uC2A4\uC5B4",
  "da": "\uB374\uB9C8\uD06C\uC5B4",
  "dak": "\uB2E4\uCF54\uD0C0\uC5B4",
  "dar": "\uB2E4\uB974\uADF8\uC640\uC5B4",
  "dav": "\uD0C0\uC774\uD0C0\uC5B4",
  "de": "\uB3C5\uC77C\uC5B4",
  "de-AT": "\uB3C5\uC77C\uC5B4(\uC624\uC2A4\uD2B8\uB9AC\uC544)",
  "de-CH": "\uACE0\uC9C0 \uB3C5\uC77C\uC5B4(\uC2A4\uC704\uC2A4)",
  "del": "\uB378\uB77C\uC6E8\uC5B4\uC5B4",
  "den": "\uC2AC\uB77C\uBE0C\uC5B4",
  "dgr": "\uB3C4\uADF8\uB9AC\uBE0C\uC5B4",
  "din": "\uB529\uCE74\uC5B4",
  "dje": "\uC790\uB974\uB9C8\uC5B4",
  "doi": "\uB3C4\uADF8\uB9AC\uC5B4",
  "dsb": "\uC800\uC9C0 \uC18C\uB974\uBE44\uC544\uC5B4",
  "dua": "\uB450\uC54C\uB77C\uC5B4",
  "dum": "\uC911\uC138 \uB124\uB35C\uB780\uB4DC\uC5B4",
  "dv": "\uB514\uBCA0\uD788\uC5B4",
  "dyo": "\uC878\uB77C \uD3EC\uB2C8\uC5B4",
  "dyu": "\uB4DC\uC728\uB77C\uC5B4",
  "dz": "\uC885\uCE74\uC5B4",
  "dzg": "\uB2E4\uC7A5\uAC00\uC5B4",
  "ebu": "\uC5E0\uBD80\uC5B4",
  "ee": "\uC5D0\uC6E8\uC5B4",
  "efi": "\uC774\uD53D\uC5B4",
  "egy": "\uACE0\uB300 \uC774\uC9D1\uD2B8\uC5B4",
  "eka": "\uC774\uCE74\uC8FD\uC5B4",
  "el": "\uADF8\uB9AC\uC2A4\uC5B4",
  "elx": "\uC5D8\uB78C\uC5B4",
  "en": "\uC601\uC5B4",
  "en-AU": "\uC601\uC5B4(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544)",
  "en-CA": "\uC601\uC5B4(\uCE90\uB098\uB2E4)",
  "en-GB": "\uC601\uC5B4(\uC601\uAD6D)",
  "en-US": "\uC601\uC5B4(\uBBF8\uAD6D)",
  "enm": "\uC911\uC138 \uC601\uC5B4",
  "eo": "\uC5D0\uC2A4\uD398\uB780\uD1A0\uC5B4",
  "es": "\uC2A4\uD398\uC778\uC5B4",
  "es-419": "\uC2A4\uD398\uC778\uC5B4(\uB77C\uD2F4 \uC544\uBA54\uB9AC\uCE74)",
  "es-ES": "\uC2A4\uD398\uC778\uC5B4(\uC720\uB7FD)",
  "es-MX": "\uC2A4\uD398\uC778\uC5B4(\uBA55\uC2DC\uCF54)",
  "et": "\uC5D0\uC2A4\uD1A0\uB2C8\uC544\uC5B4",
  "eu": "\uBC14\uC2A4\uD06C\uC5B4",
  "ewo": "\uC774\uC6D0\uB3C4\uC5B4",
  "fa": "\uD398\uB974\uC2DC\uC544\uC5B4",
  "fa-AF": "\uB2E4\uB9AC\uC5B4",
  "fan": "\uD321\uADF8\uC5B4",
  "fat": "\uD310\uD2F0\uC5B4",
  "ff": "\uD480\uB77C\uC5B4",
  "fi": "\uD540\uB780\uB4DC\uC5B4",
  "fil": "\uD544\uB9AC\uD540\uC5B4",
  "fj": "\uD53C\uC9C0\uC5B4",
  "fo": "\uD398\uB85C\uC5B4",
  "fon": "\uD3F0\uC5B4",
  "fr": "\uD504\uB791\uC2A4\uC5B4",
  "fr-CA": "\uD504\uB791\uC2A4\uC5B4(\uCE90\uB098\uB2E4)",
  "fr-CH": "\uD504\uB791\uC2A4\uC5B4(\uC2A4\uC704\uC2A4)",
  "frc": "\uCF00\uC774\uC900 \uD504\uB791\uC2A4\uC5B4",
  "frm": "\uC911\uC138 \uD504\uB791\uC2A4\uC5B4",
  "fro": "\uACE0\uB300 \uD504\uB791\uC2A4\uC5B4",
  "frr": "\uBD81\uBD80 \uD504\uB9AC\uC9C0\uC544\uC5B4",
  "frs": "\uB3D9\uBD80 \uD504\uB9AC\uC2AC\uB780\uB4DC\uC5B4",
  "fur": "\uD504\uB9AC\uC6B8\uB9AC\uC5B4",
  "fy": "\uC11C\uBD80 \uD504\uB9AC\uC9C0\uC544\uC5B4",
  "ga": "\uC544\uC77C\uB79C\uB4DC\uC5B4",
  "gaa": "\uAC00\uC5B4",
  "gag": "\uAC00\uAC00\uC6B0\uC2A4\uC5B4",
  "gan": "\uAC04\uC5B4",
  "gay": "\uAC00\uC694\uC5B4",
  "gba": "\uADF8\uBC14\uC57C\uC5B4",
  "gbz": "\uC870\uB85C\uC544\uC2A4\uD130 \uB2E4\uB9AC\uC5B4",
  "gd": "\uC2A4\uCF54\uD2C0\uB79C\uB4DC \uAC8C\uC77C\uC5B4",
  "gez": "\uAC8C\uC774\uC988\uC5B4",
  "gil": "\uD0A4\uB9AC\uBC14\uC2DC\uC5B4",
  "gl": "\uAC08\uB9AC\uC2DC\uC544\uC5B4",
  "glk": "\uAE38\uB77C\uD0A4\uC5B4",
  "gmh": "\uC911\uC138 \uACE0\uC9C0 \uB3C5\uC77C\uC5B4",
  "gn": "\uACFC\uB77C\uB2C8\uC5B4",
  "goh": "\uACE0\uB300 \uACE0\uC9C0 \uB3C5\uC77C\uC5B4",
  "gom": "\uACE0\uC544 \uCF58\uCE78\uC5B4",
  "gon": "\uACE4\uB514\uC5B4",
  "gor": "\uACE0\uB860\uD0C8\uB85C\uC5B4",
  "got": "\uACE0\uD2B8\uC5B4",
  "grb": "\uAC8C\uB974\uBCF4\uC5B4",
  "grc": "\uACE0\uB300 \uADF8\uB9AC\uC2A4\uC5B4",
  "gsw": "\uB3C5\uC77C\uC5B4(\uC2A4\uC704\uC2A4)",
  "gu": "\uAD6C\uC790\uB77C\uD2B8\uC5B4",
  "guz": "\uAD6C\uC2DC\uC5B4",
  "gv": "\uB9F9\uD06C\uC2A4\uC5B4",
  "gwi": "\uADF8\uC704\uCE5C\uC5B4",
  "ha": "\uD558\uC6B0\uC0AC\uC5B4",
  "hai": "\uD558\uC774\uB2E4\uC5B4",
  "hak": "\uD558\uCE74\uC5B4",
  "haw": "\uD558\uC640\uC774\uC5B4",
  "he": "\uD788\uBE0C\uB9AC\uC5B4",
  "hi": "\uD78C\uB514\uC5B4",
  "hif": "\uD53C\uC9C0 \uD78C\uB514\uC5B4",
  "hil": "\uD5E4\uB9AC\uAC00\uB1EC\uC5B4",
  "hit": "\uD558\uD0C0\uC774\uD2B8\uC5B4",
  "hmn": "\uD788\uBAB8\uC5B4",
  "ho": "\uD788\uB9AC \uBAA8\uD22C\uC5B4",
  "hr": "\uD06C\uB85C\uC544\uD2F0\uC544\uC5B4",
  "hsb": "\uACE0\uC9C0 \uC18C\uB974\uBE44\uC544\uC5B4",
  "hsn": "\uC0F9\uC5B4",
  "ht": "\uC544\uC774\uD2F0\uC5B4",
  "hu": "\uD5DD\uAC00\uB9AC\uC5B4",
  "hup": "\uD6C4\uD30C\uC5B4",
  "hy": "\uC544\uB974\uBA54\uB2C8\uC544\uC5B4",
  "hz": "\uD5E4\uB808\uB85C\uC5B4",
  "ia": "\uC778\uD130\uB9C1\uAD6C\uC544",
  "iba": "\uC774\uBC18\uC5B4",
  "ibb": "\uC774\uBE44\uBE44\uC624\uC5B4",
  "id": "\uC778\uB3C4\uB124\uC2DC\uC544\uC5B4",
  "ie": "\uC778\uD14C\uB974\uB9C1\uAD6C\uC5D0",
  "ig": "\uC774\uADF8\uBCF4\uC5B4",
  "ii": "\uC4F0\uCD28 \uC774\uC5B4",
  "ik": "\uC774\uB204\uD53C\uC544\uD06C\uC5B4",
  "ilo": "\uC774\uB85C\uCF54\uC5B4",
  "inh": "\uC778\uADC0\uC2DC\uC5B4",
  "io": "\uC774\uB3C4\uC5B4",
  "is": "\uC544\uC774\uC2AC\uB780\uB4DC\uC5B4",
  "it": "\uC774\uD0C8\uB9AC\uC544\uC5B4",
  "iu": "\uC774\uB205\uD2F0\uD22C\uD2B8\uC5B4",
  "ja": "\uC77C\uBCF8\uC5B4",
  "jbo": "\uB85C\uBC18\uC5B4",
  "jgo": "\uC751\uACF0\uBC14\uC5B4",
  "jmc": "\uB9C8\uCC28\uBA54\uC5B4",
  "jpr": "\uC720\uB300-\uD398\uB974\uC2DC\uC544\uC5B4",
  "jrb": "\uC720\uB300-\uC544\uB77C\uBE44\uC544\uC5B4",
  "jv": "\uC790\uBC14\uC5B4",
  "ka": "\uC870\uC9C0\uC544\uC5B4",
  "kaa": "\uCE74\uB77C\uCE7C\uD30C\uD06C\uC5B4",
  "kab": "\uCEE4\uBC14\uC77C\uC5B4",
  "kac": "\uCE74\uCE5C\uC5B4",
  "kaj": "\uAE4C\uAF2C\uD1A0\uB044\uC5B4",
  "kam": "\uCE84\uBC14\uC5B4",
  "kaw": "\uCE74\uC704\uC5B4",
  "kbd": "\uCE74\uBC14\uB974\uB514\uC5B4",
  "kbl": "\uCE74\uB134\uBD80\uC5B4",
  "kcg": "\uD2F0\uC58D\uC5B4",
  "kde": "\uB9C8\uCF58\uB370\uC5B4",
  "kea": "\uD06C\uB9AC\uC62C\uC5B4",
  "kfo": "\uCF54\uB85C\uC5B4",
  "kg": "\uCF69\uACE0\uC5B4",
  "kgp": "kgp",
  "kha": "\uCE74\uC2DC\uC5B4",
  "kho": "\uD638\uD0C4\uC5B4",
  "khq": "\uCF54\uC774\uB77C \uCE5C\uB2C8\uC5B4",
  "khw": "\uCF54\uC640\uB974\uC5B4",
  "ki": "\uD0A4\uCFE0\uC720\uC5B4",
  "kj": "\uCFE0\uC548\uC57C\uB9C8\uC5B4",
  "kk": "\uCE74\uC790\uD750\uC5B4",
  "kkj": "\uCE74\uCF54\uC5B4",
  "kl": "\uADF8\uB9B0\uB780\uB4DC\uC5B4",
  "kln": "\uCE7C\uB80C\uC9C4\uC5B4",
  "km": "\uD06C\uBA54\uB974\uC5B4",
  "kmb": "\uD0B4\uBD84\uB450\uC5B4",
  "kn": "\uCE78\uB098\uB2E4\uC5B4",
  "ko": "\uD55C\uAD6D\uC5B4",
  "koi": "\uCF54\uBBF8\uD398\uB974\uBA00\uD06C\uC5B4",
  "kok": "\uCF54\uCE74\uB2C8\uC5B4",
  "kos": "\uCF54\uC2A4\uB77C\uC774\uC5D4\uC5B4",
  "kpe": "\uD06C\uD3A0\uB808\uC5B4",
  "kr": "\uCE78\uB204\uB9AC\uC5B4",
  "krc": "\uCE74\uB77C\uCC60\uC774-\uBC1C\uCE74\uB974\uC5B4",
  "krl": "\uCE74\uB810\uB9AC\uC57C\uC5B4",
  "kru": "\uCFE0\uB974\uD06C\uC5B4",
  "ks": "\uCE74\uC288\uBBF8\uB974\uC5B4",
  "ksb": "\uC0F4\uBC1C\uB77C\uC5B4",
  "ksf": "\uBC14\uD53C\uC544\uC5B4",
  "ksh": "\uCF5C\uB85C\uADF8\uB2C8\uC548\uC5B4",
  "ku": "\uCFE0\uB974\uB4DC\uC5B4",
  "kum": "\uCFE0\uBBF9\uC5B4",
  "kut": "\uCFE0\uD14C\uB124\uC5B4",
  "kv": "\uCF54\uBBF8\uC5B4",
  "kw": "\uCF58\uC6D4\uC5B4",
  "ky": "\uD0A4\uB974\uAE30\uC2A4\uC5B4",
  "la": "\uB77C\uD2F4\uC5B4",
  "lad": "\uB77C\uB514\uB178\uC5B4",
  "lag": "\uB791\uAE30\uC5B4",
  "lah": "\uB77C\uD55C\uB2E4\uC5B4",
  "lam": "\uB78C\uBC14\uC5B4",
  "lb": "\uB8E9\uC148\uBD80\uB974\uD06C\uC5B4",
  "lez": "\uB808\uC988\uAE30\uC548\uC5B4",
  "lfn": "\uB9C1\uAD6C\uC544 \uD504\uB791\uCE74 \uB178\uBC14",
  "lg": "\uAC04\uB2E4\uC5B4",
  "li": "\uB9BC\uBC84\uAC70\uC5B4",
  "lij": "lij",
  "lkt": "\uB77C\uCF54\uD0C0\uC5B4",
  "ln": "\uB9C1\uAC08\uB77C\uC5B4",
  "lo": "\uB77C\uC624\uC5B4",
  "lol": "\uBABD\uACE0\uC5B4",
  "lou": "\uB8E8\uC774\uC9C0\uC560\uB098 \uD06C\uB9AC\uC62C\uC5B4",
  "loz": "\uB85C\uC9C0\uC5B4",
  "lrc": "\uBD81\uBD80 \uB8E8\uB9AC\uC5B4",
  "lt": "\uB9AC\uD22C\uC544\uB2C8\uC544\uC5B4",
  "lu": "\uB8E8\uBC14-\uCE74\uD0C4\uAC00\uC5B4",
  "lua": "\uB8E8\uBC14-\uB8F0\uB8E8\uC544\uC5B4",
  "lui": "\uB8E8\uC774\uC138\uB178\uC5B4",
  "lun": "\uB8EC\uB2E4\uC5B4",
  "luo": "\uB8E8\uC624\uC5B4",
  "lus": "\uB8E8\uC0E4\uC774\uC5B4",
  "luy": "\uB8E8\uC57C\uC5B4",
  "lv": "\uB77C\uD2B8\uBE44\uC544\uC5B4",
  "mad": "\uB9C8\uB450\uB77C\uC5B4",
  "maf": "\uB9C8\uD30C\uC5B4",
  "mag": "\uB9C8\uAC00\uD788\uC5B4",
  "mai": "\uB9C8\uC774\uD2F8\uB9AC\uC5B4",
  "mak": "\uB9C8\uCE74\uC0AC\uC5B4",
  "man": "\uB9CC\uB529\uACE0\uC5B4",
  "mas": "\uB9C8\uC0AC\uC774\uC5B4",
  "mde": "\uB9C8\uBC14\uC5B4",
  "mdf": "\uBAA8\uD06C\uC0E4\uC5B4",
  "mdr": "\uB9CC\uB2E4\uB974\uC5B4",
  "men": "\uBA58\uB370\uC5B4",
  "mer": "\uBA54\uB8E8\uC5B4",
  "mfe": "\uBAA8\uB9AC\uC2A4\uC580\uC5B4",
  "mg": "\uB9D0\uB77C\uAC00\uC2DC\uC5B4",
  "mga": "\uC911\uC138 \uC544\uC77C\uB79C\uB4DC\uC5B4",
  "mgh": "\uB9C8\uD06C\uD6C4\uC640-\uBA54\uD1A0\uC5B4",
  "mgo": "\uBA54\uD0C0\uC5B4",
  "mh": "\uB9C8\uC15C\uC5B4",
  "mi": "\uB9C8\uC624\uB9AC\uC5B4",
  "mic": "\uBBF8\uD06C\uB9E5\uC5B4",
  "min": "\uBBF8\uB0AD\uCE74\uBC14\uC6B0\uC5B4",
  "mk": "\uB9C8\uCF00\uB3C4\uB2C8\uC544\uC5B4",
  "ml": "\uB9D0\uB77C\uC584\uB78C\uC5B4",
  "mn": "\uBABD\uACE8\uC5B4",
  "mnc": "\uB9CC\uC8FC\uC5B4",
  "mni": "\uB9C8\uB2C8\uD478\uB9AC\uC5B4",
  "moh": "\uBAA8\uD638\uD06C\uC5B4",
  "mos": "\uBAA8\uC2DC\uC5B4",
  "mr": "\uB9C8\uB77C\uD2F0\uC5B4",
  "mrj": "\uC11C\uBD80 \uB9C8\uB9AC\uC5B4",
  "ms": "\uB9D0\uB808\uC774\uC5B4",
  "mt": "\uBAB0\uD0C0\uC5B4",
  "mua": "\uBB38\uB2F9\uC5B4",
  "mul": "\uB2E4\uC911 \uC5B8\uC5B4",
  "mus": "\uD06C\uB9AC\uD06C\uC5B4",
  "mwl": "\uBBF8\uB780\uB370\uC5B4",
  "mwr": "\uB9C8\uB974\uC640\uB9AC\uC5B4",
  "my": "\uBC84\uB9C8\uC5B4",
  "mye": "\uBBF8\uC608\uB124\uC5B4",
  "myv": "\uC5D8\uC988\uC57C\uC5B4",
  "mzn": "\uB9C8\uC794\uB370\uB77C\uB2C8\uC5B4",
  "na": "\uB098\uC6B0\uB8E8\uC5B4",
  "nan": "\uBBFC\uB09C\uC5B4",
  "nap": "\uB098\uD3F4\uB9AC\uC5B4",
  "naq": "\uB098\uB9C8\uC5B4",
  "nb": "\uB178\uB974\uC6E8\uC774\uC5B4(\uBCF4\uD06C\uB9D0)",
  "nd": "\uBD81\uBD80 \uC740\uB370\uBCA8\uB808\uC5B4",
  "nds": "\uC800\uC9C0 \uB3C5\uC77C\uC5B4",
  "nds-NL": "\uC800\uC9C0 \uC0C9\uC2A8\uC5B4",
  "ne": "\uB124\uD314\uC5B4",
  "new": "\uB124\uC640\uB974\uC5B4",
  "ng": "\uB290\uB3D9\uAC00\uC5B4",
  "nia": "\uB2C8\uC544\uC2A4\uC5B4",
  "niu": "\uB2C8\uC6E8\uC5B8\uC5B4",
  "nl": "\uB124\uB35C\uB780\uB4DC\uC5B4",
  "nl-BE": "\uD50C\uB77C\uB9DD\uC5B4",
  "nmg": "\uD06C\uC640\uC2DC\uC624\uC5B4",
  "nn": "\uB178\uB974\uC6E8\uC774\uC5B4(\uB2C8\uB178\uB974\uC2A4\uD06C)",
  "nnh": "\uB290\uAE30\uC5E0\uBCF8\uC5B4",
  "no": "\uB178\uB974\uC6E8\uC774\uC5B4",
  "nog": "\uB178\uAC00\uC774\uC5B4",
  "non": "\uACE0\uB300 \uB178\uB974\uC6E8\uC774\uC5B4",
  "nqo": "\uC751\uCF54\uC5B4",
  "nr": "\uB0A8\uBD80 \uC740\uB370\uBCA8\uB808\uC5B4",
  "nso": "\uBD81\uBD80 \uC18C\uD1A0\uC5B4",
  "nus": "\uB204\uC5D0\uB974\uC5B4",
  "nv": "\uB098\uBC14\uD638\uC5B4",
  "nwc": "\uACE0\uC804 \uB124\uC640\uB974\uC5B4",
  "ny": "\uB0D4\uC790\uC5B4",
  "nym": "\uB2C8\uC554\uC6E8\uC9C0\uC5B4",
  "nyn": "\uB2C8\uC548\uCF5C\uC5B4",
  "nyo": "\uB274\uB85C\uC5B4",
  "nzi": "\uB290\uC9C0\uB9C8\uC5B4",
  "oc": "\uC624\uD06C\uC5B4",
  "oj": "\uC624\uC9C0\uBE0C\uC640\uC5B4",
  "om": "\uC624\uB85C\uBAA8\uC5B4",
  "or": "\uC624\uB9AC\uC57C\uC5B4",
  "os": "\uC624\uC138\uD2B8\uC5B4",
  "osa": "\uC624\uC138\uC774\uC9C0\uC5B4",
  "ota": "\uC624\uC2A4\uB9CC \uD130\uD0A4\uC5B4",
  "pa": "\uD380\uC7A1\uC5B4",
  "pag": "\uD310\uAC00\uC2DC\uB09C\uC5B4",
  "pal": "\uD314\uB808\uBE44\uC5B4",
  "pam": "\uD31C\uD321\uAC00\uC5B4",
  "pap": "\uD30C\uD53C\uC544\uBA3C\uD1A0\uC5B4",
  "pau": "\uD314\uB77C\uC6B0\uC5B4",
  "pcm": "\uB098\uC774\uC9C0\uB9AC\uC544 \uD53C\uC9C4\uC5B4",
  "peo": "\uACE0\uB300 \uD398\uB974\uC2DC\uC544\uC5B4",
  "phn": "\uD398\uB2C8\uD0A4\uC544\uC5B4",
  "pi": "\uD314\uB9AC\uC5B4",
  "pl": "\uD3F4\uB780\uB4DC\uC5B4",
  "pnt": "\uD3F0\uD2F1\uC5B4",
  "pon": "\uD3FC\uD398\uC774\uC5B4",
  "prg": "\uD504\uB7EC\uC2DC\uC544\uC5B4",
  "pro": "\uACE0\uB300 \uD504\uB85C\uBC29\uC2A4\uC5B4",
  "ps": "\uD30C\uC288\uD1A0\uC5B4",
  "pt": "\uD3EC\uB974\uD22C\uAC08\uC5B4",
  "pt-BR": "\uD3EC\uB974\uD22C\uAC08\uC5B4(\uBE0C\uB77C\uC9C8)",
  "pt-PT": "\uD3EC\uB974\uD22C\uAC08\uC5B4(\uC720\uB7FD)",
  "qu": "\uCF00\uCD94\uC544\uC5B4",
  "quc": "\uD0A4\uCCB4\uC5B4",
  "raj": "\uB77C\uC790\uC2A4\uD0C4\uC5B4",
  "rap": "\uB77C\uD30C\uB274\uC774",
  "rar": "\uB77C\uB85C\uD1B5\uAC00\uC5B4",
  "rhg": "\uB85C\uD79D\uC57C\uC5B4",
  "rm": "\uB85C\uB9CC\uC2DC\uC5B4",
  "rn": "\uB8EC\uB514\uC5B4",
  "ro": "\uB8E8\uB9C8\uB2C8\uC544\uC5B4",
  "ro-MD": "\uBAB0\uB3C4\uBC14\uC5B4",
  "rof": "\uB86C\uBCF4\uC5B4",
  "rom": "\uC9D1\uC2DC\uC5B4",
  "ru": "\uB7EC\uC2DC\uC544\uC5B4",
  "rue": "\uB8E8\uC2E0\uC5B4",
  "rup": "\uC544\uB85C\uB9C8\uB2C8\uC544\uC5B4",
  "rw": "\uB974\uC644\uB2E4\uC5B4",
  "rwk": "\uB974\uC640\uC5B4",
  "sa": "\uC0B0\uC2A4\uD06C\uB9AC\uD2B8\uC5B4",
  "sad": "\uC0B0\uB2E4\uC6E8\uC5B4",
  "sah": "\uC57C\uCFE0\uD2B8\uC5B4",
  "sam": "\uC0AC\uB9C8\uB9AC\uC544 \uC544\uB78D\uC5B4",
  "saq": "\uC0BC\uBD80\uB8E8\uC5B4",
  "sas": "\uC0AC\uC0AC\uD06C\uC5B4",
  "sat": "\uC0B0\uD0C8\uB9AC\uC5B4",
  "sba": "\uB290\uAC10\uBC14\uC774\uC5B4",
  "sbp": "\uC0C1\uAD6C\uC5B4",
  "sc": "\uC0AC\uB974\uB514\uB2C8\uC544\uC5B4",
  "scn": "\uC2DC\uCE60\uB9AC\uC544\uC5B4",
  "sco": "\uC2A4\uCF54\uD2C0\uB79C\uB4DC\uC5B4",
  "sd": "\uC2E0\uB514\uC5B4",
  "sdh": "\uB0A8\uBD80 \uCFE0\uB974\uB4DC\uC5B4",
  "se": "\uBD81\uBD80 \uC0AC\uBBF8\uC5B4",
  "see": "\uC138\uB124\uCE74\uC5B4",
  "seh": "\uC138\uB098\uC5B4",
  "sel": "\uC140\uCFE0\uD504\uC5B4",
  "ses": "\uCF54\uC774\uC57C\uBCF4\uB85C \uC138\uB2C8\uC5B4",
  "sg": "\uC0B0\uACE0\uC5B4",
  "sga": "\uACE0\uB300 \uC544\uC77C\uB79C\uB4DC\uC5B4",
  "sh": "\uC138\uB974\uBE44\uC544-\uD06C\uB85C\uC544\uD2F0\uC544\uC5B4",
  "shi": "\uD0C0\uC178\uD788\uD2B8\uC5B4",
  "shn": "\uC0E8\uC5B4",
  "shu": "\uCC28\uB514\uC5B8 \uC544\uB77C\uBE44\uC544\uC5B4",
  "si": "\uC2F1\uD560\uB77C\uC5B4",
  "sid": "\uC2DC\uB2E4\uBAA8\uC5B4",
  "sk": "\uC2AC\uB85C\uBC14\uD0A4\uC544\uC5B4",
  "sl": "\uC2AC\uB85C\uBCA0\uB2C8\uC544\uC5B4",
  "sm": "\uC0AC\uBAA8\uC544\uC5B4",
  "sma": "\uB0A8\uBD80 \uC0AC\uBBF8\uC5B4",
  "smj": "\uB8F0\uB808 \uC0AC\uBBF8\uC5B4",
  "smn": "\uC774\uB098\uB9AC \uC0AC\uBBF8\uC5B4",
  "sms": "\uC2A4\uCF5C\uD2B8 \uC0AC\uBBF8\uC5B4",
  "sn": "\uC1FC\uB098\uC5B4",
  "snk": "\uC18C\uB2CC\uCF00\uC5B4",
  "so": "\uC18C\uB9D0\uB9AC\uC544\uC5B4",
  "sog": "\uC18C\uADF8\uB514\uC5D4\uC5B4",
  "sq": "\uC54C\uBC14\uB2C8\uC544\uC5B4",
  "sr": "\uC138\uB974\uBE44\uC544\uC5B4",
  "srn": "\uC2A4\uB77C\uB09C \uD1B5\uAC00\uC5B4",
  "srr": "\uC138\uB808\uB974\uC5B4",
  "ss": "\uC2DC\uC2A4\uC640\uD2F0\uC5B4",
  "ssy": "\uC0AC\uD638\uC5B4",
  "st": "\uB0A8\uBD80 \uC18C\uD1A0\uC5B4",
  "su": "\uC21C\uB2E4\uC5B4",
  "suk": "\uC218\uCFE0\uB9C8\uC5B4",
  "sus": "\uC218\uC218\uC5B4",
  "sux": "\uC218\uBA54\uB974\uC5B4",
  "sv": "\uC2A4\uC6E8\uB374\uC5B4",
  "sw": "\uC2A4\uC640\uD790\uB9AC\uC5B4",
  "sw-CD": "\uCF69\uACE0 \uC2A4\uC640\uD790\uB9AC\uC5B4",
  "swb": "\uCF54\uBAA8\uB85C\uC5B4",
  "syc": "\uACE0\uC804 \uC2DC\uB9AC\uC544\uC5B4",
  "syr": "\uC2DC\uB9AC\uC544\uC5B4",
  "ta": "\uD0C0\uBC00\uC5B4",
  "te": "\uD154\uB8E8\uAD6C\uC5B4",
  "tem": "\uD300\uB2C8\uC5B4",
  "teo": "\uD14C\uC870\uC5B4",
  "ter": "\uD14C\uB808\uB178\uC5B4",
  "tet": "\uD14C\uD23C\uC5B4",
  "tg": "\uD0C0\uC9C0\uD06C\uC5B4",
  "th": "\uD0DC\uAD6D\uC5B4",
  "ti": "\uD2F0\uADF8\uB9AC\uB0D0\uC5B4",
  "tig": "\uD2F0\uADF8\uB808\uC5B4",
  "tiv": "\uD2F0\uBE0C\uC5B4",
  "tk": "\uD22C\uB974\uD06C\uBA58\uC5B4",
  "tkl": "\uD1A0\uCF08\uB77C\uC6B0\uC81C\uB3C4\uC5B4",
  "tkr": "\uCC28\uD6C4\uB974\uC5B4",
  "tl": "\uD0C0\uAC08\uB85C\uADF8\uC5B4",
  "tlh": "\uD074\uB9C1\uC628\uC5B4",
  "tli": "\uD2C0\uB9C1\uAE43\uC871\uC5B4",
  "tly": "\uD0C8\uB9AC\uC26C\uC5B4",
  "tmh": "\uD0C0\uB9C8\uC139\uC5B4",
  "tn": "\uCE20\uC640\uB098\uC5B4",
  "to": "\uD1B5\uAC00\uC5B4",
  "tog": "\uB2C8\uC544\uC0AC \uD1B5\uAC00\uC5B4",
  "tpi": "\uD1A0\uD06C \uD53C\uC2E0\uC5B4",
  "tr": "\uD130\uD0A4\uC5B4",
  "trv": "\uD0C0\uB85C\uCF54\uC5B4",
  "ts": "\uCD1D\uAC00\uC5B4",
  "tsi": "\uD2B8\uC2EC\uC2DC\uC548\uC5B4",
  "tt": "\uD0C0\uD0C0\uB974\uC5B4",
  "tum": "\uD23C\uBD80\uCE74\uC5B4",
  "tvl": "\uD22C\uBC1C\uB8E8\uC5B4",
  "tw": "\uD2B8\uC704\uC5B4",
  "twq": "\uD0C0\uC0AC\uC640\uD06C\uC5B4",
  "ty": "\uD0C0\uD788\uD2F0\uC5B4",
  "tyv": "\uD22C\uBE44\uB2C8\uC548\uC5B4",
  "tzm": "\uC911\uC559 \uBAA8\uB85C\uCF54 \uD0C0\uB9C8\uC9C0\uD2B8\uC5B4",
  "udm": "\uC6B0\uB4DC\uB9D0\uD2B8\uC5B4",
  "ug": "\uC704\uAD6C\uB974\uC5B4",
  "uga": "\uC720\uAC00\uB9AC\uD2F1\uC5B4",
  "uk": "\uC6B0\uD06C\uB77C\uC774\uB098\uC5B4",
  "umb": "\uC6C0\uBD84\uB450\uC5B4",
  "und": "\uC54C \uC218 \uC5C6\uB294 \uC5B8\uC5B4",
  "ur": "\uC6B0\uB974\uB450\uC5B4",
  "uz": "\uC6B0\uC988\uBCA0\uD06C\uC5B4",
  "vai": "\uBC14\uC774\uC5B4",
  "ve": "\uBCA4\uB2E4\uC5B4",
  "vi": "\uBCA0\uD2B8\uB0A8\uC5B4",
  "vo": "\uBCFC\uB77C\uD4CC\uD06C\uC5B4",
  "vot": "\uBCF4\uD2F1\uC5B4",
  "vun": "\uBD84\uC870\uC5B4",
  "wa": "\uC648\uB860\uC5B4",
  "wae": "\uC6D4\uC800\uC5B4",
  "wal": "\uC6D4\uB77C\uC774\uD0C0\uC5B4",
  "war": "\uC640\uB77C\uC774\uC5B4",
  "was": "\uC640\uC1FC\uC5B4",
  "wbp": "\uC648\uD53C\uB9AC\uC5B4",
  "wo": "\uC6D4\uB85C\uD504\uC5B4",
  "wuu": "\uC6B0\uC5B4",
  "xal": "\uCE7C\uBBF8\uD06C\uC5B4",
  "xh": "\uCF54\uC0AC\uC5B4",
  "xog": "\uC18C\uAC00\uC5B4",
  "yao": "\uC57C\uC624\uC871\uC5B4",
  "yap": "\uC58D\uD398\uC138\uC5B4",
  "yav": "\uC591\uBCF8\uC5B4",
  "ybb": "\uC618\uBC14\uC5B4",
  "yi": "\uC774\uB514\uC2DC\uC5B4",
  "yo": "\uC694\uB8E8\uBC14\uC5B4",
  "yrl": "yrl",
  "yue": "\uAD11\uB465\uC5B4",
  "za": "\uC8FC\uC559\uC5B4",
  "zap": "\uC0AC\uD3EC\uD14C\uD06C\uC5B4",
  "zbl": "\uBE14\uB9AC\uC2A4 \uC2EC\uBCFC",
  "zen": "\uC81C\uB098\uAC00\uC5B4",
  "zgh": "\uD45C\uC900 \uBAA8\uB85C\uCF54 \uD0C0\uB9C8\uC9C0\uD2B8\uC5B4",
  "zh": "\uC911\uAD6D\uC5B4",
  "zh-Hans": "\uC911\uAD6D\uC5B4(\uAC04\uCCB4)",
  "zh-Hant": "\uC911\uAD6D\uC5B4(\uBC88\uCCB4)",
  "zu": "\uC904\uB8E8\uC5B4",
  "zun": "\uC8FC\uB2C8\uC5B4",
  "zxx": "\uC5B8\uC5B4 \uAD00\uB828 \uB0B4\uC6A9 \uC5C6\uC74C",
  "zza": "\uC790\uC790\uC5B4"
};

// src/l10n/locale/ml.ts
var ml_default = {
  "aa": "\u0D05\u0D2B\u0D3E\u0D7C",
  "ab": "\u0D05\u0D2C\u0D4D\u200C\u0D16\u0D3E\u0D38\u0D3F\u0D2F\u0D7B",
  "ace": "\u0D05\u0D1A\u0D3F\u0D28\u0D40\u0D38\u0D4D",
  "ach": "\u0D05\u0D15\u0D4B\u0D32\u0D3F",
  "ada": "\u0D05\u0D21\u0D3E\u0D19\u0D4D\u200C\u0D2E\u0D3F",
  "ady": "\u0D05\u0D21\u0D48\u0D17\u0D47",
  "ae": "\u0D05\u0D35\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D3E\u0D7B",
  "af": "\u0D06\u0D2B\u0D4D\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D3E\u0D7B\u0D38\u0D4D",
  "afh": "\u0D06\u0D2B\u0D4D\u0D30\u0D3F\u0D39\u0D3F\u0D32\u0D3F",
  "agq": "\u0D06\u0D18\u0D47\u0D02",
  "ain": "\u0D10\u0D28\u0D41",
  "ak": "\u0D05\u0D15\u0D3E\u0D7B\u200C",
  "akk": "\u0D05\u0D15\u0D4D\u0D15\u0D3E\u0D21\u0D3F\u0D2F\u0D7B",
  "ale": "\u0D05\u0D32\u0D42\u0D1F\u0D4D\u0D1F\u0D4D",
  "alt": "\u0D24\u0D46\u0D15\u0D4D\u0D15\u0D7B \u0D05\u0D7E\u0D24\u0D4D\u0D24\u0D3E\u0D2F\u0D3F",
  "am": "\u0D05\u0D02\u0D39\u0D3E\u0D30\u0D3F\u0D15\u0D4D",
  "an": "\u0D05\u0D30\u0D17\u0D4B\u0D23\u0D40\u0D38\u0D4D",
  "ang": "\u0D2A\u0D34\u0D2F \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "anp": "\u0D06\u0D7B\u0D17\u0D3F\u0D15",
  "ar": "\u0D05\u0D31\u0D2C\u0D3F\u0D15\u0D4D",
  "ar-001": "\u0D06\u0D27\u0D41\u0D28\u0D3F\u0D15 \u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D3E\u0D7B\u0D21\u0D47\u0D7C\u0D21\u0D4D \u0D05\u0D31\u0D2C\u0D3F\u0D15\u0D4D",
  "arc": "\u0D05\u0D30\u0D2E\u0D3E\u0D2F",
  "arn": "\u0D2E\u0D3E\u0D2A\u0D41\u0D1A\u0D3F",
  "arp": "\u0D05\u0D31\u0D3E\u0D2A\u0D39\u0D4B",
  "arw": "\u0D05\u0D31\u0D3E\u0D35\u0D15\u0D4D",
  "as": "\u0D06\u0D38\u0D4D\u0D38\u0D3E\u0D2E\u0D40\u0D38\u0D4D",
  "asa": "\u0D06\u0D38\u0D41",
  "ast": "\u0D13\u0D38\u0D4D\u200C\u0D1F\u0D4D\u0D30\u0D3F\u0D2F\u0D7B",
  "av": "\u0D05\u0D35\u0D3E\u0D30\u0D3F\u0D15\u0D4D",
  "awa": "\u0D05\u0D35\u0D3E\u0D27\u0D3F",
  "ay": "\u0D05\u0D2F\u0D4D\u0D2E\u0D3E\u0D31",
  "az": "\u0D05\u0D38\u0D7C\u0D2C\u0D48\u0D1C\u0D3E\u0D28\u0D3F",
  "ba": "\u0D2C\u0D37\u0D4D\u0D16\u0D3F\u0D7C",
  "bal": "\u0D2C\u0D32\u0D42\u0D1A\u0D3F",
  "ban": "\u0D2C\u0D3E\u0D32\u0D3F\u0D28\u0D40\u0D38\u0D4D",
  "bas": "\u0D2C\u0D38",
  "bax": "\u0D2C\u0D3E\u0D2E\u0D41\u0D7B",
  "bbj": "\u0D18\u0D4B\u0D2E\u0D3E\u0D32",
  "be": "\u0D2C\u0D46\u0D32\u0D3E\u0D31\u0D41\u0D37\u0D4D\u0D2F\u0D7B",
  "bej": "\u0D2C\u0D47\u0D1C",
  "bem": "\u0D2C\u0D47\u0D02\u0D2C",
  "bez": "\u0D2C\u0D46\u0D28\u0D3E",
  "bfd": "\u0D2C\u0D3E\u0D2B\u0D1F\u0D4D\u0D1F\u0D4D",
  "bg": "\u0D2C\u0D7E\u0D17\u0D47\u0D31\u0D3F\u0D2F\u0D7B",
  "bgn": "\u0D2A\u0D36\u0D4D\u0D1A\u0D3F\u0D2E \u0D2C\u0D32\u0D42\u0D1A\u0D3F",
  "bho": "\u0D2D\u0D4B\u0D1C\u0D4D\u200C\u0D2A\u0D41\u0D30\u0D3F",
  "bi": "\u0D2C\u0D3F\u0D38\u0D4D\u200C\u0D32\u0D3E\u0D2E",
  "bik": "\u0D2C\u0D3F\u0D15\u0D4B\u0D7D",
  "bin": "\u0D2C\u0D3F\u0D28\u0D3F",
  "bkm": "\u0D15\u0D4B\u0D02",
  "bla": "\u0D38\u0D3F\u0D15\u0D4D\u0D38\u0D3F\u0D15",
  "bm": "\u0D2C\u0D02\u0D2C\u0D3E\u0D31",
  "bn": "\u0D2C\u0D02\u0D17\u0D4D\u0D32\u0D3E",
  "bo": "\u0D1F\u0D3F\u0D2C\u0D31\u0D4D\u0D31\u0D7B",
  "br": "\u0D2C\u0D4D\u0D30\u0D46\u0D1F\u0D4D\u0D1F\u0D7A",
  "bra": "\u0D2C\u0D4D\u0D30\u0D1C\u0D4D",
  "brx": "\u0D2C\u0D4B\u0D21\u0D4B",
  "bs": "\u0D2C\u0D4B\u0D38\u0D4D\u0D28\u0D3F\u0D2F\u0D7B",
  "bss": "\u0D05\u0D15\u0D4D\u0D15\u0D42\u0D38\u0D4D",
  "bua": "\u0D2C\u0D41\u0D31\u0D3F\u0D2F\u0D24\u0D4D\u0D24\u0D4D",
  "bug": "\u0D2C\u0D41\u0D17\u0D3F\u0D28\u0D40\u0D38\u0D4D",
  "bum": "\u0D2C\u0D41\u0D33\u0D41",
  "byn": "\u0D2C\u0D4D\u0D32\u0D3F\u0D7B",
  "byv": "\u0D2E\u0D46\u0D21\u0D41\u0D02\u0D2C",
  "ca": "\u0D15\u0D31\u0D4D\u0D31\u0D3E\u0D32\u0D3E\u0D7B",
  "cad": "\u0D15\u0D3E\u0D21\u0D4B",
  "car": "\u0D15\u0D3E\u0D30\u0D3F\u0D2C\u0D4D",
  "cay": "\u0D15\u0D2F\u0D42\u0D17",
  "cch": "\u0D05\u0D31\u0D4D\u0D31\u0D4D\u0D38\u0D3E\u0D02",
  "ccp": "\u0D1A\u0D15\u0D4D\u200C\u0D2E",
  "ce": "\u0D1A\u0D46\u0D1A\u0D7B",
  "ceb": "\u0D38\u0D46\u0D2C\u0D41\u0D35\u0D3E\u0D28\u0D4B",
  "cgg": "\u0D1A\u0D3F\u0D17",
  "ch": "\u0D1A\u0D2E\u0D4B\u0D31\u0D4B",
  "chb": "\u0D1A\u0D3F\u0D2C\u0D4D\u0D1A",
  "chg": "\u0D37\u0D3E\u0D17\u0D24\u0D3E\u0D2F\u0D4D",
  "chk": "\u0D1A\u0D42\u0D15\u0D40\u0D38\u0D4D",
  "chm": "\u0D2E\u0D3E\u0D30\u0D3F",
  "chn": "\u0D1A\u0D3F\u0D28\u0D42\u0D17\u0D4D \u0D1C\u0D3E\u0D7C\u0D17\u0D7A",
  "cho": "\u0D1A\u0D4B\u0D15\u0D4D\u0D31\u0D4D\u0D31\u0D3E\u0D35\u0D4D",
  "chp": "\u0D1A\u0D3F\u0D2A\u0D47\u0D35\u0D4D\u0D2F\u0D7B",
  "chr": "\u0D37\u0D46\u0D30\u0D4B\u0D15\u0D4D\u0D15\u0D3F",
  "chy": "\u0D37\u0D3E\u0D2F\u0D3E\u0D7B",
  "ckb": "\u0D38\u0D46\u0D7B\u0D1F\u0D4D\u0D30\u0D7D \u0D15\u0D41\u0D7C\u0D26\u0D3F\u0D37\u0D4D",
  "co": "\u0D15\u0D4B\u0D7C\u0D38\u0D3F\u0D15\u0D4D\u0D15\u0D7B",
  "cop": "\u0D15\u0D4B\u0D2A\u0D4D\u0D31\u0D4D\u0D31\u0D3F\u0D15\u0D4D",
  "cr": "\u0D15\u0D4D\u0D30\u0D40",
  "crh": "\u0D15\u0D4D\u0D30\u0D3F\u0D2E\u0D3F\u0D2F\u0D7B \u0D1F\u0D7C\u0D15\u0D4D\u0D15\u0D3F\u0D37\u0D4D",
  "crs": "\u0D38\u0D46\u0D37\u0D7D\u0D35 \u0D15\u0D4D\u0D30\u0D3F\u0D2F\u0D4B\u0D7E \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "cs": "\u0D1A\u0D46\u0D15\u0D4D\u0D15\u0D4D",
  "csb": "\u0D15\u0D3E\u0D37\u0D41\u0D2C\u0D3F\u0D2F\u0D3E\u0D7B",
  "cu": "\u0D1A\u0D7C\u0D1A\u0D4D\u0D1A\u0D4D \u0D38\u0D4D\u0D32\u0D3E\u0D35\u0D3F\u0D15\u0D4D",
  "cv": "\u0D1A\u0D41\u0D35\u0D3E\u0D37\u0D4D",
  "cy": "\u0D35\u0D46\u0D7D\u0D37\u0D4D",
  "da": "\u0D21\u0D3E\u0D28\u0D3F\u0D37\u0D4D",
  "dak": "\u0D21\u0D15\u0D4B\u0D1F\u0D4D\u0D1F",
  "dar": "\u0D21\u0D7C\u0D17\u0D4D\u0D35\u0D3E",
  "dav": "\u0D24\u0D48\u0D24",
  "de": "\u0D1C\u0D7C\u0D2E\u0D4D\u0D2E\u0D7B",
  "de-AT": "\u0D13\u0D38\u0D4D\u200C\u0D1F\u0D4D\u0D30\u0D3F\u0D2F\u0D7B \u0D1C\u0D7C\u0D2E\u0D7B",
  "de-CH": "\u0D38\u0D4D\u0D35\u0D3F\u0D38\u0D4D \u0D39\u0D48 \u0D1C\u0D7C\u0D2E\u0D7B",
  "del": "\u0D26\u0D46\u0D32\u0D35\u0D47\u0D7C",
  "den": "\u0D38\u0D4D\u0D32\u0D47\u0D35\u0D4D",
  "dgr": "\u0D21\u0D4B\u0D17\u0D4D\u0D30\u0D3F\u0D2C\u0D4D",
  "din": "\u0D26\u0D3F\u0D7B\u0D15",
  "dje": "\u0D38\u0D3E\u0D7C\u0D2E\u0D4D\u0D2E",
  "doi": "\u0D21\u0D4B\u0D17\u0D4D\u0D30\u0D3F",
  "dsb": "\u0D32\u0D4B\u0D35\u0D7C \u0D38\u0D4B\u0D7C\u0D2C\u0D3F\u0D2F\u0D7B",
  "dua": "\u0D26\u0D4D\u0D35\u0D3E\u0D32",
  "dum": "\u0D2E\u0D26\u0D4D\u0D27\u0D4D\u0D2F \u0D21\u0D1A\u0D4D\u0D1A\u0D4D",
  "dv": "\u0D26\u0D3F\u0D35\u0D46\u0D39\u0D3F",
  "dyo": "\u0D2F\u0D4B\u0D32-\u0D2B\u0D4B\u0D28\u0D4D\u0D2F\u0D3F",
  "dyu": "\u0D26\u0D4D\u0D35\u0D48\u0D32",
  "dz": "\u0D26\u0D4D\u200C\u0D38\u0D4B\u0D19\u0D4D\u0D15",
  "dzg": "\u0D21\u0D3E\u0D38\u0D3E\u0D17",
  "ebu": "\u0D0E\u0D02\u0D2C\u0D41",
  "ee": "\u0D2F\u0D42\u0D35\u0D4D",
  "efi": "\u0D0E\u0D2B\u0D3F\u0D15\u0D4D",
  "egy": "\u0D2A\u0D4D\u0D30\u0D3E\u0D1A\u0D40\u0D28 \u0D08\u0D1C\u0D3F\u0D2A\u0D4D\u0D37\u0D4D\u0D2F\u0D7B",
  "eka": "\u0D0E\u0D15\u0D3E\u0D1C\u0D41\u0D15\u0D4D",
  "el": "\u0D17\u0D4D\u0D30\u0D40\u0D15\u0D4D\u0D15\u0D4D",
  "elx": "\u0D0E\u0D32\u0D3E\u0D2E\u0D48\u0D31\u0D4D\u0D31\u0D4D",
  "en": "\u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "en-AU": "\u0D13\u0D38\u0D4D\u200C\u0D1F\u0D4D\u0D30\u0D47\u0D32\u0D3F\u0D2F\u0D7B \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "en-CA": "\u0D15\u0D28\u0D47\u0D21\u0D3F\u0D2F\u0D7B \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "en-GB": "\u0D2C\u0D4D\u0D30\u0D3F\u0D1F\u0D4D\u0D1F\u0D40\u0D37\u0D4D \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "en-US": "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D7B \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "enm": "\u0D2E\u0D26\u0D4D\u0D27\u0D4D\u0D2F \u0D07\u0D02\u0D17\u0D4D\u0D32\u0D40\u0D37\u0D4D",
  "eo": "\u0D0E\u0D38\u0D4D\u200C\u0D2A\u0D30\u0D3E\u0D28\u0D4D\u0D31\u0D4B",
  "es": "\u0D38\u0D4D\u200C\u0D2A\u0D3E\u0D28\u0D3F\u0D37\u0D4D",
  "es-419": "\u0D32\u0D3E\u0D31\u0D4D\u0D31\u0D3F\u0D7B \u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D7B \u0D38\u0D4D\u200C\u0D2A\u0D3E\u0D28\u0D3F\u0D37\u0D4D",
  "es-ES": "\u0D2F\u0D42\u0D31\u0D4B\u0D2A\u0D4D\u0D2F\u0D7B \u0D38\u0D4D\u200C\u0D2A\u0D3E\u0D28\u0D3F\u0D37\u0D4D",
  "es-MX": "\u0D2E\u0D46\u0D15\u0D4D\u0D38\u0D3F\u0D15\u0D4D\u0D15\u0D7B \u0D38\u0D4D\u0D2A\u0D3E\u0D28\u0D3F\u0D37\u0D4D",
  "et": "\u0D0E\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D4B\u0D23\u0D3F\u0D2F\u0D7B",
  "eu": "\u0D2C\u0D3E\u0D38\u0D4D\u200C\u0D15\u0D4D",
  "ewo": "\u0D0E\u0D35\u0D4B\u0D7B\u0D21\u0D4B",
  "fa": "\u0D2A\u0D47\u0D7C\u0D37\u0D4D\u0D2F\u0D7B",
  "fa-AF": "\u0D21\u0D3E\u0D30\u0D3F",
  "fan": "\u0D2B\u0D19\u0D4D",
  "fat": "\u0D2B\u0D3E\u0D28\u0D4D\u0D31\u0D3F",
  "ff": "\u0D2B\u0D41\u0D32",
  "fi": "\u0D2B\u0D3F\u0D28\u0D4D\u0D28\u0D3F\u0D37\u0D4D",
  "fil": "\u0D2B\u0D3F\u0D32\u0D3F\u0D2A\u0D4D\u0D2A\u0D3F\u0D28\u0D4B",
  "fj": "\u0D2B\u0D3F\u0D1C\u0D3F\u0D2F\u0D7B",
  "fo": "\u0D2B\u0D3E\u0D31\u0D4B\u0D38\u0D4D",
  "fon": "\u0D2B\u0D4B\u0D7B",
  "fr": "\u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "fr-CA": "\u0D15\u0D28\u0D47\u0D21\u0D3F\u0D2F\u0D7B \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "fr-CH": "\u0D38\u0D4D\u0D35\u0D3F\u0D38\u0D4D \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "frc": "\u0D15\u0D47\u0D1C\u0D7A \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "frm": "\u0D2E\u0D26\u0D4D\u0D27\u0D4D\u0D2F \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "fro": "\u0D2A\u0D34\u0D2F \u0D2B\u0D4D\u0D30\u0D1E\u0D4D\u0D1A\u0D4D",
  "frr": "\u0D28\u0D4B\u0D7C\u0D24\u0D4D\u0D24\u0D47\u0D7B \u0D2B\u0D4D\u0D30\u0D3F\u0D37\u0D4D\u0D2F\u0D7B",
  "frs": "\u0D08\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D47\u0D7A \u0D2B\u0D4D\u0D30\u0D3F\u0D37\u0D4D\u0D2F\u0D7B",
  "fur": "\u0D2B\u0D4D\u0D30\u0D3F\u0D2F\u0D41\u0D32\u0D3F\u0D2F\u0D3E\u0D7B",
  "fy": "\u0D2A\u0D36\u0D4D\u0D1A\u0D3F\u0D2E \u0D2B\u0D4D\u0D30\u0D3F\u0D37\u0D3F\u0D2F\u0D7B",
  "ga": "\u0D10\u0D31\u0D3F\u0D37\u0D4D",
  "gaa": "\u0D17\u0D3E",
  "gag": "\u0D17\u0D3E\u0D17\u0D42\u0D38\u0D4D",
  "gan": "\u0D17\u0D3E\u0D7B \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "gay": "\u0D17\u0D2F\u0D4A",
  "gba": "\u0D17\u0D2C\u0D4D\u0D2F",
  "gd": "\u0D38\u0D4D\u0D15\u0D4B\u0D1F\u0D4D\u0D1F\u0D3F\u0D37\u0D4D \u0D17\u0D48\u0D32\u0D3F\u0D15\u0D4D",
  "gez": "\u0D17\u0D40\u0D38\u0D4D",
  "gil": "\u0D17\u0D3F\u0D7D\u0D2C\u0D7C\u0D1F\u0D4D\u0D1F\u0D40\u0D38\u0D4D",
  "gl": "\u0D17\u0D32\u0D40\u0D37\u0D4D\u0D2F\u0D7B",
  "gmh": "\u0D2E\u0D26\u0D4D\u0D27\u0D4D\u0D2F \u0D09\u0D1A\u0D4D\u0D1A \u0D1C\u0D7C\u0D2E\u0D7B",
  "gn": "\u0D17\u0D4D\u0D35\u0D30\u0D28\u0D40",
  "goh": "\u0D13\u0D7E\u0D21\u0D4D \u0D39\u0D48 \u0D1C\u0D7C\u0D2E\u0D7B",
  "gon": "\u0D17\u0D4B\u0D23\u0D4D\u0D21\u0D3F",
  "gor": "\u0D17\u0D4A\u0D31\u0D4B\u0D28\u0D4D\u0D31\u0D3E\u0D32\u0D4B",
  "got": "\u0D17\u0D4B\u0D25\u0D3F\u0D15\u0D4D\u0D15\u0D4D",
  "grb": "\u0D17\u0D4D\u0D30\u0D2C\u0D4A",
  "grc": "\u0D2A\u0D41\u0D30\u0D3E\u0D24\u0D28 \u0D17\u0D4D\u0D30\u0D40\u0D15\u0D4D\u0D15\u0D4D",
  "gsw": "\u0D38\u0D4D\u0D35\u0D3F\u0D38\u0D4D \u0D1C\u0D7C\u0D2E\u0D4D\u0D2E\u0D7B",
  "gu": "\u0D17\u0D41\u0D1C\u0D31\u0D3E\u0D24\u0D4D\u0D24\u0D3F",
  "guz": "\u0D17\u0D41\u0D38\u0D40",
  "gv": "\u0D2E\u0D3E\u0D7B\u0D38\u0D4D",
  "gwi": "\u0D17\u0D4D\u0D35\u0D3F\u0D1A\u0D4D\u0D1A\u0D3F\u0D7B",
  "ha": "\u0D39\u0D57\u0D38",
  "hai": "\u0D39\u0D48\u0D21",
  "hak": "\u0D39\u0D3E\u0D15\u0D4D\u0D15 \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "haw": "\u0D39\u0D35\u0D3E\u0D2F\u0D3F\u0D2F\u0D7B",
  "he": "\u0D39\u0D40\u0D2C\u0D4D\u0D30\u0D41",
  "hi": "\u0D39\u0D3F\u0D28\u0D4D\u0D26\u0D3F",
  "hil": "\u0D39\u0D3F\u0D32\u0D3F\u0D17\u0D2F\u0D4D\u0D28\u0D4B\u0D7A",
  "hit": "\u0D39\u0D3F\u0D31\u0D4D\u0D31\u0D48\u0D31\u0D4D\u0D31\u0D4D",
  "hmn": "\u0D2E\u0D4B\u0D19\u0D4D",
  "ho": "\u0D39\u0D3F\u0D30\u0D3F \u0D2E\u0D4B\u0D24\u0D41",
  "hr": "\u0D15\u0D4D\u0D30\u0D4A\u0D2F\u0D47\u0D37\u0D4D\u0D2F\u0D7B",
  "hsb": "\u0D05\u0D2A\u0D4D\u0D2A\u0D7C \u0D38\u0D4B\u0D7C\u0D2C\u0D3F\u0D2F\u0D7B",
  "hsn": "\u0D37\u0D4D\u0D2F\u0D3E\u0D19\u0D4D \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "ht": "\u0D39\u0D46\u0D2F\u0D4D\u200C\u0D24\u0D3F\u0D2F\u0D7B \u0D15\u0D4D\u0D30\u0D3F\u0D2F\u0D4B\u0D7E",
  "hu": "\u0D39\u0D02\u0D17\u0D47\u0D31\u0D3F\u0D2F\u0D7B",
  "hup": "\u0D39\u0D42\u0D2A",
  "hy": "\u0D05\u0D7C\u0D2E\u0D47\u0D28\u0D3F\u0D2F\u0D7B",
  "hz": "\u0D39\u0D46\u0D30\u0D47\u0D30\u0D4A",
  "ia": "\u0D07\u0D28\u0D4D\u0D31\u0D7C\u0D32\u0D3F\u0D02\u0D17\u0D4D\u0D35",
  "iba": "\u0D07\u0D2C\u0D3E\u0D7B",
  "ibb": "\u0D07\u0D2C\u0D40\u0D2C\u0D3F\u0D2F\u0D4B",
  "id": "\u0D07\u0D28\u0D4D\u0D24\u0D4B\u0D28\u0D47\u0D37\u0D4D\u0D2F\u0D7B",
  "ie": "\u0D07\u0D28\u0D4D\u0D31\u0D7C\u0D32\u0D3F\u0D02\u0D17\u0D4D\u0D35\u0D47",
  "ig": "\u0D07\u0D17\u0D4D\u0D2C\u0D4B",
  "ii": "\u0D37\u0D41\u0D35\u0D3E\u0D7B\u0D2F\u0D3F",
  "ik": "\u0D07\u0D28\u0D41\u0D2A\u0D3F\u0D2F\u0D3E\u0D15\u0D4D",
  "ilo": "\u0D07\u0D32\u0D4B\u0D15\u0D4B",
  "inh": "\u0D07\u0D02\u0D17\u0D4D\u0D35\u0D3F\u0D37\u0D4D",
  "io": "\u0D07\u0D21\u0D4B",
  "is": "\u0D10\u0D38\u0D4D\u200C\u0D32\u0D3E\u0D7B\u0D21\u0D3F\u0D15\u0D4D",
  "it": "\u0D07\u0D31\u0D4D\u0D31\u0D3E\u0D32\u0D3F\u0D2F\u0D7B",
  "iu": "\u0D07\u0D28\u0D41\u0D15\u0D4D\u0D31\u0D4D\u0D31\u0D3F\u0D31\u0D4D\u0D31\u0D1F\u0D4D\u0D1F\u0D4D",
  "ja": "\u0D1C\u0D3E\u0D2A\u0D4D\u0D2A\u0D28\u0D40\u0D38\u0D4D",
  "jbo": "\u0D32\u0D4B\u0D1C\u0D4D\u0D2C\u0D3E\u0D7B",
  "jgo": "\u0D17\u0D4B\u0D2E\u0D4D\u0D2A",
  "jmc": "\u0D2E\u0D1A\u0D47\u0D02",
  "jpr": "\u0D1C\u0D42\u0D21\u0D3F\u0D2F\u0D4B-\u0D2A\u0D47\u0D7C\u0D37\u0D4D\u0D2F\u0D7B",
  "jrb": "\u0D1C\u0D42\u0D21\u0D3F\u0D2F\u0D4B-\u0D05\u0D31\u0D2C\u0D3F\u0D15\u0D4D",
  "jv": "\u0D1C\u0D3E\u0D35\u0D28\u0D40\u0D38\u0D4D",
  "ka": "\u0D1C\u0D4B\u0D7C\u0D1C\u0D3F\u0D2F\u0D7B",
  "kaa": "\u0D15\u0D30-\u0D15\u0D3E\u0D7D\u0D2A\u0D4D\u0D2A\u0D15\u0D4D",
  "kab": "\u0D15\u0D2C\u0D48\u0D7D",
  "kac": "\u0D15\u0D3E\u0D1A\u0D3F\u0D7B",
  "kaj": "\u0D1C\u0D4D\u0D1C\u0D41",
  "kam": "\u0D15\u0D02\u0D2C",
  "kaw": "\u0D15\u0D3E\u0D35\u0D3F",
  "kbd": "\u0D15\u0D2C\u0D7C\u0D21\u0D3F\u0D2F\u0D3E\u0D7B",
  "kbl": "\u0D15\u0D28\u0D46\u0D02\u0D2C\u0D41",
  "kcg": "\u0D1F\u0D4D\u0D2F\u0D3E\u0D2A\u0D4D",
  "kde": "\u0D2E\u0D15\u0D4D\u0D15\u0D4B\u0D23\u0D4D\u0D1F\u0D46",
  "kea": "\u0D15\u0D2C\u0D41\u0D35\u0D46\u0D7C\u0D26\u0D3F\u0D2F\u0D3E\u0D28\u0D41",
  "kfo": "\u0D15\u0D4B\u0D31\u0D4B",
  "kg": "\u0D15\u0D4B\u0D02\u0D17\u0D4B",
  "kgp": "kgp",
  "kha": "\u0D18\u0D3E\u0D38\u0D3F",
  "kho": "\u0D18\u0D4B\u0D31\u0D4D\u0D31\u0D3E\u0D28\u0D47\u0D38\u0D47",
  "khq": "\u0D15\u0D4A\u0D2F\u0D4D\u0D31 \u0D1A\u0D40\u0D28\u0D3F",
  "ki": "\u0D15\u0D3F\u0D15\u0D42\u0D2F\u0D41",
  "kj": "\u0D15\u0D4D\u0D35\u0D3E\u0D28\u0D4D\u0D2F\u0D2E",
  "kk": "\u0D15\u0D38\u0D3E\u0D16\u0D4D",
  "kkj": "\u0D15\u0D3E\u0D15\u0D4B",
  "kl": "\u0D15\u0D32\u0D3E\u0D32\u0D4D\u0D32\u0D3F\u0D38\u0D1F\u0D4D\u0D1F\u0D4D",
  "kln": "\u0D15\u0D32\u0D46\u0D1E\u0D4D\u0D1E\u0D3F\u0D7B",
  "km": "\u0D16\u0D2E\u0D46\u0D7C",
  "kmb": "\u0D15\u0D3F\u0D02\u0D2C\u0D41\u0D23\u0D4D\u0D1F\u0D41",
  "kn": "\u0D15\u0D28\u0D4D\u0D28\u0D21",
  "ko": "\u0D15\u0D4A\u0D31\u0D3F\u0D2F\u0D7B",
  "koi": "\u0D15\u0D4B\u0D2E\u0D3F-\u0D2A\u0D46\u0D7C\u0D2E\u0D4D\u0D2F\u0D3E\u0D15\u0D4D\u0D15\u0D4D",
  "kok": "\u0D15\u0D4A\u0D19\u0D4D\u0D15\u0D23\u0D3F",
  "kos": "\u0D15\u0D4A\u0D38\u0D31\u0D47\u0D2F\u0D7B",
  "kpe": "\u0D15\u0D2A\u0D46\u0D32\u0D4D\u0D32\u0D47",
  "kr": "\u0D15\u0D28\u0D42\u0D31\u0D3F",
  "krc": "\u0D15\u0D30\u0D1A\u0D48-\u0D2C\u0D3E\u0D7D\u0D15\u0D7C",
  "krl": "\u0D15\u0D30\u0D40\u0D32\u0D3F\u0D2F\u0D7B",
  "kru": "\u0D15\u0D41\u0D30\u0D41\u0D16\u0D4D",
  "ks": "\u0D15\u0D3E\u0D36\u0D4D\u200C\u0D2E\u0D40\u0D30\u0D3F",
  "ksb": "\u0D37\u0D02\u0D2D\u0D3E\u0D33",
  "ksf": "\u0D2C\u0D3E\u0D2B\u0D3F\u0D2F",
  "ksh": "\u0D15\u0D4A\u0D33\u0D4B\u0D23\u0D3F\u0D2F\u0D7B",
  "ku": "\u0D15\u0D41\u0D7C\u0D26\u0D4D\u0D26\u0D3F\u0D37\u0D4D",
  "kum": "\u0D15\u0D41\u0D2E\u0D48\u0D15\u0D4D",
  "kut": "\u0D15\u0D41\u0D24\u0D47\u0D28\u0D48",
  "kv": "\u0D15\u0D4B\u0D2E\u0D3F",
  "kw": "\u0D15\u0D4B\u0D7C\u0D23\u0D3F\u0D37\u0D4D",
  "ky": "\u0D15\u0D3F\u0D7C\u0D17\u0D3F\u0D38\u0D4D",
  "la": "\u0D32\u0D3E\u0D31\u0D4D\u0D31\u0D3F\u0D7B",
  "lad": "\u0D32\u0D3E\u0D21\u0D3F\u0D28\u0D4B",
  "lag": "\u0D32\u0D3E\u0D02\u0D17\u0D3F",
  "lah": "\u0D32\u0D39\u0D4D\u200C\u0D7B\u0D21",
  "lam": "\u0D32\u0D02\u0D2C",
  "lb": "\u0D32\u0D15\u0D4D\u200C\u0D38\u0D02\u0D2C\u0D7C\u0D17\u0D3F\u0D37\u0D4D",
  "lez": "\u0D32\u0D39\u0D4D\u0D17\u0D3F\u0D2F\u0D3E\u0D7B",
  "lg": "\u0D17\u0D3E\u0D23\u0D4D\u0D1F",
  "li": "\u0D32\u0D3F\u0D02\u0D2C\u0D7C\u0D17\u0D3F\u0D37\u0D4D",
  "lij": "lij",
  "lkt": "\u0D32\u0D17\u0D4B\u0D24\u0D4D\u0D24",
  "ln": "\u0D32\u0D3F\u0D02\u0D17\u0D3E\u0D32",
  "lo": "\u0D32\u0D3E\u0D35\u0D4B",
  "lol": "\u0D2E\u0D4B\u0D19\u0D4D\u0D15\u0D4B",
  "lou": "\u0D32\u0D42\u0D38\u0D3F\u0D2F\u0D3E\u0D28 \u0D15\u0D4D\u0D30\u0D3F\u0D2F\u0D4B\u0D7E",
  "loz": "\u0D32\u0D4A\u0D38\u0D3F",
  "lrc": "\u0D35\u0D1F\u0D15\u0D4D\u0D15\u0D7B \u0D32\u0D42\u0D31\u0D3F",
  "lt": "\u0D32\u0D3F\u0D24\u0D4D\u0D35\u0D3E\u0D28\u0D3F\u0D2F\u0D7B",
  "lu": "\u0D32\u0D41\u0D2C-\u0D15\u0D31\u0D4D\u0D31\u0D02\u0D17",
  "lua": "\u0D32\u0D42\u0D2C-\u0D32\u0D41\u0D32\u0D41\u0D35",
  "lui": "\u0D32\u0D42\u0D2F\u0D3F\u0D38\u0D46\u0D28\u0D4B",
  "lun": "\u0D32\u0D41\u0D7B\u0D21",
  "luo": "\u0D32\u0D41\u0D35\u0D4B",
  "lus": "\u0D2E\u0D3F\u0D38\u0D4B",
  "luy": "\u0D32\u0D41\u0D2F\u0D3F\u0D2F",
  "lv": "\u0D32\u0D3E\u0D31\u0D4D\u0D31\u0D4D\u0D35\u0D3F\u0D2F\u0D7B",
  "mad": "\u0D2E\u0D26\u0D41\u0D30\u0D47\u0D38\u0D47",
  "maf": "\u0D2E\u0D3E\u0D2B",
  "mag": "\u0D2E\u0D17\u0D3E\u0D39\u0D3F",
  "mai": "\u0D2E\u0D48\u0D25\u0D3F\u0D32\u0D3F",
  "mak": "\u0D2E\u0D15\u0D3E\u0D38\u0D7C",
  "man": "\u0D2E\u0D23\u0D4D\u0D21\u0D3F\u0D7B\u0D17\u0D4B",
  "mas": "\u0D2E\u0D38\u0D3E\u0D2F\u0D4D",
  "mde": "\u0D2E\u0D3E\u0D2C",
  "mdf": "\u0D2E\u0D4B\u0D15\u0D4D\u0D37",
  "mdr": "\u0D2E\u0D23\u0D4D\u0D21\u0D3E\u0D7C",
  "men": "\u0D2E\u0D46\u0D7B\u0D21\u0D46",
  "mer": "\u0D2E\u0D47\u0D30\u0D41",
  "mfe": "\u0D2E\u0D4A\u0D31\u0D3F\u0D38\u0D3F\u0D7B",
  "mg": "\u0D2E\u0D32\u0D17\u0D3E\u0D38\u0D3F",
  "mga": "\u0D2E\u0D26\u0D4D\u0D27\u0D4D\u0D2F \u0D10\u0D31\u0D3F\u0D37\u0D4D",
  "mgh": "\u0D2E\u0D3E\u0D16\u0D41\u0D35\u0D3E-\u0D2E\u0D40\u0D24\u0D4D\u0D24\u0D4B",
  "mgo": "\u0D2E\u0D47\u0D24\u0D4D\u0D24\u0D3E",
  "mh": "\u0D2E\u0D3E\u0D7C\u0D37\u0D32\u0D4D\u0D32\u0D40\u0D38\u0D4D",
  "mi": "\u0D2E\u0D35\u0D4B\u0D31\u0D3F",
  "mic": "\u0D2E\u0D3F\u0D15\u0D4D\u0D2E\u0D3E\u0D15\u0D4D",
  "min": "\u0D2E\u0D3F\u0D28\u0D3E\u0D19\u0D4D\u0D15\u0D2C\u0D57",
  "mk": "\u0D2E\u0D3E\u0D38\u0D3F\u0D21\u0D4B\u0D23\u0D3F\u0D2F\u0D7B",
  "ml": "\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02",
  "mn": "\u0D2E\u0D02\u0D17\u0D4B\u0D33\u0D3F\u0D2F\u0D7B",
  "mnc": "\u0D2E\u0D3E\u0D7B\u200C\u0D1A\u0D41",
  "mni": "\u0D2E\u0D23\u0D3F\u0D2A\u0D4D\u0D2A\u0D42\u0D30\u0D3F",
  "moh": "\u0D2E\u0D4B\u0D39\u0D3E\u0D15\u0D4D",
  "mos": "\u0D2E\u0D4A\u0D38\u0D4D\u0D38\u0D3F",
  "mr": "\u0D2E\u0D31\u0D3E\u0D24\u0D4D\u0D24\u0D3F",
  "ms": "\u0D2E\u0D32\u0D46\u0D2F\u0D4D",
  "mt": "\u0D2E\u0D3E\u0D7E\u0D1F\u0D4D\u0D1F\u0D40\u0D38\u0D4D",
  "mua": "\u0D2E\u0D41\u0D28\u0D4D\u0D26\u0D3E\u0D02\u0D17\u0D4D",
  "mul": "\u0D2A\u0D32\u0D2D\u0D3E\u0D37\u0D15\u0D7E",
  "mus": "\u0D15\u0D4D\u0D30\u0D40\u0D15\u0D4D\u0D15\u0D4D",
  "mwl": "\u0D2E\u0D3F\u0D30\u0D3E\u0D7B\u0D31\u0D38\u0D47",
  "mwr": "\u0D2E\u0D7C\u0D35\u0D3E\u0D30\u0D3F",
  "my": "\u0D2C\u0D7C\u0D2E\u0D40\u0D38\u0D4D",
  "mye": "\u0D2E\u0D2F\u0D40\u0D7B",
  "myv": "\u0D0F\u0D34\u0D4D\u0D38\u0D4D\u0D2F",
  "mzn": "\u0D2E\u0D38\u0D28\u0D4D\u0D31\u0D31\u0D3E\u0D28\u0D3F",
  "na": "\u0D28\u0D57\u0D31\u0D41",
  "nan": "\u0D2E\u0D3F\u0D7B \u0D28\u0D3E\u0D7B \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "nap": "\u0D28\u0D46\u0D2A\u0D4D\u0D2A\u0D4B\u0D33\u0D3F\u0D31\u0D4D\u0D31\u0D3E\u0D7B",
  "naq": "\u0D28\u0D3E\u0D2E",
  "nb": "\u0D28\u0D4B\u0D7C\u0D35\u0D40\u0D1C\u0D3F\u0D2F\u0D7B \u0D2C\u0D41\u0D15\u0D4D\u200C\u0D2E\u0D7D",
  "nd": "\u0D28\u0D4B\u0D7C\u0D24\u0D4D\u0D24\u0D4D \u0D21\u0D46\u0D2C\u0D3F\u0D7E",
  "nds": "\u0D32\u0D4B \u0D1C\u0D7C\u0D2E\u0D7B",
  "nds-NL": "\u0D32\u0D4B \u0D38\u0D3E\u0D15\u0D4D\u0D38\u0D7A",
  "ne": "\u0D28\u0D47\u0D2A\u0D4D\u0D2A\u0D3E\u0D33\u0D3F",
  "new": "\u0D28\u0D47\u0D35\u0D3E\u0D30\u0D3F",
  "ng": "\u0D21\u0D4B\u0D19\u0D4D\u0D15",
  "nia": "\u0D28\u0D3F\u0D2F\u0D3E\u0D38\u0D4D",
  "niu": "\u0D28\u0D4D\u0D2F\u0D41\u0D35\u0D3E\u0D7B",
  "nl": "\u0D21\u0D1A\u0D4D\u0D1A\u0D4D",
  "nl-BE": "\u0D2B\u0D4D\u0D32\u0D2E\u0D3F\u0D37\u0D4D",
  "nmg": "\u0D15\u0D4D\u0D35\u0D3E\u0D38\u0D3F\u0D2F\u0D4B",
  "nn": "\u0D28\u0D4B\u0D7C\u0D35\u0D40\u0D1C\u0D3F\u0D2F\u0D7B \u0D28\u0D48\u0D28\u0D4B\u0D7C\u0D15\u0D4D\u200C\u0D38\u0D4D",
  "nnh": "\u0D17\u0D40\u0D02\u0D2C\u0D42\u0D7A",
  "no": "\u0D28\u0D4B\u0D7C\u0D35\u0D40\u0D1C\u0D3F\u0D2F\u0D7B",
  "nog": "\u0D28\u0D4B\u0D17\u0D48",
  "non": "\u0D2A\u0D34\u0D2F \u0D28\u0D4B\u0D34\u0D4D\u200C\u0D38\u0D4D",
  "nqo": "\u0D07\u0D7B\u0D15\u0D4B",
  "nr": "\u0D26\u0D15\u0D4D\u0D37\u0D3F\u0D23 \u0D28\u0D46\u0D21\u0D3F\u0D2C\u0D3F\u0D7E",
  "nso": "\u0D28\u0D4B\u0D7C\u0D24\u0D4D\u0D24\u0D47\u0D7B \u0D38\u0D4B\u0D24\u0D4B",
  "nus": "\u0D28\u0D41\u0D35\u0D47\u0D7C",
  "nv": "\u0D28\u0D35\u0D3E\u0D1C\u0D4B",
  "nwc": "\u0D15\u0D4D\u0D32\u0D3E\u0D38\u0D3F\u0D15\u0D4D\u0D15\u0D7D \u0D28\u0D47\u0D35\u0D3E\u0D30\u0D3F",
  "ny": "\u0D28\u0D4D\u0D2F\u0D7B\u0D1C",
  "nym": "\u0D28\u0D4D\u0D2F\u0D3E\u0D02\u0D35\u0D47\u0D38\u0D3F",
  "nyn": "\u0D28\u0D4D\u0D2F\u0D3E\u0D7B\u0D15\u0D4B\u0D7E",
  "nyo": "\u0D28\u0D4D\u0D2F\u0D4B\u0D31\u0D4B",
  "nzi": "\u0D38\u0D3F\u0D2E",
  "oc": "\u0D13\u0D15\u0D4D\u200C\u0D38\u0D3F\u0D31\u0D4D\u0D31\u0D7B",
  "oj": "\u0D13\u0D1C\u0D3F\u0D2C\u0D4D\u0D35\u0D3E",
  "om": "\u0D12\u0D31\u0D4B\u0D2E\u0D4B",
  "or": "\u0D12\u0D21\u0D3F\u0D2F",
  "os": "\u0D12\u0D38\u0D4D\u0D38\u0D46\u0D31\u0D4D\u0D31\u0D3F\u0D15\u0D4D",
  "osa": "\u0D12\u0D38\u0D47\u0D1C\u0D4D",
  "ota": "\u0D13\u0D1F\u0D4D\u0D1F\u0D4B\u0D2E\u0D7B \u0D24\u0D41\u0D7C\u0D15\u0D4D\u0D15\u0D3F\u0D37\u0D4D",
  "pa": "\u0D2A\u0D1E\u0D4D\u0D1A\u0D3E\u0D2C\u0D3F",
  "pag": "\u0D2A\u0D19\u0D4D\u0D15\u0D3E\u0D38\u0D3F\u0D28\u0D7B",
  "pal": "\u0D2A\u0D3E\u0D39\u0D4D\u0D32\u0D35\u0D3F",
  "pam": "\u0D2A\u0D3E\u0D02\u0D2A\u0D7B\u0D17",
  "pap": "\u0D2A\u0D3E\u0D2A\u0D3F\u0D2F\u0D3E\u0D2E\u0D46\u0D28\u0D4D\u0D31\u0D4A",
  "pau": "\u0D2A\u0D32\u0D3E\u0D35\u0D41\u0D7B",
  "pcm": "\u0D28\u0D48\u0D1C\u0D40\u0D30\u0D3F\u0D2F\u0D7B \u0D2A\u0D3F\u0D21\u0D4D\u200C\u0D17\u0D3F\u0D7B",
  "peo": "\u0D2A\u0D34\u0D2F \u0D2A\u0D47\u0D7C\u0D37\u0D4D\u0D2F\u0D7B",
  "phn": "\u0D2B\u0D40\u0D28\u0D3F\u0D37\u0D4D\u0D2F\u0D7B",
  "pi": "\u0D2A\u0D3E\u0D32\u0D3F",
  "pl": "\u0D2A\u0D4B\u0D33\u0D3F\u0D37\u0D4D",
  "pon": "\u0D2A\u0D4A\u0D7B\u0D2A\u0D3F\u0D2F\u0D7B",
  "prg": "\u0D2A\u0D4D\u0D30\u0D37\u0D4D\u0D2F\u0D7B",
  "pro": "\u0D2A\u0D34\u0D2F \u0D2A\u0D4D\u0D30\u0D4A\u0D35\u0D7B\u0D37\u0D4D\u0D7D",
  "ps": "\u0D2A\u0D37\u0D4D\u200C\u0D24\u0D4B",
  "pt": "\u0D2A\u0D4B\u0D7C\u0D1A\u0D4D\u0D1A\u0D41\u0D17\u0D40\u0D38\u0D4D",
  "pt-BR": "\u0D2C\u0D4D\u0D30\u0D38\u0D40\u0D32\u0D3F\u0D2F\u0D7B \u0D2A\u0D4B\u0D7C\u0D1A\u0D4D\u0D1A\u0D41\u0D17\u0D40\u0D38\u0D4D",
  "pt-PT": "\u0D2F\u0D42\u0D31\u0D4B\u0D2A\u0D4D\u0D2F\u0D7B \u0D2A\u0D4B\u0D7C\u0D1A\u0D4D\u0D1A\u0D41\u0D17\u0D40\u0D38\u0D4D",
  "qu": "\u0D15\u0D4D\u0D35\u0D46\u0D1A\u0D4D\u0D1A\u0D41\u0D35",
  "quc": "\u0D15\u0D4D\u0D35\u0D3F\u0D1A\u0D4D\u0D1A\u0D46",
  "raj": "\u0D30\u0D3E\u0D1C\u0D38\u0D4D\u0D25\u0D3E\u0D28\u0D3F",
  "rap": "\u0D30\u0D3E\u0D2A\u0D28\u0D42\u0D2F\u0D3F",
  "rar": "\u0D30\u0D3E\u0D30\u0D4B\u0D1F\u0D4B\u0D19\u0D4D\u0D15\u0D7B",
  "rhg": "\u0D31\u0D4B\u0D39\u0D3F\u0D02\u0D17\u0D3E",
  "rm": "\u0D31\u0D4A\u0D2E\u0D3E\u0D1E\u0D4D\u0D1A\u0D4D",
  "rn": "\u0D31\u0D41\u0D23\u0D4D\u0D1F\u0D3F",
  "ro": "\u0D31\u0D4A\u0D2E\u0D3E\u0D28\u0D3F\u0D2F\u0D7B",
  "ro-MD": "\u0D2E\u0D4B\u0D7E\u0D21\u0D3E\u0D35\u0D3F\u0D2F\u0D7B",
  "rof": "\u0D31\u0D4B\u0D02\u0D2C\u0D4B",
  "rom": "\u0D31\u0D4A\u0D2E\u0D3E\u0D28\u0D3F",
  "ru": "\u0D31\u0D37\u0D4D\u0D2F\u0D7B",
  "rup": "\u0D06\u0D30\u0D4B\u0D2E\u0D3E\u0D28\u0D3F\u0D2F\u0D7B",
  "rw": "\u0D15\u0D3F\u0D28\u0D4D\u0D2F\u0D3E\u0D7C\u0D35\u0D3E\u0D23\u0D4D\u0D1F",
  "rwk": "\u0D31\u0D41\u0D35\u0D3E",
  "sa": "\u0D38\u0D02\u0D38\u0D4D\u200C\u0D15\u0D43\u0D24\u0D02",
  "sad": "\u0D38\u0D3E\u0D7B\u0D21\u0D35\u0D47",
  "sah": "\u0D38\u0D3E\u0D16",
  "sam": "\u0D38\u0D2E\u0D30\u0D3F\u0D2F\u0D3E\u0D15\u0D4D\u0D15\u0D3E\u0D30\u0D41\u0D1F\u0D46 \u0D05\u0D30\u0D2E\u0D3E\u0D2F",
  "saq": "\u0D38\u0D02\u0D2C\u0D41\u0D30\u0D41",
  "sas": "\u0D38\u0D38\u0D3E\u0D15\u0D4D",
  "sat": "\u0D38\u0D28\u0D4D\u0D24\u0D3E\u0D32\u0D3F",
  "sba": "\u0D17\u0D02\u0D2C\u0D3E\u0D2F\u0D4D",
  "sbp": "\u0D38\u0D02\u0D17\u0D41",
  "sc": "\u0D38\u0D7C\u0D21\u0D3F\u0D28\u0D3F\u0D2F\u0D3E\u0D7B",
  "scn": "\u0D38\u0D3F\u0D38\u0D3F\u0D32\u0D3F\u0D2F\u0D7B",
  "sco": "\u0D38\u0D4D\u0D15\u0D4B\u0D1F\u0D4D\u0D38\u0D4D",
  "sd": "\u0D38\u0D3F\u0D28\u0D4D\u0D27\u0D3F",
  "sdh": "\u0D24\u0D46\u0D15\u0D4D\u0D15\u0D7B \u0D15\u0D41\u0D7C\u0D26\u0D4D\u0D26\u0D3F\u0D37\u0D4D",
  "se": "\u0D35\u0D1F\u0D15\u0D4D\u0D15\u0D7B \u0D38\u0D2E\u0D3F",
  "see": "\u0D38\u0D46\u0D28\u0D47\u0D15",
  "seh": "\u0D38\u0D47\u0D28",
  "sel": "\u0D38\u0D46\u0D7D\u0D15\u0D2A\u0D4D",
  "ses": "\u0D15\u0D4A\u0D2F\u0D4D\u0D31\u0D3E\u0D2C\u0D4A\u0D31\u0D4B \u0D38\u0D46\u0D28\u0D4D\u0D28\u0D3F",
  "sg": "\u0D38\u0D3E\u0D02\u0D17\u0D4B",
  "sga": "\u0D2A\u0D34\u0D2F \u0D10\u0D31\u0D3F\u0D37\u0D4D",
  "sh": "\u0D38\u0D46\u0D7C\u0D2C\u0D4B-\u0D15\u0D4D\u0D30\u0D4A\u0D2F\u0D47\u0D37\u0D4D\u0D2F\u0D7B",
  "shi": "\u0D24\u0D3E\u0D1A\u0D4D\u0D1A\u0D32\u0D3F\u0D31\u0D4D\u0D31\u0D4D",
  "shn": "\u0D37\u0D3E\u0D7B",
  "shu": "\u0D1A\u0D3E\u0D21\u0D3F\u0D2F\u0D7B \u0D05\u0D31\u0D2C\u0D3F",
  "si": "\u0D38\u0D3F\u0D02\u0D39\u0D33",
  "sid": "\u0D38\u0D3F\u0D21\u0D3E\u0D2E\u0D4B",
  "sk": "\u0D38\u0D4D\u0D32\u0D4B\u0D35\u0D3E\u0D15\u0D4D",
  "sl": "\u0D38\u0D4D\u0D32\u0D4B\u0D35\u0D47\u0D28\u0D3F\u0D2F\u0D7B",
  "sm": "\u0D38\u0D2E\u0D4B\u0D35\u0D7B",
  "sma": "\u0D24\u0D46\u0D15\u0D4D\u0D15\u0D7B \u0D38\u0D2E\u0D3F",
  "smj": "\u0D32\u0D42\u0D32\u0D40 \u0D38\u0D2E\u0D3F",
  "smn": "\u0D07\u0D28\u0D3E\u0D30\u0D3F \u0D38\u0D2E\u0D3F",
  "sms": "\u0D38\u0D4D\u0D15\u0D4B\u0D7E\u0D1F\u0D4D\u0D1F\u0D4D \u0D38\u0D2E\u0D3F",
  "sn": "\u0D37\u0D4B\u0D23",
  "snk": "\u0D38\u0D4B\u0D23\u0D3F\u0D7B\u0D15\u0D46",
  "so": "\u0D38\u0D4B\u0D2E\u0D3E\u0D32\u0D3F",
  "sog": "\u0D38\u0D4B\u0D1C\u0D3F\u0D21\u0D3F\u0D2F\u0D7B",
  "sq": "\u0D05\u0D7D\u0D2C\u0D47\u0D28\u0D3F\u0D2F\u0D7B",
  "sr": "\u0D38\u0D46\u0D7C\u0D2C\u0D3F\u0D2F\u0D7B",
  "srn": "\u0D36\u0D4D\u0D30\u0D3E\u0D28\u0D7B \u0D21\u0D4B\u0D19\u0D4D\u0D15\u0D4B",
  "srr": "\u0D38\u0D46\u0D31\u0D7C",
  "ss": "\u0D38\u0D4D\u0D35\u0D3E\u0D31\u0D4D\u0D31\u0D3F",
  "ssy": "\u0D38\u0D3E\u0D39\u0D4B",
  "st": "\u0D24\u0D46\u0D15\u0D4D\u0D15\u0D7B \u0D38\u0D4B\u0D24\u0D4B",
  "su": "\u0D38\u0D41\u0D23\u0D4D\u0D1F\u0D3E\u0D28\u0D40\u0D38\u0D4D",
  "suk": "\u0D38\u0D41\u0D15\u0D41\u0D2E",
  "sus": "\u0D38\u0D41\u0D38\u0D41",
  "sux": "\u0D38\u0D41\u0D2E\u0D47\u0D30\u0D3F\u0D2F\u0D7B",
  "sv": "\u0D38\u0D4D\u0D35\u0D40\u0D21\u0D3F\u0D37\u0D4D",
  "sw": "\u0D38\u0D4D\u0D35\u0D3E\u0D39\u0D3F\u0D32\u0D3F",
  "sw-CD": "\u0D15\u0D4B\u0D02\u0D17\u0D4B \u0D38\u0D4D\u0D35\u0D3E\u0D39\u0D3F\u0D32\u0D3F",
  "swb": "\u0D15\u0D4A\u0D2E\u0D4B\u0D31\u0D3F\u0D2F\u0D7B",
  "syc": "\u0D2A\u0D41\u0D30\u0D3E\u0D24\u0D28 \u0D38\u0D41\u0D31\u0D3F\u0D2F\u0D3E\u0D28\u0D3F\u0D2D\u0D3E\u0D37",
  "syr": "\u0D38\u0D41\u0D31\u0D3F\u0D2F\u0D3E\u0D28\u0D3F",
  "ta": "\u0D24\u0D2E\u0D3F\u0D34\u0D4D",
  "te": "\u0D24\u0D46\u0D32\u0D41\u0D19\u0D4D\u0D15\u0D4D",
  "tem": "\u0D1F\u0D3F\u0D02\u0D28\u0D47",
  "teo": "\u0D1F\u0D46\u0D38\u0D4B",
  "ter": "\u0D1F\u0D46\u0D31\u0D47\u0D28\u0D4B",
  "tet": "\u0D1F\u0D46\u0D31\u0D4D\u0D31\u0D41\u0D02",
  "tg": "\u0D24\u0D3E\u0D1C\u0D3F\u0D15\u0D4D",
  "th": "\u0D24\u0D3E\u0D2F\u0D4D",
  "ti": "\u0D1F\u0D48\u0D17\u0D4D\u0D30\u0D3F\u0D28\u0D4D\u0D2F",
  "tig": "\u0D1F\u0D48\u0D17\u0D4D\u0D30\u0D3F",
  "tiv": "\u0D1F\u0D3F\u0D35\u0D4D",
  "tk": "\u0D24\u0D41\u0D7C\u0D15\u0D4D\u200C\u0D2E\u0D46\u0D7B",
  "tkl": "\u0D1F\u0D4A\u0D15\u0D4D\u0D15\u0D47\u0D32\u0D57",
  "tl": "\u0D24\u0D17\u0D3E\u0D32\u0D4B\u0D17\u0D4D",
  "tlh": "\u0D15\u0D4D\u0D32\u0D3F\u0D02\u0D17\u0D4B\u0D7A",
  "tli": "\u0D32\u0D3F\u0D02\u0D17\u0D4D\u0D35\u0D3F\u0D31\u0D4D\u0D31\u0D4D",
  "tmh": "\u0D1F\u0D2E\u0D37\u0D47\u0D15\u0D4D",
  "tn": "\u0D38\u0D4D\u0D35\u0D3E\u0D28",
  "to": "\u0D1F\u0D4B\u0D02\u0D17\u0D7B",
  "tog": "\u0D28\u0D4D\u0D2F\u0D3E\u0D38\u0D3E \u0D21\u0D4B\u0D19\u0D4D\u0D15",
  "tpi": "\u0D1F\u0D4B\u0D15\u0D4D \u0D2A\u0D3F\u0D38\u0D3F\u0D7B",
  "tr": "\u0D1F\u0D7C\u0D15\u0D4D\u0D15\u0D3F\u0D37\u0D4D",
  "trv": "\u0D24\u0D30\u0D4B\u0D15\u0D4D\u0D15\u0D4B",
  "ts": "\u0D38\u0D4B\u0D02\u0D17",
  "tsi": "\u0D38\u0D3F\u0D02\u0D37\u0D4D\u0D2F\u0D7B",
  "tt": "\u0D1F\u0D3E\u0D1F\u0D4D\u0D1F\u0D7C",
  "tum": "\u0D1F\u0D41\u0D02\u0D2C\u0D41\u0D15",
  "tvl": "\u0D1F\u0D41\u0D35\u0D3E\u0D32\u0D41",
  "tw": "\u0D1F\u0D4D\u0D35\u0D3F",
  "twq": "\u0D1F\u0D38\u0D35\u0D3E\u0D15\u0D4D\u0D15\u0D4D",
  "ty": "\u0D24\u0D3E\u0D39\u0D3F\u0D24\u0D3F\u0D2F\u0D7B",
  "tyv": "\u0D24\u0D41\u0D35\u0D3F\u0D28\u0D3F\u0D2F\u0D7B",
  "tzm": "\u0D2E\u0D27\u0D4D\u0D2F \u0D05\u0D31\u0D4D\u0D31\u0D4D\u200C\u0D32\u0D38\u0D4D \u0D1F\u0D2E\u0D3E\u0D38\u0D48\u0D31\u0D4D\u0D31\u0D4D",
  "udm": "\u0D09\u0D21\u0D4D\u0D2E\u0D41\u0D7C\u0D1F\u0D4D\u0D1F\u0D4D",
  "ug": "\u0D09\u0D2F\u0D4D\u0D18\u0D41\u0D7C",
  "uga": "\u0D09\u0D17\u0D31\u0D3F\u0D1F\u0D4D\u0D1F\u0D3F\u0D15\u0D4D",
  "uk": "\u0D09\u0D15\u0D4D\u0D30\u0D47\u0D28\u0D3F\u0D2F\u0D7B",
  "umb": "\u0D09\u0D02\u0D2C\u0D41\u0D28\u0D4D\u0D26\u0D41",
  "und": "\u0D05\u0D1C\u0D4D\u0D1E\u0D3E\u0D24 \u0D2D\u0D3E\u0D37",
  "ur": "\u0D09\u0D31\u0D41\u0D26\u0D41",
  "uz": "\u0D09\u0D38\u0D4D\u200C\u0D2C\u0D46\u0D15\u0D4D\u0D15\u0D4D",
  "vai": "\u0D35\u0D48",
  "ve": "\u0D35\u0D46\u0D28\u0D4D\u0D26",
  "vi": "\u0D35\u0D3F\u0D2F\u0D31\u0D4D\u0D31\u0D4D\u0D28\u0D3E\u0D2E\u0D40\u0D38\u0D4D",
  "vo": "\u0D35\u0D4B\u0D33\u0D3E\u0D2A\u0D41\u0D15\u0D4D",
  "vot": "\u0D35\u0D4B\u0D1F\u0D4D\u0D1F\u0D3F\u0D15\u0D4D",
  "vun": "\u0D35\u0D41\u0D7B\u0D1C\u0D4B",
  "wa": "\u0D35\u0D32\u0D4D\u0D32\u0D42\u0D7A",
  "wae": "\u0D35\u0D3E\u0D7E\u0D38\u0D7C",
  "wal": "\u0D35\u0D4A\u0D32\u0D48\u0D31\u0D4D\u0D31",
  "war": "\u0D35\u0D3E\u0D30\u0D47\u0D2F\u0D4D",
  "was": "\u0D35\u0D3E\u0D37\u0D4A",
  "wbp": "\u0D35\u0D42\u0D7E\u0D2A\u0D3F\u0D30\u0D3F",
  "wo": "\u0D35\u0D4A\u0D33\u0D4B\u0D2B\u0D4D",
  "wuu": "\u0D35\u0D41 \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "xal": "\u0D15\u0D7D\u0D2E\u0D48\u0D15\u0D4D",
  "xh": "\u0D16\u0D4B\u0D38",
  "xog": "\u0D38\u0D4B\u0D17\u0D4B",
  "yao": "\u0D2F\u0D3E\u0D35\u0D4B",
  "yap": "\u0D2F\u0D46\u0D2A\u0D4D\u0D2A\u0D40\u0D38\u0D4D",
  "yav": "\u0D2F\u0D3E\u0D02\u0D17\u0D4D\u0D2C\u0D46\u0D7B",
  "ybb": "\u0D2F\u0D02\u0D2C",
  "yi": "\u0D2F\u0D3F\u0D26\u0D4D\u0D26\u0D3F\u0D37\u0D4D",
  "yo": "\u0D2F\u0D4A\u0D31\u0D42\u0D2C\u0D3E",
  "yrl": "yrl",
  "yue": "\u0D15\u0D3E\u0D28\u0D4D\u0D31\u0D23\u0D40\u0D38\u0D4D",
  "za": "\u0D38\u0D4D\u0D35\u0D3E\u0D02\u0D17\u0D4D",
  "zap": "\u0D38\u0D3E\u0D2A\u0D4D\u0D2A\u0D4B\u0D1F\u0D46\u0D15\u0D4D",
  "zbl": "\u0D2C\u0D4D\u0D32\u0D3F\u0D38\u0D4D\u0D38\u0D3F\u0D02\u0D2C\u0D7D\u0D38\u0D4D",
  "zen": "\u0D38\u0D46\u0D28\u0D17",
  "zgh": "\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D3E\u0D7B\u0D21\u0D47\u0D7C\u0D21\u0D4D \u0D2E\u0D4A\u0D31\u0D4B\u0D15\u0D4D\u0D15\u0D7B \u0D31\u0D4D\u0D31\u0D3E\u0D2E\u0D38\u0D3F\u0D2F\u0D31\u0D4D\u0D31\u0D4D",
  "zh": "\u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "zh-Hans": "\u0D32\u0D33\u0D3F\u0D24\u0D2E\u0D3E\u0D15\u0D4D\u0D15\u0D3F\u0D2F \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "zh-Hant": "\u0D2A\u0D30\u0D2E\u0D4D\u0D2A\u0D30\u0D3E\u0D17\u0D24 \u0D1A\u0D48\u0D28\u0D40\u0D38\u0D4D",
  "zu": "\u0D38\u0D41\u0D32\u0D41",
  "zun": "\u0D38\u0D41\u0D28\u0D3F",
  "zxx": "\u0D2D\u0D3E\u0D37\u0D3E\u0D2A\u0D30\u0D2E\u0D3E\u0D2F \u0D09\u0D33\u0D4D\u0D33\u0D1F\u0D15\u0D4D\u0D15\u0D2E\u0D4A\u0D28\u0D4D\u0D28\u0D41\u0D2E\u0D3F\u0D32\u0D4D\u0D32",
  "zza": "\u0D38\u0D3E\u0D38\u0D3E"
};

// src/l10n/locale/ms.ts
var ms_default = {
  "aa": "Afar",
  "ab": "Abkhazia",
  "ace": "Aceh",
  "ach": "Akoli",
  "ada": "Adangme",
  "ady": "Adyghe",
  "ae": "Avestan",
  "aeb": "Arab Tunisia",
  "af": "Afrikaans",
  "agq": "Aghem",
  "ain": "Ainu",
  "ak": "Akan",
  "ale": "Aleut",
  "alt": "Altai Selatan",
  "am": "Amharic",
  "an": "Aragon",
  "anp": "Angika",
  "ar": "Arab",
  "ar-001": "Arab Standard Moden",
  "arn": "Mapuche",
  "arp": "Arapaho",
  "arq": "Arab Algeria",
  "ars": "Arab Najdi",
  "ary": "Arab Maghribi",
  "arz": "Arab Mesir",
  "as": "Assam",
  "asa": "Asu",
  "ast": "Asturia",
  "av": "Avaric",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbaijan",
  "ba": "Bashkir",
  "bal": "Baluchi",
  "ban": "Bali",
  "bas": "Basaa",
  "bax": "Bamun",
  "bbj": "Ghomala",
  "be": "Belarus",
  "bej": "Beja",
  "bem": "Bemba",
  "bez": "Bena",
  "bfd": "Bafut",
  "bg": "Bulgaria",
  "bgn": "Balochi Barat",
  "bho": "Bhojpuri",
  "bi": "Bislama",
  "bin": "Bini",
  "bkm": "Kom",
  "bla": "Siksika",
  "bm": "Bambara",
  "bn": "Benggali",
  "bo": "Tibet",
  "bpy": "Bishnupriya",
  "br": "Breton",
  "brh": "Brahui",
  "brx": "Bodo",
  "bs": "Bosnia",
  "bss": "Akoose",
  "bua": "Buriat",
  "bug": "Bugis",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Catalonia",
  "cay": "Cayuga",
  "ccp": "Chakma",
  "ce": "Chechen",
  "ceb": "Cebuano",
  "cgg": "Chiga",
  "ch": "Chamorro",
  "chk": "Chukese",
  "chm": "Mari",
  "cho": "Choctaw",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "ckb": "Kurdi Tengah",
  "co": "Corsica",
  "cop": "Coptic",
  "crh": "Turki Krimea",
  "crs": "Perancis Seselwa Creole",
  "cs": "Czech",
  "cu": "Slavik Gereja",
  "cv": "Chuvash",
  "cy": "Wales",
  "da": "Denmark",
  "dak": "Dakota",
  "dar": "Dargwa",
  "dav": "Taita",
  "de": "Jerman",
  "de-AT": "Jerman Austria",
  "de-CH": "Jerman Halus Switzerland",
  "dgr": "Dogrib",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Sorbian Rendah",
  "dua": "Duala",
  "dv": "Divehi",
  "dyo": "Jola-Fonyi",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "eka": "Ekajuk",
  "el": "Greek",
  "en": "Inggeris",
  "en-AU": "Inggeris Australia",
  "en-CA": "Inggeris Kanada",
  "en-GB": "Inggeris British",
  "en-US": "Inggeris AS",
  "eo": "Esperanto",
  "es": "Sepanyol",
  "es-419": "Sepanyol Amerika Latin",
  "es-ES": "Sepanyol Eropah",
  "es-MX": "Sepanyol Mexico",
  "et": "Estonia",
  "eu": "Basque",
  "ewo": "Ewondo",
  "fa": "Parsi",
  "fa-AF": "Dari",
  "ff": "Fulah",
  "fi": "Finland",
  "fil": "Filipina",
  "fj": "Fiji",
  "fo": "Faroe",
  "fon": "Fon",
  "fr": "Perancis",
  "fr-CA": "Perancis Kanada",
  "fr-CH": "Perancis Switzerland",
  "frc": "Perancis Cajun",
  "fur": "Friulian",
  "fy": "Frisian Barat",
  "ga": "Ireland",
  "gaa": "Ga",
  "gag": "Gagauz",
  "gan": "Cina Gan",
  "gba": "Gbaya",
  "gbz": "Zoroastrian Dari",
  "gd": "Scots Gaelic",
  "gez": "Geez",
  "gil": "Kiribati",
  "gl": "Galicia",
  "glk": "Gilaki",
  "gn": "Guarani",
  "gor": "Gorontalo",
  "grc": "Greek Purba",
  "gsw": "Jerman Switzerland",
  "gu": "Gujerat",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Gwich\u02BCin",
  "ha": "Hausa",
  "hak": "Cina Hakka",
  "haw": "Hawaii",
  "he": "Ibrani",
  "hi": "Hindi",
  "hil": "Hiligaynon",
  "hmn": "Hmong",
  "hr": "Croatia",
  "hsb": "Sorbian Atas",
  "hsn": "Cina Xiang",
  "ht": "Haiti",
  "hu": "Hungary",
  "hup": "Hupa",
  "hy": "Armenia",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesia",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Sichuan Yi",
  "ilo": "Iloko",
  "inh": "Ingush",
  "io": "Ido",
  "is": "Iceland",
  "it": "Itali",
  "iu": "Inuktitut",
  "ja": "Jepun",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jv": "Jawa",
  "ka": "Georgia",
  "kab": "Kabyle",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kbd": "Kabardia",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "kfo": "Koro",
  "kg": "Kongo",
  "kgp": "kgp",
  "kha": "Khasi",
  "khq": "Koyra Chiini",
  "khw": "Khowar",
  "ki": "Kikuya",
  "kj": "Kuanyama",
  "kk": "Kazakhstan",
  "kkj": "Kako",
  "kl": "Kalaallisut",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Korea",
  "koi": "Komi-Permyak",
  "kok": "Konkani",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karachay-Balkar",
  "krl": "Karelian",
  "kru": "Kurukh",
  "ks": "Kashmir",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "Colognian",
  "ku": "Kurdish",
  "kum": "Kumyk",
  "kv": "Komi",
  "kw": "Cornish",
  "ky": "Kirghiz",
  "la": "Latin",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lb": "Luxembourg",
  "lez": "Lezghian",
  "lg": "Ganda",
  "li": "Limburgish",
  "lij": "lij",
  "lkt": "Lakota",
  "ln": "Lingala",
  "lo": "Laos",
  "lou": "Kreol Louisiana",
  "loz": "Lozi",
  "lrc": "Luri Utara",
  "lt": "Lithuania",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Mizo",
  "luy": "Luyia",
  "lv": "Latvia",
  "mad": "Madura",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makasar",
  "mas": "Masai",
  "mde": "Maba",
  "mdf": "Moksha",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malagasy",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u2019",
  "mh": "Marshall",
  "mi": "Maori",
  "mic": "Micmac",
  "min": "Minangkabau",
  "mk": "Macedonia",
  "ml": "Malayalam",
  "mn": "Mongolia",
  "mni": "Manipuri",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "ms": "Melayu",
  "mt": "Malta",
  "mua": "Mundang",
  "mul": "Pelbagai Bahasa",
  "mus": "Creek",
  "mwl": "Mirandese",
  "my": "Burma",
  "mye": "Myene",
  "myv": "Erzya",
  "mzn": "Mazanderani",
  "na": "Nauru",
  "nan": "Cina Min Nan",
  "nap": "Neapolitan",
  "naq": "Nama",
  "nb": "Bokm\xE5l Norway",
  "nd": "Ndebele Utara",
  "nds": "Jerman Rendah",
  "nds-NL": "Saxon Rendah",
  "ne": "Nepal",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niu",
  "nl": "Belanda",
  "nl-BE": "Flemish",
  "nmg": "Kwasio",
  "nn": "Nynorsk Norway",
  "nnh": "Ngiemboon",
  "no": "Norway",
  "nog": "Nogai",
  "nqo": "N\u2019ko",
  "nr": "Ndebele Selatan",
  "nso": "Sotho Utara",
  "nus": "Nuer",
  "nv": "Navajo",
  "ny": "Nyanja",
  "nyn": "Nyankole",
  "oc": "Occitania",
  "om": "Oromo",
  "or": "Odia",
  "os": "Ossete",
  "pa": "Punjabi",
  "pag": "Pangasinan",
  "pam": "Pampanga",
  "pap": "Papiamento",
  "pau": "Palauan",
  "pcm": "Nigerian Pidgin",
  "pl": "Poland",
  "prg": "Prusia",
  "ps": "Pashto",
  "pt": "Portugis",
  "pt-BR": "Portugis Brazil",
  "pt-PT": "Portugis Eropah",
  "qu": "Quechua",
  "quc": "K\u02BCiche\u02BC",
  "rap": "Rapanui",
  "rar": "Rarotonga",
  "rhg": "Rohingya",
  "rm": "Romansh",
  "rn": "Rundi",
  "ro": "Romania",
  "ro-MD": "Moldavia",
  "rof": "Rombo",
  "ru": "Rusia",
  "rup": "Aromanian",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskrit",
  "sad": "Sandawe",
  "sah": "Sakha",
  "saq": "Samburu",
  "sat": "Santali",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardinia",
  "scn": "Sicili",
  "sco": "Scots",
  "sd": "Sindhi",
  "sdh": "Kurdish Selatan",
  "se": "Sami Utara",
  "see": "Seneca",
  "seh": "Sena",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sh": "SerboCroatia",
  "shi": "Tachelhit",
  "shn": "Shan",
  "shu": "Arab Chadian",
  "si": "Sinhala",
  "sk": "Slovak",
  "sl": "Slovenia",
  "sm": "Samoa",
  "sma": "Sami Selatan",
  "smj": "Lule Sami",
  "smn": "Inari Sami",
  "sms": "Skolt Sami",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somali",
  "sq": "Albania",
  "sr": "Serbia",
  "srn": "Sranan Tongo",
  "ss": "Swati",
  "ssy": "Saho",
  "st": "Sotho Selatan",
  "su": "Sunda",
  "suk": "Sukuma",
  "sv": "Sweden",
  "sw": "Swahili",
  "sw-CD": "Congo Swahili",
  "swb": "Comoria",
  "syr": "Syriac",
  "ta": "Tamil",
  "te": "Telugu",
  "tem": "Timne",
  "teo": "Teso",
  "tet": "Tetum",
  "tg": "Tajik",
  "th": "Thai",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tk": "Turkmen",
  "tlh": "Klingon",
  "tly": "Talysh",
  "tn": "Tswana",
  "to": "Tonga",
  "tpi": "Tok Pisin",
  "tr": "Turki",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tt": "Tatar",
  "tum": "Tumbuka",
  "tvl": "Tuvalu",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahiti",
  "tyv": "Tuvinian",
  "tzm": "Tamazight Atlas Tengah",
  "udm": "Udmurt",
  "ug": "Uyghur",
  "uk": "Ukraine",
  "umb": "Umbundu",
  "und": "Bahasa Tidak Diketahui",
  "ur": "Urdu",
  "uz": "Uzbekistan",
  "vai": "Vai",
  "ve": "Venda",
  "vi": "Vietnam",
  "vo": "Volap\xFCk",
  "vun": "Vunjo",
  "wa": "Walloon",
  "wae": "Walser",
  "wal": "Wolaytta",
  "war": "Waray",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "wuu": "Cina Wu",
  "xal": "Kalmyk",
  "xh": "Xhosa",
  "xog": "Soga",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Yiddish",
  "yo": "Yoruba",
  "yrl": "yrl",
  "yue": "Kantonis",
  "zgh": "Tamazight Maghribi Standard",
  "zh": "Cina",
  "zh-Hans": "Cina Ringkas",
  "zh-Hant": "Cina Tradisional",
  "zu": "Zulu",
  "zun": "Zuni",
  "zxx": "Tiada kandungan linguistik",
  "zza": "Zaza"
};

// src/l10n/locale/nl.ts
var nl_default = {
  "aa": "Afar",
  "ab": "Abchazisch",
  "ace": "Atjehs",
  "ach": "Akoli",
  "ada": "Adangme",
  "ady": "Adygees",
  "ae": "Avestisch",
  "aeb": "Tunesisch Arabisch",
  "af": "Afrikaans",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Aino",
  "ak": "Akan",
  "akk": "Akkadisch",
  "akz": "Alabama",
  "ale": "Aleoetisch",
  "aln": "Gegisch",
  "alt": "Zuid-Alta\xEFsch",
  "am": "Amhaars",
  "an": "Aragonees",
  "ang": "Oudengels",
  "anp": "Angika",
  "ar": "Arabisch",
  "ar-001": "modern standaard Arabisch",
  "arc": "Aramees",
  "arn": "Mapudungun",
  "aro": "Araona",
  "arp": "Arapaho",
  "arq": "Algerijns Arabisch",
  "ars": "Nadjdi-Arabisch",
  "arw": "Arawak",
  "ary": "Marokkaans Arabisch",
  "arz": "Egyptisch Arabisch",
  "as": "Assamees",
  "asa": "Asu",
  "ase": "Amerikaanse Gebarentaal",
  "ast": "Asturisch",
  "av": "Avarisch",
  "avk": "Kotava",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbeidzjaans",
  "ba": "Basjkiers",
  "bal": "Beloetsji",
  "ban": "Balinees",
  "bar": "Beiers",
  "bas": "Basa",
  "bax": "Bamoun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala\u2019",
  "be": "Belarussisch",
  "bej": "Beja",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bfq": "Badaga",
  "bg": "Bulgaars",
  "bgn": "Westers Beloetsji",
  "bho": "Bhojpuri",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjar",
  "bkm": "Kom",
  "bla": "Siksika",
  "bm": "Bambara",
  "bn": "Bengaals",
  "bo": "Tibetaans",
  "bpy": "Bishnupriya",
  "bqi": "Bakhtiari",
  "br": "Bretons",
  "bra": "Braj",
  "brh": "Brahui",
  "brx": "Bodo",
  "bs": "Bosnisch",
  "bss": "Akoose",
  "bua": "Boerjatisch",
  "bug": "Buginees",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Catalaans",
  "cad": "Caddo",
  "car": "Caribisch",
  "cay": "Cayuga",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "Tsjetsjeens",
  "ceb": "Cebuano",
  "cgg": "Chiga",
  "ch": "Chamorro",
  "chb": "Chibcha",
  "chg": "Chagatai",
  "chk": "Chuukees",
  "chm": "Mari",
  "chn": "Chinook Jargon",
  "cho": "Choctaw",
  "chp": "Chipewyan",
  "chr": "Cherokee",
  "chy": "Cheyenne",
  "ckb": "Soran\xEE",
  "co": "Corsicaans",
  "cop": "Koptisch",
  "cps": "Capiznon",
  "cr": "Cree",
  "crh": "Krim-Tataars",
  "crs": "Seychellencreools",
  "cs": "Tsjechisch",
  "csb": "Kasjoebisch",
  "cu": "Kerkslavisch",
  "cv": "Tsjoevasjisch",
  "cy": "Welsh",
  "da": "Deens",
  "dak": "Dakota",
  "dar": "Dargwa",
  "dav": "Taita",
  "de": "Duits",
  "de-AT": "Duits (Oostenrijk)",
  "de-CH": "Duits (Zwitserland)",
  "del": "Delaware",
  "den": "Slavey",
  "dgr": "Dogrib",
  "din": "Dinka",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "Nedersorbisch",
  "dtp": "Dusun",
  "dua": "Duala",
  "dum": "Middelnederlands",
  "dv": "Divehi",
  "dyo": "Jola-Fonyi",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egl": "Emiliano",
  "egy": "Oudegyptisch",
  "eka": "Ekajuk",
  "el": "Grieks",
  "elx": "Elamitisch",
  "en": "Engels",
  "en-AU": "Engels (Australi\xEB)",
  "en-CA": "Engels (Canada)",
  "en-GB": "Engels (Verenigd Koninkrijk)",
  "en-US": "Engels (Verenigde Staten)",
  "enm": "Middelengels",
  "eo": "Esperanto",
  "es": "Spaans",
  "es-419": "Spaans (Latijns-Amerika)",
  "es-ES": "Spaans (Spanje)",
  "es-MX": "Spaans (Mexico)",
  "esu": "Yupik",
  "et": "Estisch",
  "eu": "Baskisch",
  "ewo": "Ewondo",
  "ext": "Extremeens",
  "fa": "Perzisch",
  "fa-AF": "Dari",
  "fan": "Fang",
  "fat": "Fanti",
  "ff": "Fulah",
  "fi": "Fins",
  "fil": "Filipijns",
  "fit": "Tornedal-Fins",
  "fj": "Fijisch",
  "fo": "Faer\xF6ers",
  "fon": "Fon",
  "fr": "Frans",
  "fr-CA": "Frans (Canada)",
  "fr-CH": "Frans (Zwitserland)",
  "frc": "Cajun-Frans",
  "frm": "Middelfrans",
  "fro": "Oudfrans",
  "frp": "Arpitaans",
  "frr": "Noord-Fries",
  "frs": "Oost-Fries",
  "fur": "Friulisch",
  "fy": "Fries",
  "ga": "Iers",
  "gaa": "Ga",
  "gag": "Gagaoezisch",
  "gan": "Ganyu",
  "gay": "Gayo",
  "gba": "Gbaya",
  "gbz": "Zoroastrisch Dari",
  "gd": "Schots-Gaelisch",
  "gez": "Ge\u2019ez",
  "gil": "Gilbertees",
  "gl": "Galicisch",
  "glk": "Gilaki",
  "gmh": "Middelhoogduits",
  "gn": "Guaran\xED",
  "goh": "Oudhoogduits",
  "gom": "Goa Konkani",
  "gon": "Gondi",
  "gor": "Gorontalo",
  "got": "Gothisch",
  "grb": "Grebo",
  "grc": "Oudgrieks",
  "gsw": "Zwitserduits",
  "gu": "Gujarati",
  "guc": "Wayuu",
  "gur": "Gurune",
  "guz": "Gusii",
  "gv": "Manx",
  "gwi": "Gwich\u02BCin",
  "ha": "Hausa",
  "hai": "Haida",
  "hak": "Hakka",
  "haw": "Hawa\xEFaans",
  "he": "Hebreeuws",
  "hi": "Hindi",
  "hif": "Fijisch Hindi",
  "hil": "Hiligaynon",
  "hit": "Hettitisch",
  "hmn": "Hmong",
  "ho": "Hiri Motu",
  "hr": "Kroatisch",
  "hsb": "Oppersorbisch",
  "hsn": "Xiangyu",
  "ht": "Ha\xEFtiaans Creools",
  "hu": "Hongaars",
  "hup": "Hupa",
  "hy": "Armeens",
  "hz": "Herero",
  "ia": "Interlingua",
  "iba": "Iban",
  "ibb": "Ibibio",
  "id": "Indonesisch",
  "ie": "Interlingue",
  "ig": "Igbo",
  "ii": "Yi",
  "ik": "Inupiaq",
  "ilo": "Iloko",
  "inh": "Ingoesjetisch",
  "io": "Ido",
  "is": "IJslands",
  "it": "Italiaans",
  "iu": "Inuktitut",
  "izh": "Ingrisch",
  "ja": "Japans",
  "jam": "Jamaicaans Creools",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "Judeo-Perzisch",
  "jrb": "Judeo-Arabisch",
  "jut": "Jutlands",
  "jv": "Javaans",
  "ka": "Georgisch",
  "kaa": "Karakalpaks",
  "kab": "Kabylisch",
  "kac": "Kachin",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardisch",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kaapverdisch Creools",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongo",
  "kgp": "Kaingang",
  "kha": "Khasi",
  "kho": "Khotanees",
  "khq": "Koyra Chiini",
  "khw": "Khowar",
  "ki": "Gikuyu",
  "kiu": "Kirmanck\xEE",
  "kj": "Kuanyama",
  "kk": "Kazachs",
  "kkj": "Kako",
  "kl": "Groenlands",
  "kln": "Kalenjin",
  "km": "Khmer",
  "kmb": "Kimbundu",
  "kn": "Kannada",
  "ko": "Koreaans",
  "koi": "Komi-Permjaaks",
  "kok": "Konkani",
  "kos": "Kosraeaans",
  "kpe": "Kpelle",
  "kr": "Kanuri",
  "krc": "Karatsjaj-Balkarisch",
  "kri": "Krio",
  "krj": "Kinaray-a",
  "krl": "Karelisch",
  "kru": "Kurukh",
  "ks": "Kasjmiri",
  "ksb": "Shambala",
  "ksf": "Bafia",
  "ksh": "K\xF6lsch",
  "ku": "Koerdisch",
  "kum": "Koemuks",
  "kut": "Kutenai",
  "kv": "Komi",
  "kw": "Cornish",
  "ky": "Kirgizisch",
  "la": "Latijn",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba",
  "lb": "Luxemburgs",
  "lez": "Lezgisch",
  "lfn": "Lingua Franca Nova",
  "lg": "Luganda",
  "li": "Limburgs",
  "lij": "Ligurisch",
  "liv": "Lijfs",
  "lkt": "Lakota",
  "lmo": "Lombardisch",
  "ln": "Lingala",
  "lo": "Laotiaans",
  "lol": "Mongo",
  "lou": "Louisiana-Creools",
  "loz": "Lozi",
  "lrc": "Noordelijk Luri",
  "lt": "Litouws",
  "ltg": "Letgaals",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Mizo",
  "luy": "Luyia",
  "lv": "Lets",
  "lzh": "Klassiek Chinees",
  "lzz": "Lazisch",
  "mad": "Madoerees",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makassaars",
  "man": "Mandingo",
  "mas": "Maa",
  "mde": "Maba",
  "mdf": "Moksja",
  "mdr": "Mandar",
  "men": "Mende",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malagassisch",
  "mga": "Middeliers",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u2019",
  "mh": "Marshallees",
  "mi": "Maori",
  "mic": "Mi\u2019kmaq",
  "min": "Minangkabau",
  "mk": "Macedonisch",
  "ml": "Malayalam",
  "mn": "Mongools",
  "mnc": "Mantsjoe",
  "mni": "Meitei",
  "moh": "Mohawk",
  "mos": "Mossi",
  "mr": "Marathi",
  "mrj": "West-Mari",
  "ms": "Maleis",
  "mt": "Maltees",
  "mua": "Mundang",
  "mul": "meerdere talen",
  "mus": "Creek",
  "mwl": "Mirandees",
  "mwr": "Marwari",
  "mwv": "Mentawai",
  "my": "Birmaans",
  "mye": "Myene",
  "myv": "Erzja",
  "mzn": "Mazanderani",
  "na": "Nauruaans",
  "nan": "Minnanyu",
  "nap": "Napolitaans",
  "naq": "Nama",
  "nb": "Noors - Bokm\xE5l",
  "nd": "Noord-Ndebele",
  "nds": "Nedersaksisch",
  "nds-NL": "Nederduits",
  "ne": "Nepalees",
  "new": "Newari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niueaans",
  "njo": "Ao Naga",
  "nl": "Nederlands",
  "nl-BE": "Vlaams",
  "nmg": "Ngumba",
  "nn": "Noors - Nynorsk",
  "nnh": "Ngiemboon",
  "no": "Noors",
  "nog": "Nogai",
  "non": "Oudnoors",
  "nov": "Novial",
  "nqo": "N\u2019Ko",
  "nr": "Zuid-Ndbele",
  "nso": "Noord-Sotho",
  "nus": "Nuer",
  "nv": "Navajo",
  "nwc": "Klassiek Nepalbhasa",
  "ny": "Nyanja",
  "nym": "Nyamwezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima",
  "oc": "Occitaans",
  "oj": "Ojibwa",
  "om": "Afaan Oromo",
  "or": "Odia",
  "os": "Ossetisch",
  "osa": "Osage",
  "ota": "Ottomaans-Turks",
  "pa": "Punjabi",
  "pag": "Pangasinan",
  "pal": "Pahlavi",
  "pam": "Pampanga",
  "pap": "Papiaments",
  "pau": "Palaus",
  "pcd": "Picardisch",
  "pcm": "Nigeriaans Pidgin",
  "pdc": "Pennsylvania-Duits",
  "pdt": "Plautdietsch",
  "peo": "Oudperzisch",
  "pfl": "Paltsisch",
  "phn": "Foenicisch",
  "pi": "Pali",
  "pl": "Pools",
  "pms": "Pi\xEBmontees",
  "pnt": "Pontisch",
  "pon": "Pohnpeiaans",
  "prg": "Oudpruisisch",
  "pro": "Oudproven\xE7aals",
  "ps": "Pasjtoe",
  "pt": "Portugees",
  "pt-BR": "Portugees (Brazili\xEB)",
  "pt-PT": "Portugees (Portugal)",
  "qu": "Quechua",
  "quc": "K\u2019iche\u2019",
  "qug": "Kichwa",
  "raj": "Rajasthani",
  "rap": "Rapanui",
  "rar": "Rarotongan",
  "rgn": "Romagnol",
  "rhg": "Rohingya",
  "rif": "Riffijns",
  "rm": "Reto-Romaans",
  "rn": "Kirundi",
  "ro": "Roemeens",
  "ro-MD": "Roemeens (Moldavi\xEB)",
  "rof": "Rombo",
  "rom": "Romani",
  "rtm": "Rotumaans",
  "ru": "Russisch",
  "rue": "Roetheens",
  "rug": "Roviana",
  "rup": "Aroemeens",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskriet",
  "sad": "Sandawe",
  "sah": "Jakoets",
  "sam": "Samaritaans-Aramees",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "saz": "Saurashtra",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardijns",
  "scn": "Siciliaans",
  "sco": "Schots",
  "sd": "Sindhi",
  "sdc": "Sassarees",
  "sdh": "Pahlavani",
  "se": "Noord-Samisch",
  "see": "Seneca",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkoeps",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sga": "Oudiers",
  "sgs": "Samogitisch",
  "sh": "Servo-Kroatisch",
  "shi": "Tashelhiyt",
  "shn": "Shan",
  "shu": "Tsjadisch Arabisch",
  "si": "Singalees",
  "sid": "Sidamo",
  "sk": "Slowaaks",
  "sl": "Sloveens",
  "sli": "Silezisch Duits",
  "sly": "Selayar",
  "sm": "Samoaans",
  "sma": "Zuid-Samisch",
  "smj": "Lule-Samisch",
  "smn": "Inari-Samisch",
  "sms": "Skolt-Samisch",
  "sn": "Shona",
  "snk": "Soninke",
  "so": "Somalisch",
  "sog": "Sogdisch",
  "sq": "Albanees",
  "sr": "Servisch",
  "srn": "Sranantongo",
  "srr": "Serer",
  "ss": "Swazi",
  "ssy": "Saho",
  "st": "Zuid-Sotho",
  "stq": "Saterfries",
  "su": "Soendanees",
  "suk": "Sukuma",
  "sus": "Soesoe",
  "sux": "Soemerisch",
  "sv": "Zweeds",
  "sw": "Swahili",
  "sw-CD": "Swahili (Congo-Kinshasa)",
  "swb": "Shimaore",
  "syc": "Klassiek Syrisch",
  "syr": "Syrisch",
  "szl": "Silezisch",
  "ta": "Tamil",
  "tcy": "Tulu",
  "te": "Telugu",
  "tem": "Timne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetun",
  "tg": "Tadzjieks",
  "th": "Thai",
  "ti": "Tigrinya",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "Turkmeens",
  "tkl": "Tokelaus",
  "tkr": "Tsakhur",
  "tl": "Tagalog",
  "tlh": "Klingon",
  "tli": "Tlingit",
  "tly": "Talysh",
  "tmh": "Tamashek",
  "tn": "Tswana",
  "to": "Tongaans",
  "tog": "Nyasa Tonga",
  "tpi": "Tok Pisin",
  "tr": "Turks",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsd": "Tsakonisch",
  "tsi": "Tsimshian",
  "tt": "Tataars",
  "ttt": "Moslim Tat",
  "tum": "Toemboeka",
  "tvl": "Tuvaluaans",
  "tw": "Twi",
  "twq": "Tasawaq",
  "ty": "Tahitiaans",
  "tyv": "Toevaans",
  "tzm": "Tamazight (Centraal-Marokko)",
  "udm": "Oedmoerts",
  "ug": "Oeigoers",
  "uga": "Oegaritisch",
  "uk": "Oekra\xEFens",
  "umb": "Umbundu",
  "und": "onbekende taal",
  "ur": "Urdu",
  "uz": "Oezbeeks",
  "vai": "Vai",
  "ve": "Venda",
  "vec": "Venetiaans",
  "vep": "Wepsisch",
  "vi": "Vietnamees",
  "vls": "West-Vlaams",
  "vmf": "Opperfrankisch",
  "vo": "Volap\xFCk",
  "vot": "Votisch",
  "vro": "V\xF5ro",
  "vun": "Vunjo",
  "wa": "Waals",
  "wae": "Walser",
  "wal": "Wolaytta",
  "war": "Waray",
  "was": "Washo",
  "wbp": "Warlpiri",
  "wo": "Wolof",
  "wuu": "Wuyu",
  "xal": "Kalmuks",
  "xh": "Xhosa",
  "xmf": "Mingreels",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yapees",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Jiddisch",
  "yo": "Yoruba",
  "yrl": "Nheengatu",
  "yue": "Kantonees",
  "za": "Zhuang",
  "zap": "Zapotec",
  "zbl": "Blissymbolen",
  "zea": "Zeeuws",
  "zen": "Zenaga",
  "zgh": "Standaard Marokkaanse Tamazight",
  "zh": "Chinees",
  "zh-Hans": "Chinees (vereenvoudigd)",
  "zh-Hant": "Chinees (traditioneel)",
  "zu": "Zoeloe",
  "zun": "Zuni",
  "zxx": "geen lingu\xEFstische inhoud",
  "zza": "Zaza"
};

// src/l10n/locale/no.ts
var no_default = {
  "aa": "afar",
  "ab": "abkhasisk",
  "ace": "achinesisk",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adygeisk",
  "ae": "avestisk",
  "aeb": "tunisisk-arabisk",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "akkadisk",
  "akz": "alabama",
  "ale": "aleutisk",
  "aln": "gegisk-albansk",
  "alt": "s\xF8raltaisk",
  "am": "amharisk",
  "an": "aragonsk",
  "ang": "gammelengelsk",
  "anp": "angika",
  "ar": "arabisk",
  "ar-001": "moderne standardarabisk",
  "arc": "arameisk",
  "arn": "mapudungun",
  "aro": "araona",
  "arp": "arapaho",
  "arq": "algerisk arabisk",
  "ars": "najdi-arabisk",
  "arw": "arawak",
  "ary": "marokkansk-arabisk",
  "arz": "egyptisk arabisk",
  "as": "assamesisk",
  "asa": "asu",
  "ase": "amerikansk tegnspr\xE5k",
  "ast": "asturisk",
  "av": "avarisk",
  "avk": "kotava",
  "awa": "avadhi",
  "ay": "aymara",
  "az": "aserbajdsjansk",
  "ba": "basjkirsk",
  "bal": "baluchi",
  "ban": "balinesisk",
  "bar": "bairisk",
  "bas": "basaa",
  "bax": "bamun",
  "bbc": "batak toba",
  "bbj": "ghomala",
  "be": "hviterussisk",
  "bej": "beja",
  "bem": "bemba",
  "bew": "betawi",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badaga",
  "bg": "bulgarsk",
  "bgn": "vestbalutsji",
  "bho": "bhojpuri",
  "bi": "bislama",
  "bik": "bikol",
  "bin": "bini",
  "bjn": "banjar",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengali",
  "bo": "tibetansk",
  "bpy": "bishnupriya",
  "bqi": "bakhtiari",
  "br": "bretonsk",
  "bra": "braj",
  "brh": "brahui",
  "brx": "bodo",
  "bs": "bosnisk",
  "bss": "akose",
  "bua": "burjatisk",
  "bug": "buginesisk",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "katalansk",
  "cad": "caddo",
  "car": "karibisk",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "tsjetsjensk",
  "ceb": "cebuansk",
  "cgg": "kiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "tsjagatai",
  "chk": "chuukesisk",
  "chm": "mari",
  "chn": "chinook",
  "cho": "choctaw",
  "chp": "chipewiansk",
  "chr": "cherokesisk",
  "chy": "cheyenne",
  "ckb": "kurdisk (sorani)",
  "co": "korsikansk",
  "cop": "koptisk",
  "cps": "kapiz",
  "cr": "cree",
  "crh": "krimtatarisk",
  "crs": "seselwa",
  "cs": "tsjekkisk",
  "csb": "kasjubisk",
  "cu": "kirkeslavisk",
  "cv": "tsjuvasjisk",
  "cy": "walisisk",
  "da": "dansk",
  "dak": "dakota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "tysk",
  "de-AT": "tysk (\xD8sterrike)",
  "de-CH": "tysk (Sveits)",
  "del": "delaware",
  "den": "slavey",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "lavsorbisk",
  "dtp": "sentraldusun",
  "dua": "duala",
  "dum": "mellomnederlandsk",
  "dv": "divehi",
  "dyo": "jola-fonyi",
  "dyu": "dyula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "kiembu",
  "ee": "ewe",
  "efi": "efik",
  "egl": "emiliansk",
  "egy": "gammelegyptisk",
  "eka": "ekajuk",
  "el": "gresk",
  "elx": "elamittisk",
  "en": "engelsk",
  "en-AU": "engelsk (Australia)",
  "en-CA": "engelsk (Canada)",
  "en-GB": "engelsk (Storbritannia)",
  "en-US": "engelsk (USA)",
  "enm": "mellomengelsk",
  "eo": "esperanto",
  "es": "spansk",
  "es-419": "spansk (Latin-Amerika)",
  "es-ES": "spansk (Spania)",
  "es-MX": "spansk (Mexico)",
  "esu": "sentralyupik",
  "et": "estisk",
  "eu": "baskisk",
  "ewo": "ewondo",
  "ext": "ekstremaduransk",
  "fa": "persisk",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fulfulde",
  "fi": "finsk",
  "fil": "filipino",
  "fit": "tornedalsfinsk",
  "fj": "fijiansk",
  "fo": "f\xE6r\xF8ysk",
  "fon": "fon",
  "fr": "fransk",
  "fr-CA": "fransk (Canada)",
  "fr-CH": "fransk (Sveits)",
  "frc": "cajunfransk",
  "frm": "mellomfransk",
  "fro": "gammelfransk",
  "frp": "arpitansk",
  "frr": "nordfrisisk",
  "frs": "\xF8stfrisisk",
  "fur": "friuliansk",
  "fy": "vestfrisisk",
  "ga": "irsk",
  "gaa": "ga",
  "gag": "gagausisk",
  "gan": "gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gbz": "zoroastrisk dari",
  "gd": "skotsk-g\xE6lisk",
  "gez": "geez",
  "gil": "kiribatisk",
  "gl": "galisisk",
  "glk": "gileki",
  "gmh": "mellomh\xF8ytysk",
  "gn": "guarani",
  "goh": "gammelh\xF8ytysk",
  "gom": "goansk konkani",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gotisk",
  "grb": "grebo",
  "grc": "gammelgresk",
  "gsw": "sveitsertysk",
  "gu": "gujarati",
  "guc": "wayuu",
  "gur": "frafra",
  "guz": "gusii",
  "gv": "mansk",
  "gwi": "gwich\u2019in",
  "ha": "hausa",
  "hai": "haida",
  "hak": "hakka",
  "haw": "hawaiisk",
  "he": "hebraisk",
  "hi": "hindi",
  "hif": "fijiansk hindi",
  "hil": "hiligaynon",
  "hit": "hettittisk",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "kroatisk",
  "hsb": "h\xF8ysorbisk",
  "hsn": "xiang",
  "ht": "haitisk",
  "hu": "ungarsk",
  "hup": "hupa",
  "hy": "armensk",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonesisk",
  "ie": "interlingue",
  "ig": "ibo",
  "ii": "sichuan-yi",
  "ik": "inupiak",
  "ilo": "iloko",
  "inh": "ingusjisk",
  "io": "ido",
  "is": "islandsk",
  "it": "italiensk",
  "iu": "inuktitut",
  "izh": "ingrisk",
  "ja": "japansk",
  "jam": "jamaicansk kreolengelsk",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "machame",
  "jpr": "j\xF8depersisk",
  "jrb": "j\xF8dearabisk",
  "jut": "jysk",
  "jv": "javanesisk",
  "ka": "georgisk",
  "kaa": "karakalpakisk",
  "kab": "kabylsk",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardisk",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kappverdisk",
  "ken": "kenyang",
  "kfo": "koro",
  "kg": "kikongo",
  "kgp": "kaingang",
  "kha": "khasi",
  "kho": "khotanesisk",
  "khq": "koyra chiini",
  "khw": "khowar",
  "ki": "kikuyu",
  "kiu": "kirmancki",
  "kj": "kuanyama",
  "kk": "kasakhisk",
  "kkj": "kako",
  "kl": "gr\xF8nlandsk",
  "kln": "kalenjin",
  "km": "khmer",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "koreansk",
  "koi": "komipermjakisk",
  "kok": "konkani",
  "kos": "kosraeansk",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karatsjajbalkarsk",
  "kri": "krio",
  "krj": "kinaray-a",
  "krl": "karelsk",
  "kru": "kurukh",
  "ks": "kasjmiri",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF8lnsk",
  "ku": "kurdisk",
  "kum": "kumykisk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "kornisk",
  "ky": "kirgisisk",
  "la": "latin",
  "lad": "ladinsk",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxemburgsk",
  "lez": "lesgisk",
  "lfn": "lingua franca nova",
  "lg": "ganda",
  "li": "limburgsk",
  "lij": "ligurisk",
  "liv": "livisk",
  "lkt": "lakota",
  "lmo": "lombardisk",
  "ln": "lingala",
  "lo": "laotisk",
  "lol": "mongo",
  "lou": "louisianakreolsk",
  "loz": "lozi",
  "lrc": "nord-luri",
  "lt": "litauisk",
  "ltg": "latgallisk",
  "lu": "luba-katanga",
  "lua": "luba-lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizo",
  "luy": "luhya",
  "lv": "latvisk",
  "lzh": "klassisk kinesisk",
  "lzz": "lazisk",
  "mad": "maduresisk",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandingo",
  "mas": "masai",
  "mde": "maba",
  "mdf": "moksja",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "mauritisk-kreolsk",
  "mg": "gassisk",
  "mga": "mellomirsk",
  "mgh": "makhuwa-meetto",
  "mgo": "meta\u2019",
  "mh": "marshallesisk",
  "mi": "maori",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "makedonsk",
  "ml": "malayalam",
  "mn": "mongolsk",
  "mnc": "mandsju",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marathi",
  "mrj": "vestmarisk",
  "ms": "malayisk",
  "mt": "maltesisk",
  "mua": "mundang",
  "mul": "flere spr\xE5k",
  "mus": "creek",
  "mwl": "mirandesisk",
  "mwr": "marwari",
  "mwv": "mentawai",
  "my": "burmesisk",
  "mye": "myene",
  "myv": "erzia",
  "mzn": "mazandarani",
  "na": "nauru",
  "nan": "minnan",
  "nap": "napolitansk",
  "naq": "nama",
  "nb": "norsk bokm\xE5l",
  "nd": "nord-ndebele",
  "nds": "nedertysk",
  "nds-NL": "nedersaksisk",
  "ne": "nepali",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niueansk",
  "njo": "ao naga",
  "nl": "nederlandsk",
  "nl-BE": "flamsk",
  "nmg": "kwasio",
  "nn": "norsk nynorsk",
  "nnh": "ngiemboon",
  "no": "norsk",
  "nog": "nogaisk",
  "non": "gammelnorsk",
  "nov": "novial",
  "nqo": "n\u02BCko",
  "nr": "s\xF8r-ndebele",
  "nso": "nord-sotho",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "klassisk newari",
  "ny": "nyanja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzima",
  "oc": "oksitansk",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "odia",
  "os": "ossetisk",
  "osa": "osage",
  "ota": "ottomansk tyrkisk",
  "pa": "panjabi",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palauisk",
  "pcd": "pikardisk",
  "pcm": "nigeriansk pidginspr\xE5k",
  "pdc": "pennsylvaniatysk",
  "pdt": "plautdietsch",
  "peo": "gammelpersisk",
  "pfl": "palatintysk",
  "phn": "f\xF8nikisk",
  "pi": "pali",
  "pl": "polsk",
  "pms": "piemontesisk",
  "pnt": "pontisk",
  "pon": "ponapisk",
  "prg": "pr\xF8yssisk",
  "pro": "gammelproven\xE7alsk",
  "ps": "pashto",
  "pt": "portugisisk",
  "pt-BR": "portugisisk (Brasil)",
  "pt-PT": "portugisisk (Portugal)",
  "qu": "quechua",
  "quc": "k\u2019iche\u2019",
  "qug": "kichwa (Chimborazo-h\xF8ylandet)",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotongansk",
  "rgn": "romagnolsk",
  "rhg": "rohingya",
  "rif": "riff",
  "rm": "retoromansk",
  "rn": "rundi",
  "ro": "rumensk",
  "ro-MD": "moldovsk",
  "rof": "rombo",
  "rom": "romani",
  "rtm": "rotumansk",
  "ru": "russisk",
  "rue": "rusinsk",
  "rug": "roviana",
  "rup": "aromansk",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "sanskrit",
  "sad": "sandawe",
  "sah": "sakha",
  "sam": "samaritansk arameisk",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "saz": "saurashtra",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardisk",
  "scn": "siciliansk",
  "sco": "skotsk",
  "sd": "sindhi",
  "sdc": "sassaresisk sardisk",
  "sdh": "s\xF8rkurdisk",
  "se": "nordsamisk",
  "see": "seneca",
  "seh": "sena",
  "sei": "seri",
  "sel": "selkupisk",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "gammelirsk",
  "sgs": "samogitisk",
  "sh": "serbokroatisk",
  "shi": "tachelhit",
  "shn": "shan",
  "shu": "tsjadisk arabisk",
  "si": "singalesisk",
  "sid": "sidamo",
  "sk": "slovakisk",
  "sl": "slovensk",
  "sli": "lavschlesisk",
  "sly": "selayar",
  "sm": "samoansk",
  "sma": "s\xF8rsamisk",
  "smj": "lulesamisk",
  "smn": "enaresamisk",
  "sms": "skoltesamisk",
  "sn": "shona",
  "snk": "soninke",
  "so": "somali",
  "sog": "sogdisk",
  "sq": "albansk",
  "sr": "serbisk",
  "srn": "sranan",
  "srr": "serer",
  "ss": "swati",
  "ssy": "saho",
  "st": "s\xF8r-sotho",
  "stq": "saterfrisisk",
  "su": "sundanesisk",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumerisk",
  "sv": "svensk",
  "sw": "swahili",
  "sw-CD": "kongolesisk swahili",
  "swb": "komorisk",
  "syc": "klassisk syrisk",
  "syr": "syriakisk",
  "szl": "schlesisk",
  "ta": "tamil",
  "tcy": "tulu",
  "te": "telugu",
  "tem": "temne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tetum",
  "tg": "tadsjikisk",
  "th": "thai",
  "ti": "tigrinja",
  "tig": "tigr\xE9",
  "tiv": "tiv",
  "tk": "turkmensk",
  "tkl": "tokelauisk",
  "tkr": "tsakhursk",
  "tl": "tagalog",
  "tlh": "klingon",
  "tli": "tlingit",
  "tly": "talysj",
  "tmh": "tamasjek",
  "tn": "setswana",
  "to": "tongansk",
  "tog": "nyasa-tongansk",
  "tpi": "tok pisin",
  "tr": "tyrkisk",
  "tru": "turoyo",
  "trv": "taroko",
  "ts": "tsonga",
  "tsd": "tsakonisk",
  "tsi": "tsimshian",
  "tt": "tatarisk",
  "ttt": "muslimsk tat",
  "tum": "tumbuka",
  "tvl": "tuvalsk",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahitisk",
  "tyv": "tuvinsk",
  "tzm": "sentralmarokkansk tamazight",
  "udm": "udmurtisk",
  "ug": "uigurisk",
  "uga": "ugaritisk",
  "uk": "ukrainsk",
  "umb": "umbundu",
  "und": "ukjent spr\xE5k",
  "ur": "urdu",
  "uz": "usbekisk",
  "vai": "vai",
  "ve": "venda",
  "vec": "venetiansk",
  "vep": "vepsisk",
  "vi": "vietnamesisk",
  "vls": "vestflamsk",
  "vmf": "Main-frankisk",
  "vo": "volapyk",
  "vot": "votisk",
  "vro": "s\xF8restisk",
  "vun": "vunjo",
  "wa": "vallonsk",
  "wae": "walsertysk",
  "wal": "wolaytta",
  "war": "waray-waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof",
  "wuu": "wu",
  "xal": "kalmukkisk",
  "xh": "xhosa",
  "xmf": "mingrelsk",
  "xog": "soga",
  "yao": "yao",
  "yap": "yapesisk",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "jiddisk",
  "yo": "joruba",
  "yrl": "nheengatu",
  "yue": "kantonesisk",
  "za": "zhuang",
  "zap": "zapotekisk",
  "zbl": "blissymboler",
  "zea": "zeeuws",
  "zen": "zenaga",
  "zgh": "standard marrokansk tamazight",
  "zh": "kinesisk",
  "zh-Hans": "forenklet kinesisk",
  "zh-Hant": "tradisjonell kinesisk",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "uten spr\xE5klig innhold",
  "zza": "zazaisk"
};

// src/l10n/locale/pl.ts
var pl_default = {
  "aa": "afar",
  "ab": "abchaski",
  "ace": "aceh",
  "ach": "aczoli",
  "ada": "adangme",
  "ady": "adygejski",
  "ae": "awestyjski",
  "aeb": "tunezyjski arabski",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ajnu",
  "ak": "akan",
  "akk": "akadyjski",
  "akz": "alabama",
  "ale": "aleucki",
  "aln": "alba\u0144ski gegijski",
  "alt": "po\u0142udniowoa\u0142tajski",
  "am": "amharski",
  "an": "arago\u0144ski",
  "ang": "staroangielski",
  "anp": "angika",
  "ar": "arabski",
  "ar-001": "wsp\xF3\u0142czesny arabski",
  "arc": "aramejski",
  "arn": "mapudungun",
  "aro": "araona",
  "arp": "arapaho",
  "arq": "algierski arabski",
  "ars": "arabski nad\u017Cdyjski",
  "arw": "arawak",
  "ary": "maroka\u0144ski arabski",
  "arz": "egipski arabski",
  "as": "asamski",
  "asa": "asu",
  "ase": "ameryka\u0144ski j\u0119zyk migowy",
  "ast": "asturyjski",
  "av": "awarski",
  "avk": "kotava",
  "awa": "awadhi",
  "ay": "ajmara",
  "az": "azerbejd\u017Ca\u0144ski",
  "ba": "baszkirski",
  "bal": "belud\u017Ci",
  "ban": "balijski",
  "bar": "bawarski",
  "bas": "basaa",
  "bax": "bamum",
  "bbc": "batak toba",
  "bbj": "ghomala",
  "be": "bia\u0142oruski",
  "bej": "bed\u017Ca",
  "bem": "bemba",
  "bew": "betawi",
  "bez": "bena",
  "bfd": "bafut",
  "bfq": "badaga",
  "bg": "bu\u0142garski",
  "bgn": "belud\u017Ci p\xF3\u0142nocny",
  "bho": "bhod\u017Cpuri",
  "bi": "bislama",
  "bik": "bikol",
  "bin": "bini",
  "bjn": "banjar",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengalski",
  "bo": "tybeta\u0144ski",
  "bpy": "bisznuprija-manipuri",
  "bqi": "bachtiarski",
  "br": "breto\u0144ski",
  "bra": "brad\u017A",
  "brh": "brahui",
  "brx": "bodo",
  "bs": "bo\u015Bniacki",
  "bss": "akoose",
  "bua": "buriacki",
  "bug": "bugijski",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "katalo\u0144ski",
  "cad": "kaddo",
  "car": "karaibski",
  "cay": "kajuga",
  "cch": "atsam",
  "ccp": "czakma",
  "ce": "czecze\u0144ski",
  "ceb": "cebua\u0144ski",
  "cgg": "chiga",
  "ch": "czamorro",
  "chb": "czibcza",
  "chg": "czagatajski",
  "chk": "chuuk",
  "chm": "maryjski",
  "chn": "\u017Cargon czinucki",
  "cho": "czoktawski",
  "chp": "czipewia\u0144ski",
  "chr": "czirokeski",
  "chy": "czeje\u0144ski",
  "ckb": "sorani",
  "co": "korsyka\u0144ski",
  "cop": "koptyjski",
  "cps": "capiznon",
  "cr": "kri",
  "crh": "krymskotatarski",
  "crs": "kreolski seszelski",
  "cs": "czeski",
  "csb": "kaszubski",
  "cu": "cerkiewnos\u0142owia\u0144ski",
  "cv": "czuwaski",
  "cy": "walijski",
  "da": "du\u0144ski",
  "dak": "dakota",
  "dar": "dargwijski",
  "dav": "taita",
  "de": "niemiecki",
  "de-AT": "niemiecki austriacki",
  "de-CH": "wysokoniemiecki szwajcarski",
  "del": "delaware",
  "den": "slave",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "d\u017Cerma",
  "doi": "dogri",
  "dsb": "dolno\u0142u\u017Cycki",
  "dtp": "dusun centralny",
  "dua": "duala",
  "dum": "\u015Bredniowieczny niderlandzki",
  "dv": "malediwski",
  "dyo": "diola",
  "dyu": "diula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe",
  "efi": "efik",
  "egl": "emilijski",
  "egy": "staroegipski",
  "eka": "ekajuk",
  "el": "grecki",
  "elx": "elamicki",
  "en": "angielski",
  "en-AU": "angielski australijski",
  "en-CA": "angielski kanadyjski",
  "en-GB": "angielski brytyjski",
  "en-US": "angielski ameryka\u0144ski",
  "enm": "\u015Brednioangielski",
  "eo": "esperanto",
  "es": "hiszpa\u0144ski",
  "es-419": "ameryka\u0144ski hiszpa\u0144ski",
  "es-ES": "europejski hiszpa\u0144ski",
  "es-MX": "meksyka\u0144ski hiszpa\u0144ski",
  "esu": "yupik \u015Brodkowosyberyjski",
  "et": "esto\u0144ski",
  "eu": "baskijski",
  "ewo": "ewondo",
  "ext": "estremadurski",
  "fa": "perski",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fulani",
  "fi": "fi\u0144ski",
  "fil": "filipi\u0144ski",
  "fit": "me\xE4nkieli",
  "fj": "fid\u017Cijski",
  "fo": "farerski",
  "fon": "fon",
  "fr": "francuski",
  "fr-CA": "francuski kanadyjski",
  "fr-CH": "francuski szwajcarski",
  "frc": "caju\u0144ski",
  "frm": "\u015Bredniofrancuski",
  "fro": "starofrancuski",
  "frp": "franko-prowansalski",
  "frr": "p\xF3\u0142nocnofryzyjski",
  "frs": "wschodniofryzyjski",
  "fur": "friulski",
  "fy": "zachodniofryzyjski",
  "ga": "irlandzki",
  "gaa": "ga",
  "gag": "gagauski",
  "gan": "gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gbz": "zaratusztria\u0144ski dari",
  "gd": "szkocki gaelicki",
  "gez": "gyyz",
  "gil": "gilberta\u0144ski",
  "gl": "galicyjski",
  "glk": "gilia\u0144ski",
  "gmh": "\u015Brednio-wysoko-niemiecki",
  "gn": "guarani",
  "goh": "staro-wysoko-niemiecki",
  "gom": "konkani (Goa)",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gocki",
  "grb": "grebo",
  "grc": "starogrecki",
  "gsw": "szwajcarski niemiecki",
  "gu": "gud\u017Carati",
  "guc": "way\xFAu",
  "gur": "frafra",
  "guz": "gusii",
  "gv": "manx",
  "gwi": "gwich\u02BCin",
  "ha": "hausa",
  "hai": "haida",
  "hak": "hakka",
  "haw": "hawajski",
  "he": "hebrajski",
  "hi": "hindi",
  "hif": "hindi fid\u017Cyjskie",
  "hil": "hiligaynon",
  "hit": "hetycki",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "chorwacki",
  "hsb": "g\xF3rno\u0142u\u017Cycki",
  "hsn": "xiang",
  "ht": "kreolski haita\u0144ski",
  "hu": "w\u0119gierski",
  "hup": "hupa",
  "hy": "ormia\u0144ski",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonezyjski",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "syczua\u0144ski",
  "ik": "inupiak",
  "ilo": "ilokano",
  "inh": "inguski",
  "io": "ido",
  "is": "islandzki",
  "it": "w\u0142oski",
  "iu": "inuktitut",
  "izh": "ingryjski",
  "ja": "japo\u0144ski",
  "jam": "jamajski",
  "jbo": "lojban",
  "jgo": "ngombe",
  "jmc": "machame",
  "jpr": "judeo-perski",
  "jrb": "judeoarabski",
  "jut": "jutlandzki",
  "jv": "jawajski",
  "ka": "gruzi\u0144ski",
  "kaa": "karaka\u0142packi",
  "kab": "kabylski",
  "kac": "kaczin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardyjski",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kreolski Wysp Zielonego Przyl\u0105dka",
  "ken": "kenyang",
  "kfo": "koro",
  "kg": "kongo",
  "kgp": "kaingang",
  "kha": "khasi",
  "kho": "chota\u0144ski",
  "khq": "koyra chiini",
  "khw": "khowar",
  "ki": "kikuju",
  "kiu": "kirmand\u017Cki",
  "kj": "kwanyama",
  "kk": "kazachski",
  "kkj": "kako",
  "kl": "grenlandzki",
  "kln": "kalenjin",
  "km": "khmerski",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "korea\u0144ski",
  "koi": "komi-permiacki",
  "kok": "konkani",
  "kos": "kosrae",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karaczajsko-ba\u0142karski",
  "kri": "krio",
  "krj": "kinaraya",
  "krl": "karelski",
  "kru": "kurukh",
  "ks": "kaszmirski",
  "ksb": "sambala",
  "ksf": "bafia",
  "ksh": "gwara kolo\u0144ska",
  "ku": "kurdyjski",
  "kum": "kumycki",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "kornijski",
  "ky": "kirgiski",
  "la": "\u0142aci\u0144ski",
  "lad": "lady\u0144ski",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luksemburski",
  "lez": "lezgijski",
  "lfn": "Lingua Franca Nova",
  "lg": "ganda",
  "li": "limburski",
  "lij": "liguryjski",
  "liv": "liwski",
  "lkt": "lakota",
  "lmo": "lombardzki",
  "ln": "lingala",
  "lo": "laota\u0144ski",
  "lol": "mongo",
  "lou": "kreolski luizja\u0144ski",
  "loz": "lozi",
  "lrc": "luryjski p\xF3\u0142nocny",
  "lt": "litewski",
  "ltg": "\u0142atgalski",
  "lu": "luba-katanga",
  "lua": "luba-lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizo",
  "luy": "luhya",
  "lv": "\u0142otewski",
  "lzh": "chi\u0144ski klasyczny",
  "lzz": "lazyjski",
  "mad": "madurski",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandingo",
  "mas": "masajski",
  "mde": "maba",
  "mdf": "moksza",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "kreolski Mauritiusa",
  "mg": "malgaski",
  "mga": "\u015Brednioirlandzki",
  "mgh": "makua",
  "mgo": "meta",
  "mh": "marszalski",
  "mi": "maoryjski",
  "mic": "mikmak",
  "min": "minangkabu",
  "mk": "macedo\u0144ski",
  "ml": "malajalam",
  "mn": "mongolski",
  "mnc": "manchu",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marathi",
  "mrj": "zachodniomaryjski",
  "ms": "malajski",
  "mt": "malta\u0144ski",
  "mua": "mundang",
  "mul": "wiele j\u0119zyk\xF3w",
  "mus": "krik",
  "mwl": "mirandyjski",
  "mwr": "marwari",
  "mwv": "mentawai",
  "my": "birma\u0144ski",
  "mye": "myene",
  "myv": "erzja",
  "mzn": "mazandera\u0144ski",
  "na": "naurua\u0144ski",
  "nan": "minna\u0144ski",
  "nap": "neapolita\u0144ski",
  "naq": "nama",
  "nb": "norweski (bokm\xE5l)",
  "nd": "ndebele p\xF3\u0142nocny",
  "nds": "dolnoniemiecki",
  "nds-NL": "dolnosakso\u0144ski",
  "ne": "nepalski",
  "new": "newarski",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niue",
  "njo": "ao",
  "nl": "niderlandzki",
  "nl-BE": "flamandzki",
  "nmg": "ngumba",
  "nn": "norweski (nynorsk)",
  "nnh": "ngiemboon",
  "no": "norweski",
  "nog": "nogajski",
  "non": "staronordyjski",
  "nov": "novial",
  "nqo": "n\u2019ko",
  "nr": "ndebele po\u0142udniowy",
  "nso": "sotho p\xF3\u0142nocny",
  "nus": "nuer",
  "nv": "nawaho",
  "nwc": "newarski klasyczny",
  "ny": "njand\u017Ca",
  "nym": "niamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzema",
  "oc": "oksyta\u0144ski",
  "oj": "od\u017Cibwa",
  "om": "oromo",
  "or": "orija",
  "os": "osetyjski",
  "osa": "osage",
  "ota": "osma\u0144sko-turecki",
  "pa": "pend\u017Cabski",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampango",
  "pap": "papiamento",
  "pau": "palau",
  "pcd": "pikardyjski",
  "pcm": "pid\u017Cyn nigeryjski",
  "pdc": "pensylwa\u0144ski",
  "pdt": "plautdietsch",
  "peo": "staroperski",
  "pfl": "palatynacki",
  "phn": "fenicki",
  "pi": "palijski",
  "pl": "polski",
  "pms": "piemoncki",
  "pnt": "pontyjski",
  "pon": "ponpejski",
  "prg": "pruski",
  "pro": "staroprowansalski",
  "ps": "paszto",
  "pt": "portugalski",
  "pt-BR": "brazylijski portugalski",
  "pt-PT": "europejski portugalski",
  "qu": "keczua",
  "quc": "kicze",
  "qug": "keczua g\xF3rski (Chimborazo)",
  "raj": "rad\u017Aasthani",
  "rap": "rapanui",
  "rar": "rarotonga",
  "rgn": "romagnol",
  "rhg": "rohingya",
  "rif": "tarifit",
  "rm": "retoroma\u0144ski",
  "rn": "rundi",
  "ro": "rumu\u0144ski",
  "ro-MD": "mo\u0142dawski",
  "rof": "rombo",
  "rom": "cyga\u0144ski",
  "rtm": "rotuma\u0144ski",
  "ru": "rosyjski",
  "rue": "rusi\u0144ski",
  "rug": "roviana",
  "rup": "arumu\u0144ski",
  "rw": "kinya-ruanda",
  "rwk": "rwa",
  "sa": "sanskryt",
  "sad": "sandawe",
  "sah": "jakucki",
  "sam": "samaryta\u0144ski aramejski",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "saz": "saurasztryjski",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardy\u0144ski",
  "scn": "sycylijski",
  "sco": "scots",
  "sd": "sindhi",
  "sdc": "sassarski",
  "sdh": "po\u0142udniowokurdyjski",
  "se": "p\xF3\u0142nocnolapo\u0144ski",
  "see": "seneka",
  "seh": "sena",
  "sei": "seri",
  "sel": "selkupski",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "staroirlandzki",
  "sgs": "\u017Cmudzki",
  "sh": "serbsko-chorwacki",
  "shi": "tashelhiyt",
  "shn": "szan",
  "shu": "arabski (Czad)",
  "si": "syngaleski",
  "sid": "sidamo",
  "sk": "s\u0142owacki",
  "sl": "s\u0142owe\u0144ski",
  "sli": "dolno\u015Bl\u0105ski",
  "sly": "selayar",
  "sm": "samoa\u0144ski",
  "sma": "po\u0142udniowolapo\u0144ski",
  "smj": "lule",
  "smn": "inari",
  "sms": "skolt",
  "sn": "shona",
  "snk": "soninke",
  "so": "somalijski",
  "sog": "sogdyjski",
  "sq": "alba\u0144ski",
  "sr": "serbski",
  "srn": "sranan tongo",
  "srr": "serer",
  "ss": "suazi",
  "ssy": "saho",
  "st": "sotho po\u0142udniowy",
  "stq": "fryzyjski saterlandzki",
  "su": "sundajski",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumeryjski",
  "sv": "szwedzki",
  "sw": "suahili",
  "sw-CD": "kongijski suahili",
  "swb": "komoryjski",
  "syc": "syriacki",
  "syr": "syryjski",
  "szl": "\u015Bl\u0105ski",
  "ta": "tamilski",
  "tcy": "tulu",
  "te": "telugu",
  "tem": "temne",
  "teo": "ateso",
  "ter": "tereno",
  "tet": "tetum",
  "tg": "tad\u017Cycki",
  "th": "tajski",
  "ti": "tigrinia",
  "tig": "tigre",
  "tiv": "tiw",
  "tk": "turkme\u0144ski",
  "tkl": "tokelau",
  "tkr": "cachurski",
  "tl": "tagalski",
  "tlh": "klingo\u0144ski",
  "tli": "tlingit",
  "tly": "ta\u0142yski",
  "tmh": "tamaszek",
  "tn": "setswana",
  "to": "tonga",
  "tog": "tonga (Niasa)",
  "tpi": "tok pisin",
  "tr": "turecki",
  "tru": "turoyo",
  "trv": "taroko",
  "ts": "tsonga",
  "tsd": "cako\u0144ski",
  "tsi": "tsimshian",
  "tt": "tatarski",
  "ttt": "tacki",
  "tum": "tumbuka",
  "tvl": "tuvalu",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahita\u0144ski",
  "tyv": "tuwi\u0144ski",
  "tzm": "tamazight (Atlas \u015Arodkowy)",
  "udm": "udmurcki",
  "ug": "ujgurski",
  "uga": "ugarycki",
  "uk": "ukrai\u0144ski",
  "umb": "umbundu",
  "und": "nieznany j\u0119zyk",
  "ur": "urdu",
  "uz": "uzbecki",
  "vai": "wai",
  "ve": "venda",
  "vec": "wenecki",
  "vep": "wepski",
  "vi": "wietnamski",
  "vls": "zachodnioflamandzki",
  "vmf": "me\u0144ski franko\u0144ski",
  "vo": "wolapik",
  "vot": "wotiacki",
  "vro": "v\xF5ro",
  "vun": "vunjo",
  "wa": "walo\u0144ski",
  "wae": "walser",
  "wal": "wolayta",
  "war": "waraj",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof",
  "wuu": "wu",
  "xal": "ka\u0142mucki",
  "xh": "khosa",
  "xmf": "megrelski",
  "xog": "soga",
  "yao": "yao",
  "yap": "japski",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "jidysz",
  "yo": "joruba",
  "yrl": "nheengatu",
  "yue": "kanto\u0144ski",
  "za": "czuang",
  "zap": "zapotecki",
  "zbl": "bliss",
  "zea": "zelandzki",
  "zen": "zenaga",
  "zgh": "standardowy maroka\u0144ski tamazight",
  "zh": "chi\u0144ski",
  "zh-Hans": "chi\u0144ski uproszczony",
  "zh-Hant": "chi\u0144ski tradycyjny",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "brak tre\u015Bci o charakterze j\u0119zykowym",
  "zza": "zazaki"
};

// src/l10n/locale/pt.ts
var pt_default = {
  "aa": "afar",
  "ab": "abc\xE1zio",
  "ace": "ach\xE9m",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adigue",
  "ae": "av\xE9stico",
  "af": "afric\xE2ner",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "acadiano",
  "ale": "ale\xFAte",
  "alt": "altai meridional",
  "am": "am\xE1rico",
  "an": "aragon\xEAs",
  "ang": "ingl\xEAs arcaico",
  "anp": "angika",
  "ar": "\xE1rabe",
  "ar-001": "\xE1rabe moderno",
  "arc": "aramaico",
  "arn": "mapudungun",
  "arp": "arapaho",
  "ars": "\xE1rabe n\xE9gede",
  "arw": "arauaqui",
  "as": "assam\xEAs",
  "asa": "asu",
  "ast": "asturiano",
  "av": "av\xE1rico",
  "awa": "awadhi",
  "ay": "aimar\xE1",
  "az": "azerbaijano",
  "az-Arab": "azeri sul",
  "ba": "bashkir",
  "bal": "bal\xFAchi",
  "ban": "balin\xEAs",
  "bas": "basa",
  "bax": "bamum",
  "bbj": "ghomala\u2019",
  "be": "bielorrusso",
  "bej": "beja",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bg": "b\xFAlgaro",
  "bgn": "bal\xFAchi ocidental",
  "bho": "bhojpuri",
  "bi": "bislam\xE1",
  "bik": "bikol",
  "bin": "bini",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengali",
  "bo": "tibetano",
  "br": "bret\xE3o",
  "bra": "braj",
  "brx": "bodo",
  "bs": "b\xF3snio",
  "bss": "akoose",
  "bua": "buriato",
  "bug": "bugin\xEAs",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "catal\xE3o",
  "cad": "caddo",
  "car": "caribe",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "checheno",
  "ceb": "cebuano",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "chagatai",
  "chk": "chuukese",
  "chm": "mari",
  "chn": "jarg\xE3o Chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cheroqui",
  "chy": "cheiene",
  "ckb": "curdo central",
  "co": "corso",
  "cop": "copta",
  "cr": "cree",
  "crh": "turco da Crimeia",
  "crs": "crioulo franc\xEAs seichelense",
  "cs": "tcheco",
  "csb": "kashubian",
  "cu": "eslavo eclesi\xE1stico",
  "cv": "tchuvache",
  "cy": "gal\xEAs",
  "da": "dinamarqu\xEAs",
  "dak": "dacota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "alem\xE3o",
  "de-AT": "alem\xE3o (\xC1ustria)",
  "de-CH": "alto alem\xE3o (Su\xED\xE7a)",
  "del": "delaware",
  "den": "slave",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "baixo sor\xE1bio",
  "dua": "duala",
  "dum": "holand\xEAs m\xE9dio",
  "dv": "divehi",
  "dyo": "jola-fonyi",
  "dyu": "di\xFAla",
  "dz": "dzonga",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe",
  "efi": "efique",
  "egy": "eg\xEDpcio arcaico",
  "eka": "ekajuk",
  "el": "grego",
  "elx": "elamite",
  "en": "ingl\xEAs",
  "en-AU": "ingl\xEAs (Austr\xE1lia)",
  "en-CA": "ingl\xEAs (Canad\xE1)",
  "en-GB": "ingl\xEAs (Reino Unido)",
  "en-US": "ingl\xEAs (Estados Unidos)",
  "enm": "ingl\xEAs m\xE9dio",
  "eo": "esperanto",
  "es": "espanhol",
  "es-419": "espanhol (Am\xE9rica Latina)",
  "es-ES": "espanhol (Espanha)",
  "es-MX": "espanhol (M\xE9xico)",
  "et": "estoniano",
  "eu": "basco",
  "ewo": "ewondo",
  "fa": "persa",
  "fa-AF": "dari",
  "fan": "fangue",
  "fat": "fanti",
  "ff": "fula",
  "fi": "finland\xEAs",
  "fil": "filipino",
  "fj": "fijiano",
  "fo": "fero\xEAs",
  "fon": "fom",
  "fr": "franc\xEAs",
  "fr-CA": "franc\xEAs (Canad\xE1)",
  "fr-CH": "franc\xEAs (Su\xED\xE7a)",
  "frc": "franc\xEAs cajun",
  "frm": "franc\xEAs m\xE9dio",
  "fro": "franc\xEAs arcaico",
  "frr": "fr\xEDsio setentrional",
  "frs": "fris\xE3o oriental",
  "fur": "friulano",
  "fy": "fr\xEDsio ocidental",
  "ga": "irland\xEAs",
  "gaa": "ga",
  "gag": "gagauz",
  "gan": "gan",
  "gay": "gayo",
  "gba": "gbaia",
  "gd": "ga\xE9lico escoc\xEAs",
  "gez": "geez",
  "gil": "gilbert\xEAs",
  "gl": "galego",
  "gmh": "alto alem\xE3o m\xE9dio",
  "gn": "guarani",
  "goh": "alem\xE3o arcaico alto",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "g\xF3tico",
  "grb": "grebo",
  "grc": "grego arcaico",
  "gsw": "alem\xE3o (Su\xED\xE7a)",
  "gu": "guzerate",
  "guz": "gusii",
  "gv": "manx",
  "gwi": "gwich\u02BCin",
  "ha": "hau\xE7\xE1",
  "hai": "haida",
  "hak": "hac\xE1",
  "haw": "havaiano",
  "he": "hebraico",
  "hi": "h\xEDndi",
  "hil": "hiligaynon",
  "hit": "hitita",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croata",
  "hsb": "alto sor\xE1bio",
  "hsn": "xiang",
  "ht": "haitiano",
  "hu": "h\xFAngaro",
  "hup": "hupa",
  "hy": "arm\xEAnio",
  "hz": "herero",
  "ia": "interl\xEDngua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indon\xE9sio",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "sichuan yi",
  "ik": "inupiaque",
  "ilo": "ilocano",
  "inh": "inguche",
  "io": "ido",
  "is": "island\xEAs",
  "it": "italiano",
  "iu": "inuktitut",
  "ja": "japon\xEAs",
  "jbo": "lojban",
  "jgo": "nguemba",
  "jmc": "machame",
  "jpr": "judaico-persa",
  "jrb": "judaico-ar\xE1bico",
  "jv": "javan\xEAs",
  "ka": "georgiano",
  "kaa": "kara-kalpak",
  "kab": "kabyle",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardiano",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "maconde",
  "kea": "crioulo cabo-verdiano",
  "kfo": "koro",
  "kg": "congol\xEAs",
  "kgp": "kgp",
  "kha": "khasi",
  "kho": "khotan\xEAs",
  "khq": "koyra chiini",
  "ki": "quicuio",
  "kj": "cuanhama",
  "kk": "cazaque",
  "kkj": "kako",
  "kl": "groenland\xEAs",
  "kln": "kalenjin",
  "km": "khmer",
  "kmb": "quimbundo",
  "kn": "canarim",
  "ko": "coreano",
  "koi": "komi-permyak",
  "kok": "concani",
  "kos": "kosraean",
  "kpe": "kpelle",
  "kr": "can\xFAri",
  "krc": "karachay-balkar",
  "krl": "car\xE9lio",
  "kru": "kurukh",
  "ks": "caxemira",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "curdo",
  "kum": "kumyk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "c\xF3rnico",
  "ky": "quirguiz",
  "la": "latim",
  "lad": "ladino",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxemburgu\xEAs",
  "lez": "lezgui",
  "lg": "luganda",
  "li": "limburgu\xEAs",
  "lij": "lij",
  "lkt": "lacota",
  "ln": "lingala",
  "lo": "laosiano",
  "lol": "mongo",
  "lou": "crioulo da Louisiana",
  "loz": "lozi",
  "lrc": "luri setentrional",
  "lt": "lituano",
  "lu": "luba-catanga",
  "lua": "luba-lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "lushai",
  "luy": "luyia",
  "lv": "let\xE3o",
  "mad": "madur\xEAs",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandinga",
  "mas": "massai",
  "mde": "maba",
  "mdf": "mocsa",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "morisyen",
  "mg": "malgaxe",
  "mga": "irland\xEAs m\xE9dio",
  "mgh": "macua",
  "mgo": "meta\u2019",
  "mh": "marshal\xEAs",
  "mi": "maori",
  "mic": "miquemaque",
  "min": "minangkabau",
  "mk": "maced\xF4nio",
  "ml": "malaiala",
  "mn": "mongol",
  "mnc": "manchu",
  "mni": "manipuri",
  "moh": "moicano",
  "mos": "mossi",
  "mr": "marati",
  "ms": "malaio",
  "mt": "malt\xEAs",
  "mua": "mundang",
  "mul": "m\xFAltiplos idiomas",
  "mus": "creek",
  "mwl": "mirand\xEAs",
  "mwr": "marwari",
  "my": "birman\xEAs",
  "mye": "myene",
  "myv": "erzya",
  "mzn": "mazandarani",
  "na": "nauruano",
  "nan": "min nan",
  "nap": "napolitano",
  "naq": "nama",
  "nb": "bokm\xE5l noruegu\xEAs",
  "nd": "ndebele do norte",
  "nds": "baixo alem\xE3o",
  "nds-NL": "baixo sax\xE3o",
  "ne": "nepal\xEAs",
  "new": "newari",
  "ng": "dongo",
  "nia": "nias",
  "niu": "niueano",
  "nl": "holand\xEAs",
  "nl-BE": "flamengo",
  "nmg": "kwasio",
  "nn": "nynorsk noruegu\xEAs",
  "nnh": "ngiemboon",
  "no": "noruegu\xEAs",
  "nog": "nogai",
  "non": "n\xF3rdico arcaico",
  "nqo": "n\u2019ko",
  "nr": "ndebele do sul",
  "nso": "soto setentrional",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "newari cl\xE1ssico",
  "ny": "nianja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzima",
  "oc": "occit\xE2nico",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "ori\xE1",
  "os": "osseto",
  "osa": "osage",
  "ota": "turco otomano",
  "pa": "panjabi",
  "pag": "pangasin\xE3",
  "pal": "p\xE1lavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palauano",
  "pcm": "pidgin nigeriano",
  "peo": "persa arcaico",
  "phn": "fen\xEDcio",
  "pi": "p\xE1li",
  "pl": "polon\xEAs",
  "pon": "pohnpeiano",
  "prg": "prussiano",
  "pro": "proven\xE7al arcaico",
  "ps": "pashto",
  "pt": "portugu\xEAs",
  "pt-BR": "portugu\xEAs (Brasil)",
  "pt-PT": "portugu\xEAs (Portugal)",
  "qu": "qu\xEDchua",
  "quc": "quich\xE9",
  "raj": "rajastani",
  "rap": "rapanui",
  "rar": "rarotongano",
  "rhg": "ruainga",
  "rm": "romanche",
  "rn": "rundi",
  "ro": "romeno",
  "ro-MD": "mold\xE1vio",
  "rof": "rombo",
  "rom": "romani",
  "ru": "russo",
  "rup": "aromeno",
  "rw": "quiniaruanda",
  "rwk": "rwa",
  "sa": "s\xE2nscrito",
  "sad": "sandawe",
  "sah": "sakha",
  "sam": "aramaico samaritano",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardo",
  "scn": "siciliano",
  "sco": "scots",
  "sd": "sindi",
  "sdh": "curdo meridional",
  "se": "sami setentrional",
  "see": "seneca",
  "seh": "sena",
  "sel": "selkup",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "irland\xEAs arcaico",
  "sh": "servo-croata",
  "shi": "tachelhit",
  "shn": "shan",
  "shu": "\xE1rabe chadiano",
  "si": "cingal\xEAs",
  "sid": "sidamo",
  "sk": "eslovaco",
  "sl": "esloveno",
  "sm": "samoano",
  "sma": "sami meridional",
  "smj": "sami de Lule",
  "smn": "lap\xE3o de Inari",
  "sms": "sami de Skolt",
  "sn": "xona",
  "snk": "soninqu\xEA",
  "so": "somali",
  "sog": "sogdiano",
  "sq": "alban\xEAs",
  "sr": "s\xE9rvio",
  "srn": "surinam\xEAs",
  "srr": "serere",
  "ss": "su\xE1zi",
  "ssy": "saho",
  "st": "soto do sul",
  "su": "sundan\xEAs",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sum\xE9rio",
  "sv": "sueco",
  "sw": "sua\xEDli",
  "sw-CD": "sua\xEDli do Congo",
  "swb": "comoriano",
  "syc": "sir\xEDaco cl\xE1ssico",
  "syr": "sir\xEDaco",
  "ta": "t\xE2mil",
  "te": "t\xE9lugo",
  "tem": "timne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "t\xE9tum",
  "tg": "tadjique",
  "th": "tailand\xEAs",
  "ti": "tigr\xEDnia",
  "tig": "tigr\xE9",
  "tiv": "tiv",
  "tk": "turcomeno",
  "tkl": "toquelauano",
  "tl": "tagalo",
  "tlh": "klingon",
  "tli": "tlinguite",
  "tmh": "tamaxeque",
  "tn": "tswana",
  "to": "tongan\xEAs",
  "tog": "tongan\xEAs de Nyasa",
  "tpi": "tok pisin",
  "tr": "turco",
  "trv": "taroko",
  "ts": "tsonga",
  "tsi": "tsimshiano",
  "tt": "t\xE1rtaro",
  "tum": "tumbuka",
  "tvl": "tuvaluano",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "taitiano",
  "tyv": "tuviniano",
  "tzm": "tamazight do Atlas Central",
  "udm": "udmurte",
  "ug": "uigur",
  "uga": "ugar\xEDtico",
  "uk": "ucraniano",
  "umb": "umbundu",
  "und": "idioma desconhecido",
  "ur": "urdu",
  "uz": "uzbeque",
  "vai": "vai",
  "ve": "venda",
  "vi": "vietnamita",
  "vo": "volapuque",
  "vot": "v\xF3tico",
  "vun": "vunjo",
  "wa": "val\xE3o",
  "wae": "walser",
  "wal": "wolaytta",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "uolofe",
  "wuu": "wu",
  "xal": "kalmyk",
  "xh": "xhosa",
  "xog": "lusoga",
  "yao": "yao",
  "yap": "yapese",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "i\xEDdiche",
  "yo": "iorub\xE1",
  "yrl": "yrl",
  "yue": "canton\xEAs",
  "za": "zhuang",
  "zap": "zapoteco",
  "zbl": "s\xEDmbolos blis",
  "zen": "zenaga",
  "zgh": "tamazirte marroqino padr\xE3o",
  "zh": "chin\xEAs",
  "zh-Hans": "chin\xEAs simplificado",
  "zh-Hant": "chin\xEAs tradicional",
  "zu": "zulu",
  "zun": "zunhi",
  "zxx": "sem conte\xFAdo lingu\xEDstico",
  "zza": "zazaki"
};

// src/l10n/locale/pt-br.ts
var pt_br_default = {};

// src/l10n/locale/ro.ts
var ro_default = {
  "aa": "afar",
  "ab": "abhaz\u0103",
  "ace": "aceh",
  "ach": "acoli",
  "ada": "adangme",
  "ady": "adyghe",
  "ae": "avestan\u0103",
  "af": "afrikaans",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ainu",
  "ak": "akan",
  "akk": "akkadian\u0103",
  "ale": "aleut\u0103",
  "alt": "altaic\u0103 meridional\u0103",
  "am": "amharic\u0103",
  "an": "aragonez\u0103",
  "ang": "englez\u0103 veche",
  "anp": "angika",
  "ar": "arab\u0103",
  "ar-001": "arab\u0103 standard modern\u0103",
  "arc": "aramaic\u0103",
  "arn": "mapuche",
  "arp": "arapaho",
  "ars": "arab\u0103 najdi",
  "arw": "arawak",
  "as": "asamez\u0103",
  "asa": "asu",
  "ast": "asturian\u0103",
  "av": "avar\u0103",
  "awa": "awadhi",
  "ay": "aymara",
  "az": "azer\u0103",
  "ba": "ba\u0219kir\u0103",
  "bal": "baluchi",
  "ban": "balinez\u0103",
  "bas": "basaa",
  "bax": "bamun",
  "bbj": "ghomala",
  "be": "belarus\u0103",
  "bej": "beja",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bg": "bulgar\u0103",
  "bgn": "baluchi occidental\u0103",
  "bho": "bhojpuri",
  "bi": "bislama",
  "bik": "bikol",
  "bin": "bini",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambara",
  "bn": "bengalez\u0103",
  "bo": "tibetan\u0103",
  "br": "breton\u0103",
  "bra": "braj",
  "brx": "bodo",
  "bs": "bosniac\u0103",
  "bss": "akoose",
  "bua": "buriat",
  "bug": "buginez\u0103",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "catalan\u0103",
  "cad": "caddo",
  "car": "carib",
  "cay": "cayuga",
  "cch": "atsam",
  "ccp": "chakma",
  "ce": "cecen\u0103",
  "ceb": "cebuan\u0103",
  "cgg": "chiga",
  "ch": "chamorro",
  "chb": "chibcha",
  "chg": "chagatai",
  "chk": "chuukese",
  "chm": "mari",
  "chn": "jargon chinook",
  "cho": "choctaw",
  "chp": "chipewyan",
  "chr": "cherokee",
  "chy": "cheyenne",
  "ckb": "kurd\u0103 central\u0103",
  "co": "corsican\u0103",
  "cop": "copt\u0103",
  "cr": "cree",
  "crh": "turc\u0103 crimeean\u0103",
  "crs": "creol\u0103 francez\u0103 seselwa",
  "cs": "ceh\u0103",
  "csb": "ca\u0219ubian\u0103",
  "cu": "slavon\u0103",
  "cv": "ciuva\u0219\u0103",
  "cy": "galez\u0103",
  "da": "danez\u0103",
  "dak": "dakota",
  "dar": "dargwa",
  "dav": "taita",
  "de": "german\u0103",
  "de-AT": "german\u0103 (Austria)",
  "de-CH": "german\u0103 standard (Elve\u021Bia)",
  "del": "delaware",
  "den": "slave",
  "dgr": "dogrib",
  "din": "dinka",
  "dje": "zarma",
  "doi": "dogri",
  "dsb": "sorab\u0103 de jos",
  "dua": "duala",
  "dum": "neerlandez\u0103 medie",
  "dv": "divehi",
  "dyo": "jola-fonyi",
  "dyu": "dyula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe",
  "efi": "efik",
  "egy": "egiptean\u0103 veche",
  "eka": "ekajuk",
  "el": "greac\u0103",
  "elx": "elamit\u0103",
  "en": "englez\u0103",
  "en-AU": "englez\u0103 (Australia)",
  "en-CA": "englez\u0103 (Canada)",
  "en-GB": "englez\u0103 (Regatul Unit)",
  "en-US": "englez\u0103 (Statele Unite ale Americii)",
  "enm": "englez\u0103 medie",
  "eo": "esperanto",
  "es": "spaniol\u0103",
  "es-419": "spaniol\u0103 (America Latin\u0103)",
  "es-ES": "spaniol\u0103 (Europa)",
  "es-MX": "spaniol\u0103 (Mexic)",
  "et": "eston\u0103",
  "eu": "basc\u0103",
  "ewo": "ewondo",
  "fa": "persan\u0103",
  "fa-AF": "dari",
  "fan": "fang",
  "fat": "fanti",
  "ff": "fulah",
  "fi": "finlandez\u0103",
  "fil": "filipinez\u0103",
  "fj": "fijian\u0103",
  "fo": "feroez\u0103",
  "fon": "fon",
  "fr": "francez\u0103",
  "fr-CA": "francez\u0103 (Canada)",
  "fr-CH": "francez\u0103 (Elve\u021Bia)",
  "frc": "francez\u0103 cajun",
  "frm": "francez\u0103 medie",
  "fro": "francez\u0103 veche",
  "frr": "frizon\u0103 nordic\u0103",
  "frs": "frizon\u0103 oriental\u0103",
  "fur": "friulan\u0103",
  "fy": "frizon\u0103 occidental\u0103",
  "ga": "irlandez\u0103",
  "gaa": "ga",
  "gag": "g\u0103g\u0103uz\u0103",
  "gan": "chinez\u0103 gan",
  "gay": "gayo",
  "gba": "gbaya",
  "gd": "gaelic\u0103 sco\u021Bian\u0103",
  "gez": "geez",
  "gil": "gilbertin\u0103",
  "gl": "galician\u0103",
  "gmh": "german\u0103 \xEEnalt\u0103 medie",
  "gn": "guarani",
  "goh": "german\u0103 \xEEnalt\u0103 veche",
  "gon": "gondi",
  "gor": "gorontalo",
  "got": "gotic\u0103",
  "grb": "grebo",
  "grc": "greac\u0103 veche",
  "gsw": "german\u0103 (Elve\u021Bia)",
  "gu": "gujarati",
  "guz": "gusii",
  "gv": "manx",
  "gwi": "gwich\u02BCin",
  "ha": "hausa",
  "hai": "haida",
  "hak": "chinez\u0103 hakka",
  "haw": "hawaiian\u0103",
  "he": "ebraic\u0103",
  "hi": "hindi",
  "hil": "hiligaynon",
  "hit": "hitit\u0103",
  "hmn": "hmong",
  "ho": "hiri motu",
  "hr": "croat\u0103",
  "hsb": "sorab\u0103 de sus",
  "hsn": "chinez\u0103 xiang",
  "ht": "haitian\u0103",
  "hu": "maghiar\u0103",
  "hup": "hupa",
  "hy": "armean\u0103",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban",
  "ibb": "ibibio",
  "id": "indonezian\u0103",
  "ie": "interlingue",
  "ig": "igbo",
  "ii": "yi din Sichuan",
  "ik": "inupiak",
  "ilo": "iloko",
  "inh": "ingu\u0219\u0103",
  "io": "ido",
  "is": "islandez\u0103",
  "it": "italian\u0103",
  "iu": "inuktitut",
  "ja": "japonez\u0103",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "machame",
  "jpr": "iudeo-persan\u0103",
  "jrb": "iudeo-arab\u0103",
  "jv": "javanez\u0103",
  "ka": "georgian\u0103",
  "kaa": "karakalpak",
  "kab": "kabyle",
  "kac": "kachin",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabardian",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kabuverdianu",
  "kfo": "koro",
  "kg": "congolez\u0103",
  "kgp": "kaingang",
  "kha": "khasi",
  "kho": "khotanez\u0103",
  "khq": "koyra chiini",
  "ki": "kikuyu",
  "kj": "kuanyama",
  "kk": "kazah\u0103",
  "kkj": "kako",
  "kl": "kalaallisut",
  "kln": "kalenjin",
  "km": "khmer\u0103",
  "kmb": "kimbundu",
  "kn": "kannada",
  "ko": "coreean\u0103",
  "koi": "komi-permiak",
  "kok": "konkani",
  "kos": "kosrae",
  "kpe": "kpelle",
  "kr": "kanuri",
  "krc": "karaceai-balkar",
  "krl": "karelian\u0103",
  "kru": "kurukh",
  "ks": "ca\u0219mir\u0103",
  "ksb": "shambala",
  "ksf": "bafia",
  "ksh": "k\xF6lsch",
  "ku": "kurd\u0103",
  "kum": "kumyk",
  "kut": "kutenai",
  "kv": "komi",
  "kw": "cornic\u0103",
  "ky": "k\xE2rg\xE2z\u0103",
  "la": "latin\u0103",
  "lad": "ladino",
  "lag": "langi",
  "lah": "lahnda",
  "lam": "lamba",
  "lb": "luxemburghez\u0103",
  "lez": "lezghian",
  "lg": "ganda",
  "li": "limburghez\u0103",
  "lij": "ligurian\u0103",
  "lkt": "lakota",
  "ln": "lingala",
  "lo": "lao\u021Bian\u0103",
  "lol": "mongo",
  "lou": "creol\u0103 (Louisiana)",
  "loz": "lozi",
  "lrc": "luri de nord",
  "lt": "lituanian\u0103",
  "lu": "luba-katanga",
  "lua": "luba-lulua",
  "lui": "luiseno",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizo",
  "luy": "luyia",
  "lv": "leton\u0103",
  "mad": "madurez\u0103",
  "maf": "mafa",
  "mag": "magahi",
  "mai": "maithili",
  "mak": "makasar",
  "man": "mandingo",
  "mas": "masai",
  "mde": "maba",
  "mdf": "moksha",
  "mdr": "mandar",
  "men": "mende",
  "mer": "meru",
  "mfe": "morisyen",
  "mg": "malga\u0219\u0103",
  "mga": "irlandez\u0103 medie",
  "mgh": "makhuwa-meetto",
  "mgo": "meta\u2019",
  "mh": "marshallez\u0103",
  "mi": "maori",
  "mic": "micmac",
  "min": "minangkabau",
  "mk": "macedonean\u0103",
  "ml": "malayalam",
  "mn": "mongol\u0103",
  "mnc": "manciurian\u0103",
  "mni": "manipuri",
  "moh": "mohawk",
  "mos": "mossi",
  "mr": "marathi",
  "ms": "malaez\u0103",
  "mt": "maltez\u0103",
  "mua": "mundang",
  "mul": "mai multe limbi",
  "mus": "creek",
  "mwl": "mirandez\u0103",
  "mwr": "marwari",
  "my": "birman\u0103",
  "mye": "myene",
  "myv": "erzya",
  "mzn": "mazanderani",
  "na": "nauru",
  "nan": "chinez\u0103 min nan",
  "nap": "napolitan\u0103",
  "naq": "nama",
  "nb": "norvegian\u0103 bokm\xE5l",
  "nd": "ndebele de nord",
  "nds": "germana de jos",
  "nds-NL": "saxona de jos",
  "ne": "nepalez\u0103",
  "new": "newari",
  "ng": "ndonga",
  "nia": "nias",
  "niu": "niuean\u0103",
  "nl": "neerlandez\u0103",
  "nl-BE": "flamand\u0103",
  "nmg": "kwasio",
  "nn": "norvegian\u0103 nynorsk",
  "nnh": "ngiemboon",
  "no": "norvegian\u0103",
  "nog": "nogai",
  "non": "nordic\u0103 veche",
  "nqo": "n\u2019ko",
  "nr": "ndebele de sud",
  "nso": "sotho de nord",
  "nus": "nuer",
  "nv": "navajo",
  "nwc": "newari clasic\u0103",
  "ny": "nyanja",
  "nym": "nyamwezi",
  "nyn": "nyankole",
  "nyo": "nyoro",
  "nzi": "nzima",
  "oc": "occitan\u0103",
  "oj": "ojibwa",
  "om": "oromo",
  "or": "odia",
  "os": "oset\u0103",
  "osa": "osage",
  "ota": "turc\u0103 otoman\u0103",
  "pa": "punjabi",
  "pag": "pangasinan",
  "pal": "pahlavi",
  "pam": "pampanga",
  "pap": "papiamento",
  "pau": "palauan\u0103",
  "pcm": "pidgin nigerian",
  "peo": "persan\u0103 veche",
  "phn": "fenician\u0103",
  "pi": "pali",
  "pl": "polonez\u0103",
  "pon": "pohnpeian\u0103",
  "prg": "prusac\u0103",
  "pro": "provensal\u0103 veche",
  "ps": "pa\u0219tun\u0103",
  "pt": "portughez\u0103",
  "pt-BR": "portughez\u0103 (Brazilia)",
  "pt-PT": "portughez\u0103 (Europa)",
  "qu": "quechua",
  "quc": "quich\xE9",
  "raj": "rajasthani",
  "rap": "rapanui",
  "rar": "rarotongan",
  "rhg": "rohingya",
  "rm": "roman\u0219\u0103",
  "rn": "kirundi",
  "ro": "rom\xE2n\u0103",
  "ro-MD": "rom\xE2n\u0103 (Republica Moldova)",
  "rof": "rombo",
  "rom": "romani",
  "ru": "rus\u0103",
  "rup": "arom\xE2n\u0103",
  "rw": "kinyarwanda",
  "rwk": "rwa",
  "sa": "sanscrit\u0103",
  "sad": "sandawe",
  "sah": "sakha",
  "sam": "aramaic\u0103 samaritean\u0103",
  "saq": "samburu",
  "sas": "sasak",
  "sat": "santali",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sardinian\u0103",
  "scn": "sicilian\u0103",
  "sco": "scots",
  "sd": "sindhi",
  "sdh": "kurd\u0103 de sud",
  "se": "sami de nord",
  "see": "seneca",
  "seh": "sena",
  "sel": "selkup",
  "ses": "koyraboro Senni",
  "sg": "sango",
  "sga": "irlandez\u0103 veche",
  "sh": "s\xE2rbo-croat\u0103",
  "shi": "tachelhit",
  "shn": "shan",
  "shu": "arab\u0103 ciadian\u0103",
  "si": "singhalez\u0103",
  "sid": "sidamo",
  "sk": "slovac\u0103",
  "sl": "sloven\u0103",
  "sm": "samoan\u0103",
  "sma": "sami de sud",
  "smj": "sami lule",
  "smn": "sami inari",
  "sms": "sami skolt",
  "sn": "shona",
  "snk": "soninke",
  "so": "somalez\u0103",
  "sog": "sogdien",
  "sq": "albanez\u0103",
  "sr": "s\xE2rb\u0103",
  "srn": "sranan tongo",
  "srr": "serer",
  "ss": "swati",
  "ssy": "saho",
  "st": "sesotho",
  "su": "sundanez\u0103",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumerian\u0103",
  "sv": "suedez\u0103",
  "sw": "swahili",
  "sw-CD": "swahili (R.D. Congo)",
  "swb": "comorez\u0103",
  "syc": "siriac\u0103 clasic\u0103",
  "syr": "siriac\u0103",
  "ta": "tamil\u0103",
  "te": "telugu",
  "tem": "timne",
  "teo": "teso",
  "ter": "tereno",
  "tet": "tetum",
  "tg": "tadjic\u0103",
  "th": "thailandez\u0103",
  "ti": "tigrin\u0103",
  "tig": "tigre",
  "tiv": "tiv",
  "tk": "turkmen\u0103",
  "tkl": "tokelau",
  "tl": "tagalog",
  "tlh": "klingonian\u0103",
  "tli": "tlingit",
  "tmh": "tamashek",
  "tn": "setswana",
  "to": "tongan\u0103",
  "tog": "nyasa tonga",
  "tpi": "tok pisin",
  "tr": "turc\u0103",
  "trv": "taroko",
  "ts": "tsonga",
  "tsi": "tsimshian",
  "tt": "t\u0103tar\u0103",
  "tum": "tumbuka",
  "tvl": "tuvalu",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahitian\u0103",
  "tyv": "tuvan\u0103",
  "tzm": "tamazight din Atlasul Central",
  "udm": "udmurt",
  "ug": "uigur\u0103",
  "uga": "ugaritic\u0103",
  "uk": "ucrainean\u0103",
  "umb": "umbundu",
  "und": "limb\u0103 necunoscut\u0103",
  "ur": "urdu",
  "uz": "uzbec\u0103",
  "vai": "vai",
  "ve": "venda",
  "vi": "vietnamez\u0103",
  "vo": "volapuk",
  "vot": "votic\u0103",
  "vun": "vunjo",
  "wa": "valon\u0103",
  "wae": "walser",
  "wal": "wolaita",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof",
  "wuu": "chinez\u0103 wu",
  "xal": "calmuc\u0103",
  "xh": "xhosa",
  "xog": "soga",
  "yao": "yao",
  "yap": "yapez\u0103",
  "yav": "yangben",
  "ybb": "yemba",
  "yi": "idi\u0219",
  "yo": "yoruba",
  "yrl": "yrl",
  "yue": "cantonez\u0103",
  "za": "zhuang",
  "zap": "zapotec\u0103",
  "zbl": "simboluri Bilss",
  "zen": "zenaga",
  "zgh": "tamazight standard marocan\u0103",
  "zh": "chinez\u0103",
  "zh-Hans": "chinez\u0103 simplificat\u0103",
  "zh-Hant": "chinez\u0103 tradi\u021Bional\u0103",
  "zu": "zulu",
  "zun": "zuni",
  "zxx": "far\u0103 con\u021Binut lingvistic",
  "zza": "zaza"
};

// src/l10n/locale/ru.ts
var ru_default = {
  "aa": "\u0430\u0444\u0430\u0440\u0441\u043A\u0438\u0439",
  "ab": "\u0430\u0431\u0445\u0430\u0437\u0441\u043A\u0438\u0439",
  "ace": "\u0430\u0447\u0435\u0445\u0441\u043A\u0438\u0439",
  "ach": "\u0430\u0447\u043E\u043B\u0438",
  "ada": "\u0430\u0434\u0430\u043D\u0433\u043C\u0435",
  "ady": "\u0430\u0434\u044B\u0433\u0435\u0439\u0441\u043A\u0438\u0439",
  "ae": "\u0430\u0432\u0435\u0441\u0442\u0438\u0439\u0441\u043A\u0438\u0439",
  "af": "\u0430\u0444\u0440\u0438\u043A\u0430\u0430\u043D\u0441",
  "afh": "\u0430\u0444\u0440\u0438\u0445\u0438\u043B\u0438",
  "agq": "\u0430\u0433\u0435\u043C",
  "ain": "\u0430\u0439\u043D\u0441\u043A\u0438\u0439",
  "ak": "\u0430\u043A\u0430\u043D",
  "akk": "\u0430\u043A\u043A\u0430\u0434\u0441\u043A\u0438\u0439",
  "ale": "\u0430\u043B\u0435\u0443\u0442\u0441\u043A\u0438\u0439",
  "alt": "\u044E\u0436\u043D\u043E\u0430\u043B\u0442\u0430\u0439\u0441\u043A\u0438\u0439",
  "am": "\u0430\u043C\u0445\u0430\u0440\u0441\u043A\u0438\u0439",
  "an": "\u0430\u0440\u0430\u0433\u043E\u043D\u0441\u043A\u0438\u0439",
  "ang": "\u0441\u0442\u0430\u0440\u043E\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "anp": "\u0430\u043D\u0433\u0438\u043A\u0430",
  "ar": "\u0430\u0440\u0430\u0431\u0441\u043A\u0438\u0439",
  "ar-001": "\u0430\u0440\u0430\u0431\u0441\u043A\u0438\u0439 \u043B\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043D\u044B\u0439",
  "arc": "\u0430\u0440\u0430\u043C\u0435\u0439\u0441\u043A\u0438\u0439",
  "arn": "\u043C\u0430\u043F\u0443\u0447\u0435",
  "arp": "\u0430\u0440\u0430\u043F\u0430\u0445\u043E",
  "ars": "\u043D\u0435\u0434\u0436\u0434\u0438\u0439\u0441\u043A\u0438\u0439 \u0430\u0440\u0430\u0431\u0441\u043A\u0438\u0439",
  "arw": "\u0430\u0440\u0430\u0432\u0430\u043A\u0441\u043A\u0438\u0439",
  "as": "\u0430\u0441\u0441\u0430\u043C\u0441\u043A\u0438\u0439",
  "asa": "\u0430\u0441\u0443",
  "ast": "\u0430\u0441\u0442\u0443\u0440\u0438\u0439\u0441\u043A\u0438\u0439",
  "av": "\u0430\u0432\u0430\u0440\u0441\u043A\u0438\u0439",
  "awa": "\u0430\u0432\u0430\u0434\u0445\u0438",
  "ay": "\u0430\u0439\u043C\u0430\u0440\u0430",
  "az": "\u0430\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u043A\u0438\u0439",
  "ba": "\u0431\u0430\u0448\u043A\u0438\u0440\u0441\u043A\u0438\u0439",
  "bal": "\u0431\u0435\u043B\u0443\u0434\u0436\u0441\u043A\u0438\u0439",
  "ban": "\u0431\u0430\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "bas": "\u0431\u0430\u0441\u0430",
  "bax": "\u0431\u0430\u043C\u0443\u043C",
  "bbj": "\u0433\u043E\u043C\u0430\u043B\u0430",
  "be": "\u0431\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u043A\u0438\u0439",
  "bej": "\u0431\u0435\u0434\u0436\u0430",
  "bem": "\u0431\u0435\u043C\u0431\u0430",
  "bez": "\u0431\u0435\u043D\u0430",
  "bfd": "\u0431\u0430\u0444\u0443\u0442",
  "bg": "\u0431\u043E\u043B\u0433\u0430\u0440\u0441\u043A\u0438\u0439",
  "bgn": "\u0437\u0430\u043F\u0430\u0434\u043D\u044B\u0439 \u0431\u0435\u043B\u0443\u0434\u0436\u0441\u043A\u0438\u0439",
  "bho": "\u0431\u0445\u043E\u0434\u0436\u043F\u0443\u0440\u0438",
  "bi": "\u0431\u0438\u0441\u043B\u0430\u043C\u0430",
  "bik": "\u0431\u0438\u043A\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "bin": "\u0431\u0438\u043D\u0438",
  "bkm": "\u043A\u043E\u043C",
  "bla": "\u0441\u0438\u043A\u0441\u0438\u043A\u0430",
  "bm": "\u0431\u0430\u043C\u0431\u0430\u0440\u0430",
  "bn": "\u0431\u0435\u043D\u0433\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "bo": "\u0442\u0438\u0431\u0435\u0442\u0441\u043A\u0438\u0439",
  "br": "\u0431\u0440\u0435\u0442\u043E\u043D\u0441\u043A\u0438\u0439",
  "bra": "\u0431\u0440\u0430\u0443\u0438",
  "brx": "\u0431\u043E\u0434\u043E",
  "bs": "\u0431\u043E\u0441\u043D\u0438\u0439\u0441\u043A\u0438\u0439",
  "bss": "\u0430\u043A\u043E\u043E\u0441\u0435",
  "bua": "\u0431\u0443\u0440\u044F\u0442\u0441\u043A\u0438\u0439",
  "bug": "\u0431\u0443\u0433\u0438\u0439\u0441\u043A\u0438\u0439",
  "bum": "\u0431\u0443\u043B\u0443",
  "byn": "\u0431\u0438\u043B\u0438\u043D",
  "byv": "\u043C\u0435\u0434\u0443\u043C\u0431\u0430",
  "ca": "\u043A\u0430\u0442\u0430\u043B\u0430\u043D\u0441\u043A\u0438\u0439",
  "cad": "\u043A\u0430\u0434\u0434\u043E",
  "car": "\u043A\u0430\u0440\u0438\u0431",
  "cay": "\u043A\u0430\u0439\u044E\u0433\u0430",
  "cch": "\u0430\u0442\u0441\u0430\u043C",
  "ccp": "\u0447\u0430\u043A\u043C\u0430",
  "ce": "\u0447\u0435\u0447\u0435\u043D\u0441\u043A\u0438\u0439",
  "ceb": "\u0441\u0435\u0431\u0443\u0430\u043D\u043E",
  "cgg": "\u043A\u0438\u0433\u0430",
  "ch": "\u0447\u0430\u043C\u043E\u0440\u0440\u043E",
  "chb": "\u0447\u0438\u0431\u0447\u0430",
  "chg": "\u0447\u0430\u0433\u0430\u0442\u0430\u0439\u0441\u043A\u0438\u0439",
  "chk": "\u0447\u0443\u043A\u043E\u0442\u0441\u043A\u0438\u0439",
  "chm": "\u043C\u0430\u0440\u0438\u0439\u0441\u043A\u0438\u0439",
  "chn": "\u0447\u0438\u043D\u0443\u043A \u0436\u0430\u0440\u0433\u043E\u043D",
  "cho": "\u0447\u043E\u043A\u0442\u0430\u0432\u0441\u043A\u0438\u0439",
  "chp": "\u0447\u0438\u043F\u0435\u0432\u044C\u044F\u043D",
  "chr": "\u0447\u0435\u0440\u043E\u043A\u0438",
  "chy": "\u0448\u0430\u0439\u0435\u043D\u0441\u043A\u0438\u0439",
  "ckb": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u043A\u0443\u0440\u0434\u0441\u043A\u0438\u0439",
  "co": "\u043A\u043E\u0440\u0441\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439",
  "cop": "\u043A\u043E\u043F\u0442\u0441\u043A\u0438\u0439",
  "cr": "\u043A\u0440\u0438",
  "crh": "\u043A\u0440\u044B\u043C\u0441\u043A\u043E-\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438\u0439",
  "crs": "\u0441\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "cs": "\u0447\u0435\u0448\u0441\u043A\u0438\u0439",
  "csb": "\u043A\u0430\u0448\u0443\u0431\u0441\u043A\u0438\u0439",
  "cu": "\u0446\u0435\u0440\u043A\u043E\u0432\u043D\u043E\u0441\u043B\u0430\u0432\u044F\u043D\u0441\u043A\u0438\u0439",
  "cv": "\u0447\u0443\u0432\u0430\u0448\u0441\u043A\u0438\u0439",
  "cy": "\u0432\u0430\u043B\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "da": "\u0434\u0430\u0442\u0441\u043A\u0438\u0439",
  "dak": "\u0434\u0430\u043A\u043E\u0442\u0430",
  "dar": "\u0434\u0430\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0439",
  "dav": "\u0442\u0430\u0438\u0442\u0430",
  "de": "\u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "de-AT": "\u0430\u0432\u0441\u0442\u0440\u0438\u0439\u0441\u043A\u0438\u0439 \u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "de-CH": "\u043B\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043D\u044B\u0439 \u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0438\u0439 \u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "del": "\u0434\u0435\u043B\u0430\u0432\u0430\u0440\u0441\u043A\u0438\u0439",
  "den": "\u0441\u043B\u0435\u0439\u0432\u0438",
  "dgr": "\u0434\u043E\u0433\u0440\u0438\u0431",
  "din": "\u0434\u0438\u043D\u043A\u0430",
  "dje": "\u0434\u0436\u0435\u0440\u043C\u0430",
  "doi": "\u0434\u043E\u0433\u0440\u0438",
  "dsb": "\u043D\u0438\u0436\u043D\u0435\u043B\u0443\u0436\u0438\u0446\u043A\u0438\u0439",
  "dua": "\u0434\u0443\u0430\u043B\u0430",
  "dum": "\u0441\u0440\u0435\u0434\u043D\u0435\u043D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "dv": "\u043C\u0430\u043B\u044C\u0434\u0438\u0432\u0441\u043A\u0438\u0439",
  "dyo": "\u0434\u0438\u043E\u043B\u0430-\u0444\u043E\u043D\u044C\u0438",
  "dyu": "\u0434\u0438\u0443\u043B\u0430",
  "dz": "\u0434\u0437\u043E\u043D\u0433-\u043A\u044D",
  "dzg": "\u0434\u0430\u0437\u0430",
  "ebu": "\u044D\u043C\u0431\u0443",
  "ee": "\u044D\u0432\u0435",
  "efi": "\u044D\u0444\u0438\u043A",
  "egy": "\u0434\u0440\u0435\u0432\u043D\u0435\u0435\u0433\u0438\u043F\u0435\u0442\u0441\u043A\u0438\u0439",
  "eka": "\u044D\u043A\u0430\u0434\u0436\u0443\u043A",
  "el": "\u0433\u0440\u0435\u0447\u0435\u0441\u043A\u0438\u0439",
  "elx": "\u044D\u043B\u0430\u043C\u0441\u043A\u0438\u0439",
  "en": "\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "en-AU": "\u0430\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u0439\u0441\u043A\u0438\u0439 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "en-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0438\u0439 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "en-GB": "\u0431\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0439 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "en-US": "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "enm": "\u0441\u0440\u0435\u0434\u043D\u0435\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "eo": "\u044D\u0441\u043F\u0435\u0440\u0430\u043D\u0442\u043E",
  "es": "\u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438\u0439",
  "es-419": "\u043B\u0430\u0442\u0438\u043D\u043E\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438\u0439",
  "es-ES": "\u0435\u0432\u0440\u043E\u043F\u0435\u0439\u0441\u043A\u0438\u0439 \u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438\u0439",
  "es-MX": "\u043C\u0435\u043A\u0441\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0438\u0441\u043F\u0430\u043D\u0441\u043A\u0438\u0439",
  "et": "\u044D\u0441\u0442\u043E\u043D\u0441\u043A\u0438\u0439",
  "eu": "\u0431\u0430\u0441\u043A\u0441\u043A\u0438\u0439",
  "ewo": "\u044D\u0432\u043E\u043D\u0434\u043E",
  "fa": "\u043F\u0435\u0440\u0441\u0438\u0434\u0441\u043A\u0438\u0439",
  "fa-AF": "\u0434\u0430\u0440\u0438",
  "fan": "\u0444\u0430\u043D\u0433",
  "fat": "\u0444\u0430\u043D\u0442\u0438",
  "ff": "\u0444\u0443\u043B\u0430\u0445",
  "fi": "\u0444\u0438\u043D\u0441\u043A\u0438\u0439",
  "fil": "\u0444\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u0441\u043A\u0438\u0439",
  "fj": "\u0444\u0438\u0434\u0436\u0438",
  "fo": "\u0444\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0439",
  "fon": "\u0444\u043E\u043D",
  "fr": "\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "fr-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0438\u0439 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "fr-CH": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0438\u0439 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "frc": "\u043A\u0430\u0434\u0436\u0443\u043D\u0441\u043A\u0438\u0439 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "frm": "\u0441\u0440\u0435\u0434\u043D\u0435\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "fro": "\u0441\u0442\u0430\u0440\u043E\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0439",
  "frr": "\u0441\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u0440\u0438\u0437\u0441\u043A\u0438\u0439",
  "frs": "\u0432\u043E\u0441\u0442\u043E\u0447\u043D\u044B\u0439 \u0444\u0440\u0438\u0437\u0441\u043A\u0438\u0439",
  "fur": "\u0444\u0440\u0438\u0443\u043B\u044C\u0441\u043A\u0438\u0439",
  "fy": "\u0437\u0430\u043F\u0430\u0434\u043D\u043E\u0444\u0440\u0438\u0437\u0441\u043A\u0438\u0439",
  "ga": "\u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "gaa": "\u0433\u0430",
  "gag": "\u0433\u0430\u0433\u0430\u0443\u0437\u0441\u043A\u0438\u0439",
  "gan": "\u0433\u0430\u043D\u044C",
  "gay": "\u0433\u0430\u0439\u043E",
  "gba": "\u0433\u0431\u0430\u044F",
  "gd": "\u0433\u044D\u043B\u044C\u0441\u043A\u0438\u0439",
  "gez": "\u0433\u0435\u044D\u0437",
  "gil": "\u0433\u0438\u043B\u0431\u0435\u0440\u0442\u0441\u043A\u0438\u0439",
  "gl": "\u0433\u0430\u043B\u0438\u0441\u0438\u0439\u0441\u043A\u0438\u0439",
  "gmh": "\u0441\u0440\u0435\u0434\u043D\u0435\u0432\u0435\u0440\u0445\u043D\u0435\u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "gn": "\u0433\u0443\u0430\u0440\u0430\u043D\u0438",
  "goh": "\u0434\u0440\u0435\u0432\u043D\u0435\u0432\u0435\u0440\u0445\u043D\u0435\u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "gon": "\u0433\u043E\u043D\u0434\u0438",
  "gor": "\u0433\u043E\u0440\u043E\u043D\u0442\u0430\u043B\u043E",
  "got": "\u0433\u043E\u0442\u0441\u043A\u0438\u0439",
  "grb": "\u0433\u0440\u0435\u0431\u043E",
  "grc": "\u0434\u0440\u0435\u0432\u043D\u0435\u0433\u0440\u0435\u0447\u0435\u0441\u043A\u0438\u0439",
  "gsw": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0438\u0439 \u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "gu": "\u0433\u0443\u0434\u0436\u0430\u0440\u0430\u0442\u0438",
  "guz": "\u0433\u0443\u0441\u0438\u0438",
  "gv": "\u043C\u044D\u043D\u0441\u043A\u0438\u0439",
  "gwi": "\u0433\u0432\u0438\u0447\u0438\u043D",
  "ha": "\u0445\u0430\u0443\u0441\u0430",
  "hai": "\u0445\u0430\u0439\u0434\u0430",
  "hak": "\u0445\u0430\u043A\u043A\u0430",
  "haw": "\u0433\u0430\u0432\u0430\u0439\u0441\u043A\u0438\u0439",
  "he": "\u0438\u0432\u0440\u0438\u0442",
  "hi": "\u0445\u0438\u043D\u0434\u0438",
  "hil": "\u0445\u0438\u043B\u0438\u0433\u0430\u0439\u043D\u043E\u043D",
  "hit": "\u0445\u0435\u0442\u0442\u0441\u043A\u0438\u0439",
  "hmn": "\u0445\u043C\u043E\u043D\u0433",
  "ho": "\u0445\u0438\u0440\u0438\u043C\u043E\u0442\u0443",
  "hr": "\u0445\u043E\u0440\u0432\u0430\u0442\u0441\u043A\u0438\u0439",
  "hsb": "\u0432\u0435\u0440\u0445\u043D\u0435\u043B\u0443\u0436\u0438\u0446\u043A\u0438\u0439",
  "hsn": "\u0441\u044F\u043D",
  "ht": "\u0433\u0430\u0438\u0442\u044F\u043D\u0441\u043A\u0438\u0439",
  "hu": "\u0432\u0435\u043D\u0433\u0435\u0440\u0441\u043A\u0438\u0439",
  "hup": "\u0445\u0443\u043F\u0430",
  "hy": "\u0430\u0440\u043C\u044F\u043D\u0441\u043A\u0438\u0439",
  "hz": "\u0433\u0435\u0440\u0435\u0440\u043E",
  "ia": "\u0438\u043D\u0442\u0435\u0440\u043B\u0438\u043D\u0433\u0432\u0430",
  "iba": "\u0438\u0431\u0430\u043D\u0441\u043A\u0438\u0439",
  "ibb": "\u0438\u0431\u0438\u0431\u0438\u043E",
  "id": "\u0438\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0439\u0441\u043A\u0438\u0439",
  "ie": "\u0438\u043D\u0442\u0435\u0440\u043B\u0438\u043D\u0433\u0432\u0435",
  "ig": "\u0438\u0433\u0431\u043E",
  "ii": "\u043D\u043E\u0441\u0443",
  "ik": "\u0438\u043D\u0443\u043F\u0438\u0430\u043A",
  "ilo": "\u0438\u043B\u043E\u043A\u043E",
  "inh": "\u0438\u043D\u0433\u0443\u0448\u0441\u043A\u0438\u0439",
  "io": "\u0438\u0434\u043E",
  "is": "\u0438\u0441\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "it": "\u0438\u0442\u0430\u043B\u044C\u044F\u043D\u0441\u043A\u0438\u0439",
  "iu": "\u0438\u043D\u0443\u043A\u0442\u0438\u0442\u0443\u0442",
  "ja": "\u044F\u043F\u043E\u043D\u0441\u043A\u0438\u0439",
  "jbo": "\u043B\u043E\u0436\u0431\u0430\u043D",
  "jgo": "\u043D\u0433\u043E\u043C\u0431\u0430",
  "jmc": "\u043C\u0430\u0447\u0430\u043C\u0435",
  "jpr": "\u0435\u0432\u0440\u0435\u0439\u0441\u043A\u043E-\u043F\u0435\u0440\u0441\u0438\u0434\u0441\u043A\u0438\u0439",
  "jrb": "\u0435\u0432\u0440\u0435\u0439\u0441\u043A\u043E-\u0430\u0440\u0430\u0431\u0441\u043A\u0438\u0439",
  "jv": "\u044F\u0432\u0430\u043D\u0441\u043A\u0438\u0439",
  "ka": "\u0433\u0440\u0443\u0437\u0438\u043D\u0441\u043A\u0438\u0439",
  "kaa": "\u043A\u0430\u0440\u0430\u043A\u0430\u043B\u043F\u0430\u043A\u0441\u043A\u0438\u0439",
  "kab": "\u043A\u0430\u0431\u0438\u043B\u044C\u0441\u043A\u0438\u0439",
  "kac": "\u043A\u0430\u0447\u0438\u043D\u0441\u043A\u0438\u0439",
  "kaj": "\u043A\u0430\u0434\u0436\u0438",
  "kam": "\u043A\u0430\u043C\u0431\u0430",
  "kaw": "\u043A\u0430\u0432\u0438",
  "kbd": "\u043A\u0430\u0431\u0430\u0440\u0434\u0438\u043D\u0441\u043A\u0438\u0439",
  "kbl": "\u043A\u0430\u043D\u0435\u043C\u0431\u0443",
  "kcg": "\u0442\u044C\u044F\u043F",
  "kde": "\u043C\u0430\u043A\u043E\u043D\u0434\u0435",
  "kea": "\u043A\u0430\u0431\u0443\u0432\u0435\u0440\u0434\u044C\u044F\u043D\u0443",
  "kfo": "\u043A\u043E\u0440\u043E",
  "kg": "\u043A\u043E\u043D\u0433\u043E",
  "kgp": "kgp",
  "kha": "\u043A\u0445\u0430\u0441\u0438",
  "kho": "\u0445\u043E\u0442\u0430\u043D\u0441\u043A\u0438\u0439",
  "khq": "\u043A\u043E\u0439\u0440\u0430 \u0447\u0438\u0438\u043D\u0438",
  "ki": "\u043A\u0438\u043A\u0443\u0439\u044E",
  "kj": "\u043A\u0443\u043D\u0430\u043C\u0430",
  "kk": "\u043A\u0430\u0437\u0430\u0445\u0441\u043A\u0438\u0439",
  "kkj": "\u043A\u0430\u043A\u043E",
  "kl": "\u0433\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "kln": "\u043A\u0430\u043B\u0435\u043D\u0434\u0436\u0438\u043D",
  "km": "\u043A\u0445\u043C\u0435\u0440\u0441\u043A\u0438\u0439",
  "kmb": "\u043A\u0438\u043C\u0431\u0443\u043D\u0434\u0443",
  "kn": "\u043A\u0430\u043D\u043D\u0430\u0434\u0430",
  "ko": "\u043A\u043E\u0440\u0435\u0439\u0441\u043A\u0438\u0439",
  "koi": "\u043A\u043E\u043C\u0438-\u043F\u0435\u0440\u043C\u044F\u0446\u043A\u0438\u0439",
  "kok": "\u043A\u043E\u043D\u043A\u0430\u043D\u0438",
  "kos": "\u043A\u043E\u0441\u0440\u0430\u0435\u043D\u0441\u043A\u0438\u0439",
  "kpe": "\u043A\u043F\u0435\u043B\u043B\u0435",
  "kr": "\u043A\u0430\u043D\u0443\u0440\u0438",
  "krc": "\u043A\u0430\u0440\u0430\u0447\u0430\u0435\u0432\u043E-\u0431\u0430\u043B\u043A\u0430\u0440\u0441\u043A\u0438\u0439",
  "krl": "\u043A\u0430\u0440\u0435\u043B\u044C\u0441\u043A\u0438\u0439",
  "kru": "\u043A\u0443\u0440\u0443\u0445",
  "ks": "\u043A\u0430\u0448\u043C\u0438\u0440\u0438",
  "ksb": "\u0448\u0430\u043C\u0431\u0430\u043B\u0430",
  "ksf": "\u0431\u0430\u0444\u0438\u044F",
  "ksh": "\u043A\u0451\u043B\u044C\u043D\u0441\u043A\u0438\u0439",
  "ku": "\u043A\u0443\u0440\u0434\u0441\u043A\u0438\u0439",
  "kum": "\u043A\u0443\u043C\u044B\u043A\u0441\u043A\u0438\u0439",
  "kut": "\u043A\u0443\u0442\u0435\u043D\u0430\u0438",
  "kv": "\u043A\u043E\u043C\u0438",
  "kw": "\u043A\u043E\u0440\u043D\u0441\u043A\u0438\u0439",
  "ky": "\u043A\u0438\u0440\u0433\u0438\u0437\u0441\u043A\u0438\u0439",
  "la": "\u043B\u0430\u0442\u0438\u043D\u0441\u043A\u0438\u0439",
  "lad": "\u043B\u0430\u0434\u0438\u043D\u043E",
  "lag": "\u043B\u0430\u043D\u0433\u043E",
  "lah": "\u043B\u0430\u0445\u043D\u0434\u0430",
  "lam": "\u043B\u0430\u043C\u0431\u0430",
  "lb": "\u043B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0438\u0439",
  "lez": "\u043B\u0435\u0437\u0433\u0438\u043D\u0441\u043A\u0438\u0439",
  "lg": "\u0433\u0430\u043D\u0434\u0430",
  "li": "\u043B\u0438\u043C\u0431\u0443\u0440\u0433\u0441\u043A\u0438\u0439",
  "lij": "lij",
  "lkt": "\u043B\u0430\u043A\u043E\u0442\u0430",
  "ln": "\u043B\u0438\u043D\u0433\u0430\u043B\u0430",
  "lo": "\u043B\u0430\u043E\u0441\u0441\u043A\u0438\u0439",
  "lol": "\u043C\u043E\u043D\u0433\u043E",
  "lou": "\u043B\u0443\u0438\u0437\u0438\u0430\u043D\u0441\u043A\u0438\u0439 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "loz": "\u043B\u043E\u0437\u0438",
  "lrc": "\u0441\u0435\u0432\u0435\u0440\u043D\u043E\u043B\u0443\u0440\u0441\u043A\u0438\u0439",
  "lt": "\u043B\u0438\u0442\u043E\u0432\u0441\u043A\u0438\u0439",
  "lu": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0442\u0430\u043D\u0433\u0430",
  "lua": "\u043B\u0443\u0431\u0430-\u043B\u0443\u043B\u0443\u0430",
  "lui": "\u043B\u0443\u0438\u0441\u0435\u043D\u044C\u043E",
  "lun": "\u043B\u0443\u043D\u0434\u0430",
  "luo": "\u043B\u0443\u043E",
  "lus": "\u043C\u0438\u0437\u043E",
  "luy": "\u043B\u0443\u0445\u044C\u044F",
  "lv": "\u043B\u0430\u0442\u044B\u0448\u0441\u043A\u0438\u0439",
  "mad": "\u043C\u0430\u0434\u0443\u0440\u0441\u043A\u0438\u0439",
  "maf": "\u043C\u0430\u0444\u0430",
  "mag": "\u043C\u0430\u0433\u0430\u0445\u0438",
  "mai": "\u043C\u0430\u0439\u0442\u0445\u0438\u043B\u0438",
  "mak": "\u043C\u0430\u043A\u0430\u0441\u0441\u0430\u0440\u0441\u043A\u0438\u0439",
  "man": "\u043C\u0430\u043D\u0434\u0438\u043D\u0433\u043E",
  "mas": "\u043C\u0430\u0441\u0430\u0438",
  "mde": "\u043C\u0430\u0431\u0430",
  "mdf": "\u043C\u043E\u043A\u0448\u0430\u043D\u0441\u043A\u0438\u0439",
  "mdr": "\u043C\u0430\u043D\u0434\u0430\u0440\u0441\u043A\u0438\u0439",
  "men": "\u043C\u0435\u043D\u0434\u0435",
  "mer": "\u043C\u0435\u0440\u0443",
  "mfe": "\u043C\u0430\u0432\u0440\u0438\u043A\u0438\u0439\u0441\u043A\u0438\u0439 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "mg": "\u043C\u0430\u043B\u0430\u0433\u0430\u0441\u0438\u0439\u0441\u043A\u0438\u0439",
  "mga": "\u0441\u0440\u0435\u0434\u043D\u0435\u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "mgh": "\u043C\u0430\u043A\u0443\u0430-\u043C\u0435\u0435\u0442\u0442\u043E",
  "mgo": "\u043C\u0435\u0442\u0430",
  "mh": "\u043C\u0430\u0440\u0448\u0430\u043B\u043B\u044C\u0441\u043A\u0438\u0439",
  "mi": "\u043C\u0430\u043E\u0440\u0438",
  "mic": "\u043C\u0438\u043A\u043C\u0430\u043A",
  "min": "\u043C\u0438\u043D\u0430\u043D\u0433\u043A\u0430\u0431\u0430\u0443",
  "mk": "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438\u0439",
  "ml": "\u043C\u0430\u043B\u0430\u044F\u043B\u0430\u043C",
  "mn": "\u043C\u043E\u043D\u0433\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "mnc": "\u043C\u0430\u043D\u044C\u0447\u0436\u0443\u0440\u0441\u043A\u0438\u0439",
  "mni": "\u043C\u0430\u043D\u0438\u043F\u0443\u0440\u0441\u043A\u0438\u0439",
  "moh": "\u043C\u043E\u0445\u0430\u0443\u043A",
  "mos": "\u043C\u043E\u0441\u0438",
  "mr": "\u043C\u0430\u0440\u0430\u0442\u0445\u0438",
  "ms": "\u043C\u0430\u043B\u0430\u0439\u0441\u043A\u0438\u0439",
  "mt": "\u043C\u0430\u043B\u044C\u0442\u0438\u0439\u0441\u043A\u0438\u0439",
  "mua": "\u043C\u0443\u043D\u0434\u0430\u043D\u0433",
  "mul": "\u044F\u0437\u044B\u043A\u0438 \u0440\u0430\u0437\u043D\u044B\u0445 \u0441\u0435\u043C\u0435\u0439",
  "mus": "\u043A\u0440\u0438\u043A",
  "mwl": "\u043C\u0438\u0440\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "mwr": "\u043C\u0430\u0440\u0432\u0430\u0440\u0438",
  "my": "\u0431\u0438\u0440\u043C\u0430\u043D\u0441\u043A\u0438\u0439",
  "mye": "\u043C\u0438\u0435\u043D\u0435",
  "myv": "\u044D\u0440\u0437\u044F\u043D\u0441\u043A\u0438\u0439",
  "mzn": "\u043C\u0430\u0437\u0430\u043D\u0434\u0435\u0440\u0430\u043D\u0441\u043A\u0438\u0439",
  "na": "\u043D\u0430\u0443\u0440\u0443",
  "nan": "\u043C\u0438\u043D\u044C\u043D\u0430\u043D\u044C",
  "nap": "\u043D\u0435\u0430\u043F\u043E\u043B\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0439",
  "naq": "\u043D\u0430\u043C\u0430",
  "nb": "\u043D\u043E\u0440\u0432\u0435\u0436\u0441\u043A\u0438\u0439 \u0431\u0443\u043A\u043C\u043E\u043B",
  "nd": "\u0441\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nds": "\u043D\u0438\u0436\u043D\u0435\u043D\u0435\u043C\u0435\u0446\u043A\u0438\u0439",
  "nds-NL": "\u043D\u0438\u0436\u043D\u0435\u0441\u0430\u043A\u0441\u043E\u043D\u0441\u043A\u0438\u0439",
  "ne": "\u043D\u0435\u043F\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "new": "\u043D\u0435\u0432\u0430\u0440\u0441\u043A\u0438\u0439",
  "ng": "\u043D\u0434\u043E\u043D\u0433\u0430",
  "nia": "\u043D\u0438\u0430\u0441",
  "niu": "\u043D\u0438\u0443\u044D",
  "nl": "\u043D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "nl-BE": "\u0444\u043B\u0430\u043C\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "nmg": "\u043A\u0432\u0430\u0441\u0438\u043E",
  "nn": "\u043D\u044E\u043D\u043E\u0440\u0441\u043A",
  "nnh": "\u043D\u0433\u0438\u0435\u043C\u0431\u0443\u043D\u0434",
  "no": "\u043D\u043E\u0440\u0432\u0435\u0436\u0441\u043A\u0438\u0439",
  "nog": "\u043D\u043E\u0433\u0430\u0439\u0441\u043A\u0438\u0439",
  "non": "\u0441\u0442\u0430\u0440\u043E\u043D\u043E\u0440\u0432\u0435\u0436\u0441\u043A\u0438\u0439",
  "nqo": "\u043D\u043A\u043E",
  "nr": "\u044E\u0436\u043D\u044B\u0439 \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nso": "\u0441\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0441\u043E\u0442\u043E",
  "nus": "\u043D\u0443\u044D\u0440",
  "nv": "\u043D\u0430\u0432\u0430\u0445\u043E",
  "nwc": "\u043A\u043B\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043A\u0438\u0439 \u043D\u0435\u0432\u0430\u0440\u0438",
  "ny": "\u043D\u044C\u044F\u043D\u0434\u0436\u0430",
  "nym": "\u043D\u044C\u044F\u043C\u0432\u0435\u0437\u0438",
  "nyn": "\u043D\u044C\u044F\u043D\u043A\u043E\u043B\u0435",
  "nyo": "\u043D\u044C\u043E\u0440\u043E",
  "nzi": "\u043D\u0437\u0438\u043C\u0430",
  "oc": "\u043E\u043A\u0441\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0439",
  "oj": "\u043E\u0434\u0436\u0438\u0431\u0432\u0430",
  "om": "\u043E\u0440\u043E\u043C\u043E",
  "or": "\u043E\u0440\u0438\u044F",
  "os": "\u043E\u0441\u0435\u0442\u0438\u043D\u0441\u043A\u0438\u0439",
  "osa": "\u043E\u0441\u0435\u0434\u0436\u0438",
  "ota": "\u0441\u0442\u0430\u0440\u043E\u0442\u0443\u0440\u0435\u0446\u043A\u0438\u0439",
  "pa": "\u043F\u0430\u043D\u0434\u0436\u0430\u0431\u0438",
  "pag": "\u043F\u0430\u043D\u0433\u0430\u0441\u0438\u043D\u0430\u043D",
  "pal": "\u043F\u0435\u0445\u043B\u0435\u0432\u0438\u0439\u0441\u043A\u0438\u0439",
  "pam": "\u043F\u0430\u043C\u043F\u0430\u043D\u0433\u0430",
  "pap": "\u043F\u0430\u043F\u044C\u044F\u043C\u0435\u043D\u0442\u043E",
  "pau": "\u043F\u0430\u043B\u0430\u0443",
  "pcm": "\u043D\u0438\u0433\u0435\u0440\u0438\u0439\u0441\u043A\u043E-\u043A\u0440\u0435\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "peo": "\u0441\u0442\u0430\u0440\u043E\u043F\u0435\u0440\u0441\u0438\u0434\u0441\u043A\u0438\u0439",
  "phn": "\u0444\u0438\u043D\u0438\u043A\u0438\u0439\u0441\u043A\u0438\u0439",
  "pi": "\u043F\u0430\u043B\u0438",
  "pl": "\u043F\u043E\u043B\u044C\u0441\u043A\u0438\u0439",
  "pon": "\u043F\u043E\u043D\u0430\u043F\u0435",
  "prg": "\u043F\u0440\u0443\u0441\u0441\u043A\u0438\u0439",
  "pro": "\u0441\u0442\u0430\u0440\u043E\u043F\u0440\u043E\u0432\u0430\u043D\u0441\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "ps": "\u043F\u0443\u0448\u0442\u0443",
  "pt": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "pt-BR": "\u0431\u0440\u0430\u0437\u0438\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "pt-PT": "\u0435\u0432\u0440\u043E\u043F\u0435\u0439\u0441\u043A\u0438\u0439 \u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "qu": "\u043A\u0435\u0447\u0443\u0430",
  "quc": "\u043A\u0438\u0447\u0435",
  "raj": "\u0440\u0430\u0434\u0436\u0430\u0441\u0442\u0445\u0430\u043D\u0438",
  "rap": "\u0440\u0430\u043F\u0430\u043D\u0443\u0439\u0441\u043A\u0438\u0439",
  "rar": "\u0440\u0430\u0440\u043E\u0442\u043E\u043D\u0433\u0430",
  "rhg": "\u0440\u043E\u0445\u0438\u043D\u0434\u0436\u0430",
  "rm": "\u0440\u043E\u043C\u0430\u043D\u0448\u0441\u043A\u0438\u0439",
  "rn": "\u0440\u0443\u043D\u0434\u0438",
  "ro": "\u0440\u0443\u043C\u044B\u043D\u0441\u043A\u0438\u0439",
  "ro-MD": "\u043C\u043E\u043B\u0434\u0430\u0432\u0441\u043A\u0438\u0439",
  "rof": "\u0440\u043E\u043C\u0431\u043E",
  "rom": "\u0446\u044B\u0433\u0430\u043D\u0441\u043A\u0438\u0439",
  "ru": "\u0440\u0443\u0441\u0441\u043A\u0438\u0439",
  "rup": "\u0430\u0440\u0443\u043C\u044B\u043D\u0441\u043A\u0438\u0439",
  "rw": "\u043A\u0438\u043D\u044C\u044F\u0440\u0443\u0430\u043D\u0434\u0430",
  "rwk": "\u0440\u0443\u0430\u043D\u0434\u0430",
  "sa": "\u0441\u0430\u043D\u0441\u043A\u0440\u0438\u0442",
  "sad": "\u0441\u0430\u043D\u0434\u0430\u0432\u0435",
  "sah": "\u0441\u0430\u0445\u0430",
  "sam": "\u0441\u0430\u043C\u0430\u0440\u0438\u0442\u044F\u043D\u0441\u043A\u0438\u0439 \u0430\u0440\u0430\u043C\u0435\u0439\u0441\u043A\u0438\u0439",
  "saq": "\u0441\u0430\u043C\u0431\u0443\u0440\u0443",
  "sas": "\u0441\u0430\u0441\u0430\u043A\u0441\u043A\u0438\u0439",
  "sat": "\u0441\u0430\u043D\u0442\u0430\u043B\u0438",
  "sba": "\u043D\u0433\u0430\u043C\u0431\u0430\u0439\u0441\u043A\u0438\u0439",
  "sbp": "\u0441\u0430\u043D\u0433\u0443",
  "sc": "\u0441\u0430\u0440\u0434\u0438\u043D\u0441\u043A\u0438\u0439",
  "scn": "\u0441\u0438\u0446\u0438\u043B\u0438\u0439\u0441\u043A\u0438\u0439",
  "sco": "\u0448\u043E\u0442\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "sd": "\u0441\u0438\u043D\u0434\u0445\u0438",
  "sdh": "\u044E\u0436\u043D\u043E\u043A\u0443\u0440\u0434\u0441\u043A\u0438\u0439",
  "se": "\u0441\u0435\u0432\u0435\u0440\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u043A\u0438\u0439",
  "see": "\u0441\u0435\u043D\u0435\u043A\u0430",
  "seh": "\u0441\u0435\u043D\u0430",
  "sel": "\u0441\u0435\u043B\u044C\u043A\u0443\u043F\u0441\u043A\u0438\u0439",
  "ses": "\u043A\u043E\u0439\u0440\u0430\u0431\u043E\u0440\u043E \u0441\u0435\u043D\u043D\u0438",
  "sg": "\u0441\u0430\u043D\u0433\u043E",
  "sga": "\u0441\u0442\u0430\u0440\u043E\u0438\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0439",
  "sh": "\u0441\u0435\u0440\u0431\u0441\u043A\u043E\u0445\u043E\u0440\u0432\u0430\u0442\u0441\u043A\u0438\u0439",
  "shi": "\u0442\u0430\u0448\u0435\u043B\u044C\u0445\u0438\u0442",
  "shn": "\u0448\u0430\u043D\u0441\u043A\u0438\u0439",
  "shu": "\u0447\u0430\u0434\u0441\u043A\u0438\u0439 \u0430\u0440\u0430\u0431\u0441\u043A\u0438\u0439",
  "si": "\u0441\u0438\u043D\u0433\u0430\u043B\u044C\u0441\u043A\u0438\u0439",
  "sid": "\u0441\u0438\u0434\u0430\u043C\u0430",
  "sk": "\u0441\u043B\u043E\u0432\u0430\u0446\u043A\u0438\u0439",
  "sl": "\u0441\u043B\u043E\u0432\u0435\u043D\u0441\u043A\u0438\u0439",
  "sm": "\u0441\u0430\u043C\u043E\u0430\u043D\u0441\u043A\u0438\u0439",
  "sma": "\u044E\u0436\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u043A\u0438\u0439",
  "smj": "\u043B\u0443\u043B\u0435-\u0441\u0430\u0430\u043C\u0441\u043A\u0438\u0439",
  "smn": "\u0438\u043D\u0430\u0440\u0438-\u0441\u0430\u0430\u043C\u0441\u043A\u0438\u0439",
  "sms": "\u043A\u043E\u043B\u0442\u0442\u0430-\u0441\u0430\u0430\u043C\u0441\u043A\u0438\u0439",
  "sn": "\u0448\u043E\u043D\u0430",
  "snk": "\u0441\u043E\u043D\u0438\u043D\u043A\u0435",
  "so": "\u0441\u043E\u043C\u0430\u043B\u0438",
  "sog": "\u0441\u043E\u0433\u0434\u0438\u0439\u0441\u043A\u0438\u0439",
  "sq": "\u0430\u043B\u0431\u0430\u043D\u0441\u043A\u0438\u0439",
  "sr": "\u0441\u0435\u0440\u0431\u0441\u043A\u0438\u0439",
  "srn": "\u0441\u0440\u0430\u043D\u0430\u043D-\u0442\u043E\u043D\u0433\u043E",
  "srr": "\u0441\u0435\u0440\u0435\u0440",
  "ss": "\u0441\u0432\u0430\u0437\u0438",
  "ssy": "\u0441\u0430\u0445\u043E",
  "st": "\u044E\u0436\u043D\u044B\u0439 \u0441\u043E\u0442\u043E",
  "su": "\u0441\u0443\u043D\u0434\u0430\u043D\u0441\u043A\u0438\u0439",
  "suk": "\u0441\u0443\u043A\u0443\u043C\u0430",
  "sus": "\u0441\u0443\u0441\u0443",
  "sux": "\u0448\u0443\u043C\u0435\u0440\u0441\u043A\u0438\u0439",
  "sv": "\u0448\u0432\u0435\u0434\u0441\u043A\u0438\u0439",
  "sw": "\u0441\u0443\u0430\u0445\u0438\u043B\u0438",
  "sw-CD": "\u043A\u043E\u043D\u0433\u043E\u043B\u0435\u0437\u0441\u043A\u0438\u0439 \u0441\u0443\u0430\u0445\u0438\u043B\u0438",
  "swb": "\u043A\u043E\u043C\u043E\u0440\u0441\u043A\u0438\u0439",
  "syc": "\u043A\u043B\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043A\u0438\u0439 \u0441\u0438\u0440\u0438\u0439\u0441\u043A\u0438\u0439",
  "syr": "\u0441\u0438\u0440\u0438\u0439\u0441\u043A\u0438\u0439",
  "ta": "\u0442\u0430\u043C\u0438\u043B\u044C\u0441\u043A\u0438\u0439",
  "te": "\u0442\u0435\u043B\u0443\u0433\u0443",
  "tem": "\u0442\u0435\u043C\u043D\u0435",
  "teo": "\u0442\u0435\u0441\u043E",
  "ter": "\u0442\u0435\u0440\u0435\u043D\u043E",
  "tet": "\u0442\u0435\u0442\u0443\u043C",
  "tg": "\u0442\u0430\u0434\u0436\u0438\u043A\u0441\u043A\u0438\u0439",
  "th": "\u0442\u0430\u0439\u0441\u043A\u0438\u0439",
  "ti": "\u0442\u0438\u0433\u0440\u0438\u043D\u044C\u044F",
  "tig": "\u0442\u0438\u0433\u0440\u0435",
  "tiv": "\u0442\u0438\u0432\u0438",
  "tk": "\u0442\u0443\u0440\u043A\u043C\u0435\u043D\u0441\u043A\u0438\u0439",
  "tkl": "\u0442\u043E\u043A\u0435\u043B\u0430\u0439\u0441\u043A\u0438\u0439",
  "tl": "\u0442\u0430\u0433\u0430\u043B\u043E\u0433",
  "tlh": "\u043A\u043B\u0438\u043D\u0433\u043E\u043D\u0441\u043A\u0438\u0439",
  "tli": "\u0442\u043B\u0438\u043D\u0433\u0438\u0442",
  "tmh": "\u0442\u0430\u043C\u0430\u0448\u0435\u043A",
  "tn": "\u0442\u0441\u0432\u0430\u043D\u0430",
  "to": "\u0442\u043E\u043D\u0433\u0430\u043D\u0441\u043A\u0438\u0439",
  "tog": "\u0442\u043E\u043D\u0433\u0430",
  "tpi": "\u0442\u043E\u043A-\u043F\u0438\u0441\u0438\u043D",
  "tr": "\u0442\u0443\u0440\u0435\u0446\u043A\u0438\u0439",
  "tru": "\u0442\u0443\u0440\u043E\u0439\u043E",
  "trv": "\u0441\u0435\u0434\u0435\u043A\u0441\u043A\u0438\u0439",
  "ts": "\u0442\u0441\u043E\u043D\u0433\u0430",
  "tsi": "\u0446\u0438\u043C\u0448\u0438\u0430\u043D",
  "tt": "\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438\u0439",
  "tum": "\u0442\u0443\u043C\u0431\u0443\u043A\u0430",
  "tvl": "\u0442\u0443\u0432\u0430\u043B\u0443",
  "tw": "\u0442\u0432\u0438",
  "twq": "\u0442\u0430\u0441\u0430\u0432\u0430\u043A",
  "ty": "\u0442\u0430\u0438\u0442\u044F\u043D\u0441\u043A\u0438\u0439",
  "tyv": "\u0442\u0443\u0432\u0438\u043D\u0441\u043A\u0438\u0439",
  "tzm": "\u0441\u0440\u0435\u0434\u043D\u0435\u0430\u0442\u043B\u0430\u0441\u0441\u043A\u0438\u0439 \u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0445\u0442\u0441\u043A\u0438\u0439",
  "udm": "\u0443\u0434\u043C\u0443\u0440\u0442\u0441\u043A\u0438\u0439",
  "ug": "\u0443\u0439\u0433\u0443\u0440\u0441\u043A\u0438\u0439",
  "uga": "\u0443\u0433\u0430\u0440\u0438\u0442\u0441\u043A\u0438\u0439",
  "uk": "\u0443\u043A\u0440\u0430\u0438\u043D\u0441\u043A\u0438\u0439",
  "umb": "\u0443\u043C\u0431\u0443\u043D\u0434\u0443",
  "und": "\u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u0439 \u044F\u0437\u044B\u043A",
  "ur": "\u0443\u0440\u0434\u0443",
  "uz": "\u0443\u0437\u0431\u0435\u043A\u0441\u043A\u0438\u0439",
  "vai": "\u0432\u0430\u0438",
  "ve": "\u0432\u0435\u043D\u0434\u0430",
  "vi": "\u0432\u044C\u0435\u0442\u043D\u0430\u043C\u0441\u043A\u0438\u0439",
  "vo": "\u0432\u043E\u043B\u0430\u043F\u044E\u043A",
  "vot": "\u0432\u043E\u0434\u0441\u043A\u0438\u0439",
  "vun": "\u0432\u0443\u043D\u0434\u0436\u043E",
  "wa": "\u0432\u0430\u043B\u043B\u043E\u043D\u0441\u043A\u0438\u0439",
  "wae": "\u0432\u0430\u043B\u043B\u0438\u0441\u0441\u043A\u0438\u0439",
  "wal": "\u0432\u043E\u043B\u0430\u043C\u043E",
  "war": "\u0432\u0430\u0440\u0430\u0439",
  "was": "\u0432\u0430\u0448\u043E",
  "wbp": "\u0432\u0430\u043B\u044C\u0431\u0438\u0440\u0438",
  "wo": "\u0432\u043E\u043B\u043E\u0444",
  "wuu": "\u0432\u0443",
  "xal": "\u043A\u0430\u043B\u043C\u044B\u0446\u043A\u0438\u0439",
  "xh": "\u043A\u043E\u0441\u0430",
  "xog": "\u0441\u043E\u0433\u0430",
  "yao": "\u044F\u043E",
  "yap": "\u044F\u043F",
  "yav": "\u044F\u043D\u0433\u0431\u0435\u043D",
  "ybb": "\u0439\u0435\u043C\u0431\u0430",
  "yi": "\u0438\u0434\u0438\u0448",
  "yo": "\u0439\u043E\u0440\u0443\u0431\u0430",
  "yrl": "yrl",
  "yue": "\u043A\u0430\u043D\u0442\u043E\u043D\u0441\u043A\u0438\u0439",
  "za": "\u0447\u0436\u0443\u0430\u043D\u044C",
  "zap": "\u0441\u0430\u043F\u043E\u0442\u0435\u043A\u0441\u043A\u0438\u0439",
  "zbl": "\u0431\u043B\u0438\u0441\u0441\u0438\u043C\u0432\u043E\u043B\u0438\u043A\u0430",
  "zen": "\u0437\u0435\u043D\u0430\u0433\u0441\u043A\u0438\u0439",
  "zgh": "\u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0445\u0442\u0441\u043A\u0438\u0439",
  "zh": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439",
  "zh-Hans": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439, \u0443\u043F\u0440\u043E\u0449\u0435\u043D\u043D\u043E\u0435 \u043F\u0438\u0441\u044C\u043C\u043E",
  "zh-Hant": "\u043A\u0438\u0442\u0430\u0439\u0441\u043A\u0438\u0439, \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043E\u043D\u043D\u043E\u0435 \u043F\u0438\u0441\u044C\u043C\u043E",
  "zu": "\u0437\u0443\u043B\u0443",
  "zun": "\u0437\u0443\u043D\u044C\u0438",
  "zxx": "\u043D\u0435\u0442 \u044F\u0437\u044B\u043A\u043E\u0432\u043E\u0433\u043E \u043C\u0430\u0442\u0435\u0440\u0438\u0430\u043B\u0430",
  "zza": "\u0437\u0430\u0437\u0430"
};

// src/l10n/locale/se.ts
var se_default = {
  "ab": "ab",
  "ace": "acehgiella",
  "af": "afrik\xE1nsagiella",
  "agq": "agq",
  "ak": "ak",
  "am": "am",
  "an": "aragoniagiella",
  "ang": "boares ea\u014Bgalasgiella",
  "ar": "ar\xE1bagiella",
  "ar-001": "ar\xE1bagiella (m\xE1ilbmi)",
  "as": "as",
  "asa": "asa",
  "ast": "asturiagiella",
  "az": "az",
  "bas": "bas",
  "be": "vilges-ruo\u0161\u0161agiella",
  "bem": "bem",
  "bez": "bez",
  "bg": "bulg\xE1riagiella",
  "bm": "bm",
  "bn": "bengalgiella",
  "bo": "tibetagiella",
  "br": "bretonagiella",
  "brx": "brx",
  "bs": "bosniagiella",
  "ca": "katal\xE1nagiella",
  "ccp": "ccp",
  "ce": "ce",
  "ceb": "ceb",
  "cgg": "cgg",
  "chm": "marigiella",
  "chr": "chr",
  "ckb": "ckb",
  "co": "corsicagiella",
  "cs": "\u010Deahkagiella",
  "cu": "cu",
  "cy": "kymragiella",
  "da": "d\xE1nskkagiella",
  "dav": "dav",
  "de": "duiskkagiella",
  "de-AT": "duiskkagiella (Nuortariika)",
  "de-CH": "duiskkagiella (\u0160veica)",
  "dje": "dje",
  "doi": "doi",
  "dsb": "dsb",
  "dua": "dua",
  "dv": "divehigiella",
  "dyo": "dyo",
  "dz": "dzongkhagiella",
  "ebu": "ebu",
  "ee": "ee",
  "el": "greikkagiella",
  "en": "ea\u014Bgalsgiella",
  "en-AU": "ea\u014Bgalsgiella (Austr\xE1lia)",
  "en-CA": "ea\u014Bgalsgiella (Kan\xE1da)",
  "en-GB": "ea\u014Bgalsgiella (Stuorra-Brit\xE1nnia)",
  "en-US": "ea\u014Bgalsgiella (Amerihk\xE1 ovttastuvvan st\xE1htat)",
  "eo": "eo",
  "es": "sp\xE1nskkagiella",
  "es-419": "sp\xE1nskkagiella (lulli-Amerihkk\xE1)",
  "es-ES": "sp\xE1nskkagiella (Sp\xE1nia)",
  "es-MX": "sp\xE1nskkagiella (Meksiko)",
  "et": "esttegiella",
  "eu": "eu",
  "ewo": "ewo",
  "fa": "persijagiella",
  "fa-AF": "persijagiella (Afghanistan)",
  "ff": "ff",
  "fi": "suomagiella",
  "fil": "filippiinnagiella",
  "fj": "fidjigiella",
  "fo": "fearagiella",
  "fr": "fr\xE1nskkagiella",
  "fr-CA": "fr\xE1nskkagiella (Kan\xE1da)",
  "fr-CH": "fr\xE1nskkagiella (\u0160veica)",
  "frc": "frc",
  "fur": "fur",
  "fy": "oarjifriisagiella",
  "ga": "iirragiella",
  "gd": "gd",
  "gl": "gl",
  "gsw": "gsw",
  "gu": "gujaratagiella",
  "guz": "guz",
  "gv": "manksgiella",
  "ha": "haussagiella",
  "haw": "hawaiigiella",
  "he": "he",
  "hi": "hindigiella",
  "hmn": "hmn",
  "hr": "kro\xE1tiagiella",
  "hsb": "hsb",
  "ht": "haitigiella",
  "hu": "ung\xE1rgiella",
  "hy": "armeenagiella",
  "ia": "ia",
  "id": "indonesiagiella",
  "ig": "ig",
  "ii": "ii",
  "is": "isl\xE1nddagiella",
  "it": "it\xE1liagiella",
  "ja": "jap\xE1nagiella",
  "jgo": "jgo",
  "jmc": "jmc",
  "jv": "javagiella",
  "ka": "georgiagiella",
  "kab": "kab",
  "kam": "kam",
  "kde": "kde",
  "kea": "kea",
  "kgp": "kgp",
  "khq": "khq",
  "ki": "ki",
  "kk": "kazakgiella",
  "kkj": "kkj",
  "kl": "kl",
  "kln": "kln",
  "km": "kambodiagiella",
  "kn": "kn",
  "ko": "koreagiella",
  "kok": "kok",
  "krl": "g\xE1rjilgiella",
  "ks": "ks",
  "ksb": "ksb",
  "ksf": "ksf",
  "ksh": "ksh",
  "ku": "kurdigiella",
  "kv": "komigiella",
  "kw": "kornagiella",
  "ky": "ky",
  "la": "l\xE1htengiella",
  "lag": "lag",
  "lb": "luxemburggagiella",
  "lg": "lg",
  "lij": "lij",
  "lkt": "lkt",
  "ln": "ln",
  "lo": "laogiella",
  "lou": "lou",
  "lrc": "lrc",
  "lt": "liettuvagiella",
  "lu": "lu",
  "luo": "luo",
  "luy": "luy",
  "lv": "l\xE1tviagiella",
  "mai": "mai",
  "mas": "mas",
  "mdf": "mok\u0161agiella",
  "mer": "mer",
  "mfe": "mfe",
  "mg": "mg",
  "mgh": "mgh",
  "mgo": "mgo",
  "mi": "maorigiella",
  "mk": "makedoniagiella",
  "ml": "ml",
  "mn": "mongoliagiella",
  "mni": "mni",
  "mr": "mr",
  "ms": "ms",
  "mt": "maltagiella",
  "mua": "mua",
  "mul": "mul",
  "my": "burmagiella",
  "myv": "ersagiella",
  "mzn": "mzn",
  "naq": "naq",
  "nb": "girjed\xE1rogiella",
  "nd": "nd",
  "nds": "nds",
  "nds-NL": "nds (Vuolleeatnamat)",
  "ne": "nepaligiella",
  "nl": "holl\xE1nddagiella",
  "nl-BE": "holl\xE1nddagiella (Belgia)",
  "nmg": "nmg",
  "nn": "o\u0111\u0111ad\xE1rogiella",
  "nnh": "nnh",
  "no": "d\xE1rogiella",
  "nus": "nus",
  "nv": "nv",
  "ny": "ny",
  "nyn": "nyn",
  "oc": "oksit\xE1nagiella",
  "om": "om",
  "or": "or",
  "os": "os",
  "pa": "panjabigiella",
  "pcm": "pcm",
  "pl": "polskkagiella",
  "prg": "prg",
  "ps": "ps",
  "pt": "portug\xE1lagiella",
  "pt-BR": "portug\xE1lagiella (Brasil)",
  "pt-PT": "portug\xE1lagiella (Portug\xE1la)",
  "qu": "qu",
  "rhg": "rhg",
  "rm": "roman\u0161giella",
  "rn": "rn",
  "ro": "rom\xE1niagiella",
  "ro-MD": "rom\xE1niagiella (Mold\xE1via)",
  "rof": "rof",
  "ru": "ruo\u0161\u0161agiella",
  "rw": "rw",
  "rwk": "rwk",
  "sa": "sa",
  "sah": "sah",
  "saq": "saq",
  "sat": "sat",
  "sbp": "sbp",
  "sc": "sardigiella",
  "scn": "sisiliagiella",
  "sd": "sd",
  "se": "davvis\xE1megiella",
  "seh": "seh",
  "sel": "selkupagiella",
  "ses": "ses",
  "sg": "sg",
  "sh": "serbokroatiagiella",
  "shi": "shi",
  "si": "si",
  "sk": "slov\xE1kiagiella",
  "sl": "slovenagiella",
  "sm": "samoagiella",
  "sma": "lullis\xE1megiella",
  "smj": "julevs\xE1megiella",
  "smn": "an\xE1ra\u0161giella",
  "sms": "nuortala\u0161giella",
  "sn": "sn",
  "so": "so",
  "sq": "alb\xE1nagiella",
  "sr": "serbiagiella",
  "st": "st",
  "su": "su",
  "sv": "ruo\u0167agiella",
  "sw": "sw",
  "sw-CD": "sw (Kongo-Kinshasa)",
  "swb": "shimaorigiella",
  "ta": "ta",
  "te": "te",
  "teo": "teo",
  "tg": "tg",
  "th": "\u0167aigiella",
  "ti": "ti",
  "tk": "tk",
  "to": "to",
  "tr": "durkagiella",
  "tt": "tt",
  "twq": "twq",
  "ty": "tahitigiella",
  "tzm": "tzm",
  "udm": "udmurtagiella",
  "ug": "ug",
  "uk": "ukrainagiella",
  "und": "dovdameahttun giella",
  "ur": "urdugiella",
  "uz": "uz",
  "vai": "vai",
  "vi": "vietnamgiella",
  "vo": "vo",
  "vun": "vun",
  "wa": "vallonagiella",
  "wae": "wae",
  "wo": "wo",
  "xh": "xh",
  "xog": "xog",
  "yav": "yav",
  "yi": "yi",
  "yo": "yo",
  "yrl": "yrl",
  "yue": "kantongiella",
  "zgh": "zgh",
  "zh": "kiinn\xE1giella",
  "zh-Hans": "\xE1lki kiin\xE1giella",
  "zh-Hant": "\xE1rbevirola\u0161 kiinn\xE1giella",
  "zu": "zu",
  "zxx": "zxx"
};

// src/l10n/locale/sk.ts
var sk_default = {
  "aa": "afar\u010Dina",
  "ab": "abch\xE1z\u010Dina",
  "ace": "aceh\u010Dina",
  "ach": "a\u010Doli",
  "ada": "adangme",
  "ady": "adygej\u010Dina",
  "ae": "avest\u010Dina",
  "af": "afrik\xE1n\u010Dina",
  "afh": "afrihili",
  "agq": "aghem",
  "ain": "ain\u010Dina",
  "ak": "akan\u010Dina",
  "akk": "akkad\u010Dina",
  "ale": "aleut\u010Dina",
  "alt": "ju\u017En\xE1 altaj\u010Dina",
  "am": "amhar\u010Dina",
  "an": "arag\xF3n\u010Dina",
  "ang": "star\xE1 angli\u010Dtina",
  "anp": "angika",
  "ar": "arab\u010Dina",
  "ar-001": "arab\u010Dina (modern\xE1 \u0161tandardn\xE1)",
  "arc": "aramej\u010Dina",
  "arn": "mapudungun",
  "arp": "arapa\u017E\u0161tina",
  "ars": "arab\u010Dina (nad\u017Edsk\xE1)",
  "arw": "arawa\u010Dtina",
  "as": "\xE1sam\u010Dina",
  "asa": "asu",
  "ast": "ast\xFAr\u010Dina",
  "av": "avar\u010Dina",
  "awa": "awadhi",
  "ay": "aymar\u010Dina",
  "az": "azerbajd\u017Ean\u010Dina",
  "ba": "ba\u0161kir\u010Dina",
  "bal": "bal\xFA\u010Dtina",
  "ban": "balij\u010Dina",
  "bas": "basa",
  "bax": "bamun",
  "bbj": "ghomala",
  "be": "bieloru\u0161tina",
  "bej": "bed\u017Ea",
  "bem": "bemba",
  "bez": "bena",
  "bfd": "bafut",
  "bg": "bulhar\u010Dina",
  "bgn": "z\xE1padn\xE1 bal\xFA\u010Dtina",
  "bho": "bh\xF3d\u017Epur\u010Dina",
  "bi": "bislama",
  "bik": "bikol\u010Dina",
  "bin": "bini",
  "bkm": "kom",
  "bla": "siksika",
  "bm": "bambar\u010Dina",
  "bn": "beng\xE1l\u010Dina",
  "bo": "tibet\u010Dina",
  "br": "bret\xF3n\u010Dina",
  "bra": "brad\u017E\u010Dina",
  "brx": "bodo",
  "bs": "bosnia\u010Dtina",
  "bss": "akoose",
  "bua": "buriat\u010Dina",
  "bug": "bugi\u0161tina",
  "bum": "bulu",
  "byn": "blin",
  "byv": "medumba",
  "ca": "katal\xE1n\u010Dina",
  "cad": "kaddo",
  "car": "karib\u010Dina",
  "cay": "kajug\u010Dina",
  "cch": "atsam",
  "ccp": "\u010Dakma",
  "ce": "\u010De\u010Den\u010Dina",
  "ceb": "cebu\xE1n\u010Dina",
  "cgg": "kiga",
  "ch": "\u010Damor\u010Dina",
  "chb": "\u010Dib\u010Da",
  "chg": "\u010Dagataj\u010Dina",
  "chk": "chuuk",
  "chm": "marij\u010Dina",
  "chn": "\u010Dinuck\xFD \u017Earg\xF3n",
  "cho": "\u010Dokt\u010Dina",
  "chp": "\u010Dipevaj\u010Dina",
  "chr": "\u010Derok\xED",
  "chy": "\u010Dejen\u010Dina",
  "ckb": "kurd\u010Dina (sor\xE1n\xED)",
  "co": "korzi\u010Dtina",
  "cop": "kopt\u010Dina",
  "cr": "kr\xED",
  "crh": "krymsk\xE1 tat\xE1r\u010Dina",
  "crs": "seychelsk\xE1 kreol\u010Dina",
  "cs": "\u010De\u0161tina",
  "csb": "ka\u0161ub\u010Dina",
  "cu": "cirkevn\xE1 slovan\u010Dina",
  "cv": "\u010Duva\u0161tina",
  "cy": "wale\u0161tina",
  "da": "d\xE1n\u010Dina",
  "dak": "dakot\u010Dina",
  "dar": "dargin\u010Dina",
  "dav": "taita",
  "de": "nem\u010Dina",
  "de-AT": "nem\u010Dina (rak\xFAska)",
  "de-CH": "nem\u010Dina (\u0161vaj\u010Diarska spisovn\xE1)",
  "del": "delawar\u010Dina",
  "den": "slav\xE9",
  "dgr": "dogrib\u010Dina",
  "din": "dink\u010Dina",
  "dje": "zarma",
  "doi": "d\xF3gr\xED",
  "dsb": "dolnolu\u017Eick\xE1 srb\u010Dina",
  "dua": "duala",
  "dum": "stredn\xE1 holand\u010Dina",
  "dv": "maldiv\u010Dina",
  "dyo": "jola-fonyi",
  "dyu": "\u010Fula",
  "dz": "dzongkha",
  "dzg": "dazaga",
  "ebu": "embu",
  "ee": "ewe\u0161tina",
  "efi": "efik",
  "egy": "staroegypt\u010Dina",
  "eka": "ekad\u017Euk",
  "el": "gr\xE9\u010Dtina",
  "elx": "elam\u010Dina",
  "en": "angli\u010Dtina",
  "en-AU": "angli\u010Dtina (austr\xE1lska)",
  "en-CA": "angli\u010Dtina (kanadsk\xE1)",
  "en-GB": "angli\u010Dtina (britsk\xE1)",
  "en-US": "angli\u010Dtina (americk\xE1)",
  "enm": "stredn\xE1 angli\u010Dtina",
  "eo": "esperanto",
  "es": "\u0161paniel\u010Dina",
  "es-419": "\u0161paniel\u010Dina (latinskoamerick\xE1)",
  "es-ES": "\u0161paniel\u010Dina (eur\xF3pska)",
  "es-MX": "\u0161paniel\u010Dina (mexick\xE1)",
  "et": "est\xF3n\u010Dina",
  "eu": "baski\u010Dtina",
  "ewo": "ewondo",
  "fa": "perz\u0161tina",
  "fa-AF": "dar\xEDj\u010Dina",
  "fan": "fang\u010Dina",
  "fat": "fanti",
  "ff": "fulb\u010Dina",
  "fi": "f\xEDn\u010Dina",
  "fil": "filip\xEDn\u010Dina",
  "fj": "fid\u017Eij\u010Dina",
  "fo": "faer\u010Dina",
  "fon": "fon\u010Dina",
  "fr": "franc\xFAz\u0161tina",
  "fr-CA": "franc\xFAz\u0161tina (kanadsk\xE1)",
  "fr-CH": "franc\xFAz\u0161tina (\u0161vaj\u010Diarska)",
  "frc": "franc\xFAz\u0161tina (Cajun)",
  "frm": "stredn\xE1 franc\xFAz\u0161tina",
  "fro": "star\xE1 franc\xFAz\u0161tina",
  "frr": "severn\xE1 fr\xEDz\u0161tina",
  "frs": "v\xFDchodofr\xEDz\u0161tina",
  "fur": "friul\u010Dina",
  "fy": "z\xE1padn\xE1 fr\xEDz\u0161tina",
  "ga": "\xEDr\u010Dina",
  "gaa": "ga",
  "gag": "gagauz\u0161tina",
  "gay": "gayo",
  "gba": "gbaja",
  "gd": "\u0161k\xF3tska gael\u010Dina",
  "gez": "eti\xF3p\u010Dina",
  "gil": "kiribat\u010Dina",
  "gl": "gal\xEDcij\u010Dina",
  "gmh": "stredn\xE1 horn\xE1 nem\u010Dina",
  "gn": "guaran\xEDj\u010Dina",
  "goh": "star\xE1 horn\xE1 nem\u010Dina",
  "gon": "g\xF3nd\u010Dina",
  "gor": "gorontalo",
  "got": "g\xF3t\u010Dina",
  "grb": "grebo",
  "grc": "starogr\xE9\u010Dtina",
  "gsw": "nem\u010Dina (\u0161vaj\u010Diarska)",
  "gu": "gud\u017Ear\xE1t\u010Dina",
  "guz": "gusii",
  "gv": "man\u010Dina",
  "gwi": "ku\u010Din\u010Dina",
  "ha": "hau\u0161tina",
  "hai": "haida",
  "haw": "havaj\u010Dina",
  "he": "hebrej\u010Dina",
  "hi": "hind\u010Dina",
  "hil": "hiligajnon\u010Dina",
  "hit": "chetit\u010Dina",
  "hmn": "hmong\u010Dina",
  "ho": "hiri motu",
  "hr": "chorv\xE1t\u010Dina",
  "hsb": "hornolu\u017Eick\xE1 srb\u010Dina",
  "ht": "haitsk\xE1 kreol\u010Dina",
  "hu": "ma\u010Far\u010Dina",
  "hup": "hup\u010Dina",
  "hy": "arm\xE9n\u010Dina",
  "hz": "herero",
  "ia": "interlingua",
  "iba": "iban\u010Dina",
  "ibb": "ibibio",
  "id": "indon\xE9z\u0161tina",
  "ie": "interlingue",
  "ig": "igbo\u0161tina",
  "ii": "s\u2019\u010Dchuansk\xE1 iov\u010Dina",
  "ik": "inupik",
  "ilo": "ilok\xE1n\u010Dina",
  "inh": "ingu\u0161tina",
  "io": "ido",
  "is": "island\u010Dina",
  "it": "talian\u010Dina",
  "iu": "inuktitut",
  "ja": "japon\u010Dina",
  "jbo": "lojban",
  "jgo": "ngomba",
  "jmc": "ma\u0161ame",
  "jpr": "\u017Eidovsk\xE1 perz\u0161tina",
  "jrb": "\u017Eidovsk\xE1 arab\u010Dina",
  "jv": "j\xE1v\u010Dina",
  "ka": "gruz\xEDn\u010Dina",
  "kaa": "karakalpa\u010Dtina",
  "kab": "kabyl\u010Dina",
  "kac": "ka\u010Djin\u010Dina",
  "kaj": "jju",
  "kam": "kamba",
  "kaw": "kawi",
  "kbd": "kabard\u010Dina",
  "kbl": "kanembu",
  "kcg": "tyap",
  "kde": "makonde",
  "kea": "kapverd\u010Dina",
  "kfo": "koro",
  "kg": "kong\u010Dina",
  "kgp": "kgp",
  "kha": "khasij\u010Dina",
  "kho": "chotan\u010Dina",
  "khq": "z\xE1padn\xE1 songhaj\u010Dina",
  "ki": "kikuj\u010Dina",
  "kj": "kua\u0148ama",
  "kk": "kaza\u0161tina",
  "kkj": "kako",
  "kl": "gr\xF3n\u010Dina",
  "kln": "kalend\u017Ein",
  "km": "khm\xE9r\u010Dina",
  "kmb": "kimbundu",
  "kn": "kannad\u010Dina",
  "ko": "k\xF3rej\u010Dina",
  "koi": "komi-permia\u010Dtina",
  "kok": "konk\xE1n\u010Dina",
  "kos": "kusaie",
  "kpe": "kpelle",
  "kr": "kanurij\u010Dina",
  "krc": "kara\u010Dajevsko-balkar\u010Dina",
  "krl": "karel\u010Dina",
  "kru": "kuruch\u010Dina",
  "ks": "ka\u0161m\xEDr\u010Dina",
  "ksb": "\u0161ambala",
  "ksf": "bafia",
  "ksh": "kol\xEDn\u010Dina",
  "ku": "kurd\u010Dina",
  "kum": "kumy\u010Dtina",
  "kut": "kutenaj\u010Dina",
  "kv": "komij\u010Dina",
  "kw": "korn\u010Dina",
  "ky": "kirgiz\u0161tina",
  "la": "latin\u010Dina",
  "lad": "\u017Eidovsk\xE1 \u0161paniel\u010Dina",
  "lag": "langi",
  "lah": "lahand\u010Dina",
  "lam": "lamba",
  "lb": "luxembur\u010Dina",
  "lez": "lezgin\u010Dina",
  "lg": "gand\u010Dina",
  "li": "limbur\u010Dina",
  "lij": "lij",
  "lkt": "lakot\u010Dina",
  "ln": "lingal\u010Dina",
  "lo": "lao\u0161tina",
  "lol": "mongo",
  "lou": "kreol\u010Dina (Louisiana)",
  "loz": "lozi",
  "lrc": "severn\xE9 luri",
  "lt": "litov\u010Dina",
  "lu": "lub\u010Dina (katan\u017Esk\xE1)",
  "lua": "lub\u010Dina (lulu\xE1nska)",
  "lui": "luise\u0148o",
  "lun": "lunda",
  "luo": "luo",
  "lus": "mizor\xE1m\u010Dina",
  "luy": "luhja",
  "lv": "loty\u0161tina",
  "mad": "madur\u010Dina",
  "maf": "mafa",
  "mag": "magadh\u010Dina",
  "mai": "maithil\u010Dina",
  "mak": "makasar\u010Dina",
  "man": "mandingo",
  "mas": "masaj\u010Dina",
  "mde": "maba",
  "mdf": "mok\u0161ian\u010Dina",
  "mdr": "mandar\u010Dina",
  "men": "mendej\u010Dina",
  "mer": "meru",
  "mfe": "maur\xEDcijsk\xE1 kreol\u010Dina",
  "mg": "malga\u0161tina",
  "mga": "stredn\xE1 \xEDr\u010Dina",
  "mgh": "makua-meetto",
  "mgo": "meta\u2019",
  "mh": "marshall\u010Dina",
  "mi": "maorij\u010Dina",
  "mic": "mikmak\u010Dina",
  "min": "minangkabau\u010Dina",
  "mk": "maced\xF3n\u010Dina",
  "ml": "malaj\xE1lam\u010Dina",
  "mn": "mongol\u010Dina",
  "mnc": "mand\u017Eu\u0161tina",
  "mni": "man\xEDpur\u010Dina",
  "moh": "mohawk\u010Dina",
  "mos": "mossi",
  "mr": "mar\xE1th\u010Dina",
  "ms": "malaj\u010Dina",
  "mt": "malt\u010Dina",
  "mua": "mundang",
  "mul": "viacer\xE9 jazyky",
  "mus": "kr\xEDk\u010Dina",
  "mwl": "mirand\u010Dina",
  "mwr": "marwari",
  "my": "barm\u010Dina",
  "mye": "myene",
  "myv": "erzjan\u010Dina",
  "mzn": "m\xE1zandar\xE1n\u010Dina",
  "na": "nauru\u0161tina",
  "nap": "neapol\u010Dina",
  "naq": "nama",
  "nb": "n\xF3r\u010Dina (bokmal)",
  "nd": "ndebel\u010Dina (severn\xE1)",
  "nds": "doln\xE1 nem\u010Dina",
  "nds-NL": "doln\xE1 sa\u0161tina",
  "ne": "nep\xE1l\u010Dina",
  "new": "nev\xE1r\u010Dina",
  "ng": "ndonga",
  "nia": "nias\xE1n\u010Dina",
  "niu": "niue\u0161tina",
  "nl": "holand\u010Dina",
  "nl-BE": "fl\xE1m\u010Dina",
  "nmg": "kwasio",
  "nn": "n\xF3r\u010Dina (nynorsk)",
  "nnh": "ngiemboon",
  "no": "n\xF3r\u010Dina",
  "nog": "nogaj\u010Dina",
  "non": "star\xE1 n\xF3r\u010Dina",
  "nqo": "n\u2019ko",
  "nr": "ndebel\u010Dina (ju\u017En\xE1)",
  "nso": "soth\u010Dina (severn\xE1)",
  "nus": "nuer",
  "nv": "navaho",
  "nwc": "klasick\xE1 nev\xE1r\u010Dina",
  "ny": "\u0148and\u017Ea",
  "nym": "\u0148amwezi",
  "nyn": "\u0148ankole",
  "nyo": "\u0148oro",
  "nzi": "nzima",
  "oc": "okcit\xE1n\u010Dina",
  "oj": "od\u017Eibva",
  "om": "orom\u010Dina",
  "or": "ur\xEDj\u010Dina",
  "os": "oset\u010Dina",
  "osa": "osed\u017E\u0161tina",
  "ota": "osmansk\xE1 ture\u010Dtina",
  "pa": "pand\u017E\xE1b\u010Dina",
  "pag": "pangasinan\u010Dina",
  "pal": "pahlav\xED",
  "pam": "kapampangan\u010Dina",
  "pap": "papiamento",
  "pau": "palau\u010Dina",
  "pcm": "nigerijsk\xFD pid\u017Ein",
  "peo": "star\xE1 perz\u0161tina",
  "phn": "feni\u010Dtina",
  "pi": "p\xE1l\xED",
  "pl": "po\u013E\u0161tina",
  "pon": "pohnpei\u0161tina",
  "prg": "pru\u0161tina",
  "pro": "star\xE1 okcit\xE1n\u010Dina",
  "ps": "pa\u0161t\u010Dina",
  "pt": "portugal\u010Dina",
  "pt-BR": "portugal\u010Dina (braz\xEDlska)",
  "pt-PT": "portugal\u010Dina (eur\xF3pska)",
  "qu": "ke\u010Du\xE1n\u010Dina",
  "quc": "quich\xE9",
  "raj": "rad\u017Eastan\u010Dina",
  "rap": "rapanuj\u010Dina",
  "rar": "rarotongsk\xE1 maorij\u010Dina",
  "rhg": "rohing\u010Dina",
  "rm": "r\xE9torom\xE1n\u010Dina",
  "rn": "rund\u010Dina",
  "ro": "rumun\u010Dina",
  "ro-MD": "moldav\u010Dina",
  "rof": "rombo",
  "rom": "r\xF3m\u010Dina",
  "ru": "ru\u0161tina",
  "rup": "arumun\u010Dina",
  "rw": "rwand\u010Dina",
  "rwk": "rwa",
  "sa": "sanskrit",
  "sad": "sandawe\u0161tina",
  "sah": "jakut\u010Dina",
  "sam": "samarit\xE1nska aramej\u010Dina",
  "saq": "samburu",
  "sas": "sasa\u010Dtina",
  "sat": "santal\u010Dina",
  "sba": "ngambay",
  "sbp": "sangu",
  "sc": "sard\xEDn\u010Dina",
  "scn": "sic\xEDl\u010Dina",
  "sco": "\u0161k\xF3t\u010Dina",
  "sd": "sindh\u010Dina",
  "sdh": "ju\u017En\xE1 kurd\u010Dina",
  "se": "saam\u010Dina (severn\xE1)",
  "see": "senek\u010Dina",
  "seh": "sena",
  "sel": "selkup\u010Dina",
  "ses": "koyraboro senni",
  "sg": "sango",
  "sga": "star\xE1 \xEDr\u010Dina",
  "sh": "srbochorv\xE1t\u010Dina",
  "shi": "tachelhit",
  "shn": "\u0161an\u010Dina",
  "shu": "\u010Dadsk\xE1 arab\u010Dina",
  "si": "sinhal\u010Dina",
  "sid": "sidamo",
  "sk": "sloven\u010Dina",
  "sl": "slovin\u010Dina",
  "sm": "samoj\u010Dina",
  "sma": "saam\u010Dina (ju\u017En\xE1)",
  "smj": "saam\u010Dina (lulsk\xE1)",
  "smn": "saam\u010Dina (inarijsk\xE1)",
  "sms": "saam\u010Dina (skoltsk\xE1)",
  "sn": "\u0161on\u010Dina",
  "snk": "soninke",
  "so": "som\xE1l\u010Dina",
  "sog": "sogdij\u010Dina",
  "sq": "alb\xE1n\u010Dina",
  "sr": "srb\u010Dina",
  "srn": "surinam\u010Dina",
  "srr": "serer\u010Dina",
  "ss": "svazij\u010Dina",
  "ssy": "saho",
  "st": "soth\u010Dina (ju\u017En\xE1)",
  "su": "sund\u010Dina",
  "suk": "sukuma",
  "sus": "susu",
  "sux": "sumer\u010Dina",
  "sv": "\u0161v\xE9d\u010Dina",
  "sw": "swahil\u010Dina",
  "sw-CD": "svahil\u010Dina (kon\u017Esk\xE1)",
  "swb": "komor\u010Dina",
  "syc": "s\xFDr\u010Dina (klasick\xE1)",
  "syr": "s\xFDr\u010Dina",
  "ta": "tamil\u010Dina",
  "te": "telug\u010Dina",
  "tem": "temne",
  "teo": "teso",
  "ter": "ter\xEAna",
  "tet": "tetum\u010Dina",
  "tg": "tad\u017Ei\u010Dtina",
  "th": "thaj\u010Dina",
  "ti": "tigri\u0148a",
  "tig": "tigrej\u010Dina",
  "tiv": "tiv",
  "tk": "turkm\xE9n\u010Dina",
  "tkl": "tokelau\u0161tina",
  "tl": "tagal\u010Dina",
  "tlh": "kling\xF3n\u010Dina",
  "tli": "tlingit\u010Dina",
  "tmh": "tuareg\u010Dina",
  "tn": "tswan\u010Dina",
  "to": "tong\u010Dina",
  "tog": "\u0148asa tonga",
  "tpi": "novoguinejsk\xFD pid\u017Ein",
  "tr": "ture\u010Dtina",
  "trv": "taroko",
  "ts": "tsong\u010Dina",
  "tsi": "cim\u0161jan\u010Dina",
  "tt": "tat\xE1r\u010Dina",
  "tum": "tumbuka",
  "tvl": "tuval\u010Dina",
  "tw": "twi",
  "twq": "tasawaq",
  "ty": "tahit\u010Dina",
  "tyv": "tuvian\u010Dina",
  "tzm": "tamazight (stredomarock\xFD)",
  "udm": "udmurt\u010Dina",
  "ug": "ujgur\u010Dina",
  "uga": "ugarit\u010Dina",
  "uk": "ukrajin\u010Dina",
  "umb": "umbundu",
  "und": "nezn\xE1my jazyk",
  "ur": "urd\u010Dina",
  "uz": "uzbe\u010Dtina",
  "vai": "vai",
  "ve": "vend\u010Dina",
  "vi": "vietnam\u010Dina",
  "vo": "volap\xFCk",
  "vot": "vod\u010Dina",
  "vun": "vunjo",
  "wa": "val\xF3n\u010Dina",
  "wae": "walser\u010Dina",
  "wal": "walam\u010Dina",
  "war": "waray",
  "was": "washo",
  "wbp": "warlpiri",
  "wo": "wolof\u010Dina",
  "xal": "kalmy\u010Dtina",
  "xh": "xho\u0161tina",
  "xog": "soga",
  "yao": "jao",
  "yap": "jap\u010Dina",
  "yav": "jangben",
  "ybb": "yemba",
  "yi": "jidi\u0161",
  "yo": "jorub\u010Dina",
  "yrl": "yrl",
  "yue": "kanton\u010Dina",
  "za": "\u010Duang\u010Dina",
  "zap": "zapot\xE9\u010Dtina",
  "zbl": "syst\xE9m Bliss",
  "zen": "zenaga",
  "zgh": "tuareg\u010Dina (marock\xE1 \u0161tandardn\xE1)",
  "zh": "\u010D\xEDn\u0161tina",
  "zh-Hans": "\u010D\xEDn\u0161tina (zjednodu\u0161en\xE1)",
  "zh-Hant": "\u010D\xEDn\u0161tina (tradi\u010Dn\xE1)",
  "zu": "zulu\u0161tina",
  "zun": "zuni\u0161tina",
  "zxx": "bez jazykov\xE9ho obsahu",
  "zza": "zaza"
};

// src/l10n/locale/sq.ts
var sq_default = {
  "aa": "afarisht",
  "ab": "abkazisht",
  "ace": "akinezisht",
  "ada": "andangmeisht",
  "ady": "adigisht",
  "af": "afrikanisht",
  "agq": "agemisht",
  "ain": "ajnuisht",
  "ak": "akanisht",
  "ale": "aleutisht",
  "alt": "altaishte jugore",
  "am": "amarisht",
  "an": "aragonezisht",
  "anp": "angikisht",
  "ar": "arabisht",
  "ar-001": "arabishte standarde moderne",
  "arn": "mapu\xE7isht",
  "arp": "arapahoisht",
  "as": "asamezisht",
  "asa": "asuisht",
  "ast": "asturisht",
  "av": "avarikisht",
  "awa": "auadhisht",
  "ay": "ajmarisht",
  "az": "azerbajxhanisht",
  "ba": "bashkirisht",
  "ban": "balinezisht",
  "bas": "basaisht",
  "be": "bjellorusisht",
  "bem": "bembaisht",
  "bez": "benaisht",
  "bg": "bullgarisht",
  "bgn": "balokishte per\xEBndimore",
  "bho": "boxhpurisht",
  "bi": "bislamisht",
  "bin": "binisht",
  "bla": "siksikaisht",
  "bm": "bambarisht",
  "bn": "bengalisht",
  "bo": "tibetisht",
  "br": "bretonisht",
  "brx": "bodoisht",
  "bs": "boshnjakisht",
  "bug": "buginezisht",
  "byn": "blinisht",
  "ca": "katalonisht",
  "ccp": "\xE7akmaisht",
  "ce": "\xE7e\xE7enisht",
  "ceb": "sebuanisht",
  "cgg": "\xE7igisht",
  "ch": "kamoroisht",
  "chk": "\xE7ukezisht",
  "chm": "marisht",
  "cho": "\xE7oktauisht",
  "chr": "\xE7erokisht",
  "chy": "\xE7ejenisht",
  "ckb": "kurdishte qendrore",
  "co": "korsikisht",
  "crs": "fr\xEBngjishte kreole seselve",
  "cs": "\xE7ekisht",
  "cu": "sllavishte kishtare",
  "cv": "\xE7uvashisht",
  "cy": "uellsisht",
  "da": "danisht",
  "dak": "dakotisht",
  "dar": "darguaisht",
  "dav": "tajtaisht",
  "de": "gjermanisht",
  "de-AT": "gjermanishte austriake",
  "de-CH": "gjermanishte zvicerane (dialekti i Alpeve)",
  "dgr": "dogribisht",
  "dje": "zarmaisht",
  "doi": "dogrisht",
  "dsb": "sorbishte e poshtme",
  "dua": "dualaisht",
  "dv": "divehisht",
  "dyo": "xhulafonjisht",
  "dz": "xhongaisht",
  "dzg": "dazagauisht",
  "ebu": "embuisht",
  "ee": "eveisht",
  "efi": "efikisht",
  "eka": "ekajukisht",
  "el": "greqisht",
  "en": "anglisht",
  "en-AU": "anglishte australiane",
  "en-CA": "anglishte kanadeze",
  "en-GB": "anglishte britanike",
  "en-US": "anglishte amerikane",
  "eo": "esperanto",
  "es": "spanjisht",
  "es-419": "spanjishte amerikano-latine",
  "es-ES": "spanjishte evropiane",
  "es-MX": "spanjishte meksikane",
  "et": "estonisht",
  "eu": "baskisht",
  "ewo": "euondoisht",
  "fa": "persisht",
  "fa-AF": "darisht",
  "ff": "fulaisht",
  "fi": "finlandisht",
  "fil": "filipinisht",
  "fj": "fixhianisht",
  "fo": "faroisht",
  "fon": "fonisht",
  "fr": "fr\xEBngjisht",
  "fr-CA": "fr\xEBngjishte kanadeze",
  "fr-CH": "fr\xEBngjishte zvicerane",
  "frc": "fr\xEBngjishte kajune",
  "fur": "friulianisht",
  "fy": "frizianishte per\xEBndimore",
  "ga": "irlandisht",
  "gaa": "gaisht",
  "gag": "gagauzisht",
  "gd": "galishte skoceze",
  "gez": "gizisht",
  "gil": "gilbertazisht",
  "gl": "galicisht",
  "gn": "guaranisht",
  "gor": "gorontaloisht",
  "gsw": "gjermanishte zvicerane",
  "gu": "guxharatisht",
  "guz": "gusisht",
  "gv": "manksisht",
  "gwi": "gui\xE7inisht",
  "ha": "hausisht",
  "haw": "havaisht",
  "he": "hebraisht",
  "hi": "indisht",
  "hil": "hiligajnonisht",
  "hmn": "hmongisht",
  "hr": "kroatisht",
  "hsb": "sorbishte e sip\xEBrme",
  "ht": "haitisht",
  "hu": "hungarisht",
  "hup": "hupaisht",
  "hy": "armenisht",
  "hz": "hereroisht",
  "ia": "interlingua",
  "iba": "ibanisht",
  "ibb": "ibibioisht",
  "id": "indonezisht",
  "ie": "gjuha oksidentale",
  "ig": "igboisht",
  "ii": "sishuanisht",
  "ilo": "ilokoisht",
  "inh": "ingushisht",
  "io": "idoisht",
  "is": "islandisht",
  "it": "italisht",
  "iu": "inuktitutisht",
  "ja": "japonisht",
  "jbo": "lojbanisht",
  "jgo": "ngombisht",
  "jmc": "ma\xE7amisht",
  "jv": "javanisht",
  "ka": "gjeorgjisht",
  "kab": "kabilisht",
  "kac": "ka\xE7inisht",
  "kaj": "kajeisht",
  "kam": "kambaisht",
  "kbd": "kabardianisht",
  "kcg": "tjapisht",
  "kde": "makondisht",
  "kea": "kreolishte e Kepit t\xEB Gjelb\xEBr",
  "kfo": "koroisht",
  "kgp": "kaingangisht",
  "kha": "kasisht",
  "khq": "kojra\xE7inisht",
  "ki": "kikujuisht",
  "kj": "kuanjamaisht",
  "kk": "kazakisht",
  "kkj": "kakoisht",
  "kl": "kalalisutisht",
  "kln": "kalenxhinisht",
  "km": "kmerisht",
  "kmb": "kimbunduisht",
  "kn": "kanadisht",
  "ko": "koreanisht",
  "koi": "komi-parmjakisht",
  "kok": "konkanisht",
  "kpe": "kpeleisht",
  "kr": "kanurisht",
  "krc": "kara\xE7aj-balkarisht",
  "krl": "karelianisht",
  "kru": "kurukisht",
  "ks": "kashmirisht",
  "ksb": "shambalisht",
  "ksf": "bafianisht",
  "ksh": "k\xEBlnisht",
  "ku": "kurdisht",
  "kum": "kumikisht",
  "kv": "komisht",
  "kw": "kornisht",
  "ky": "kirgizisht",
  "la": "latinisht",
  "lad": "ladinoisht",
  "lag": "langisht",
  "lb": "luksemburgisht",
  "lez": "lezgianisht",
  "lg": "gandaisht",
  "li": "limburgisht",
  "lij": "ligurianisht",
  "lkt": "lakotisht",
  "ln": "lingalisht",
  "lo": "laosisht",
  "lou": "kreole e Luizian\xEBs",
  "loz": "lozisht",
  "lrc": "lurishte veriore",
  "lt": "lituanisht",
  "lu": "luba-katangaisht",
  "lua": "luba-luluaisht",
  "lun": "lundaisht",
  "luo": "luoisht",
  "lus": "mizoisht",
  "luy": "lujaisht",
  "lv": "letonisht",
  "mad": "madurezisht",
  "mag": "magaisht",
  "mai": "maitilisht",
  "mak": "makasarisht",
  "mas": "masaisht",
  "mdf": "mokshaisht",
  "men": "mendisht",
  "mer": "meruisht",
  "mfe": "morisjenisht",
  "mg": "madagaskarisht",
  "mgh": "makua-mitoisht",
  "mgo": "metaisht",
  "mh": "marshallisht",
  "mi": "maorisht",
  "mic": "mikmakisht",
  "min": "minangkabauisht",
  "mk": "maqedonisht",
  "ml": "malajalamisht",
  "mn": "mongolisht",
  "mni": "manipurisht",
  "moh": "mohokisht",
  "mos": "mosisht",
  "mr": "maratisht",
  "ms": "malajisht",
  "mt": "maltisht",
  "mua": "mundangisht",
  "mul": "gjuh\xEB t\xEB shum\xEBfishta",
  "mus": "krikisht",
  "mwl": "mirandisht",
  "my": "birmanisht",
  "myv": "erzjaisht",
  "mzn": "mazanderanisht",
  "na": "nauruisht",
  "nap": "napoletanisht",
  "naq": "namaisht",
  "nb": "norvegjishte letrare",
  "nd": "ndebelishte veriore",
  "nds": "gjermanishte e vendeve t\xEB ul\xEBta",
  "nds-NL": "gjermanishte saksone e vendeve t\xEB ul\xEBta",
  "ne": "nepalisht",
  "new": "neuarisht",
  "ng": "ndongaisht",
  "nia": "niasisht",
  "niu": "niueanisht",
  "nl": "holandisht",
  "nl-BE": "flamandisht",
  "nmg": "kuasisht",
  "nn": "norvegjishte nynorsk",
  "nnh": "ngiembunisht",
  "no": "norvegjisht",
  "nog": "nogajisht",
  "nqo": "nkoisht",
  "nr": "ndebelishte jugore",
  "nso": "sotoishte veriore",
  "nus": "nuerisht",
  "nv": "navahoisht",
  "ny": "nianjisht",
  "nyn": "niankolisht",
  "oc": "oksitanisht",
  "om": "oromoisht",
  "or": "odisht",
  "os": "osetisht",
  "pa": "punxhabisht",
  "pag": "pangasinanisht",
  "pam": "pampangaisht",
  "pap": "papiamentisht",
  "pau": "paluanisht",
  "pcm": "pixhinishte nigeriane",
  "pl": "polonisht",
  "prg": "prusisht",
  "ps": "pashtoisht",
  "pt": "portugalisht",
  "pt-BR": "portugalishte braziliane",
  "pt-PT": "portugalishte evropiane",
  "qu": "ke\xE7uaisht",
  "quc": "ki\xE7eisht",
  "rap": "rapanuisht",
  "rar": "rarontonganisht",
  "rhg": "rohingiaisht",
  "rm": "retoromanisht",
  "rn": "rundisht",
  "ro": "rumanisht",
  "ro-MD": "moldavisht",
  "rof": "romboisht",
  "ru": "rusisht",
  "rup": "vllahisht",
  "rw": "kiniaruandisht",
  "rwk": "ruaisht",
  "sa": "sanskritisht",
  "sad": "sandauisht",
  "sah": "sakaisht",
  "saq": "samburisht",
  "sat": "santalisht",
  "sba": "ngambajisht",
  "sbp": "sanguisht",
  "sc": "sardenjisht",
  "scn": "si\xE7ilianisht",
  "sco": "skotisht",
  "sd": "sindisht",
  "sdh": "kurdishte jugore",
  "se": "samishte veriore",
  "seh": "senaisht",
  "ses": "senishte kojrabore",
  "sg": "sangoisht",
  "sh": "serbo-kroatisht",
  "shi": "ta\xE7elitisht",
  "shn": "shanisht",
  "si": "sinhalisht",
  "sk": "sllovakisht",
  "sl": "sllovenisht",
  "sm": "samoanisht",
  "sma": "samishte jugore",
  "smj": "samishte lule",
  "smn": "samishte inari",
  "sms": "samishte skolti",
  "sn": "shonisht",
  "snk": "soninkisht",
  "so": "somalisht",
  "sq": "shqip",
  "sr": "serbisht",
  "srn": "srananisht (sranantongoisht)",
  "ss": "suatisht",
  "ssy": "sahoisht",
  "st": "sotoishte jugore",
  "su": "sundanisht",
  "suk": "sukumaisht",
  "sv": "suedisht",
  "sw": "suahilisht",
  "sw-CD": "suahilishte kongoleze",
  "swb": "kamorianisht",
  "syr": "siriakisht",
  "ta": "tamilisht",
  "te": "teluguisht",
  "tem": "timneisht",
  "teo": "tesoisht",
  "tet": "tetumisht",
  "tg": "taxhikisht",
  "th": "tajlandisht",
  "ti": "tigrinjaisht",
  "tig": "tigreisht",
  "tk": "turkmenisht",
  "tlh": "klingonisht",
  "tn": "cuanaisht",
  "to": "tonganisht",
  "tpi": "pisinishte toku",
  "tr": "turqisht",
  "trv": "torokoisht",
  "ts": "congaisht",
  "tt": "tatarisht",
  "tum": "tumbukaisht",
  "tvl": "tuvaluisht",
  "tw": "tuisht",
  "twq": "tasavakisht",
  "ty": "tahitisht",
  "tyv": "tuvinianisht",
  "tzm": "tamazajtisht e Atlasit Qendror",
  "udm": "udmurtisht",
  "ug": "ujgurisht",
  "uk": "ukrainisht",
  "umb": "umbunduisht",
  "und": "E panjohur",
  "ur": "urduisht",
  "uz": "uzbekisht",
  "vai": "vaisht",
  "ve": "vendaisht",
  "vi": "vietnamisht",
  "vo": "volapykisht",
  "vun": "vunxhoisht",
  "wa": "ualunisht",
  "wae": "ualserisht",
  "wal": "ulajtaisht",
  "war": "uarajisht",
  "wbp": "uarlpirisht",
  "wo": "uolofisht",
  "xal": "kalmikisht",
  "xh": "xhosaisht",
  "xog": "sogisht",
  "yav": "jangbenisht",
  "ybb": "jembaisht",
  "yi": "jidisht",
  "yo": "jorubaisht",
  "yrl": "yrl",
  "yue": "kantonezisht",
  "zgh": "tamaziatishte standarde marokene",
  "zh": "kinezisht",
  "zh-Hans": "kinezishte e thjeshtuar",
  "zh-Hant": "kinezishte tradicionale",
  "zu": "zuluisht",
  "zun": "zunisht",
  "zxx": "nuk ka p\xEBrmbajtje gjuh\xEBsore",
  "zza": "zazaisht"
};

// src/l10n/locale/sr.ts
var sr_default = {
  "aa": "\u0430\u0444\u0430\u0440\u0441\u043A\u0438",
  "ab": "\u0430\u0431\u0445\u0430\u0441\u043A\u0438",
  "ace": "\u0430\u0446\u0435\u0448\u043A\u0438",
  "ach": "\u0430\u043A\u043E\u043B\u0438",
  "ada": "\u0430\u0434\u0430\u043D\u0433\u043C\u0435",
  "ady": "\u0430\u0434\u0438\u0433\u0435\u0458\u0441\u043A\u0438",
  "ae": "\u0430\u0432\u0435\u0441\u0442\u0430\u043D\u0441\u043A\u0438",
  "af": "\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441",
  "afh": "\u0430\u0444\u0440\u0438\u0445\u0438\u043B\u0438",
  "agq": "\u0430\u0433\u0435\u043C",
  "ain": "\u0430\u0438\u043D\u0443",
  "ak": "\u0430\u043A\u0430\u043D\u0441\u043A\u0438",
  "akk": "\u0430\u043A\u0430\u0434\u0438\u0458\u0441\u043A\u0438",
  "ale": "\u0430\u043B\u0435\u0443\u0442\u0441\u043A\u0438",
  "alt": "\u0458\u0443\u0436\u043D\u043E\u0430\u043B\u0442\u0430\u0458\u0441\u043A\u0438",
  "am": "\u0430\u043C\u0445\u0430\u0440\u0441\u043A\u0438",
  "an": "\u0430\u0440\u0430\u0433\u043E\u043D\u0441\u043A\u0438",
  "ang": "\u0441\u0442\u0430\u0440\u043E\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438",
  "anp": "\u0430\u043D\u0433\u0438\u043A\u0430",
  "ar": "\u0430\u0440\u0430\u043F\u0441\u043A\u0438",
  "ar-001": "\u0441\u0430\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0434\u043D\u0438 \u0430\u0440\u0430\u043F\u0441\u043A\u0438",
  "arc": "\u0430\u0440\u0430\u043C\u0435\u0458\u0441\u043A\u0438",
  "arn": "\u043C\u0430\u043F\u0443\u0447\u0435",
  "arp": "\u0430\u0440\u0430\u043F\u0430\u0445\u043E",
  "arw": "\u0430\u0440\u0430\u0432\u0430\u0447\u043A\u0438",
  "as": "\u0430\u0441\u0430\u043C\u0441\u043A\u0438",
  "asa": "\u0430\u0441\u0443",
  "ast": "\u0430\u0441\u0442\u0443\u0440\u0438\u0458\u0441\u043A\u0438",
  "av": "\u0430\u0432\u0430\u0440\u0441\u043A\u0438",
  "awa": "\u0430\u0432\u0430\u0434\u0438",
  "ay": "\u0430\u0458\u043C\u0430\u0440\u0430",
  "az": "\u0430\u0437\u0435\u0440\u0431\u0435\u0458\u045F\u0430\u043D\u0441\u043A\u0438",
  "ba": "\u0431\u0430\u0448\u043A\u0438\u0440\u0441\u043A\u0438",
  "bal": "\u0431\u0435\u043B\u0443\u0447\u043A\u0438",
  "ban": "\u0431\u0430\u043B\u0438\u0458\u0441\u043A\u0438",
  "bas": "\u0431\u0430\u0441\u0430",
  "be": "\u0431\u0435\u043B\u043E\u0440\u0443\u0441\u043A\u0438",
  "bej": "\u0431\u0435\u045F\u0430",
  "bem": "\u0431\u0435\u043C\u0431\u0430",
  "bez": "\u0431\u0435\u043D\u0430",
  "bg": "\u0431\u0443\u0433\u0430\u0440\u0441\u043A\u0438",
  "bgn": "\u0437\u0430\u043F\u0430\u0434\u043D\u0438 \u0431\u0435\u043B\u0443\u0447\u043A\u0438",
  "bho": "\u0431\u043E\u045F\u043F\u0443\u0440\u0438",
  "bi": "\u0431\u0438\u0441\u043B\u0430\u043C\u0430",
  "bik": "\u0431\u0438\u043A\u043E\u043B",
  "bin": "\u0431\u0438\u043D\u0438",
  "bla": "\u0441\u0438\u0441\u0438\u043A\u0430",
  "bm": "\u0431\u0430\u043C\u0431\u0430\u0440\u0430",
  "bn": "\u0431\u0435\u043D\u0433\u0430\u043B\u0441\u043A\u0438",
  "bo": "\u0442\u0438\u0431\u0435\u0442\u0430\u043D\u0441\u043A\u0438",
  "br": "\u0431\u0440\u0435\u0442\u043E\u043D\u0441\u043A\u0438",
  "bra": "\u0431\u0440\u0430\u0458",
  "brx": "\u0431\u043E\u0434\u043E",
  "bs": "\u0431\u043E\u0441\u0430\u043D\u0441\u043A\u0438",
  "bua": "\u0431\u0443\u0440\u0458\u0430\u0442\u0441\u043A\u0438",
  "bug": "\u0431\u0443\u0433\u0438\u0458\u0441\u043A\u0438",
  "byn": "\u0431\u043B\u0438\u043D\u0441\u043A\u0438",
  "ca": "\u043A\u0430\u0442\u0430\u043B\u043E\u043D\u0441\u043A\u0438",
  "cad": "\u043A\u0430\u0434\u043E",
  "car": "\u043A\u0430\u0440\u0438\u043F\u0441\u043A\u0438",
  "cch": "\u0430\u0442\u0441\u0430\u043C",
  "ccp": "\u0447\u0430\u043A\u043C\u0430",
  "ce": "\u0447\u0435\u0447\u0435\u043D\u0441\u043A\u0438",
  "ceb": "\u0441\u0435\u0431\u0443\u0430\u043D\u0441\u043A\u0438",
  "cgg": "\u0447\u0438\u0433\u0430",
  "ch": "\u0447\u0430\u043C\u043E\u0440\u043E",
  "chb": "\u0447\u0438\u043F\u0447\u0430",
  "chg": "\u0447\u0430\u0433\u0430\u0442\u0430\u0458",
  "chk": "\u0447\u0443\u0447\u043A\u0438",
  "chm": "\u043C\u0430\u0440\u0438",
  "chn": "\u0447\u0438\u043D\u0443\u0447\u043A\u0438",
  "cho": "\u0447\u043E\u043A\u0442\u0430\u0432\u0441\u043A\u0438",
  "chp": "\u0447\u0438\u043F\u0435\u0432\u0458\u0430\u043D\u0441\u043A\u0438",
  "chr": "\u0447\u0435\u0440\u043E\u043A\u0438",
  "chy": "\u0447\u0435\u0458\u0435\u043D\u0441\u043A\u0438",
  "ckb": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u0438 \u043A\u0443\u0440\u0434\u0441\u043A\u0438",
  "co": "\u043A\u043E\u0440\u0437\u0438\u043A\u0430\u043D\u0441\u043A\u0438",
  "cop": "\u043A\u043E\u043F\u0442\u0441\u043A\u0438",
  "cr": "\u043A\u0440\u0438",
  "crh": "\u043A\u0440\u0438\u043C\u0441\u043A\u043E\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438",
  "crs": "\u0441\u0435\u0458\u0448\u0435\u043B\u0441\u043A\u0438 \u043A\u0440\u0435\u043E\u043B\u0441\u043A\u0438 \u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438",
  "cs": "\u0447\u0435\u0448\u043A\u0438",
  "csb": "\u043A\u0430\u0448\u0443\u043F\u0441\u043A\u0438",
  "cu": "\u0446\u0440\u043A\u0432\u0435\u043D\u043E\u0441\u043B\u043E\u0432\u0435\u043D\u0441\u043A\u0438",
  "cv": "\u0447\u0443\u0432\u0430\u0448\u043A\u0438",
  "cy": "\u0432\u0435\u043B\u0448\u043A\u0438",
  "da": "\u0434\u0430\u043D\u0441\u043A\u0438",
  "dak": "\u0434\u0430\u043A\u043E\u0442\u0430",
  "dar": "\u0434\u0430\u0440\u0433\u0438\u043D\u0441\u043A\u0438",
  "dav": "\u0442\u0430\u0438\u0442\u0430",
  "de": "\u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "de-AT": "\u0430\u0443\u0441\u0442\u0440\u0438\u0458\u0441\u043A\u0438 \u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "de-CH": "\u0448\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0438 \u0432\u0438\u0441\u043E\u043A\u0438 \u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "del": "\u0434\u0435\u043B\u0430\u0432\u0435\u0440\u0441\u043A\u0438",
  "den": "\u0441\u043B\u0435\u0458\u0432\u0438",
  "dgr": "\u0434\u043E\u0433\u0440\u0438\u043F\u0441\u043A\u0438",
  "din": "\u0434\u0438\u043D\u043A\u0430",
  "dje": "\u0437\u0430\u0440\u043C\u0430",
  "doi": "\u0434\u043E\u0433\u0440\u0438",
  "dsb": "\u0434\u043E\u045A\u043E\u043B\u0443\u0436\u0438\u0447\u043A\u043E\u0441\u0440\u043F\u0441\u043A\u0438",
  "dua": "\u0434\u0443\u0430\u043B\u0430",
  "dum": "\u0441\u0440\u0435\u0434\u045A\u0435\u0445\u043E\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "dv": "\u043C\u0430\u043B\u0434\u0438\u0432\u0441\u043A\u0438",
  "dyo": "\u045F\u043E\u043B\u0430 \u0444\u043E\u045A\u0438",
  "dyu": "\u0452\u0443\u043B\u0430",
  "dz": "\u045F\u043E\u043D\u0433\u0430",
  "dzg": "\u0434\u0430\u0437\u0430\u0433\u0430",
  "ebu": "\u0435\u043C\u0431\u0443",
  "ee": "\u0435\u0432\u0435",
  "efi": "\u0435\u0444\u0438\u0447\u043A\u0438",
  "egy": "\u0441\u0442\u0430\u0440\u043E\u0435\u0433\u0438\u043F\u0430\u0442\u0441\u043A\u0438",
  "eka": "\u0435\u043A\u0430\u045F\u0443\u043A",
  "el": "\u0433\u0440\u0447\u043A\u0438",
  "elx": "\u0435\u043B\u0430\u043C\u0438\u0442\u0441\u043A\u0438",
  "en": "\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438",
  "en-AU": "\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438 (\u0410\u0443\u0441\u0442\u0440\u0430\u043B\u0438\u0458\u0430)",
  "en-CA": "\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438 (\u041A\u0430\u043D\u0430\u0434\u0430)",
  "en-GB": "\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438 (\u0412\u0435\u043B\u0438\u043A\u0430 \u0411\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0430)",
  "en-US": "\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438 (\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435)",
  "enm": "\u0441\u0440\u0435\u0434\u045A\u0435\u0435\u043D\u0433\u043B\u0435\u0441\u043A\u0438",
  "eo": "\u0435\u0441\u043F\u0435\u0440\u0430\u043D\u0442\u043E",
  "es": "\u0448\u043F\u0430\u043D\u0441\u043A\u0438",
  "es-419": "\u0448\u043F\u0430\u043D\u0441\u043A\u0438 (\u041B\u0430\u0442\u0438\u043D\u0441\u043A\u0430 \u0410\u043C\u0435\u0440\u0438\u043A\u0430)",
  "es-ES": "\u0448\u043F\u0430\u043D\u0441\u043A\u0438 (\u0415\u0432\u0440\u043E\u043F\u0430)",
  "es-MX": "\u0448\u043F\u0430\u043D\u0441\u043A\u0438 (\u041C\u0435\u043A\u0441\u0438\u043A\u043E)",
  "et": "\u0435\u0441\u0442\u043E\u043D\u0441\u043A\u0438",
  "eu": "\u0431\u0430\u0441\u043A\u0438\u0458\u0441\u043A\u0438",
  "ewo": "\u0435\u0432\u043E\u043D\u0434\u043E",
  "fa": "\u043F\u0435\u0440\u0441\u0438\u0458\u0441\u043A\u0438",
  "fa-AF": "\u0434\u0430\u0440\u0438",
  "fan": "\u0444\u0430\u043D\u0433",
  "fat": "\u0444\u0430\u043D\u0442\u0438",
  "ff": "\u0444\u0443\u043B\u0430",
  "fi": "\u0444\u0438\u043D\u0441\u043A\u0438",
  "fil": "\u0444\u0438\u043B\u0438\u043F\u0438\u043D\u0441\u043A\u0438",
  "fj": "\u0444\u0438\u045F\u0438\u0458\u0441\u043A\u0438",
  "fo": "\u0444\u0430\u0440\u0441\u043A\u0438",
  "fon": "\u0444\u043E\u043D",
  "fr": "\u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438",
  "fr-CA": "\u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438 (\u041A\u0430\u043D\u0430\u0434\u0430)",
  "fr-CH": "\u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438 (\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430)",
  "frc": "\u043A\u0430\u0458\u0443\u043D\u0441\u043A\u0438 \u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438",
  "frm": "\u0441\u0440\u0435\u0434\u045A\u0435\u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438",
  "fro": "\u0441\u0442\u0430\u0440\u043E\u0444\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0438",
  "frr": "\u0441\u0435\u0432\u0435\u0440\u043D\u043E\u0444\u0440\u0438\u0437\u0438\u0458\u0441\u043A\u0438",
  "frs": "\u0438\u0441\u0442\u043E\u0447\u043D\u043E\u0444\u0440\u0438\u0437\u0438\u0458\u0441\u043A\u0438",
  "fur": "\u0444\u0440\u0438\u0443\u043B\u0441\u043A\u0438",
  "fy": "\u0437\u0430\u043F\u0430\u0434\u043D\u0438 \u0444\u0440\u0438\u0437\u0438\u0458\u0441\u043A\u0438",
  "ga": "\u0438\u0440\u0441\u043A\u0438",
  "gaa": "\u0433\u0430",
  "gag": "\u0433\u0430\u0433\u0430\u0443\u0437",
  "gay": "\u0433\u0430\u0458\u043E",
  "gba": "\u0433\u0431\u0430\u0458\u0430",
  "gd": "\u0448\u043A\u043E\u0442\u0441\u043A\u0438 \u0433\u0435\u043B\u0441\u043A\u0438",
  "gez": "\u0433\u0435\u0435\u0437",
  "gil": "\u0433\u0438\u043B\u0431\u0435\u0440\u0442\u0441\u043A\u0438",
  "gl": "\u0433\u0430\u043B\u0438\u0446\u0438\u0458\u0441\u043A\u0438",
  "gmh": "\u0441\u0440\u0435\u0434\u045A\u0438 \u0432\u0438\u0441\u043E\u043A\u043E\u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "gn": "\u0433\u0432\u0430\u0440\u0430\u043D\u0438",
  "goh": "\u0441\u0442\u0430\u0440\u043E\u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "gon": "\u0433\u043E\u043D\u0434\u0438",
  "gor": "\u0433\u043E\u0440\u043E\u043D\u0442\u0430\u043B\u043E",
  "got": "\u0433\u043E\u0442\u0441\u043A\u0438",
  "grb": "\u0433\u0440\u0435\u0431\u043E",
  "grc": "\u0441\u0442\u0430\u0440\u043E\u0433\u0440\u0447\u043A\u0438",
  "gsw": "\u043D\u0435\u043C\u0430\u0447\u043A\u0438 (\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430)",
  "gu": "\u0433\u0443\u045F\u0430\u0440\u0430\u0442\u0438",
  "guz": "\u0433\u0443\u0441\u0438",
  "gv": "\u043C\u0430\u043D\u043A\u0441",
  "gwi": "\u0433\u0432\u0438\u0447\u0438\u043D\u0441\u043A\u0438",
  "ha": "\u0445\u0430\u0443\u0441\u0430",
  "hai": "\u0445\u0430\u0438\u0434\u0430",
  "haw": "\u0445\u0430\u0432\u0430\u0458\u0441\u043A\u0438",
  "he": "\u0445\u0435\u0431\u0440\u0435\u0458\u0441\u043A\u0438",
  "hi": "\u0445\u0438\u043D\u0434\u0438",
  "hil": "\u0445\u0438\u043B\u0438\u0433\u0430\u0458\u043D\u043E\u043D\u0441\u043A\u0438",
  "hit": "\u0445\u0435\u0442\u0438\u0442\u0441\u043A\u0438",
  "hmn": "\u0445\u043C\u043E\u043D\u0448\u043A\u0438",
  "ho": "\u0445\u0438\u0440\u0438 \u043C\u043E\u0442\u0443",
  "hr": "\u0445\u0440\u0432\u0430\u0442\u0441\u043A\u0438",
  "hsb": "\u0433\u043E\u0440\u045A\u043E\u043B\u0443\u0436\u0438\u0447\u043A\u043E\u0441\u0440\u043F\u0441\u043A\u0438",
  "ht": "\u0445\u0430\u0438\u045B\u0430\u043D\u0441\u043A\u0438",
  "hu": "\u043C\u0430\u0452\u0430\u0440\u0441\u043A\u0438",
  "hup": "\u0445\u0443\u043F\u0430",
  "hy": "\u0458\u0435\u0440\u043C\u0435\u043D\u0441\u043A\u0438",
  "hz": "\u0445\u0435\u0440\u0435\u0440\u043E",
  "ia": "\u0438\u043D\u0442\u0435\u0440\u043B\u0438\u043D\u0433\u0432\u0430",
  "iba": "\u0438\u0431\u0430\u043D\u0441\u043A\u0438",
  "ibb": "\u0438\u0431\u0438\u0431\u0438\u043E",
  "id": "\u0438\u043D\u0434\u043E\u043D\u0435\u0436\u0430\u043D\u0441\u043A\u0438",
  "ie": "\u0438\u043D\u0442\u0435\u0440\u043B\u0438\u043D\u0433\u0432\u0435",
  "ig": "\u0438\u0433\u0431\u043E",
  "ii": "\u0441\u0435\u0447\u0443\u0430\u043D\u0441\u043A\u0438 \u0458\u0438",
  "ik": "\u0438\u043D\u0443\u043F\u0438\u043A",
  "ilo": "\u0438\u043B\u043E\u043A\u043E",
  "inh": "\u0438\u043D\u0433\u0443\u0448\u043A\u0438",
  "io": "\u0438\u0434\u043E",
  "is": "\u0438\u0441\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "it": "\u0438\u0442\u0430\u043B\u0438\u0458\u0430\u043D\u0441\u043A\u0438",
  "iu": "\u0438\u043D\u0443\u043A\u0442\u0438\u0442\u0443\u0442\u0441\u043A\u0438",
  "ja": "\u0458\u0430\u043F\u0430\u043D\u0441\u043A\u0438",
  "jbo": "\u043B\u043E\u0436\u0431\u0430\u043D",
  "jgo": "\u043D\u0433\u043E\u043C\u0431\u0430",
  "jmc": "\u043C\u0430\u0447\u0430\u043C\u0435",
  "jpr": "\u0458\u0443\u0434\u0435\u043E-\u043F\u0435\u0440\u0441\u0438\u0458\u0441\u043A\u0438",
  "jrb": "\u0458\u0443\u0434\u0435\u043E-\u0430\u0440\u0430\u043F\u0441\u043A\u0438",
  "jv": "\u0458\u0430\u0432\u0430\u043D\u0441\u043A\u0438",
  "ka": "\u0433\u0440\u0443\u0437\u0438\u0458\u0441\u043A\u0438",
  "kaa": "\u043A\u0430\u0440\u0430-\u043A\u0430\u043B\u043F\u0430\u0448\u043A\u0438",
  "kab": "\u043A\u0430\u0431\u0438\u043B\u0435",
  "kac": "\u043A\u0430\u0447\u0438\u043D\u0441\u043A\u0438",
  "kaj": "\u045F\u0443",
  "kam": "\u043A\u0430\u043C\u0431\u0430",
  "kaw": "\u043A\u0430\u0432\u0438",
  "kbd": "\u043A\u0430\u0431\u0430\u0440\u0434\u0438\u0458\u0441\u043A\u0438",
  "kcg": "\u0442\u0458\u0430\u043F",
  "kde": "\u043C\u0430\u043A\u043E\u043D\u0434\u0435",
  "kea": "\u0437\u0435\u043B\u0435\u043D\u043E\u0440\u0442\u0441\u043A\u0438",
  "kfo": "\u043A\u043E\u0440\u043E",
  "kg": "\u043A\u043E\u043D\u0433\u043E",
  "kgp": "kgp",
  "kha": "\u043A\u0430\u0441\u0438",
  "kho": "\u043A\u043E\u0442\u0430\u043D\u0435\u0448\u043A\u0438",
  "khq": "\u043A\u043E\u0458\u0440\u0430 \u0447\u0438\u0438\u043D\u0438",
  "ki": "\u043A\u0438\u043A\u0443\u0458\u0443",
  "kj": "\u043A\u0432\u0430\u045A\u0430\u043C\u0430",
  "kk": "\u043A\u0430\u0437\u0430\u0448\u043A\u0438",
  "kkj": "\u043A\u0430\u043A\u043E",
  "kl": "\u0433\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "kln": "\u043A\u0430\u043B\u0435\u043D\u045F\u0438\u043D\u0441\u043A\u0438",
  "km": "\u043A\u043C\u0435\u0440\u0441\u043A\u0438",
  "kmb": "\u043A\u0438\u043C\u0431\u0443\u043D\u0434\u0443",
  "kn": "\u043A\u0430\u043D\u0430\u0434\u0430",
  "ko": "\u043A\u043E\u0440\u0435\u0458\u0441\u043A\u0438",
  "koi": "\u043A\u043E\u043C\u0438-\u043F\u0435\u0440\u043C\u0441\u043A\u0438",
  "kok": "\u043A\u043E\u043D\u043A\u0430\u043D\u0438",
  "kos": "\u043A\u043E\u0441\u0440\u0435\u043D\u0441\u043A\u0438",
  "kpe": "\u043A\u043F\u0435\u043B\u0435",
  "kr": "\u043A\u0430\u043D\u0443\u0440\u0438",
  "krc": "\u043A\u0430\u0440\u0430\u0447\u0430\u0458\u0441\u043A\u043E-\u0431\u0430\u043B\u043A\u0430\u0440\u0441\u043A\u0438",
  "kri": "\u043A\u0440\u0438\u043E",
  "krl": "\u043A\u0430\u0440\u0435\u043B\u0441\u043A\u0438",
  "kru": "\u043A\u0443\u0440\u0443\u043A",
  "ks": "\u043A\u0430\u0448\u043C\u0438\u0440\u0441\u043A\u0438",
  "ksb": "\u0448\u0430\u043C\u0431\u0430\u043B\u0430",
  "ksf": "\u0431\u0430\u0444\u0438\u0458\u0430",
  "ksh": "\u043A\u0435\u043B\u043D\u0441\u043A\u0438",
  "ku": "\u043A\u0443\u0440\u0434\u0441\u043A\u0438",
  "kum": "\u043A\u0443\u043C\u0438\u0447\u043A\u0438",
  "kut": "\u043A\u0443\u0442\u0435\u043D\u0430\u0458",
  "kv": "\u043A\u043E\u043C\u0438",
  "kw": "\u043A\u043E\u0440\u043D\u0432\u043E\u043B\u0441\u043A\u0438",
  "ky": "\u043A\u0438\u0440\u0433\u0438\u0441\u043A\u0438",
  "la": "\u043B\u0430\u0442\u0438\u043D\u0441\u043A\u0438",
  "lad": "\u043B\u0430\u0434\u0438\u043D\u043E",
  "lag": "\u043B\u0430\u043D\u0433\u0438",
  "lah": "\u043B\u0430\u043D\u0434\u0430",
  "lam": "\u043B\u0430\u043C\u0431\u0430",
  "lb": "\u043B\u0443\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0448\u043A\u0438",
  "lez": "\u043B\u0435\u0437\u0433\u0438\u043D\u0441\u043A\u0438",
  "lg": "\u0433\u0430\u043D\u0434\u0430",
  "li": "\u043B\u0438\u043C\u0431\u0443\u0440\u0448\u043A\u0438",
  "lij": "lij",
  "lkt": "\u043B\u0430\u043A\u043E\u0442\u0430",
  "ln": "\u043B\u0438\u043D\u0433\u0430\u043B\u0430",
  "lo": "\u043B\u0430\u043E\u0441\u043A\u0438",
  "lol": "\u043C\u043E\u043D\u0433\u043E",
  "lou": "\u043B\u0443\u0438\u0437\u0438\u0458\u0430\u043D\u0441\u043A\u0438 \u043A\u0440\u0435\u043E\u043B\u0441\u043A\u0438",
  "loz": "\u043B\u043E\u0437\u0438",
  "lrc": "\u0441\u0435\u0432\u0435\u0440\u043D\u0438 \u043B\u0443\u0440\u0438",
  "lt": "\u043B\u0438\u0442\u0432\u0430\u043D\u0441\u043A\u0438",
  "lu": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0442\u0430\u043D\u0433\u0430",
  "lua": "\u043B\u0443\u0431\u0430-\u043B\u0443\u043B\u0443\u0430",
  "lui": "\u043B\u0443\u0438\u0441\u0435\u045A\u043E",
  "lun": "\u043B\u0443\u043D\u0434\u0430",
  "luo": "\u043B\u0443\u043E",
  "lus": "\u043C\u0438\u0437\u043E",
  "luy": "\u043B\u0443\u0458\u0438\u0430",
  "lv": "\u043B\u0435\u0442\u043E\u043D\u0441\u043A\u0438",
  "mad": "\u043C\u0430\u0434\u0443\u0440\u0441\u043A\u0438",
  "mag": "\u043C\u0430\u0433\u0430\u0445\u0438",
  "mai": "\u043C\u0430\u0438\u0442\u0438\u043B\u0438",
  "mak": "\u043C\u0430\u043A\u0430\u0441\u0430\u0440\u0441\u043A\u0438",
  "man": "\u043C\u0430\u043D\u0434\u0438\u043D\u0433\u043E",
  "mas": "\u043C\u0430\u0441\u0430\u0458\u0441\u043A\u0438",
  "mdf": "\u043C\u043E\u043A\u0448\u0430",
  "mdr": "\u043C\u0430\u043D\u0434\u0430\u0440",
  "men": "\u043C\u0435\u043D\u0434\u0435",
  "mer": "\u043C\u0435\u0440\u0443",
  "mfe": "\u043C\u043E\u0440\u0438\u0441\u0458\u0435\u043D",
  "mg": "\u043C\u0430\u043B\u0433\u0430\u0448\u043A\u0438",
  "mga": "\u0441\u0440\u0435\u0434\u045A\u0435\u0438\u0440\u0441\u043A\u0438",
  "mgh": "\u043C\u0430\u043A\u0443\u0432\u0430-\u043C\u0438\u0442\u043E",
  "mgo": "\u043C\u0435\u0442\u0430",
  "mh": "\u043C\u0430\u0440\u0448\u0430\u043B\u0441\u043A\u0438",
  "mi": "\u043C\u0430\u043E\u0440\u0441\u043A\u0438",
  "mic": "\u043C\u0438\u043A\u043C\u0430\u043A",
  "min": "\u043C\u0438\u043D\u0430\u043D\u0433\u043A\u0430\u0431\u0430\u0443",
  "mk": "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  "ml": "\u043C\u0430\u043B\u0430\u0458\u0430\u043B\u0430\u043C",
  "mn": "\u043C\u043E\u043D\u0433\u043E\u043B\u0441\u043A\u0438",
  "mnc": "\u043C\u0430\u043D\u045F\u0443\u0440\u0441\u043A\u0438",
  "mni": "\u043C\u0430\u043D\u0438\u043F\u0443\u0440\u0441\u043A\u0438",
  "moh": "\u043C\u043E\u0445\u043E\u0447\u043A\u0438",
  "mos": "\u043C\u043E\u0441\u0438",
  "mr": "\u043C\u0430\u0440\u0430\u0442\u0438",
  "ms": "\u043C\u0430\u043B\u0430\u0458\u0441\u043A\u0438",
  "mt": "\u043C\u0430\u043B\u0442\u0435\u0448\u043A\u0438",
  "mua": "\u043C\u0443\u043D\u0434\u0430\u043D\u0433",
  "mul": "\u0412\u0438\u0448\u0435 \u0458\u0435\u0437\u0438\u043A\u0430",
  "mus": "\u043A\u0440\u0438\u0448\u043A\u0438",
  "mwl": "\u043C\u0438\u0440\u0430\u043D\u0434\u0441\u043A\u0438",
  "mwr": "\u043C\u0430\u0440\u0432\u0430\u0440\u0438",
  "my": "\u0431\u0443\u0440\u043C\u0430\u043D\u0441\u043A\u0438",
  "myv": "\u0435\u0440\u0437\u0458\u0430",
  "mzn": "\u043C\u0430\u0437\u0430\u043D\u0434\u0435\u0440\u0430\u043D\u0441\u043A\u0438",
  "na": "\u043D\u0430\u0443\u0440\u0443\u0441\u043A\u0438",
  "nap": "\u043D\u0430\u043F\u0443\u0459\u0441\u043A\u0438",
  "naq": "\u043D\u0430\u043C\u0430",
  "nb": "\u043D\u043E\u0440\u0432\u0435\u0448\u043A\u0438 \u0431\u0443\u043A\u043C\u043E\u043B",
  "nd": "\u0441\u0435\u0432\u0435\u0440\u043D\u0438 \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nds": "\u043D\u0438\u0441\u043A\u043E\u043D\u0435\u043C\u0430\u0447\u043A\u0438",
  "nds-NL": "\u043D\u0438\u0441\u043A\u043E\u0441\u0430\u043A\u0441\u043E\u043D\u0441\u043A\u0438",
  "ne": "\u043D\u0435\u043F\u0430\u043B\u0441\u043A\u0438",
  "new": "\u043D\u0435\u0432\u0430\u0440\u0438",
  "ng": "\u043D\u0434\u043E\u043D\u0433\u0430",
  "nia": "\u043D\u0438\u0430\u0441",
  "niu": "\u043D\u0438\u0443\u0435\u0458\u0441\u043A\u0438",
  "nl": "\u0445\u043E\u043B\u0430\u043D\u0434\u0441\u043A\u0438",
  "nl-BE": "\u0444\u043B\u0430\u043C\u0430\u043D\u0441\u043A\u0438",
  "nmg": "\u043A\u0432\u0430\u0441\u0438\u043E",
  "nn": "\u043D\u043E\u0440\u0432\u0435\u0448\u043A\u0438 \u043D\u0438\u043D\u043E\u0440\u0441\u043A",
  "nnh": "\u043D\u0433\u0438\u0435\u043C\u0431\u0443\u043D",
  "no": "\u043D\u043E\u0440\u0432\u0435\u0448\u043A\u0438",
  "nog": "\u043D\u043E\u0433\u0430\u0458\u0441\u043A\u0438",
  "non": "\u0441\u0442\u0430\u0440\u043E\u043D\u043E\u0440\u0434\u0438\u0458\u0441\u043A\u0438",
  "nqo": "\u043D\u043A\u043E",
  "nr": "\u0458\u0443\u0436\u043D\u0438 \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nso": "\u0441\u0435\u0432\u0435\u0440\u043D\u0438 \u0441\u043E\u0442\u043E",
  "nus": "\u043D\u0443\u0435\u0440",
  "nv": "\u043D\u0430\u0432\u0430\u0445\u043E",
  "nwc": "\u043A\u043B\u0430\u0441\u0438\u0447\u043D\u0438 \u043D\u0435\u0432\u0430\u0440\u0441\u043A\u0438",
  "ny": "\u045A\u0430\u043D\u045F\u0430",
  "nym": "\u045A\u0430\u043C\u0432\u0435\u0437\u0438",
  "nyn": "\u045A\u0430\u043D\u043A\u043E\u043B\u0435",
  "nyo": "\u045A\u043E\u0440\u043E",
  "nzi": "\u043D\u0437\u0438\u043C\u0430",
  "oc": "\u043E\u043A\u0441\u0438\u0442\u0430\u043D\u0441\u043A\u0438",
  "oj": "\u043E\u045F\u0438\u0431\u0432\u0435",
  "om": "\u043E\u0440\u043E\u043C\u043E",
  "or": "\u043E\u0434\u0438\u0458\u0430",
  "os": "\u043E\u0441\u0435\u0442\u0438\u043D\u0441\u043A\u0438",
  "osa": "\u043E\u0441\u0430\u0433\u0435",
  "ota": "\u043E\u0441\u043C\u0430\u043D\u0441\u043A\u0438 \u0442\u0443\u0440\u0441\u043A\u0438",
  "pa": "\u043F\u0435\u043D\u045F\u0430\u043F\u0441\u043A\u0438",
  "pag": "\u043F\u0430\u043D\u0433\u0430\u0441\u0438\u043D\u0430\u043D\u0441\u043A\u0438",
  "pal": "\u043F\u0430\u0445\u043B\u0430\u0432\u0438",
  "pam": "\u043F\u0430\u043C\u043F\u0430\u043D\u0433\u0430",
  "pap": "\u043F\u0430\u043F\u0438\u0458\u0430\u043C\u0435\u043D\u0442\u043E",
  "pau": "\u043F\u0430\u043B\u0430\u0443\u0441\u043A\u0438",
  "pcm": "\u043D\u0438\u0433\u0435\u0440\u0438\u0458\u0441\u043A\u0438 \u043F\u0438\u045F\u0438\u043D",
  "peo": "\u0441\u0442\u0430\u0440\u043E\u043F\u0435\u0440\u0441\u0438\u0458\u0441\u043A\u0438",
  "phn": "\u0444\u0435\u043D\u0438\u0447\u0430\u043D\u0441\u043A\u0438",
  "pi": "\u043F\u0430\u043B\u0438",
  "pl": "\u043F\u043E\u0459\u0441\u043A\u0438",
  "pon": "\u043F\u043E\u043D\u043F\u0435\u0458\u0441\u043A\u0438",
  "prg": "\u043F\u0440\u0443\u0441\u043A\u0438",
  "pro": "\u0441\u0442\u0430\u0440\u043E\u043E\u043A\u0441\u0438\u0442\u0430\u043D\u0441\u043A\u0438",
  "ps": "\u043F\u0430\u0448\u0442\u0443\u043D\u0441\u043A\u0438",
  "pt": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438",
  "pt-BR": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438 (\u0411\u0440\u0430\u0437\u0438\u043B)",
  "pt-PT": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0438 (\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B)",
  "qu": "\u043A\u0435\u0447\u0443\u0430",
  "quc": "\u043A\u0438\u0447\u0435",
  "raj": "\u0440\u0430\u045F\u0430\u0441\u0442\u0430\u043D\u0441\u043A\u0438",
  "rap": "\u0440\u0430\u043F\u0430\u043D\u0443\u0438",
  "rar": "\u0440\u0430\u0440\u043E\u0442\u043E\u043D\u0433\u0430\u043D\u0441\u043A\u0438",
  "rhg": "\u0440\u043E\u0445\u0438\u043D\u0433\u0458\u0430",
  "rm": "\u0440\u043E\u043C\u0430\u043D\u0448",
  "rn": "\u043A\u0438\u0440\u0443\u043D\u0434\u0438",
  "ro": "\u0440\u0443\u043C\u0443\u043D\u0441\u043A\u0438",
  "ro-MD": "\u043C\u043E\u043B\u0434\u0430\u0432\u0441\u043A\u0438",
  "rof": "\u0440\u043E\u043C\u0431\u043E",
  "rom": "\u0440\u043E\u043C\u0441\u043A\u0438",
  "ru": "\u0440\u0443\u0441\u043A\u0438",
  "rup": "\u0446\u0438\u043D\u0446\u0430\u0440\u0441\u043A\u0438",
  "rw": "\u043A\u0438\u045A\u0430\u0440\u0443\u0430\u043D\u0434\u0430",
  "rwk": "\u0440\u0443\u0430",
  "sa": "\u0441\u0430\u043D\u0441\u043A\u0440\u0438\u0442",
  "sad": "\u0441\u0430\u043D\u0434\u0430\u0432\u0435",
  "sah": "\u0441\u0430\u0445\u0430",
  "sam": "\u0441\u0430\u043C\u0430\u0440\u0438\u0458\u0430\u043D\u0441\u043A\u0438 \u0430\u0440\u0430\u043C\u0435\u0458\u0441\u043A\u0438",
  "saq": "\u0441\u0430\u043C\u0431\u0443\u0440\u0443",
  "sas": "\u0441\u0430\u0441\u0430\u043A",
  "sat": "\u0441\u0430\u043D\u0442\u0430\u043B\u0438",
  "sba": "\u043D\u0433\u0430\u043C\u0431\u0430\u0458",
  "sbp": "\u0441\u0430\u043D\u0433\u0443",
  "sc": "\u0441\u0430\u0440\u0434\u0438\u043D\u0441\u043A\u0438",
  "scn": "\u0441\u0438\u0446\u0438\u043B\u0438\u0458\u0430\u043D\u0441\u043A\u0438",
  "sco": "\u0448\u043A\u043E\u0442\u0441\u043A\u0438",
  "sd": "\u0441\u0438\u043D\u0434\u0438",
  "sdh": "\u0458\u0443\u0436\u043D\u043E\u043A\u0443\u0440\u0434\u0441\u043A\u0438",
  "se": "\u0441\u0435\u0432\u0435\u0440\u043D\u0438 \u0441\u0430\u043C\u0438",
  "seh": "\u0441\u0435\u043D\u0430",
  "sel": "\u0441\u0435\u043B\u043A\u0443\u043F\u0441\u043A\u0438",
  "ses": "\u043A\u043E\u0458\u0440\u0430\u0431\u043E\u0440\u043E \u0441\u0435\u043D\u0438",
  "sg": "\u0441\u0430\u043D\u0433\u043E",
  "sga": "\u0441\u0442\u0430\u0440\u043E\u0438\u0440\u0441\u043A\u0438",
  "sh": "\u0441\u0440\u043F\u0441\u043A\u043E\u0445\u0440\u0432\u0430\u0442\u0441\u043A\u0438",
  "shi": "\u0442\u0430\u0448\u0435\u043B\u0445\u0438\u0442",
  "shn": "\u0448\u0430\u043D\u0441\u043A\u0438",
  "si": "\u0441\u0438\u043D\u0445\u0430\u043B\u0435\u0448\u043A\u0438",
  "sid": "\u0441\u0438\u0434\u0430\u043C\u043E",
  "sk": "\u0441\u043B\u043E\u0432\u0430\u0447\u043A\u0438",
  "sl": "\u0441\u043B\u043E\u0432\u0435\u043D\u0430\u0447\u043A\u0438",
  "sm": "\u0441\u0430\u043C\u043E\u0430\u043D\u0441\u043A\u0438",
  "sma": "\u0458\u0443\u0436\u043D\u0438 \u0441\u0430\u043C\u0438",
  "smj": "\u043B\u0443\u043B\u0435 \u0441\u0430\u043C\u0438",
  "smn": "\u0438\u043D\u0430\u0440\u0438 \u0441\u0430\u043C\u0438",
  "sms": "\u0441\u043A\u043E\u043B\u0442 \u0441\u0430\u043C\u0438",
  "sn": "\u0448\u043E\u043D\u0430",
  "snk": "\u0441\u043E\u043D\u0438\u043D\u043A\u0435",
  "so": "\u0441\u043E\u043C\u0430\u043B\u0441\u043A\u0438",
  "sog": "\u0441\u043E\u0433\u0434\u0438\u0458\u0441\u043A\u0438",
  "sq": "\u0430\u043B\u0431\u0430\u043D\u0441\u043A\u0438",
  "sr": "\u0441\u0440\u043F\u0441\u043A\u0438",
  "srn": "\u0441\u0440\u0430\u043D\u0430\u043D \u0442\u043E\u043D\u0433\u043E",
  "srr": "\u0441\u0435\u0440\u0435\u0440\u0441\u043A\u0438",
  "ss": "\u0441\u0432\u0430\u0437\u0438",
  "ssy": "\u0441\u0430\u0445\u043E",
  "st": "\u0441\u0435\u0441\u043E\u0442\u043E",
  "su": "\u0441\u0443\u043D\u0434\u0430\u043D\u0441\u043A\u0438",
  "suk": "\u0441\u0443\u043A\u0443\u043C\u0430",
  "sus": "\u0441\u0443\u0441\u0443",
  "sux": "\u0441\u0443\u043C\u0435\u0440\u0441\u043A\u0438",
  "sv": "\u0448\u0432\u0435\u0434\u0441\u043A\u0438",
  "sw": "\u0441\u0432\u0430\u0445\u0438\u043B\u0438",
  "sw-CD": "\u043A\u0438\u0441\u0432\u0430\u0445\u0438\u043B\u0438",
  "swb": "\u043A\u043E\u043C\u043E\u0440\u0441\u043A\u0438",
  "syc": "\u0441\u0438\u0440\u0438\u0458\u0430\u0447\u043A\u0438",
  "syr": "\u0441\u0438\u0440\u0438\u0458\u0441\u043A\u0438",
  "ta": "\u0442\u0430\u043C\u0438\u043B\u0441\u043A\u0438",
  "te": "\u0442\u0435\u043B\u0443\u0433\u0443",
  "tem": "\u0442\u0438\u043C\u043D\u0435",
  "teo": "\u0442\u0435\u0441\u043E",
  "ter": "\u0442\u0435\u0440\u0435\u043D\u043E",
  "tet": "\u0442\u0435\u0442\u0443\u043C",
  "tg": "\u0442\u0430\u045F\u0438\u0447\u043A\u0438",
  "th": "\u0442\u0430\u0458\u0441\u043A\u0438",
  "ti": "\u0442\u0438\u0433\u0440\u0438\u045A\u0430",
  "tig": "\u0442\u0438\u0433\u0440\u0435",
  "tiv": "\u0442\u0438\u0432",
  "tk": "\u0442\u0443\u0440\u043A\u043C\u0435\u043D\u0441\u043A\u0438",
  "tkl": "\u0442\u043E\u043A\u0435\u043B\u0430\u0443",
  "tl": "\u0442\u0430\u0433\u0430\u043B\u043E\u0433",
  "tlh": "\u043A\u043B\u0438\u043D\u0433\u043E\u043D\u0441\u043A\u0438",
  "tli": "\u0442\u043B\u0438\u043D\u0433\u0438\u0442",
  "tmh": "\u0442\u0430\u043C\u0430\u0448\u0435\u043A",
  "tn": "\u0446\u0432\u0430\u043D\u0430",
  "to": "\u0442\u043E\u043D\u0433\u0430\u043D\u0441\u043A\u0438",
  "tog": "\u045A\u0430\u0441\u0430 \u0442\u043E\u043D\u0433\u0430",
  "tpi": "\u0442\u043E\u043A \u043F\u0438\u0441\u0438\u043D",
  "tr": "\u0442\u0443\u0440\u0441\u043A\u0438",
  "trv": "\u0442\u0430\u0440\u043E\u043A\u043E",
  "ts": "\u0446\u043E\u043D\u0433\u0430",
  "tsi": "\u0446\u0438\u043C\u0448\u0438\u0430\u043D",
  "tt": "\u0442\u0430\u0442\u0430\u0440\u0441\u043A\u0438",
  "tum": "\u0442\u0443\u043C\u0431\u0443\u043A\u0430",
  "tvl": "\u0442\u0443\u0432\u0430\u043B\u0443",
  "tw": "\u0442\u0432\u0438",
  "twq": "\u0442\u0430\u0441\u0430\u0432\u0430\u043A",
  "ty": "\u0442\u0430\u0445\u0438\u045B\u0430\u043D\u0441\u043A\u0438",
  "tyv": "\u0442\u0443\u0432\u0438\u043D\u0441\u043A\u0438",
  "tzm": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0442\u043B\u0430\u0441\u043A\u0438 \u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0442",
  "udm": "\u0443\u0434\u043C\u0443\u0440\u0442\u0441\u043A\u0438",
  "ug": "\u0443\u0458\u0433\u0443\u0440\u0441\u043A\u0438",
  "uga": "\u0443\u0433\u0430\u0440\u0438\u0442\u0441\u043A\u0438",
  "uk": "\u0443\u043A\u0440\u0430\u0458\u0438\u043D\u0441\u043A\u0438",
  "umb": "\u0443\u043C\u0431\u0443\u043D\u0434\u0443",
  "und": "\u043D\u0435\u043F\u043E\u0437\u043D\u0430\u0442 \u0458\u0435\u0437\u0438\u043A",
  "ur": "\u0443\u0440\u0434\u0443",
  "uz": "\u0443\u0437\u0431\u0435\u0447\u043A\u0438",
  "vai": "\u0432\u0430\u0438",
  "ve": "\u0432\u0435\u043D\u0434\u0430",
  "vi": "\u0432\u0438\u0458\u0435\u0442\u043D\u0430\u043C\u0441\u043A\u0438",
  "vo": "\u0432\u043E\u043B\u0430\u043F\u0438\u043A",
  "vot": "\u0432\u043E\u0434\u0441\u043A\u0438",
  "vun": "\u0432\u0443\u043D\u045F\u043E",
  "wa": "\u0432\u0430\u043B\u043E\u043D\u0441\u043A\u0438",
  "wae": "\u0432\u0430\u043B\u0441\u0435\u0440\u0441\u043A\u0438",
  "wal": "\u0432\u043E\u043B\u0430\u0458\u0442\u0430",
  "war": "\u0432\u0430\u0440\u0430\u0458\u0441\u043A\u0438",
  "was": "\u0432\u0430\u0448\u043E",
  "wbp": "\u0432\u0430\u0440\u043B\u043F\u0438\u0440\u0438",
  "wo": "\u0432\u043E\u043B\u043E\u0444",
  "xal": "\u043A\u0430\u043B\u043C\u0438\u0447\u043A\u0438",
  "xh": "\u043A\u043E\u0441\u0430",
  "xog": "\u0441\u043E\u0433\u0430",
  "yao": "\u0458\u0430\u043E",
  "yap": "\u0458\u0430\u043F\u0441\u043A\u0438",
  "yav": "\u0458\u0430\u043D\u0433\u0431\u0435\u043D",
  "ybb": "\u0458\u0435\u043C\u0431\u0430",
  "yi": "\u0458\u0438\u0434\u0438\u0448",
  "yo": "\u0458\u043E\u0440\u0443\u0431\u0430",
  "yrl": "yrl",
  "yue": "\u043A\u0430\u043D\u0442\u043E\u043D\u0441\u043A\u0438",
  "za": "\u045F\u0443\u0430\u043D\u0448\u043A\u0438",
  "zap": "\u0437\u0430\u043F\u043E\u0442\u0435\u0447\u043A\u0438",
  "zbl": "\u0431\u043B\u0438\u0441\u0438\u043C\u0431\u043E\u043B\u0438",
  "zen": "\u0437\u0435\u043D\u0430\u0433\u0430",
  "zgh": "\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0434\u043D\u0438 \u043C\u0430\u0440\u043E\u043A\u0430\u043D\u0441\u043A\u0438 \u0442\u0430\u043C\u0430\u0437\u0438\u0433\u0442",
  "zh": "\u043A\u0438\u043D\u0435\u0441\u043A\u0438",
  "zh-Hans": "\u043F\u043E\u0458\u0435\u0434\u043D\u043E\u0441\u0442\u0430\u0432\u0459\u0435\u043D\u0438 \u043A\u0438\u043D\u0435\u0441\u043A\u0438",
  "zh-Hant": "\u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043E\u043D\u0430\u043B\u043D\u0438 \u043A\u0438\u043D\u0435\u0441\u043A\u0438",
  "zu": "\u0437\u0443\u043B\u0443",
  "zun": "\u0437\u0443\u043D\u0438",
  "zxx": "\u0431\u0435\u0437 \u043B\u0438\u043D\u0433\u0432\u0438\u0441\u0442\u0438\u0447\u043A\u043E\u0433 \u0441\u0430\u0434\u0440\u0436\u0430\u0458\u0430",
  "zza": "\u0437\u0430\u0437\u0430"
};

// src/l10n/locale/th.ts
var th_default = {};

// src/l10n/locale/tm.ts
var tm_default = {};

// src/l10n/locale/tr.ts
var tr_default = {
  "aa": "Afar",
  "ab": "Abhazca",
  "ace": "A\xE7ece",
  "ach": "Acoli",
  "ada": "Adangme",
  "ady": "Adigece",
  "ae": "Avest\xE7e",
  "aeb": "Tunus Arap\xE7as\u0131",
  "af": "Afrikaanca",
  "afh": "Afrihili",
  "agq": "Aghem",
  "ain": "Ayni Dili",
  "ak": "Akan",
  "akk": "Akad Dili",
  "akz": "Alabamaca",
  "ale": "Aleut dili",
  "aln": "Gheg Arnavut\xE7as\u0131",
  "alt": "G\xFCney Altayca",
  "am": "Amharca",
  "an": "Aragonca",
  "ang": "Eski \u0130ngilizce",
  "anp": "Angika",
  "ar": "Arap\xE7a",
  "ar-001": "Modern Standart Arap\xE7a",
  "arc": "Aramice",
  "arn": "Mapu\xE7e dili",
  "aro": "Araona",
  "arp": "Arapaho Dili",
  "arq": "Cezayir Arap\xE7as\u0131",
  "ars": "Necd Arap\xE7as\u0131",
  "arw": "Arawak Dili",
  "ary": "Fas Arap\xE7as\u0131",
  "arz": "M\u0131s\u0131r Arap\xE7as\u0131",
  "as": "Assamca",
  "asa": "Asu",
  "ase": "Amerikan \u0130\u015Faret Dili",
  "ast": "Asturyas\xE7a",
  "av": "Avar Dili",
  "avk": "Kotava",
  "awa": "Awadhi",
  "ay": "Aymara",
  "az": "Azerbaycan dili",
  "az-Arab": "G\xFCney Azerice",
  "ba": "Ba\u015Fk\u0131rt\xE7a",
  "bal": "Belu\xE7\xE7a",
  "ban": "Bali dili",
  "bar": "Bavyera dili",
  "bas": "Basa Dili",
  "bax": "Bamun",
  "bbc": "Batak Toba",
  "bbj": "Ghomala",
  "be": "Belarus\xE7a",
  "bej": "Beja dili",
  "bem": "Bemba",
  "bew": "Betawi",
  "bez": "Bena",
  "bfd": "Bafut",
  "bfq": "Badaga",
  "bg": "Bulgarca",
  "bgn": "Bat\u0131 Balochi",
  "bho": "Arayanice",
  "bi": "Bislama",
  "bik": "Bikol",
  "bin": "Bini",
  "bjn": "Banjar Dili",
  "bkm": "Kom",
  "bla": "Karaayak dili",
  "bm": "Bambara",
  "bn": "Bengalce",
  "bo": "Tibet\xE7e",
  "bpy": "Bishnupriya",
  "bqi": "Bahtiyari",
  "br": "Bretonca",
  "bra": "Braj",
  "brh": "Brohice",
  "brx": "Bodo",
  "bs": "Bo\u015Fnak\xE7a",
  "bss": "Akoose",
  "bua": "Buryat\xE7a",
  "bug": "Bugis",
  "bum": "Bulu",
  "byn": "Blin",
  "byv": "Medumba",
  "ca": "Katalanca",
  "cad": "Kado dili",
  "car": "Carib",
  "cay": "Kayuga dili",
  "cch": "Atsam",
  "ccp": "Chakma",
  "ce": "\xC7e\xE7ence",
  "ceb": "Sebuano dili",
  "cgg": "Kiga",
  "ch": "\xC7amorro dili",
  "chb": "\xC7ib\xE7a dili",
  "chg": "\xC7a\u011Fatayca",
  "chk": "Chuukese",
  "chm": "Mari dili",
  "chn": "\xC7inuk dili",
  "cho": "\xC7oktav dili",
  "chp": "\xC7ipevya dili",
  "chr": "\xC7erokice",
  "chy": "\u015Eayence",
  "ckb": "Orta K\xFCrt\xE7e",
  "co": "Korsikaca",
  "cop": "K\u0131ptice",
  "cps": "Capiznon",
  "cr": "Krice",
  "crh": "K\u0131r\u0131m T\xFCrk\xE7esi",
  "crs": "Seselwa Kreole Frans\u0131zcas\u0131",
  "cs": "\xC7ek\xE7e",
  "csb": "Kashubian",
  "cu": "Kilise Slavcas\u0131",
  "cv": "\xC7uva\u015F\xE7a",
  "cy": "Galce",
  "da": "Danca",
  "dak": "Dakotaca",
  "dar": "Dargince",
  "dav": "Taita",
  "de": "Almanca",
  "de-AT": "Avusturya Almancas\u0131",
  "de-CH": "\u0130svi\xE7re Y\xFCksek Almancas\u0131",
  "del": "Delaware",
  "den": "Slavey dili",
  "dgr": "Dogrib",
  "din": "Dinka dili",
  "dje": "Zarma",
  "doi": "Dogri",
  "dsb": "A\u015Fa\u011F\u0131 Sorb\xE7a",
  "dtp": "Orta Kadazan",
  "dua": "Duala",
  "dum": "Orta\xE7a\u011F Felemenk\xE7esi",
  "dv": "Divehi dili",
  "dyo": "Jola-Fonyi",
  "dyu": "Dyula",
  "dz": "Dzongkha",
  "dzg": "Dazaga",
  "ebu": "Embu",
  "ee": "Ewe",
  "efi": "Efik",
  "egl": "Emilia Dili",
  "egy": "Eski M\u0131s\u0131r Dili",
  "eka": "Ekajuk",
  "el": "Yunanca",
  "elx": "Elam",
  "en": "\u0130ngilizce",
  "en-AU": "Avustralya \u0130ngilizcesi",
  "en-CA": "Kanada \u0130ngilizcesi",
  "en-GB": "\u0130ngiliz \u0130ngilizcesi",
  "en-US": "Amerikan \u0130ngilizcesi",
  "enm": "Orta\xE7a\u011F \u0130ngilizcesi",
  "eo": "Esperanto",
  "es": "\u0130spanyolca",
  "es-419": "Latin Amerika \u0130spanyolcas\u0131",
  "es-ES": "Avrupa \u0130spanyolcas\u0131",
  "es-MX": "Meksika \u0130spanyolcas\u0131",
  "esu": "Merkezi Yupik\xE7e",
  "et": "Estonca",
  "eu": "Bask\xE7a",
  "ewo": "Ewondo",
  "ext": "Ekstremadura Dili",
  "fa": "Fars\xE7a",
  "fa-AF": "Darice",
  "fan": "Fang",
  "fat": "Fanti",
  "ff": "Fula dili",
  "fi": "Fince",
  "fil": "Filipince",
  "fit": "Tornedalin Fincesi",
  "fj": "Fiji dili",
  "fo": "Faroe dili",
  "fon": "Fon",
  "fr": "Frans\u0131zca",
  "fr-CA": "Kanada Frans\u0131zcas\u0131",
  "fr-CH": "\u0130svi\xE7re Frans\u0131zcas\u0131",
  "frc": "Cajun Frans\u0131zcas\u0131",
  "frm": "Orta\xE7a\u011F Frans\u0131zcas\u0131",
  "fro": "Eski Frans\u0131zca",
  "frp": "Arpitanca",
  "frr": "Kuzey Frizce",
  "frs": "Do\u011Fu Frizcesi",
  "fur": "Friuli dili",
  "fy": "Bat\u0131 Frizcesi",
  "ga": "\u0130rlandaca",
  "gaa": "Ga dili",
  "gag": "Gagavuzca",
  "gan": "Gan \xC7incesi",
  "gay": "Gayo dili",
  "gba": "Gbaya",
  "gbz": "Zerd\xFC\u015Ft Daricesi",
  "gd": "\u0130sko\xE7 Gaelcesi",
  "gez": "Geez",
  "gil": "Kiribatice",
  "gl": "Gali\xE7yaca",
  "glk": "Gilanice",
  "gmh": "Orta\xE7a\u011F Y\xFCksek Almancas\u0131",
  "gn": "Guarani dili",
  "goh": "Eski Y\xFCksek Almanca",
  "gom": "Goa Konkanicesi",
  "gon": "Gondi dili",
  "gor": "Gorontalo dili",
  "got": "Got\xE7a",
  "grb": "Grebo dili",
  "grc": "Antik Yunanca",
  "gsw": "\u0130svi\xE7re Almancas\u0131",
  "gu": "G\xFCcerat\xE7a",
  "guc": "Wayuu dili",
  "gur": "Frafra",
  "guz": "Gusii",
  "gv": "Man dili",
  "gwi": "Gu\xE7ince",
  "ha": "Hausa dili",
  "hai": "Haydaca",
  "hak": "Hakka \xC7incesi",
  "haw": "Hawaii dili",
  "he": "\u0130branice",
  "hi": "Hint\xE7e",
  "hif": "Fiji Hint\xE7esi",
  "hil": "Hiligaynon dili",
  "hit": "Hitit\xE7e",
  "hmn": "Hmong",
  "ho": "Hiri Motu",
  "hr": "H\u0131rvat\xE7a",
  "hsb": "Yukar\u0131 Sorb\xE7a",
  "hsn": "Xiang \xC7incesi",
  "ht": "Haiti Kreyolu",
  "hu": "Macarca",
  "hup": "Hupaca",
  "hy": "Ermenice",
  "hz": "Herero dili",
  "ia": "\u0130nterlingua",
  "iba": "Iban",
  "ibb": "\u0130bibio dili",
  "id": "Endonezce",
  "ie": "Interlingue",
  "ig": "\u0130bo dili",
  "ii": "Sichuan Yi",
  "ik": "\u0130nyupik\xE7e",
  "ilo": "Iloko",
  "inh": "\u0130ngu\u015F\xE7a",
  "io": "Ido",
  "is": "\u0130zlandaca",
  "it": "\u0130talyanca",
  "iu": "\u0130nuktitut dili",
  "izh": "\u0130ngriya Dili",
  "ja": "Japonca",
  "jam": "Jamaika Patois Dili",
  "jbo": "Lojban",
  "jgo": "Ngomba",
  "jmc": "Machame",
  "jpr": "Yahudi Fars\xE7as\u0131",
  "jrb": "Yahudi Arap\xE7as\u0131",
  "jut": "Yutland Dili",
  "jv": "Cava dili",
  "ka": "G\xFCrc\xFCce",
  "kaa": "Karakalpak\xE7a",
  "kab": "Kabiliyece",
  "kac": "Ka\xE7in dili",
  "kaj": "Jju",
  "kam": "Kamba",
  "kaw": "Kawi",
  "kbd": "Kabardeyce",
  "kbl": "Kanembu",
  "kcg": "Tyap",
  "kde": "Makonde",
  "kea": "Kabuverdianu",
  "ken": "Kenyang",
  "kfo": "Koro",
  "kg": "Kongo dili",
  "kgp": "Kaingang",
  "kha": "Khasi dili",
  "kho": "Hotanca",
  "khq": "Koyra Chiini",
  "khw": "\xC7itral Dili",
  "ki": "Kikuyu",
  "kiu": "K\u0131rman\xE7\xE7a",
  "kj": "Kuanyama",
  "kk": "Kazak\xE7a",
  "kkj": "Kako",
  "kl": "Gr\xF6nland dili",
  "kln": "Kalenjin",
  "km": "Khmer dili",
  "kmb": "Kimbundu",
  "kn": "Kannada dili",
  "ko": "Korece",
  "koi": "Komi-Permyak",
  "kok": "Konkani dili",
  "kos": "Kosraean",
  "kpe": "Kpelle dili",
  "kr": "Kanuri dili",
  "krc": "Kara\xE7ay-Balkarca",
  "kri": "Krio",
  "krj": "Kinaray-a",
  "krl": "Karelyaca",
  "kru": "Kurukh dili",
  "ks": "Ke\u015Fmir dili",
  "ksb": "\u015Eambala",
  "ksf": "Bafia",
  "ksh": "K\xF6ln leh\xE7esi",
  "ku": "K\xFCrt\xE7e",
  "kum": "Kumuk\xE7a",
  "kut": "Kutenai dili",
  "kv": "Komi",
  "kw": "Kernevek\xE7e",
  "ky": "K\u0131rg\u0131zca",
  "la": "Latince",
  "lad": "Ladino",
  "lag": "Langi",
  "lah": "Lahnda",
  "lam": "Lamba dili",
  "lb": "L\xFCksemburgca",
  "lez": "Lezgice",
  "lfn": "Lingua Franca Nova",
  "lg": "Ganda",
  "li": "Limburgca",
  "lij": "Ligurca",
  "liv": "Livonca",
  "lkt": "Lakotaca",
  "lmo": "Lombard\xE7a",
  "ln": "Lingala",
  "lo": "Lao dili",
  "lol": "Mongo",
  "lou": "Louisiana Kreolcesi",
  "loz": "Lozi",
  "lrc": "Kuzey Luri",
  "lt": "Litvanca",
  "ltg": "Latgalian",
  "lu": "Luba-Katanga",
  "lua": "Luba-Lulua",
  "lui": "Luiseno",
  "lun": "Lunda",
  "luo": "Luo",
  "lus": "Lushai",
  "luy": "Luyia",
  "lv": "Letonca",
  "lzh": "Edebi \xC7ince",
  "lzz": "Lazca",
  "mad": "Madura Dili",
  "maf": "Mafa",
  "mag": "Magahi",
  "mai": "Maithili",
  "mak": "Makasar",
  "man": "Mandingo",
  "mas": "Masai",
  "mde": "Maba",
  "mdf": "Mok\u015Fa dili",
  "mdr": "Mandar",
  "men": "Mende dili",
  "mer": "Meru",
  "mfe": "Morisyen",
  "mg": "Malga\u015F\xE7a",
  "mga": "Orta\xE7a\u011F \u0130rlandacas\u0131",
  "mgh": "Makhuwa-Meetto",
  "mgo": "Meta\u2019",
  "mh": "Marshall Adalar\u0131 dili",
  "mi": "Maori dili",
  "mic": "Micmac",
  "min": "Minangkabau",
  "mk": "Makedonca",
  "ml": "Malayalam dili",
  "mn": "Mo\u011Folca",
  "mnc": "Man\xE7urya dili",
  "mni": "Manipuri dili",
  "moh": "Mohavk dili",
  "mos": "Mossi",
  "mr": "Marathi dili",
  "mrj": "Ova \xC7irmi\u015F\xE7esi",
  "ms": "Malayca",
  "mt": "Maltaca",
  "mua": "Mundang",
  "mul": "Birden Fazla Dil",
  "mus": "Krik\xE7e",
  "mwl": "Miranda dili",
  "mwr": "Marvari",
  "mwv": "Mentawai",
  "my": "Birman dili",
  "mye": "Myene",
  "myv": "Erzya",
  "mzn": "Mazenderanca",
  "na": "Nauru dili",
  "nan": "Min Nan \xC7incesi",
  "nap": "Napolice",
  "naq": "Nama",
  "nb": "Norve\xE7\xE7e Bokm\xE5l",
  "nd": "Kuzey Ndebele",
  "nds": "A\u015Fa\u011F\u0131 Almanca",
  "nds-NL": "A\u015Fa\u011F\u0131 Saksonca",
  "ne": "Nepalce",
  "new": "Nevari",
  "ng": "Ndonga",
  "nia": "Nias",
  "niu": "Niue dili",
  "njo": "Ao Naga",
  "nl": "Felemenk\xE7e",
  "nl-BE": "Flamanca",
  "nmg": "Kwasio",
  "nn": "Norve\xE7\xE7e Nynorsk",
  "nnh": "Ngiemboon",
  "no": "Norve\xE7\xE7e",
  "nog": "Nogayca",
  "non": "Eski Nors dili",
  "nov": "Novial",
  "nqo": "N\u2019Ko",
  "nr": "G\xFCney Ndebele",
  "nso": "Kuzey Sotho dili",
  "nus": "Nuer",
  "nv": "Navaho dili",
  "nwc": "Klasik Nevari",
  "ny": "Nyanja",
  "nym": "Nyamvezi",
  "nyn": "Nyankole",
  "nyo": "Nyoro",
  "nzi": "Nzima dili",
  "oc": "Oksitan dili",
  "oj": "Ojibva dili",
  "om": "Oromo dili",
  "or": "Oriya dili",
  "os": "Oset\xE7e",
  "osa": "Osage",
  "ota": "Osmanl\u0131 T\xFCrk\xE7esi",
  "pa": "Pencap\xE7a",
  "pag": "Pangasinan dili",
  "pal": "Pehlevi Dili",
  "pam": "Pampanga",
  "pap": "Papiamento",
  "pau": "Palau dili",
  "pcd": "Picard Dili",
  "pcm": "Nijerya Pidgin dili",
  "pdc": "Pensilvanya Almancas\u0131",
  "pdt": "Plautdietsch",
  "peo": "Eski Fars\xE7a",
  "pfl": "Palatin Almancas\u0131",
  "phn": "Fenike dili",
  "pi": "Pali",
  "pl": "Leh\xE7e",
  "pms": "Piyemontece",
  "pnt": "Kuzeybat\u0131 Kafkasya",
  "pon": "Pohnpeian",
  "prg": "Prusyaca",
  "pro": "Eski Provensal",
  "ps": "Pe\u015Ftuca",
  "pt": "Portekizce",
  "pt-BR": "Brezilya Portekizcesi",
  "pt-PT": "Avrupa Portekizcesi",
  "qu": "Ke\xE7uva dili",
  "quc": "Ki\xE7ece",
  "qug": "Chimborazo Highland Quichua",
  "raj": "Rajasthani",
  "rap": "Rapanui dili",
  "rar": "Rarotongan",
  "rgn": "Romanyolca",
  "rhg": "Rohingya dili",
  "rif": "Rif Berbericesi",
  "rm": "Roman\u015F\xE7a",
  "rn": "Kirundi",
  "ro": "Rumence",
  "ro-MD": "Moldovaca",
  "rof": "Rombo",
  "rom": "Romanca",
  "rtm": "Rotuman",
  "ru": "Rus\xE7a",
  "rue": "Rusince",
  "rug": "Roviana",
  "rup": "Ulah\xE7a",
  "rw": "Kinyarwanda",
  "rwk": "Rwa",
  "sa": "Sanskrit",
  "sad": "Sandave",
  "sah": "Yakut\xE7a",
  "sam": "Samarit Aramcas\u0131",
  "saq": "Samburu",
  "sas": "Sasak",
  "sat": "Santali",
  "saz": "Saurashtra",
  "sba": "Ngambay",
  "sbp": "Sangu",
  "sc": "Sardunya dili",
  "scn": "Sicilyaca",
  "sco": "\u0130sko\xE7\xE7a",
  "sd": "Sindhi dili",
  "sdc": "Sassari Sarduca",
  "sdh": "G\xFCney K\xFCrt\xE7esi",
  "se": "Kuzey Laponcas\u0131",
  "see": "Seneca dili",
  "seh": "Sena",
  "sei": "Seri",
  "sel": "Selkup dili",
  "ses": "Koyraboro Senni",
  "sg": "Sango",
  "sga": "Eski \u0130rlandaca",
  "sgs": "Samogit\xE7e",
  "sh": "S\u0131rp-H\u0131rvat Dili",
  "shi": "Ta\u015Felit",
  "shn": "Shan dili",
  "shu": "\xC7ad Arap\xE7as\u0131",
  "si": "Sinhali dili",
  "sid": "Sidamo dili",
  "sk": "Slovak\xE7a",
  "sl": "Slovence",
  "sli": "A\u015Fa\u011F\u0131 Silezyaca",
  "sly": "Selayar",
  "sm": "Samoa dili",
  "sma": "G\xFCney Laponcas\u0131",
  "smj": "Lule Laponcas\u0131",
  "smn": "\u0130nari Laponcas\u0131",
  "sms": "Skolt Laponcas\u0131",
  "sn": "\u015Eona dili",
  "snk": "Soninke",
  "so": "Somalice",
  "sog": "Sogdiana Dili",
  "sq": "Arnavut\xE7a",
  "sr": "S\u0131rp\xE7a",
  "srn": "Sranan Tongo",
  "srr": "Serer dili",
  "ss": "Sisvati",
  "ssy": "Saho",
  "st": "G\xFCney Sotho dili",
  "stq": "Saterland Frizcesi",
  "su": "Sunda dili",
  "suk": "Sukuma dili",
  "sus": "Susu",
  "sux": "S\xFCmerce",
  "sv": "\u0130sve\xE7\xE7e",
  "sw": "Svahili dili",
  "sw-CD": "Kongo Svahili",
  "swb": "Komorca",
  "syc": "Klasik S\xFCryanice",
  "syr": "S\xFCryanice",
  "szl": "Silezyaca",
  "ta": "Tamilce",
  "tcy": "Tuluca",
  "te": "Telugu dili",
  "tem": "Timne",
  "teo": "Teso",
  "ter": "Tereno",
  "tet": "Tetum",
  "tg": "Tacik\xE7e",
  "th": "Tayca",
  "ti": "Tigrinya dili",
  "tig": "Tigre",
  "tiv": "Tiv",
  "tk": "T\xFCrkmence",
  "tkl": "Tokelau dili",
  "tkr": "Sahurca",
  "tl": "Tagalogca",
  "tlh": "Klingonca",
  "tli": "Tlingit",
  "tly": "Tal\u0131\u015F\xE7a",
  "tmh": "Tama\u015Fek",
  "tn": "Setsvana",
  "to": "Tonga dili",
  "tog": "Nyasa Tonga",
  "tpi": "Tok Pisin",
  "tr": "T\xFCrk\xE7e",
  "tru": "Turoyo",
  "trv": "Taroko",
  "ts": "Tsonga",
  "tsd": "Tsakonca",
  "tsi": "Tsimshian",
  "tt": "Tatarca",
  "ttt": "Tat\xE7a",
  "tum": "Tumbuka",
  "tvl": "Tuvalyanca",
  "tw": "Tvi",
  "twq": "Tasawaq",
  "ty": "Tahiti dili",
  "tyv": "Tuvaca",
  "tzm": "Orta Atlas Tamazigti",
  "udm": "Udmurt\xE7a",
  "ug": "Uygurca",
  "uga": "Ugarit dili",
  "uk": "Ukraynaca",
  "umb": "Umbundu",
  "und": "Bilinmeyen Dil",
  "ur": "Urduca",
  "uz": "\xD6zbek\xE7e",
  "vai": "Vai",
  "ve": "Venda dili",
  "vec": "Venedik\xE7e",
  "vep": "Veps dili",
  "vi": "Vietnamca",
  "vls": "Bat\u0131 Flamanca",
  "vmf": "Main Frankonya Dili",
  "vo": "Volap\xFCk",
  "vot": "Vot\xE7a",
  "vro": "V\xF5ro",
  "vun": "Vunjo",
  "wa": "Valonca",
  "wae": "Walser",
  "wal": "Valamo",
  "war": "Varay",
  "was": "Va\u015Fo",
  "wbp": "Warlpiri",
  "wo": "Volof\xE7a",
  "wuu": "Wu \xC7incesi",
  "xal": "Kalm\u0131k\xE7a",
  "xh": "Zosa dili",
  "xmf": "Megrelce",
  "xog": "Soga",
  "yao": "Yao",
  "yap": "Yap\xE7a",
  "yav": "Yangben",
  "ybb": "Yemba",
  "yi": "Yidi\u015F",
  "yo": "Yorubaca",
  "yrl": "Nheengatu",
  "yue": "Kantonca",
  "za": "Zhuangca",
  "zap": "Zapotek dili",
  "zbl": "Blis Sembolleri",
  "zea": "Zelandaca",
  "zen": "Zenaga dili",
  "zgh": "Standart Fas Tamazigti",
  "zh": "\xC7ince",
  "zh-Hans": "Basitle\u015Ftirilmi\u015F \xC7ince",
  "zh-Hant": "Geleneksel \xC7ince",
  "zu": "Zuluca",
  "zun": "Zunice",
  "zxx": "Dilbilim i\xE7eri\u011Fi yok",
  "zza": "Zazaca"
};

// src/l10n/locale/uk.ts
var uk_default = {
  "aa": "\u0430\u0444\u0430\u0440\u0441\u044C\u043A\u0430",
  "ab": "\u0430\u0431\u0445\u0430\u0437\u044C\u043A\u0430",
  "ace": "\u0430\u0447\u0435\u0445\u0441\u044C\u043A\u0430",
  "ach": "\u0430\u0447\u043E\u043B\u0456",
  "ada": "\u0430\u0434\u0430\u043D\u0433\u043C\u0435",
  "ady": "\u0430\u0434\u0438\u0433\u0435\u0439\u0441\u044C\u043A\u0430",
  "ae": "\u0430\u0432\u0435\u0441\u0442\u0456\u0439\u0441\u044C\u043A\u0430",
  "af": "\u0430\u0444\u0440\u0438\u043A\u0430\u0430\u043D\u0441",
  "afh": "\u0430\u0444\u0440\u0438\u0445\u0456\u043B\u0456",
  "agq": "\u0430\u0433\u0435\u043C",
  "ain": "\u0430\u0439\u043D\u0441\u044C\u043A\u0430",
  "ak": "\u0430\u043A\u0430\u043D",
  "akk": "\u0430\u043A\u043A\u0430\u0434\u0441\u044C\u043A\u0430",
  "akz": "\u0430\u043B\u0430\u0431\u0430\u043C\u0430",
  "ale": "\u0430\u043B\u0435\u0443\u0442\u0441\u044C\u043A\u0430",
  "alt": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u043E\u0430\u043B\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "am": "\u0430\u043C\u0445\u0430\u0440\u0441\u044C\u043A\u0430",
  "an": "\u0430\u0440\u0430\u0433\u043E\u043D\u0441\u044C\u043A\u0430",
  "ang": "\u0434\u0430\u0432\u043D\u044C\u043E\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "anp": "\u0430\u043D\u0433\u0456\u043A\u0430",
  "ar": "\u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "ar-001": "\u0441\u0443\u0447\u0430\u0441\u043D\u0430 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430 \u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "arc": "\u0430\u0440\u0430\u043C\u0435\u0439\u0441\u044C\u043A\u0430",
  "arn": "\u0430\u0440\u0430\u0443\u043A\u0430\u043D\u0441\u044C\u043A\u0430",
  "aro": "\u0430\u0440\u0430\u043E\u043D\u0430",
  "arp": "\u0430\u0440\u0430\u043F\u0430\u0445\u043E",
  "arq": "\u0430\u043B\u0436\u0438\u0440\u0441\u044C\u043A\u0430 \u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "ars": "\u043D\u0430\u0434\u0436\u0434\u0456\u0439\u0441\u044C\u043A\u0430 \u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "arw": "\u0430\u0440\u0430\u0432\u0430\u043A\u0441\u044C\u043A\u0430",
  "as": "\u0430\u0441\u0430\u043C\u0441\u044C\u043A\u0430",
  "asa": "\u0430\u0441\u0443",
  "ase": "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u043C\u043E\u0432\u0430 \u0440\u0443\u0445\u0456\u0432",
  "ast": "\u0430\u0441\u0442\u0443\u0440\u0456\u0439\u0441\u044C\u043A\u0430",
  "av": "\u0430\u0432\u0430\u0440\u0441\u044C\u043A\u0430",
  "awa": "\u0430\u0432\u0430\u0434\u0445\u0456",
  "ay": "\u0430\u0439\u043C\u0430\u0440\u0430",
  "az": "\u0430\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u044C\u043A\u0430",
  "az-Arab": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u043E\u0430\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u044C\u043A\u0430",
  "ba": "\u0431\u0430\u0448\u043A\u0438\u0440\u0441\u044C\u043A\u0430",
  "bal": "\u0431\u0430\u043B\u0443\u0447\u0456",
  "ban": "\u0431\u0430\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "bar": "\u0431\u0430\u0435\u0440\u0456\u0448",
  "bas": "\u0431\u0430\u0441\u0430",
  "bax": "\u0431\u0430\u043C\u0443\u043C",
  "bbc": "\u0431\u0430\u0442\u0430\u043A \u0442\u043E\u0431\u0430",
  "bbj": "\u0433\u043E\u043C\u0430\u043B\u0430",
  "be": "\u0431\u0456\u043B\u043E\u0440\u0443\u0441\u044C\u043A\u0430",
  "bej": "\u0431\u0435\u0434\u0436\u0430",
  "bem": "\u0431\u0435\u043C\u0431\u0430",
  "bew": "\u0431\u0435\u0442\u0430\u0432\u0456",
  "bez": "\u0431\u0435\u043D\u0430",
  "bfd": "\u0431\u0430\u0444\u0443\u0442",
  "bfq": "\u0431\u0430\u0434\u0430\u0433\u0430",
  "bg": "\u0431\u043E\u043B\u0433\u0430\u0440\u0441\u044C\u043A\u0430",
  "bgn": "\u0441\u0445\u0456\u0434\u043D\u043E\u0431\u0435\u043B\u0443\u0434\u0436\u0456\u0439\u0441\u044C\u043A\u0430",
  "bho": "\u0431\u0445\u043E\u0434\u0436\u043F\u0443\u0440\u0456",
  "bi": "\u0431\u0456\u0441\u043B\u0430\u043C\u0430",
  "bik": "\u0431\u0456\u043A\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "bin": "\u0431\u0456\u043D\u0456",
  "bjn": "\u0431\u0430\u043D\u0434\u0436\u0430\u0440\u0441\u044C\u043A\u0430",
  "bkm": "\u043A\u043E\u043C",
  "bla": "\u0441\u0456\u043A\u0441\u0456\u043A\u0430",
  "bm": "\u0431\u0430\u043C\u0431\u0430\u0440\u0430",
  "bn": "\u0431\u0435\u043D\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "bo": "\u0442\u0438\u0431\u0435\u0442\u0441\u044C\u043A\u0430",
  "bqi": "\u0431\u0430\u0445\u0442\u0456\u0430\u0440\u0456",
  "br": "\u0431\u0440\u0435\u0442\u043E\u043D\u0441\u044C\u043A\u0430",
  "bra": "\u0431\u0440\u0430\u0434\u0436",
  "brx": "\u0431\u043E\u0434\u043E",
  "bs": "\u0431\u043E\u0441\u043D\u0456\u0439\u0441\u044C\u043A\u0430",
  "bss": "\u0430\u043A\u0443\u0441",
  "bua": "\u0431\u0443\u0440\u044F\u0442\u0441\u044C\u043A\u0430",
  "bug": "\u0431\u0443\u0433\u0456\u0439\u0441\u044C\u043A\u0430",
  "bum": "\u0431\u0443\u043B\u0443",
  "byn": "\u0431\u043B\u0456\u043D",
  "byv": "\u043C\u0435\u0434\u0443\u043C\u0431\u0430",
  "ca": "\u043A\u0430\u0442\u0430\u043B\u043E\u043D\u0441\u044C\u043A\u0430",
  "cad": "\u043A\u0430\u0434\u0434\u043E",
  "car": "\u043A\u0430\u0440\u0456\u0431\u0441\u044C\u043A\u0430",
  "cay": "\u043A\u0430\u0439\u044E\u0433\u0430",
  "cch": "\u0430\u0442\u0441\u0430\u043C",
  "ccp": "\u0447\u0430\u043A\u043C\u0430",
  "ce": "\u0447\u0435\u0447\u0435\u043D\u0441\u044C\u043A\u0430",
  "ceb": "\u0441\u0435\u0431\u0443\u0430\u043D\u0441\u044C\u043A\u0430",
  "cgg": "\u043A\u0456\u0433\u0430",
  "ch": "\u0447\u0430\u043C\u043E\u0440\u0440\u043E",
  "chb": "\u0447\u0456\u0431\u0447\u0430",
  "chg": "\u0447\u0430\u0433\u0430\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "chk": "\u0447\u0443\u0443\u043A\u0441\u044C\u043A\u0430",
  "chm": "\u043C\u0430\u0440\u0456\u0439\u0441\u044C\u043A\u0430",
  "chn": "\u0447\u0438\u043D\u0443\u043A \u0436\u0430\u0440\u0433\u043E\u043D",
  "cho": "\u0447\u043E\u043A\u0442\u043E",
  "chp": "\u0447\u0456\u043F\u0435\u0432\u02BC\u044F\u043D",
  "chr": "\u0447\u0435\u0440\u043E\u043A\u0456",
  "chy": "\u0447\u0435\u0439\u0454\u043D\u043D",
  "ckb": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u043A\u0443\u0440\u0434\u0441\u044C\u043A\u0430",
  "co": "\u043A\u043E\u0440\u0441\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430",
  "cop": "\u043A\u043E\u043F\u0442\u0441\u044C\u043A\u0430",
  "cr": "\u043A\u0440\u0456",
  "crh": "\u043A\u0440\u0438\u043C\u0441\u044C\u043A\u043E\u0442\u0430\u0442\u0430\u0440\u0441\u044C\u043A\u0430",
  "crs": "\u0441\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u044C\u043A\u0430 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "cs": "\u0447\u0435\u0441\u044C\u043A\u0430",
  "csb": "\u043A\u0430\u0448\u0443\u0431\u0441\u044C\u043A\u0430",
  "cu": "\u0446\u0435\u0440\u043A\u043E\u0432\u043D\u043E\u0441\u043B\u043E\u0432\u02BC\u044F\u043D\u0441\u044C\u043A\u0430",
  "cv": "\u0447\u0443\u0432\u0430\u0441\u044C\u043A\u0430",
  "cy": "\u0432\u0430\u043B\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "da": "\u0434\u0430\u043D\u0441\u044C\u043A\u0430",
  "dak": "\u0434\u0430\u043A\u043E\u0442\u0430",
  "dar": "\u0434\u0430\u0440\u0433\u0456\u043D\u0441\u044C\u043A\u0430",
  "dav": "\u0442\u0430\u0456\u0442\u0430",
  "de": "\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "de-AT": "\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430 (\u0410\u0432\u0441\u0442\u0440\u0456\u044F)",
  "de-CH": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u044C\u043A\u0430 \u0432\u0435\u0440\u0445\u043D\u044C\u043E\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "del": "\u0434\u0435\u043B\u0430\u0432\u0430\u0440\u0441\u044C\u043A\u0430",
  "den": "\u0441\u043B\u0435\u0439\u0432",
  "dgr": "\u0434\u043E\u0433\u0440\u0438\u0431\u0441\u044C\u043A\u0430",
  "din": "\u0434\u0456\u043D\u043A\u0430",
  "dje": "\u0434\u0436\u0435\u0440\u043C\u0430",
  "doi": "\u0434\u043E\u0433\u0440\u0456",
  "dsb": "\u043D\u0438\u0436\u043D\u044C\u043E\u043B\u0443\u0436\u0438\u0446\u044C\u043A\u0430",
  "dua": "\u0434\u0443\u0430\u043B\u0430",
  "dum": "\u0441\u0435\u0440\u0435\u0434\u043D\u044C\u043E\u043D\u0456\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "dv": "\u0434\u0456\u0432\u0435\u0445\u0456",
  "dyo": "\u0434\u044C\u043E\u043B\u0430-\u0444\u043E\u043D\u0456",
  "dyu": "\u0434\u0456\u0443\u043B\u0430",
  "dz": "\u0434\u0437\u043E\u043D\u0433-\u043A\u0435",
  "dzg": "\u0434\u0430\u0437\u0430\u0433\u0430",
  "ebu": "\u0435\u043C\u0431\u0443",
  "ee": "\u0435\u0432\u0435",
  "efi": "\u0435\u0444\u0456\u043A",
  "egy": "\u0434\u0430\u0432\u043D\u044C\u043E\u0454\u0433\u0438\u043F\u0435\u0442\u0441\u044C\u043A\u0430",
  "eka": "\u0435\u043A\u0430\u0434\u0436\u0443\u043A",
  "el": "\u0433\u0440\u0435\u0446\u044C\u043A\u0430",
  "elx": "\u0435\u043B\u0430\u043C\u0441\u044C\u043A\u0430",
  "en": "\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "en-AU": "\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430 (\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0456\u044F)",
  "en-CA": "\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430 (\u041A\u0430\u043D\u0430\u0434\u0430)",
  "en-GB": "\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430 (\u0412\u0435\u043B\u0438\u043A\u0430 \u0411\u0440\u0438\u0442\u0430\u043D\u0456\u044F)",
  "en-US": "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "enm": "\u0441\u0435\u0440\u0435\u0434\u043D\u044C\u043E\u0430\u043D\u0433\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "eo": "\u0435\u0441\u043F\u0435\u0440\u0430\u043D\u0442\u043E",
  "es": "\u0456\u0441\u043F\u0430\u043D\u0441\u044C\u043A\u0430",
  "es-419": "\u043B\u0430\u0442\u0438\u043D\u043E\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0456\u0441\u043F\u0430\u043D\u0441\u044C\u043A\u0430",
  "es-ES": "\u0454\u0432\u0440\u043E\u043F\u0435\u0439\u0441\u044C\u043A\u0430 \u0456\u0441\u043F\u0430\u043D\u0441\u044C\u043A\u0430",
  "es-MX": "\u043C\u0435\u043A\u0441\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0456\u0441\u043F\u0430\u043D\u0441\u044C\u043A\u0430",
  "et": "\u0435\u0441\u0442\u043E\u043D\u0441\u044C\u043A\u0430",
  "eu": "\u0431\u0430\u0441\u043A\u0441\u044C\u043A\u0430",
  "ewo": "\u0435\u0432\u043E\u043D\u0434\u043E",
  "fa": "\u043F\u0435\u0440\u0441\u044C\u043A\u0430",
  "fa-AF": "\u0434\u0430\u0440\u0456",
  "fan": "\u0444\u0430\u043D\u0433",
  "fat": "\u0444\u0430\u043D\u0442\u0456",
  "ff": "\u0444\u0443\u043B\u0430",
  "fi": "\u0444\u0456\u043D\u0441\u044C\u043A\u0430",
  "fil": "\u0444\u0456\u043B\u0456\u043F\u043F\u0456\u043D\u0441\u044C\u043A\u0430",
  "fj": "\u0444\u0456\u0434\u0436\u0456",
  "fo": "\u0444\u0430\u0440\u0435\u0440\u0441\u044C\u043A\u0430",
  "fon": "\u0444\u043E\u043D",
  "fr": "\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "fr-CA": "\u043A\u0430\u043D\u0430\u0434\u0441\u044C\u043A\u0430 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "fr-CH": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u044C\u043A\u0430 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "frc": "\u043A\u0430\u0436\u0443\u043D\u0441\u044C\u043A\u0430 \u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "frm": "\u0441\u0435\u0440\u0435\u0434\u043D\u044C\u043E\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "fro": "\u0434\u0430\u0432\u043D\u044C\u043E\u0444\u0440\u0430\u043D\u0446\u0443\u0437\u044C\u043A\u0430",
  "frp": "\u0430\u0440\u043F\u0456\u0442\u0430\u043D\u0441\u044C\u043A\u0430",
  "frr": "\u0444\u0440\u0438\u0437\u044C\u043A\u0430 \u043F\u0456\u0432\u043D\u0456\u0447\u043D\u0430",
  "frs": "\u0444\u0440\u0438\u0437\u044C\u043A\u0430 \u0441\u0445\u0456\u0434\u043D\u0430",
  "fur": "\u0444\u0440\u0456\u0443\u043B\u044C\u0441\u044C\u043A\u0430",
  "fy": "\u0437\u0430\u0445\u0456\u0434\u043D\u043E\u0444\u0440\u0438\u0437\u044C\u043A\u0430",
  "ga": "\u0456\u0440\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "gaa": "\u0433\u0430",
  "gag": "\u0433\u0430\u0433\u0430\u0443\u0437\u044C\u043A\u0430",
  "gan": "\u0491\u0430\u043D\u044C",
  "gay": "\u0433\u0430\u0439\u043E",
  "gba": "\u0433\u0431\u0430\u0439\u044F",
  "gd": "\u0448\u043E\u0442\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430 \u0433\u0435\u043B\u044C\u0441\u044C\u043A\u0430",
  "gez": "\u0433\u0454\u0435\u0437",
  "gil": "\u0433\u0456\u043B\u044C\u0431\u0435\u0440\u0442\u0441\u044C\u043A\u0430",
  "gl": "\u0433\u0430\u043B\u0456\u0441\u0456\u0439\u0441\u044C\u043A\u0430",
  "gmh": "\u0441\u0435\u0440\u0435\u0434\u043D\u044C\u043E\u0432\u0435\u0440\u0445\u043D\u044C\u043E\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "gn": "\u0433\u0443\u0430\u0440\u0430\u043D\u0456",
  "goh": "\u0434\u0430\u0432\u043D\u044C\u043E\u0432\u0435\u0440\u0445\u043D\u044C\u043E\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "gon": "\u0433\u043E\u043D\u0434\u0456",
  "gor": "\u0433\u043E\u0440\u043E\u043D\u0442\u0430\u043B\u043E",
  "got": "\u0433\u043E\u0442\u0441\u044C\u043A\u0430",
  "grb": "\u0433\u0440\u0435\u0431\u043E",
  "grc": "\u0434\u0430\u0432\u043D\u044C\u043E\u0433\u0440\u0435\u0446\u044C\u043A\u0430",
  "gsw": "\u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u044C\u043A\u0430 \u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "gu": "\u0433\u0443\u0434\u0436\u0430\u0440\u0430\u0442\u0456",
  "guz": "\u0433\u0443\u0441\u0456\u0457",
  "gv": "\u043C\u0435\u043D\u043A\u0441\u044C\u043A\u0430",
  "gwi": "\u043A\u0443\u0447\u0456\u043D",
  "ha": "\u0445\u0430\u0443\u0441\u0430",
  "hai": "\u0445\u0430\u0439\u0434\u0430",
  "hak": "\u0445\u0430\u043A\u043A\u0430\u0441\u044C\u043A\u0430",
  "haw": "\u0433\u0430\u0432\u0430\u0439\u0441\u044C\u043A\u0430",
  "he": "\u0456\u0432\u0440\u0438\u0442",
  "hi": "\u0433\u0456\u043D\u0434\u0456",
  "hil": "\u0445\u0456\u043B\u0456\u0433\u0430\u0439\u043D\u043E\u043D",
  "hit": "\u0445\u0456\u0442\u0456\u0442\u0456",
  "hmn": "\u0445\u043C\u043E\u043D\u0433",
  "ho": "\u0445\u0456\u0440\u0456-\u043C\u043E\u0442\u0443",
  "hr": "\u0445\u043E\u0440\u0432\u0430\u0442\u0441\u044C\u043A\u0430",
  "hsb": "\u0432\u0435\u0440\u0445\u043D\u044C\u043E\u043B\u0443\u0436\u0438\u0446\u044C\u043A\u0430",
  "hsn": "\u0441\u044F\u043D\u0441\u044C\u043A\u0430 \u043A\u0438\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "ht": "\u0433\u0430\u0457\u0442\u044F\u043D\u0441\u044C\u043A\u0430 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "hu": "\u0443\u0433\u043E\u0440\u0441\u044C\u043A\u0430",
  "hup": "\u0445\u0443\u043F\u0430",
  "hy": "\u0432\u0456\u0440\u043C\u0435\u043D\u0441\u044C\u043A\u0430",
  "hz": "\u0433\u0435\u0440\u0435\u0440\u043E",
  "ia": "\u0456\u043D\u0442\u0435\u0440\u043B\u0456\u043D\u0433\u0432\u0430",
  "iba": "\u0456\u0431\u0430\u043D\u0441\u044C\u043A\u0430",
  "ibb": "\u0456\u0431\u0456\u0431\u0456\u043E",
  "id": "\u0456\u043D\u0434\u043E\u043D\u0435\u0437\u0456\u0439\u0441\u044C\u043A\u0430",
  "ie": "\u0456\u043D\u0442\u0435\u0440\u043B\u0456\u043D\u0433\u0432\u0435",
  "ig": "\u0456\u0433\u0431\u043E",
  "ii": "\u0441\u0438\u0447\u0443\u0430\u043D\u044C\u0441\u044C\u043A\u0430 \u0457",
  "ik": "\u0456\u043D\u0443\u043F\u0456\u0430\u043A",
  "ilo": "\u0456\u043B\u043E\u043A\u0430\u043D\u0441\u044C\u043A\u0430",
  "inh": "\u0456\u043D\u0433\u0443\u0441\u044C\u043A\u0430",
  "io": "\u0456\u0434\u043E",
  "is": "\u0456\u0441\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "it": "\u0456\u0442\u0430\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "iu": "\u0456\u043D\u0443\u043A\u0442\u0456\u0442\u0443\u0442",
  "ja": "\u044F\u043F\u043E\u043D\u0441\u044C\u043A\u0430",
  "jbo": "\u043B\u043E\u0436\u0431\u0430\u043D",
  "jgo": "\u043D\u0433\u043E\u043C\u0431\u0430",
  "jmc": "\u043C\u0430\u0447\u0430\u043C\u0435",
  "jpr": "\u044E\u0434\u0435\u043E-\u043F\u0435\u0440\u0441\u044C\u043A\u0430",
  "jrb": "\u044E\u0434\u0435\u043E-\u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "jv": "\u044F\u0432\u0430\u043D\u0441\u044C\u043A\u0430",
  "ka": "\u0433\u0440\u0443\u0437\u0438\u043D\u0441\u044C\u043A\u0430",
  "kaa": "\u043A\u0430\u0440\u0430\u043A\u0430\u043B\u043F\u0430\u0446\u044C\u043A\u0430",
  "kab": "\u043A\u0430\u0431\u0456\u043B\u044C\u0441\u044C\u043A\u0430",
  "kac": "\u043A\u0430\u0447\u0456\u043D",
  "kaj": "\u0439\u044E",
  "kam": "\u043A\u0430\u043C\u0431\u0430",
  "kaw": "\u043A\u0430\u0432\u0456",
  "kbd": "\u043A\u0430\u0431\u0430\u0440\u0434\u0438\u043D\u0441\u044C\u043A\u0430",
  "kbl": "\u043A\u0430\u043D\u0435\u043C\u0431\u0443",
  "kcg": "\u0442\u0456\u0430\u043F",
  "kde": "\u043C\u0430\u043A\u043E\u043D\u0434\u0435",
  "kea": "\u043A\u0430\u0431\u0443\u0432\u0435\u0440\u0434\u0456\u0430\u043D\u0443",
  "kfo": "\u043A\u043E\u0440\u043E",
  "kg": "\u043A\u043E\u043D\u0491\u043E\u043B\u0435\u0437\u044C\u043A\u0430",
  "kgp": "kgp",
  "kha": "\u043A\u0445\u0430\u0441\u0456",
  "kho": "\u0445\u043E\u0442\u0430\u043D\u043E\u0441\u0430\u043A\u0441\u044C\u043A\u0430",
  "khq": "\u043A\u043E\u0439\u0440\u0430 \u0447\u0456\u0457\u043D\u0456",
  "ki": "\u043A\u0456\u043A\u0443\u0439\u044E",
  "kj": "\u043A\u0443\u043D\u0430\u043C\u0430",
  "kk": "\u043A\u0430\u0437\u0430\u0445\u0441\u044C\u043A\u0430",
  "kkj": "\u043A\u0430\u043A\u043E",
  "kl": "\u043A\u0430\u043B\u0430\u0430\u043B\u043B\u0456\u0441\u0443\u0442",
  "kln": "\u043A\u0430\u043B\u0435\u043D\u0434\u0436\u0438\u043D",
  "km": "\u043A\u0445\u043C\u0435\u0440\u0441\u044C\u043A\u0430",
  "kmb": "\u043A\u0456\u043C\u0431\u0443\u043D\u0434\u0443",
  "kn": "\u043A\u0430\u043D\u043D\u0430\u0434\u0430",
  "ko": "\u043A\u043E\u0440\u0435\u0439\u0441\u044C\u043A\u0430",
  "koi": "\u043A\u043E\u043C\u0456-\u043F\u0435\u0440\u043C\u2019\u044F\u0446\u044C\u043A\u0430",
  "kok": "\u043A\u043E\u043D\u043A\u0430\u043D\u0456",
  "kos": "\u043A\u043E\u0441\u0440\u0430\u0435",
  "kpe": "\u043A\u043F\u0435\u043B\u043B\u0454",
  "kr": "\u043A\u0430\u043D\u0443\u0440\u0456",
  "krc": "\u043A\u0430\u0440\u0430\u0447\u0430\u0454\u0432\u043E-\u0431\u0430\u043B\u043A\u0430\u0440\u0441\u044C\u043A\u0430",
  "krl": "\u043A\u0430\u0440\u0435\u043B\u044C\u0441\u044C\u043A\u0430",
  "kru": "\u043A\u0443\u0440\u0443\u043A\u0445",
  "ks": "\u043A\u0430\u0448\u043C\u0456\u0440\u0441\u044C\u043A\u0430",
  "ksb": "\u0448\u0430\u043C\u0431\u0430\u043B\u0430",
  "ksf": "\u0431\u0430\u0444\u0456\u0430",
  "ksh": "\u043A\u0435\u043B\u044C\u043D\u0441\u044C\u043A\u0430",
  "ku": "\u043A\u0443\u0440\u0434\u0441\u044C\u043A\u0430",
  "kum": "\u043A\u0443\u043C\u0438\u0446\u044C\u043A\u0430",
  "kut": "\u043A\u0443\u0442\u0435\u043D\u0430\u0457",
  "kv": "\u043A\u043E\u043C\u0456",
  "kw": "\u043A\u043E\u0440\u043D\u0441\u044C\u043A\u0430",
  "ky": "\u043A\u0438\u0440\u0433\u0438\u0437\u044C\u043A\u0430",
  "la": "\u043B\u0430\u0442\u0438\u043D\u0441\u044C\u043A\u0430",
  "lad": "\u043B\u0430\u0434\u0456\u043D\u043E",
  "lag": "\u043B\u0430\u043D\u0433\u0456",
  "lah": "\u043B\u0430\u043D\u0434\u0430",
  "lam": "\u043B\u0430\u043C\u0431\u0430",
  "lb": "\u043B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0437\u044C\u043A\u0430",
  "lez": "\u043B\u0435\u0437\u0433\u0456\u043D\u0441\u044C\u043A\u0430",
  "lg": "\u0433\u0430\u043D\u0434\u0430",
  "li": "\u043B\u0456\u043C\u0431\u0443\u0440\u0433\u0456\u0439\u0441\u044C\u043A\u0430",
  "lij": "lij",
  "lkt": "\u043B\u0430\u043A\u043E\u0442\u0430",
  "ln": "\u043B\u0456\u043D\u0433\u0430\u043B\u0430",
  "lo": "\u043B\u0430\u043E\u0441\u044C\u043A\u0430",
  "lol": "\u043C\u043E\u043D\u0433\u043E",
  "lou": "\u043B\u0443\u0457\u0437\u0456\u0430\u043D\u0441\u044C\u043A\u0430 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "loz": "\u043B\u043E\u0437\u0456",
  "lrc": "\u043F\u0456\u0432\u043D\u0456\u0447\u043D\u043E\u043B\u0443\u0440\u0441\u044C\u043A\u0430",
  "lt": "\u043B\u0438\u0442\u043E\u0432\u0441\u044C\u043A\u0430",
  "lu": "\u043B\u0443\u0431\u0430-\u043A\u0430\u0442\u0430\u043D\u0433\u0430",
  "lua": "\u043B\u0443\u0431\u0430-\u043B\u0443\u043B\u0443\u0430",
  "lui": "\u043B\u0443\u0457\u0441\u0435\u043D\u044C\u043E",
  "lun": "\u043B\u0443\u043D\u0434\u0430",
  "luo": "\u043B\u0443\u043E",
  "lus": "\u043C\u0456\u0437\u043E",
  "luy": "\u043B\u0443\u0439\u044F",
  "lv": "\u043B\u0430\u0442\u0438\u0441\u044C\u043A\u0430",
  "mad": "\u043C\u0430\u0434\u0443\u0440\u0441\u044C\u043A\u0430",
  "maf": "\u043C\u0430\u0444\u0430",
  "mag": "\u043C\u0430\u0433\u0430\u0434\u0445\u0456",
  "mai": "\u043C\u0430\u0439\u0442\u0445\u0456\u043B\u0456",
  "mak": "\u043C\u0430\u043A\u0430\u0441\u0430\u0440\u0441\u044C\u043A\u0430",
  "man": "\u043C\u0430\u043D\u0434\u0456\u043D\u0433\u043E",
  "mas": "\u043C\u0430\u0441\u0430\u0457",
  "mde": "\u043C\u0430\u0431\u0430",
  "mdf": "\u043C\u043E\u043A\u0448\u0430",
  "mdr": "\u043C\u0430\u043D\u0434\u0430\u0440\u0441\u044C\u043A\u0430",
  "men": "\u043C\u0435\u043D\u0434\u0435",
  "mer": "\u043C\u0435\u0440\u0443",
  "mfe": "\u043C\u0430\u0432\u0440\u0438\u043A\u0456\u0439\u0441\u044C\u043A\u0430 \u043A\u0440\u0435\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "mg": "\u043C\u0430\u043B\u0430\u0433\u0430\u0441\u0456\u0439\u0441\u044C\u043A\u0430",
  "mga": "\u0441\u0435\u0440\u0435\u0434\u043D\u044C\u043E\u0456\u0440\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "mgh": "\u043C\u0430\u043A\u0443\u0432\u0430-\u043C\u0435\u0435\u0442\u043E",
  "mgo": "\u043C\u0435\u0442\u0430",
  "mh": "\u043C\u0430\u0440\u0448\u0430\u043B\u043B\u044C\u0441\u044C\u043A\u0430",
  "mi": "\u043C\u0430\u043E\u0440\u0456",
  "mic": "\u043C\u0456\u043A\u043C\u0430\u043A",
  "min": "\u043C\u0456\u043D\u0430\u043D\u0433\u043A\u0430\u0431\u0430\u0443",
  "mk": "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u044C\u043A\u0430",
  "ml": "\u043C\u0430\u043B\u0430\u044F\u043B\u0430\u043C",
  "mn": "\u043C\u043E\u043D\u0433\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "mnc": "\u043C\u0430\u043D\u0447\u0436\u0443\u0440\u0441\u044C\u043A\u0430",
  "mni": "\u043C\u0430\u043D\u0456\u043F\u0443\u0440\u0456",
  "moh": "\u043C\u0430\u0433\u0430\u0432\u043A",
  "mos": "\u043C\u043E\u0441\u0441\u0456",
  "mr": "\u043C\u0430\u0440\u0430\u0442\u0445\u0456",
  "ms": "\u043C\u0430\u043B\u0430\u0439\u0441\u044C\u043A\u0430",
  "mt": "\u043C\u0430\u043B\u044C\u0442\u0456\u0439\u0441\u044C\u043A\u0430",
  "mua": "\u043C\u0443\u043D\u0434\u0430\u043D\u0433",
  "mul": "\u043A\u0456\u043B\u044C\u043A\u0430 \u043C\u043E\u0432",
  "mus": "\u043A\u0440\u0456\u043A",
  "mwl": "\u043C\u0456\u0440\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "mwr": "\u043C\u0430\u0440\u0432\u0430\u0440\u0456",
  "my": "\u0431\u0456\u0440\u043C\u0430\u043D\u0441\u044C\u043A\u0430",
  "mye": "\u043C\u0438\u0456\u043D",
  "myv": "\u0435\u0440\u0437\u044F",
  "mzn": "\u043C\u0430\u0437\u0430\u043D\u0434\u0435\u0440\u0430\u043D\u0441\u044C\u043A\u0430",
  "na": "\u043D\u0430\u0443\u0440\u0443",
  "nan": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u043E\u043C\u0456\u043D\u044C\u0441\u044C\u043A\u0430",
  "nap": "\u043D\u0435\u0430\u043F\u043E\u043B\u0456\u0442\u0430\u043D\u0441\u044C\u043A\u0430",
  "naq": "\u043D\u0430\u043C\u0430",
  "nb": "\u043D\u043E\u0440\u0432\u0435\u0437\u044C\u043A\u0430 (\u0431\u0443\u043A\u043C\u043E\u043B)",
  "nd": "\u043F\u0456\u0432\u043D\u0456\u0447\u043D\u0430 \u043D\u0434\u0435\u0431\u0435\u043B\u0435",
  "nds": "\u043D\u0438\u0436\u043D\u044C\u043E\u043D\u0456\u043C\u0435\u0446\u044C\u043A\u0430",
  "nds-NL": "\u043D\u0438\u0436\u043D\u044C\u043E\u0441\u0430\u043A\u0441\u043E\u043D\u0441\u044C\u043A\u0430",
  "ne": "\u043D\u0435\u043F\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "new": "\u043D\u0435\u0432\u0430\u0440\u0456",
  "ng": "\u043D\u0434\u043E\u043D\u0433\u0430",
  "nia": "\u043D\u0456\u0430\u0441\u044C\u043A\u0430",
  "niu": "\u043D\u0456\u0443\u0435",
  "njo": "\u0430\u043E \u043D\u0430\u0433\u0430",
  "nl": "\u043D\u0456\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "nl-BE": "\u0444\u043B\u0430\u043C\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "nmg": "\u043A\u0432\u0430\u0437\u0456\u043E",
  "nn": "\u043D\u043E\u0440\u0432\u0435\u0437\u044C\u043A\u0430 (\u043D\u044E\u043D\u043E\u0448\u043A)",
  "nnh": "\u043D\u0433\u0454\u043C\u0431\u0443\u043D",
  "no": "\u043D\u043E\u0440\u0432\u0435\u0437\u044C\u043A\u0430",
  "nog": "\u043D\u043E\u0433\u0430\u0439\u0441\u044C\u043A\u0430",
  "non": "\u0434\u0430\u0432\u043D\u044C\u043E\u043D\u043E\u0440\u0432\u0435\u0437\u044C\u043A\u0430",
  "nqo": "\u043D\u043A\u043E",
  "nr": "\u043D\u0434\u0435\u0431\u0435\u043B\u0454 \u043F\u0456\u0432\u0434\u0435\u043D\u043D\u0430",
  "nso": "\u043F\u0456\u0432\u043D\u0456\u0447\u043D\u0430 \u0441\u043E\u0442\u043E",
  "nus": "\u043D\u0443\u0435\u0440",
  "nv": "\u043D\u0430\u0432\u0430\u0445\u043E",
  "nwc": "\u043D\u0435\u0432\u0430\u0440\u0456 \u043A\u043B\u0430\u0441\u0438\u0447\u043D\u0430",
  "ny": "\u043D\u044C\u044F\u043D\u0434\u0436\u0430",
  "nym": "\u043D\u044C\u044F\u043C\u0432\u0435\u0437\u0456",
  "nyn": "\u043D\u044C\u044F\u043D\u043A\u043E\u043B\u0435",
  "nyo": "\u043D\u044C\u043E\u0440\u043E",
  "nzi": "\u043D\u0437\u0456\u043C\u0430",
  "oc": "\u043E\u043A\u0441\u0438\u0442\u0430\u043D\u0441\u044C\u043A\u0430",
  "oj": "\u043E\u0434\u0436\u0456\u0431\u0432\u0430",
  "om": "\u043E\u0440\u043E\u043C\u043E",
  "or": "\u043E\u0434\u0456\u044F",
  "os": "\u043E\u0441\u0435\u0442\u0438\u043D\u0441\u044C\u043A\u0430",
  "osa": "\u043E\u0441\u0435\u0439\u0434\u0436",
  "ota": "\u043E\u0441\u043C\u0430\u043D\u0441\u044C\u043A\u0430",
  "pa": "\u043F\u0430\u043D\u0434\u0436\u0430\u0431\u0456",
  "pag": "\u043F\u0430\u043D\u0433\u0430\u0441\u0456\u043D\u0430\u043D\u0441\u044C\u043A\u0430",
  "pal": "\u043F\u0435\u0445\u043B\u0435\u0432\u0456",
  "pam": "\u043F\u0430\u043C\u043F\u0430\u043D\u0433\u0430",
  "pap": "\u043F\u0430\u043F\u02BC\u044F\u043C\u0435\u043D\u0442\u043E",
  "pau": "\u043F\u0430\u043B\u0430\u0443\u0430\u043D\u0441\u044C\u043A\u0430",
  "pcm": "\u043D\u0456\u0433\u0435\u0440\u0456\u0439\u0441\u044C\u043A\u043E-\u043A\u0440\u0435\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "peo": "\u0434\u0430\u0432\u043D\u044C\u043E\u043F\u0435\u0440\u0441\u044C\u043A\u0430",
  "phn": "\u0444\u0456\u043D\u0456\u043A\u0456\u0439\u0441\u044C\u043A\u043E-\u043F\u0443\u043D\u0456\u0447\u043D\u0430",
  "pi": "\u043F\u0430\u043B\u0456",
  "pl": "\u043F\u043E\u043B\u044C\u0441\u044C\u043A\u0430",
  "pon": "\u043F\u043E\u043D\u0430\u043F\u0435",
  "prg": "\u043F\u0440\u0443\u0441\u0441\u044C\u043A\u0430",
  "pro": "\u0434\u0430\u0432\u043D\u044C\u043E\u043F\u0440\u043E\u0432\u0430\u043D\u0441\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "ps": "\u043F\u0443\u0448\u0442\u0443",
  "pt": "\u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "pt-BR": "\u0431\u0440\u0430\u0437\u0438\u043B\u044C\u0441\u044C\u043A\u0430 \u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "pt-PT": "\u0454\u0432\u0440\u043E\u043F\u0435\u0439\u0441\u044C\u043A\u0430 \u043F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "qu": "\u043A\u0435\u0447\u0443\u0430",
  "quc": "\u043A\u0456\u0447\u0435",
  "raj": "\u0440\u0430\u0434\u0436\u0430\u0441\u0442\u0445\u0430\u043D\u0456",
  "rap": "\u0440\u0430\u043F\u0430\u043D\u0443\u0457",
  "rar": "\u0440\u0430\u0440\u043E\u0442\u043E\u043D\u0433\u0430",
  "rhg": "\u0440\u043E\u0433\u0456\u043D\u0434\u0436\u0430",
  "rm": "\u0440\u0435\u0442\u043E\u0440\u043E\u043C\u0430\u043D\u0441\u044C\u043A\u0430",
  "rn": "\u0440\u0443\u043D\u0434\u0456",
  "ro": "\u0440\u0443\u043C\u0443\u043D\u0441\u044C\u043A\u0430",
  "ro-MD": "\u043C\u043E\u043B\u0434\u0430\u0432\u0441\u044C\u043A\u0430",
  "rof": "\u0440\u043E\u043C\u0431\u043E",
  "rom": "\u0446\u0438\u0433\u0430\u043D\u0441\u044C\u043A\u0430",
  "ru": "\u0440\u043E\u0441\u0456\u0439\u0441\u044C\u043A\u0430",
  "rup": "\u0430\u0440\u0443\u043C\u0443\u043D\u0441\u044C\u043A\u0430",
  "rw": "\u043A\u0456\u043D\u044C\u044F\u0440\u0443\u0430\u043D\u0434\u0430",
  "rwk": "\u0440\u0432\u0430",
  "sa": "\u0441\u0430\u043D\u0441\u043A\u0440\u0438\u0442",
  "sad": "\u0441\u0430\u043D\u0434\u0430\u0432\u0435",
  "sah": "\u0441\u0430\u0445\u0430",
  "sam": "\u0441\u0430\u043C\u0430\u0440\u0438\u0442\u044F\u043D\u0441\u044C\u043A\u0430 \u0430\u0440\u0430\u043C\u0435\u0439\u0441\u044C\u043A\u0430",
  "saq": "\u0441\u0430\u043C\u0431\u0443\u0440\u0443",
  "sas": "\u0441\u0430\u0441\u0430\u043A\u0441\u044C\u043A\u0430",
  "sat": "\u0441\u0430\u043D\u0442\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "sba": "\u043D\u0433\u0430\u043C\u0431\u0430\u0439",
  "sbp": "\u0441\u0430\u043D\u0433\u0443",
  "sc": "\u0441\u0430\u0440\u0434\u0438\u043D\u0441\u044C\u043A\u0430",
  "scn": "\u0441\u0438\u0446\u0438\u043B\u0456\u0439\u0441\u044C\u043A\u0430",
  "sco": "\u0448\u043E\u0442\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "sd": "\u0441\u0438\u043D\u0434\u0445\u0456",
  "sdh": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u043E\u043A\u0443\u0440\u0434\u0441\u044C\u043A\u0430",
  "se": "\u043F\u0456\u0432\u043D\u0456\u0447\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u044C\u043A\u0430",
  "see": "\u0441\u0435\u043D\u0435\u043A\u0430",
  "seh": "\u0441\u0435\u043D\u0430",
  "sel": "\u0441\u0435\u043B\u044C\u043A\u0443\u043F\u0441\u044C\u043A\u0430",
  "ses": "\u043A\u043E\u0439\u0440\u0430\u0431\u043E\u0440\u043E \u0441\u0435\u043D\u0456",
  "sg": "\u0441\u0430\u043D\u0433\u043E",
  "sga": "\u0434\u0430\u0432\u043D\u044C\u043E\u0456\u0440\u043B\u0430\u043D\u0434\u0441\u044C\u043A\u0430",
  "sh": "\u0441\u0435\u0440\u0431\u0441\u044C\u043A\u043E-\u0445\u043E\u0440\u0432\u0430\u0442\u0441\u044C\u043A\u0430",
  "shi": "\u0442\u0430\u0447\u0435\u043B\u0456\u0442",
  "shn": "\u0448\u0430\u043D\u0441\u044C\u043A\u0430",
  "shu": "\u0447\u0430\u0434\u0456\u0439\u0441\u044C\u043A\u0430 \u0430\u0440\u0430\u0431\u0441\u044C\u043A\u0430",
  "si": "\u0441\u0438\u043D\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "sid": "\u0441\u0456\u0434\u0430\u043C\u043E",
  "sk": "\u0441\u043B\u043E\u0432\u0430\u0446\u044C\u043A\u0430",
  "sl": "\u0441\u043B\u043E\u0432\u0435\u043D\u0441\u044C\u043A\u0430",
  "sm": "\u0441\u0430\u043C\u043E\u0430\u043D\u0441\u044C\u043A\u0430",
  "sma": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u043E\u0441\u0430\u0430\u043C\u0441\u044C\u043A\u0430",
  "smj": "\u0441\u0430\u0430\u043C\u0441\u044C\u043A\u0430 \u043B\u0443\u043B\u0435",
  "smn": "\u0441\u0430\u0430\u043C\u0441\u044C\u043A\u0430 \u0456\u043D\u0430\u0440\u0456",
  "sms": "\u0441\u043A\u043E\u043B\u044C\u0442-\u0441\u0430\u0430\u043C\u0441\u044C\u043A\u0430",
  "sn": "\u0448\u043E\u043D\u0430",
  "snk": "\u0441\u043E\u043D\u0456\u043D\u043A\u0435",
  "so": "\u0441\u043E\u043C\u0430\u043B\u0456",
  "sog": "\u0441\u043E\u0433\u0434\u0456\u0439\u0441\u044C\u043A\u0430",
  "sq": "\u0430\u043B\u0431\u0430\u043D\u0441\u044C\u043A\u0430",
  "sr": "\u0441\u0435\u0440\u0431\u0441\u044C\u043A\u0430",
  "srn": "\u0441\u0440\u0430\u043D\u0430\u043D \u0442\u043E\u043D\u0433\u043E",
  "srr": "\u0441\u0435\u0440\u0435\u0440",
  "ss": "\u0441\u0456\u0441\u0432\u0430\u0442\u0456",
  "ssy": "\u0441\u0430\u0445\u043E",
  "st": "\u043F\u0456\u0432\u0434\u0435\u043D\u043D\u0430 \u0441\u043E\u0442\u043E",
  "su": "\u0441\u0443\u043D\u0434\u0430\u043D\u0441\u044C\u043A\u0430",
  "suk": "\u0441\u0443\u043A\u0443\u043C\u0430",
  "sus": "\u0441\u0443\u0441\u0443",
  "sux": "\u0448\u0443\u043C\u0435\u0440\u0441\u044C\u043A\u0430",
  "sv": "\u0448\u0432\u0435\u0434\u0441\u044C\u043A\u0430",
  "sw": "\u0441\u0443\u0430\u0445\u0456\u043B\u0456",
  "sw-CD": "\u0441\u0443\u0430\u0445\u0456\u043B\u0456 (\u041A\u043E\u043D\u0433\u043E)",
  "swb": "\u043A\u043E\u043C\u043E\u0440\u0441\u044C\u043A\u0430",
  "syc": "\u0441\u0438\u0440\u0456\u0439\u0441\u044C\u043A\u0430 \u043A\u043B\u0430\u0441\u0438\u0447\u043D\u0430",
  "syr": "\u0441\u0438\u0440\u0456\u0439\u0441\u044C\u043A\u0430",
  "ta": "\u0442\u0430\u043C\u0456\u043B\u044C\u0441\u044C\u043A\u0430",
  "te": "\u0442\u0435\u043B\u0443\u0433\u0443",
  "tem": "\u0442\u0435\u043C\u043D\u0435",
  "teo": "\u0442\u0435\u0441\u043E",
  "ter": "\u0442\u0435\u0440\u0435\u043D\u043E",
  "tet": "\u0442\u0435\u0442\u0443\u043C",
  "tg": "\u0442\u0430\u0434\u0436\u0438\u0446\u044C\u043A\u0430",
  "th": "\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "ti": "\u0442\u0438\u0433\u0440\u0438\u043D\u044C\u044F",
  "tig": "\u0442\u0438\u0433\u0440\u0435",
  "tiv": "\u0442\u0456\u0432",
  "tk": "\u0442\u0443\u0440\u043A\u043C\u0435\u043D\u0441\u044C\u043A\u0430",
  "tkl": "\u0442\u043E\u043A\u0435\u043B\u0430\u0443",
  "tl": "\u0442\u0430\u0433\u0430\u043B\u044C\u0441\u044C\u043A\u0430",
  "tlh": "\u043A\u043B\u0456\u043D\u0433\u043E\u043D\u0441\u044C\u043A\u0430",
  "tli": "\u0442\u043B\u0456\u043D\u0433\u0456\u0442",
  "tmh": "\u0442\u0430\u043C\u0430\u0448\u0435\u043A",
  "tn": "\u0442\u0441\u0432\u0430\u043D\u0430",
  "to": "\u0442\u043E\u043D\u0433\u0430\u043D\u0441\u044C\u043A\u0430",
  "tog": "\u043D\u044C\u044F\u0441\u0430 \u0442\u043E\u043D\u0433\u0430",
  "tpi": "\u0442\u043E\u043A-\u043F\u0456\u0441\u0456\u043D",
  "tr": "\u0442\u0443\u0440\u0435\u0446\u044C\u043A\u0430",
  "trv": "\u0442\u0430\u0440\u043E\u043A\u043E",
  "ts": "\u0442\u0441\u043E\u043D\u0433\u0430",
  "tsi": "\u0446\u0438\u043C\u0448\u0438\u0430\u043D",
  "tt": "\u0442\u0430\u0442\u0430\u0440\u0441\u044C\u043A\u0430",
  "tum": "\u0442\u0443\u043C\u0431\u0443\u043A\u0430",
  "tvl": "\u0442\u0443\u0432\u0430\u043B\u0443",
  "tw": "\u0442\u0432\u0456",
  "twq": "\u0442\u0430\u0441\u0430\u0432\u0430\u043A",
  "ty": "\u0442\u0430\u0457\u0442\u044F\u043D\u0441\u044C\u043A\u0430",
  "tyv": "\u0442\u0443\u0432\u0438\u043D\u0441\u044C\u043A\u0430",
  "tzm": "\u0446\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0442\u043B\u0430\u0441\u044C\u043A\u0430 \u0442\u0430\u043C\u0430\u0437\u0456\u0433\u0442",
  "udm": "\u0443\u0434\u043C\u0443\u0440\u0442\u0441\u044C\u043A\u0430",
  "ug": "\u0443\u0439\u0433\u0443\u0440\u0441\u044C\u043A\u0430",
  "uga": "\u0443\u0433\u0430\u0440\u0438\u0442\u0441\u044C\u043A\u0430",
  "uk": "\u0443\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
  "umb": "\u0443\u043C\u0431\u0443\u043D\u0434\u0443",
  "und": "\u043D\u0435\u0432\u0456\u0434\u043E\u043C\u0430 \u043C\u043E\u0432\u0430",
  "ur": "\u0443\u0440\u0434\u0443",
  "uz": "\u0443\u0437\u0431\u0435\u0446\u044C\u043A\u0430",
  "vai": "\u0432\u0430\u0457",
  "ve": "\u0432\u0435\u043D\u0434\u0430",
  "vi": "\u0432\u02BC\u0454\u0442\u043D\u0430\u043C\u0441\u044C\u043A\u0430",
  "vo": "\u0432\u043E\u043B\u0430\u043F\u044E\u043A",
  "vot": "\u0432\u043E\u0434\u0441\u044C\u043A\u0430",
  "vun": "\u0432\u0443\u043D\u044C\u043E",
  "wa": "\u0432\u0430\u043B\u043B\u043E\u043D\u0441\u044C\u043A\u0430",
  "wae": "\u0432\u0430\u043B\u044C\u0437\u0435\u0440\u0441\u044C\u043A\u0430",
  "wal": "\u0432\u043E\u043B\u0430\u0439\u0442\u0442\u0430",
  "war": "\u0432\u0430\u0440\u0430\u0439",
  "was": "\u0432\u0430\u0448\u043E",
  "wbp": "\u0432\u0430\u043B\u043F\u0456\u0440\u0456",
  "wo": "\u0432\u043E\u043B\u043E\u0444",
  "wuu": "\u0443\u0441\u044C\u043A\u0430 \u043A\u0438\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "xal": "\u043A\u0430\u043B\u043C\u0438\u0446\u044C\u043A\u0430",
  "xh": "\u043A\u0445\u043E\u0441\u0430",
  "xog": "\u0441\u043E\u0433\u0430",
  "yao": "\u044F\u043E",
  "yap": "\u044F\u043F",
  "yav": "\u044F\u043D\u0433\u0431\u0435\u043D",
  "ybb": "\u0454\u043C\u0431\u0430",
  "yi": "\u0457\u0434\u0438\u0448",
  "yo": "\u0439\u043E\u0440\u0443\u0431\u0430",
  "yrl": "yrl",
  "yue": "\u043A\u0430\u043D\u0442\u043E\u043D\u0441\u044C\u043A\u0430",
  "za": "\u0447\u0436\u0443\u0430\u043D",
  "zap": "\u0441\u0430\u043F\u043E\u0442\u0435\u043A\u0441\u044C\u043A\u0430",
  "zbl": "\u0431\u043B\u0456\u0441\u0441\u0430 \u043C\u043E\u0432\u0430",
  "zen": "\u0437\u0435\u043D\u0430\u0433\u0430",
  "zgh": "\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430 \u043C\u0430\u0440\u043E\u043A\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0431\u0435\u0440\u0431\u0435\u0440\u0441\u044C\u043A\u0430",
  "zh": "\u043A\u0438\u0442\u0430\u0439\u0441\u044C\u043A\u0430",
  "zh-Hans": "\u043A\u0438\u0442\u0430\u0439\u0441\u044C\u043A\u0430 (\u0441\u043F\u0440\u043E\u0449\u0435\u043D\u0435 \u043F\u0438\u0441\u044C\u043C\u043E)",
  "zh-Hant": "\u043A\u0438\u0442\u0430\u0439\u0441\u044C\u043A\u0430 (\u0442\u0440\u0430\u0434\u0438\u0446\u0456\u0439\u043D\u0435 \u043F\u0438\u0441\u044C\u043C\u043E)",
  "zu": "\u0437\u0443\u043B\u0443\u0441\u044C\u043A\u0430",
  "zun": "\u0437\u0443\u043D\u044C\u0457",
  "zxx": "\u0431\u0435\u0437 \u043C\u043E\u0432\u043D\u043E\u0433\u043E \u0432\u043C\u0456\u0441\u0442\u0443",
  "zza": "\u0437\u0430\u0437\u0430\u043A\u0456"
};

// src/l10n/locale/ur.ts
var ur_default = {
  "aa": "\u0627\u0641\u0627\u0631",
  "ab": "\u0627\u0628\u0642\u0627\u0632\u06CC\u0627\u0646",
  "ace": "\u0627\u0686\u0627\u0626\u06CC\u0646\u06CC\u0632",
  "ach": "\u0627\u06A9\u0648\u0644\u06CC",
  "ada": "\u0627\u062F\u0627\u0646\u06AF\u0645\u06D2",
  "ady": "\u0627\u062F\u06CC\u06AF\u06BE\u06D2",
  "af": "\u0627\u0641\u0631\u06CC\u0642\u06CC",
  "agq": "\u0627\u063A\u0645",
  "ain": "\u0627\u06CC\u0646\u0648",
  "ak": "\u0627\u06A9\u0627\u0646",
  "ale": "\u0627\u0644\u06CC\u0648\u062A",
  "alt": "\u062C\u0646\u0648\u0628\u06CC \u0627\u0644\u0679\u0627\u0626\u06CC",
  "am": "\u0627\u0645\u06C1\u0627\u0631\u06CC",
  "an": "\u0627\u0631\u0627\u06AF\u0648\u0646\u06CC\u0632",
  "anp": "\u0627\u0646\u06AF\u06CC\u06A9\u0627",
  "ar": "\u0639\u0631\u0628\u06CC",
  "ar-001": "\u0645\u0627\u0688\u0631\u0646 \u0627\u0633\u0679\u06CC\u0646\u0688\u0631\u0688 \u0639\u0631\u0628\u06CC",
  "arn": "\u0645\u0627\u067E\u0648\u0686\u06D2",
  "arp": "\u0627\u0631\u0627\u067E\u0627\u06C1\u0648",
  "as": "\u0622\u0633\u0627\u0645\u06CC",
  "asa": "\u0622\u0633\u0648",
  "ast": "\u0627\u0633\u0679\u0648\u0631\u06CC\u0627\u0626\u06CC",
  "av": "\u0627\u0648\u0627\u0631\u06CC",
  "awa": "\u0627\u0648\u0627\u062F\u06BE\u06CC",
  "ay": "\u0627\u06CC\u0645\u0627\u0631\u0627",
  "az": "\u0622\u0630\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646\u06CC",
  "az-Arab": "\u0622\u0632\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646\u06CC (\u0639\u0631\u0628\u06CC)",
  "ba": "\u0628\u0627\u0634\u06A9\u06CC\u0631",
  "ban": "\u0628\u0627\u0644\u06CC\u0646\u06CC\u0632",
  "bas": "\u0628\u0627\u0633\u0627",
  "be": "\u0628\u06CC\u0644\u0627\u0631\u0648\u0633\u06CC",
  "bem": "\u0628\u06CC\u0645\u0628\u0627",
  "bez": "\u0628\u06CC\u0646\u0627",
  "bg": "\u0628\u0644\u063A\u0627\u0631\u06CC",
  "bgn": "\u0645\u063A\u0631\u0628\u06CC \u0628\u0644\u0648\u0686\u06CC",
  "bho": "\u0628\u06BE\u0648\u062C\u067E\u0648\u0631\u06CC",
  "bi": "\u0628\u0633\u0644\u0627\u0645\u0627",
  "bin": "\u0628\u06CC\u0646\u06CC",
  "bla": "\u0633\u06A9\u0633\u06CC\u06A9\u0627",
  "bm": "\u0628\u0645\u0628\u0627\u0631\u0627",
  "bn": "\u0628\u0646\u06AF\u0644\u06C1",
  "bo": "\u062A\u0628\u062A\u06CC",
  "br": "\u0628\u0631\u06CC\u0679\u0646",
  "brx": "\u0628\u0648\u0688\u0648",
  "bs": "\u0628\u0648\u0633\u0646\u06CC\u0627\u0626\u06CC",
  "bug": "\u0628\u06AF\u06CC\u0646\u06CC\u0632",
  "byn": "\u0628\u0644\u06CC\u0646",
  "ca": "\u06A9\u06CC\u0679\u0627\u0644\u0627\u0646",
  "ccp": "\u0686\u06A9\u0645\u06C1",
  "ce": "\u0686\u06CC\u0686\u0646",
  "ceb": "\u0633\u06CC\u0628\u0648\u0622\u0646\u0648",
  "cgg": "\u0686\u06CC\u06AF\u0627",
  "ch": "\u0686\u06CC\u0645\u0627\u0631\u0648",
  "chk": "\u0686\u0648\u06A9\u06CC\u0632",
  "chm": "\u0645\u0627\u0631\u06CC",
  "cho": "\u0686\u0627\u06A9\u0679\u0627\u0624",
  "chr": "\u0686\u06CC\u0631\u0648\u06A9\u06CC",
  "chy": "\u0686\u06CC\u0646\u0651\u06D2",
  "ckb": "\u0633\u06CC\u0646\u0679\u0631\u0644 \u06A9\u0631\u062F\u0634",
  "co": "\u06A9\u0648\u0631\u0627\u0633\u06CC\u06A9\u0646",
  "crs": "\u0633\u06CC\u0633\u0644\u0648\u0627 \u06A9\u0631\u06CC\u0648\u0644\u06D2 \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC",
  "cs": "\u0686\u06CC\u06A9",
  "cu": "\u0686\u0631\u0686 \u0633\u0644\u0627\u0648\u06A9",
  "cv": "\u0686\u0648\u0648\u0627\u0634",
  "cy": "\u0648\u06CC\u0644\u0634",
  "da": "\u0688\u06CC\u0646\u0634",
  "dak": "\u0688\u0627\u06A9\u0648\u0679\u0627",
  "dar": "\u062F\u0631\u06AF\u0648\u0627",
  "dav": "\u062A\u0627\u0626\u062A\u0627",
  "de": "\u062C\u0631\u0645\u0646",
  "de-AT": "\u0622\u0633\u0679\u0631\u06CC\u0627\u0626\u06CC \u062C\u0631\u0645\u0646",
  "de-CH": "\u0633\u0648\u0626\u0633 \u06C1\u0627\u0626\u06CC \u062C\u0631\u0645\u0646",
  "dgr": "\u062F\u0648\u06AF\u0631\u06CC\u0628",
  "dje": "\u0632\u0631\u0645\u0627",
  "doi": "\u0688\u0648\u06AF\u0631\u06CC",
  "dsb": "\u0630\u06CC\u0644\u06CC \u0633\u0631\u0628\u06CC\u0627\u0626\u06CC",
  "dua": "\u062F\u0648\u0627\u0644\u0627",
  "dv": "\u0688\u06CC\u0648\u06CC\u06C1\u06CC",
  "dyo": "\u062C\u0648\u0644\u0627 \u0641\u0648\u0646\u064A\u0627",
  "dz": "\u0698\u0648\u0646\u06AF\u06A9\u06BE\u0627",
  "dzg": "\u062F\u0632\u0627\u06AF\u0627",
  "ebu": "\u0627\u0645\u0628\u0648",
  "ee": "\u0627\u06CC\u0648",
  "efi": "\u0627\u06CC\u0641\u0650\u06A9",
  "eka": "\u0627\u06CC\u06A9\u0627\u062C\u0648\u06CC",
  "el": "\u06CC\u0648\u0646\u0627\u0646\u06CC",
  "en": "\u0627\u0646\u06AF\u0631\u06CC\u0632\u06CC",
  "en-AU": "\u0622\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627\u0626\u06CC \u0627\u0646\u06AF\u0631\u06CC\u0632\u06CC",
  "en-CA": "\u06A9\u06CC\u0646\u06CC\u0688\u06CC\u0646 \u0627\u0646\u06AF\u0631\u06CC\u0632\u06CC",
  "en-GB": "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u0627\u0646\u06AF\u0631\u06CC\u0632\u06CC",
  "en-US": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0627\u0646\u06AF\u0631\u06CC\u0632\u06CC",
  "eo": "\u0627\u06CC\u0633\u067E\u0631\u0627\u0646\u0679\u0648",
  "es": "\u06C1\u0633\u067E\u0627\u0646\u0648\u06CC",
  "es-419": "\u0644\u0627\u0637\u06CC\u0646\u06CC \u0627\u0645\u0631\u06CC\u06A9\u06CC \u06C1\u0633\u067E\u0627\u0646\u0648\u06CC",
  "es-ES": "\u06CC\u0648\u0631\u067E\u06CC \u06C1\u0633\u067E\u0627\u0646\u0648\u06CC",
  "es-MX": "\u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0646 \u06C1\u0633\u067E\u0627\u0646\u0648\u06CC",
  "et": "\u0627\u0633\u0679\u0648\u0646\u06CC\u0646",
  "eu": "\u0628\u0627\u0633\u06A9\u06CC",
  "ewo": "\u0627\u06CC\u0648\u0627\u0646\u0688\u0648",
  "fa": "\u0641\u0627\u0631\u0633\u06CC",
  "fa-AF": "\u062F\u0631\u06CC",
  "ff": "\u0641\u0648\u0644\u06C1",
  "fi": "\u0641\u06CC\u0646\u06CC\u0634",
  "fil": "\u0641\u0644\u06CC\u067E\u06CC\u0646\u0648",
  "fj": "\u0641\u062C\u06CC",
  "fo": "\u0641\u06CC\u0631\u0648\u0626\u06CC\u0632",
  "fon": "\u0641\u0648\u0646",
  "fr": "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC",
  "fr-CA": "\u06A9\u06CC\u0646\u06CC\u0688\u06CC\u0646 \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC",
  "fr-CH": "\u0633\u0648\u0626\u0633 \u0641\u0631\u06CC\u0646\u0686",
  "frc": "\u06A9\u0627\u062C\u0646 \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC",
  "fur": "\u0641\u0631\u06CC\u0648\u0644\u06CC\u0627\u0626\u06CC",
  "fy": "\u0645\u063A\u0631\u0628\u06CC \u0641\u0631\u06CC\u0633\u06CC\u0626\u0646",
  "ga": "\u0622\u0626\u0631\u0634",
  "gaa": "\u06AF\u0627",
  "gag": "\u063A\u0627\u063A\u0627\u0648\u0632",
  "gan": "gan",
  "gd": "\u0633\u06A9\u0627\u0679\u0634 \u06AF\u06CC\u0644\u06A9",
  "gez": "\u06AF\u06CC\u0632",
  "gil": "\u06AF\u0644\u0628\u0631\u062A\u06CC\u0632",
  "gl": "\u06AF\u0627\u0644\u06CC\u0634\u06CC\u0627\u0626\u06CC",
  "gn": "\u06AF\u064F\u0627\u0631\u0627\u0646\u06CC",
  "gor": "\u06AF\u0648\u0631\u0627\u0646\u0679\u0627\u0644\u0648",
  "gsw": "\u0633\u0648\u0626\u0633 \u062C\u0631\u0645\u0646",
  "gu": "\u06AF\u062C\u0631\u0627\u062A\u06CC",
  "guz": "\u06AF\u0633\u06CC",
  "gv": "\u0645\u06CC\u0646\u06A9\u0633",
  "gwi": "\u06AF\u0648\u0626\u0686 \u0627\u0646",
  "ha": "\u06C1\u0624\u0633\u0627",
  "haw": "\u06C1\u0648\u0627\u0626\u06CC",
  "he": "\u0639\u0628\u0631\u0627\u0646\u06CC",
  "hi": "\u06C1\u0646\u062F\u06CC",
  "hil": "\u06C1\u0627\u0644\u06CC\u06AF\u06CC\u0646\u0648\u0646",
  "hmn": "\u06C1\u0645\u0627\u0646\u06AF",
  "hr": "\u06A9\u0631\u0627\u062A\u06CC",
  "hsb": "\u0627\u067E\u0631 \u0633\u0631\u0628\u06CC\u0627\u0626\u06CC",
  "ht": "\u06C1\u06CC\u062A\u06CC",
  "hu": "\u06C1\u0646\u06AF\u06CC\u0631\u06CC\u0646",
  "hup": "\u06C1\u06CC\u0648\u067E\u0627",
  "hy": "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627\u0626\u06CC",
  "hz": "\u06C1\u0631\u06CC\u0631\u0648",
  "ia": "\u0628\u06CC\u0646 \u0644\u0633\u0627\u0646\u06CC\u0627\u062A",
  "iba": "\u0627\u06CC\u0628\u0627\u0646",
  "ibb": "\u0627\u0628\u06CC \u0628\u06CC\u0648",
  "id": "\u0627\u0646\u0688\u0648\u0646\u06CC\u062B\u06CC\u0627\u0626\u06CC",
  "ig": "\u0627\u0650\u06AF\u0628\u0648",
  "ii": "\u0633\u0686\u0648\u0627\u0646 \u0627\u06CC",
  "ilo": "\u0627\u06CC\u0644\u0648\u06A9\u0648",
  "inh": "\u0627\u0646\u06AF\u0648\u0634",
  "io": "\u0627\u06CC\u0688\u0648",
  "is": "\u0622\u0626\u0633 \u0644\u06CC\u0646\u0688\u06A9",
  "it": "\u0627\u0637\u0627\u0644\u0648\u06CC",
  "iu": "\u0627\u06CC\u0646\u064F\u06A9\u0679\u06CC\u0679\u0679",
  "ja": "\u062C\u0627\u067E\u0627\u0646\u06CC",
  "jbo": "\u0644\u0648\u062C\u0628\u0627\u0646",
  "jgo": "\u0646\u06AF\u0648\u0645\u0628\u0627",
  "jmc": "\u0645\u0627\u0634\u06CC\u0645",
  "jv": "\u062C\u0627\u0648\u06CC",
  "ka": "\u062C\u0627\u0631\u062C\u06CC\u0627\u0626\u06CC",
  "kab": "\u0642\u0628\u0627\u0626\u0644\u06CC",
  "kac": "\u06A9\u0627\u0686\u0646",
  "kaj": "\u062C\u06D2 \u062C\u0648",
  "kam": "\u06A9\u0627\u0645\u0628\u0627",
  "kbd": "\u06A9\u0628\u0627\u0631\u0688\u06CC\u0646",
  "kcg": "\u062A\u06CC\u0627\u067E",
  "kde": "\u0645\u0627\u06A9\u0648\u0646\u062F\u0647",
  "kea": "\u06A9\u0627\u0628\u0648\u064A\u0631\u062F\u064A\u0627\u0646\u0648",
  "kfo": "\u06A9\u0648\u0631\u0648",
  "kg": "\u06A9\u0627\u0646\u06AF\u0648",
  "kgp": "kgp",
  "kha": "\u06A9\u06BE\u0627\u0633\u06CC",
  "khq": "\u06A9\u0648\u064A\u0631\u0627 \u0634\u064A\u0646\u064A",
  "ki": "\u06A9\u06CC\u06A9\u0648\u06CC\u0648",
  "kj": "\u06A9\u0648\u0646\u06CC\u0627\u0645\u0627",
  "kk": "\u0642\u0632\u0627\u062E",
  "kkj": "\u06A9\u0627\u06A9\u0648",
  "kl": "\u06A9\u0627\u0644\u0627\u0644\u064A\u0633\u062A",
  "kln": "\u06A9\u0627\u0644\u064A\u0646\u062C\u064A\u0646",
  "km": "\u062E\u0645\u06CC\u0631",
  "kmb": "\u06A9\u06CC\u0645\u0628\u0648\u0646\u0688\u0648",
  "kn": "\u06A9\u0646\u0651\u0627\u0688\u0627",
  "ko": "\u06A9\u0648\u0631\u06CC\u0627\u0626\u06CC",
  "koi": "\u06A9\u0648\u0645\u06CC \u067E\u0631\u0645\u06CC\u0627\u06A9",
  "kok": "\u06A9\u0648\u0646\u06A9\u0646\u06CC",
  "kpe": "\u06A9\u06CC\u067E\u06CC\u0644\u0651\u06D2",
  "kr": "\u06A9\u0646\u0648\u0631\u06CC",
  "krc": "\u06A9\u0631\u0627\u0686\u06D2 \u0628\u0627\u0644\u06A9\u0631",
  "krl": "\u06A9\u06CC\u0631\u0644\u06CC\u0646",
  "kru": "\u06A9\u0648\u0631\u0648\u06A9\u06BE",
  "ks": "\u06A9\u0634\u0645\u06CC\u0631\u06CC",
  "ksb": "\u0634\u0627\u0645\u0628\u0627\u0644\u0627",
  "ksf": "\u0628\u0627\u0641\u064A\u0627",
  "ksh": "\u06A9\u0648\u0644\u0648\u06AF\u0646\u06CC\u0627\u0626\u06CC",
  "ku": "\u06A9\u0631\u062F\u0634",
  "kum": "\u06A9\u0648\u0645\u06CC\u06A9",
  "kv": "\u06A9\u0648\u0645\u06CC",
  "kw": "\u06A9\u0648\u0631\u0646\u0634",
  "ky": "\u06A9\u0631\u063A\u06CC\u0632\u06CC",
  "la": "\u0644\u0627\u0637\u06CC\u0646\u06CC",
  "lad": "\u0644\u06CC\u0688\u06CC\u0646\u0648",
  "lag": "\u0644\u0627\u0646\u06AF\u06CC",
  "lb": "\u0644\u06A9\u0633\u0645\u0628\u0631\u06AF\u06CC\u0634",
  "lez": "\u0644\u06CC\u0632\u06AF\u06CC\u0627\u0646",
  "lg": "\u06AF\u06CC\u0646\u0688\u0627",
  "li": "\u0644\u06CC\u0645\u0628\u0631\u06AF\u0634",
  "lij": "lij",
  "lkt": "\u0644\u0627\u06A9\u0648\u0679\u0627",
  "ln": "\u0644\u0650\u0646\u06AF\u064E\u0644\u0627",
  "lo": "\u0644\u0627\u0624",
  "lou": "\u0644\u0648\u0632\u06CC\u0627\u0646\u0627 \u06A9\u0631\u06CC\u0648\u0644",
  "loz": "\u0644\u0648\u0632\u06CC",
  "lrc": "\u0634\u0645\u0627\u0644\u06CC \u0644\u0631\u06CC",
  "lt": "\u0644\u06CC\u062A\u06BE\u0648\u06CC\u0646\u06CC\u0646",
  "lu": "\u0644\u0628\u0627-\u06A9\u0627\u062A\u0627\u0646\u062C\u0627",
  "lua": "\u0644\u06CC\u0648\u0628\u0627 \u0644\u0648\u0644\u0648\u0622",
  "lun": "\u0644\u0648\u0646\u0688\u0627",
  "luo": "\u0644\u0648",
  "lus": "\u0645\u06CC\u0632\u0648",
  "luy": "\u0644\u0648\u06CC\u0627",
  "lv": "\u0644\u06CC\u0679\u0648\u06CC\u0646",
  "mad": "\u0645\u062F\u0648\u0631\u0633\u06CC",
  "mag": "\u0645\u06AF\u0627\u06C1\u06CC",
  "mai": "\u0645\u06CC\u062A\u06BE\u06CC\u0644\u06CC",
  "mak": "\u0645\u06A9\u0627\u0633\u0631",
  "mas": "\u0645\u0633\u0627\u0626\u06CC",
  "mdf": "\u0645\u0648\u06A9\u0634\u0627",
  "men": "\u0645\u06CC\u0646\u062F\u06D2",
  "mer": "\u0645\u06CC\u0631\u0648",
  "mfe": "\u0645\u0648\u0631\u06CC\u0633\u06CC\u06CC\u0646",
  "mg": "\u0645\u0644\u0627\u06AF\u0627\u0633\u06CC",
  "mgh": "\u0645\u0627\u062E\u0627\u0648\u0627-\u0645\u064A\u062A\u0648",
  "mgo": "\u0645\u06CC\u0679\u0627",
  "mh": "\u0645\u0627\u0631\u0634\u0644\u06CC\u0632",
  "mi": "\u0645\u0627\u0624\u0631\u06CC",
  "mic": "\u0645\u06A9\u0645\u06CC\u06A9",
  "min": "\u0645\u0646\u0627\u0646\u06AF\u06A9\u0628\u0627\u0624",
  "mk": "\u0645\u0642\u062F\u0648\u0646\u06CC\u0627\u0626\u06CC",
  "ml": "\u0645\u0627\u0644\u0627\u06CC\u0627\u0644\u0645",
  "mn": "\u0645\u0646\u06AF\u0648\u0644\u06CC\u0646",
  "mni": "\u0645\u0646\u06CC \u067E\u0648\u0631\u06CC",
  "moh": "\u0645\u0648\u06C1\u0627\u06A9",
  "mos": "\u0645\u0648\u0633\u06CC",
  "mr": "\u0645\u0631\u0627\u0679\u0647\u06CC",
  "ms": "\u0645\u0627\u0644\u06D2",
  "mt": "\u0645\u0627\u0644\u0679\u06CC",
  "mua": "\u0645\u0646\u0688\u0627\u0646\u06AF",
  "mul": "\u0645\u062A\u0639\u062F\u062F \u0632\u0628\u0627\u0646\u06CC\u06BA",
  "mus": "\u06A9\u0631\u06CC\u06A9",
  "mwl": "\u0645\u06CC\u0631\u0627\u0646\u0688\u06CC\u0632",
  "my": "\u0628\u0631\u0645\u06CC",
  "myv": "\u0627\u0631\u0632\u06CC\u0627",
  "mzn": "\u0645\u0632\u0646\u062F\u0631\u0627\u0646\u06CC",
  "na": "\u0646\u0627\u0624\u0631\u0648",
  "nap": "\u0646\u06CC\u0627\u067E\u0648\u0644\u06CC\u0679\u0646",
  "naq": "\u0646\u0627\u0645\u0627",
  "nb": "\u0646\u0627\u0631\u0648\u06CC\u062C\u06CC\u0646 \u0628\u0648\u06A9\u0645\u0644",
  "nd": "\u0634\u0645\u0627\u0644\u06CC \u062F\u0628\u06CC\u0644",
  "nds": "\u0627\u062F\u0646\u06CC \u062C\u0631\u0645\u0646",
  "nds-NL": "\u0627\u062F\u0646\u06CC \u0633\u06CC\u06A9\u0633\u0646",
  "ne": "\u0646\u06CC\u067E\u0627\u0644\u06CC",
  "new": "\u0646\u06CC\u0648\u0627\u0631\u06CC",
  "ng": "\u0646\u0688\u0648\u0646\u06AF\u0627",
  "nia": "\u0646\u06CC\u0627\u0633",
  "niu": "\u0646\u06CC\u0648\u06CC\u0627\u0626\u06CC",
  "nl": "\u0688\u0686",
  "nl-BE": "\u0641\u0644\u06CC\u0645\u0650\u0634",
  "nmg": "\u06A9\u0648\u0627\u064A\u0633\u0648",
  "nn": "\u0646\u0627\u0631\u0648\u06CC\u062C\u06CC\u0646 \u0646\u06CC\u0646\u0648\u0631\u0633\u06A9",
  "nnh": "\u0646\u06AF\u06CC\u0645\u0628\u0648\u0646",
  "no": "\u0646\u0627\u0631\u0648\u06CC\u062C\u06CC\u0646",
  "nog": "\u0646\u0648\u06AF\u0627\u0626\u06CC",
  "nqo": "\u0627\u06CC\u0646\u06A9\u0648",
  "nr": "\u062C\u0646\u0648\u0628\u06CC \u0646\u0688\u06CC\u0628\u06CC\u0644\u06CC",
  "nso": "\u0634\u0645\u0627\u0644\u06CC \u0633\u0648\u062A\u06BE\u0648",
  "nus": "\u0646\u0648\u06CC\u0631",
  "nv": "\u0646\u0648\u0627\u062C\u0648",
  "ny": "\u0646\u06CC\u0627\u0646\u062C\u0627",
  "nyn": "\u0646\u06CC\u0646\u06A9\u0648\u0644",
  "oc": "\u0622\u06A9\u0633\u06CC\u0679\u0627\u0646",
  "om": "\u0627\u0648\u0631\u0648\u0645\u0648",
  "or": "\u0627\u0691\u06CC\u06C1",
  "os": "\u0627\u0648\u0633\u06CC\u0679\u06A9",
  "pa": "\u067E\u0646\u062C\u0627\u0628\u06CC",
  "pag": "\u067E\u0646\u06AF\u0627\u0633\u0646\u0627\u0646",
  "pam": "\u067E\u0627\u0645\u067E\u0646\u06AF\u0627",
  "pap": "\u067E\u0627\u067E\u06CC\u0627\u0645\u06CC\u0646\u0679\u0648",
  "pau": "\u067E\u0627\u0644\u0627\u0648\u0646",
  "pcm": "\u0646\u0627\u0626\u062C\u06CC\u0631\u06CC\u0627\u0626\u06CC \u067E\u0688\u06AF\u0646",
  "pl": "\u067E\u0648\u0644\u0634",
  "prg": "\u067E\u0627\u0631\u0633\u06CC",
  "ps": "\u067E\u0634\u062A\u0648",
  "pt": "\u067E\u064F\u0631\u062A\u06AF\u0627\u0644\u06CC",
  "pt-BR": "\u0628\u0631\u0627\u0632\u06CC\u0644\u06CC \u067E\u0631\u062A\u06AF\u0627\u0644\u06CC",
  "pt-PT": "\u06CC\u0648\u0631\u067E\u06CC \u067E\u0631\u062A\u06AF\u0627\u0644\u06CC",
  "qu": "\u06A9\u0648\u06CC\u0686\u0648\u0622",
  "quc": "\u06A9\u064A\u0634\u06CC",
  "rap": "\u0631\u067E\u0627\u0646\u0648\u06CC",
  "rar": "\u0631\u0627\u0631\u0648\u062A\u0648\u0646\u06AF\u0627\u0646",
  "rhg": "\u0631\u0648\u06C1\u0646\u06AF\u06CC\u0627",
  "rm": "\u0631\u0648\u0645\u0627\u0646\u0634",
  "rn": "\u0631\u0648\u0646\u0688\u06CC",
  "ro": "\u0631\u0648\u0645\u06CC\u0646\u06CC\u0646",
  "ro-MD": "\u0645\u0627\u0644\u062F\u0648\u0648\u0627",
  "rof": "\u0631\u0648\u0645\u0628\u0648",
  "ru": "\u0631\u0648\u0633\u06CC",
  "rup": "\u0627\u0631\u0648\u0645\u0627\u0646\u06CC",
  "rw": "\u06A9\u06CC\u0646\u06CC\u0627\u0631\u0648\u0627\u0646\u0688\u0627",
  "rwk": "\u0631\u0648\u0627",
  "sa": "\u0633\u0646\u0633\u06A9\u0631\u062A",
  "sad": "\u0633\u0646\u0688\u0627\u0648\u06D2",
  "sah": "\u0633\u0627\u06A9\u06BE\u0627",
  "saq": "\u0633\u0627\u0645\u0628\u0648\u0631\u0648",
  "sat": "\u0633\u0646\u062A\u0627\u0644\u06CC",
  "sba": "\u0646\u06AF\u0627\u0645\u0628\u06D2",
  "sbp": "\u0633\u0627\u0646\u06AF\u0648",
  "sc": "\u0633\u0631\u062F\u06CC\u0646\u06CC\u0646",
  "scn": "\u0633\u06CC\u0633\u06CC\u0644\u06CC\u0646",
  "sco": "\u0633\u06A9\u0627\u0679",
  "sd": "\u0633\u0646\u062F\u06BE\u06CC",
  "sdh": "\u062C\u0646\u0648\u0628\u06CC \u06A9\u0631\u062F",
  "se": "\u0634\u0645\u0627\u0644\u06CC \u0633\u0627\u0645\u06CC",
  "seh": "\u0633\u06CC\u0646\u0627",
  "ses": "\u06A9\u0648\u064A\u0631\u0627\u0628\u0648\u0631\u0648 \u0633\u064A\u0646\u06CC",
  "sg": "\u0633\u0627\u06BA\u063A\u0648",
  "sh": "\u0633\u0631\u0628\u0648-\u06A9\u0631\u0648\u0626\u06CC\u0634\u06CC\u0646",
  "shi": "\u062A\u0634\u0644\u062D\u064A\u062A",
  "shn": "\u0634\u0627\u0646",
  "si": "\u0633\u0646\u06C1\u0627\u0644\u0627",
  "sk": "\u0633\u0644\u0648\u0648\u0627\u06A9",
  "sl": "\u0633\u0644\u0648\u0648\u06CC\u0646\u06CC\u0627\u0626\u06CC",
  "sm": "\u0633\u0627\u0645\u0648\u0622\u0646",
  "sma": "\u062C\u0646\u0648\u0628\u06CC \u0633\u0627\u0645\u06CC",
  "smj": "\u0644\u0648\u0644 \u0633\u0627\u0645\u06CC",
  "smn": "\u0627\u0646\u0627\u0631\u06CC \u0633\u0627\u0645\u06CC",
  "sms": "\u0633\u06A9\u0648\u0644\u0679 \u0633\u0627\u0645\u06CC",
  "sn": "\u0634\u0648\u0646\u0627",
  "snk": "\u0633\u0648\u0646\u0646\u06A9\u06D2",
  "so": "\u0635\u0648\u0645\u0627\u0644\u06CC",
  "sq": "\u0627\u0644\u0628\u0627\u0646\u06CC",
  "sr": "\u0633\u0631\u0628\u06CC\u0646",
  "srn": "\u0633\u0631\u0627\u0646\u0646 \u0679\u0648\u0646\u06AF\u0648",
  "ss": "\u0633\u0648\u0627\u062A\u06CC",
  "ssy": "\u0633\u0627\u06C1\u0648",
  "st": "\u062C\u0646\u0648\u0628\u06CC \u0633\u0648\u062A\u06BE\u0648",
  "su": "\u0633\u0646\u0688\u0627\u0646\u06CC\u0632",
  "suk": "\u0633\u06A9\u0648\u0645\u0627",
  "sv": "\u0633\u0648\u06CC\u0688\u0634",
  "sw": "\u0633\u0648\u0627\u062D\u0644\u06CC",
  "sw-CD": "\u06A9\u0627\u0646\u06AF\u0648 \u0633\u0648\u0627\u062D\u0644\u06CC",
  "swb": "\u06A9\u0648\u0645\u0648\u0631\u06CC\u0627\u0626\u06CC",
  "syr": "\u0633\u0631\u06CC\u0627\u0646\u06CC",
  "ta": "\u062A\u0645\u0644",
  "te": "\u062A\u06CC\u0644\u06AF\u0648",
  "tem": "\u0679\u0645\u0646\u06D2",
  "teo": "\u062A\u06CC\u0633\u0648",
  "tet": "\u0679\u06CC\u0679\u0645",
  "tg": "\u062A\u0627\u062C\u06A9",
  "th": "\u062A\u06BE\u0627\u0626\u06CC",
  "ti": "\u0679\u06AF\u0631\u06CC\u0646\u06CC\u0627",
  "tig": "\u0679\u06AF\u0631\u06D2",
  "tk": "\u062A\u0631\u06A9\u0645\u0627\u0646",
  "tl": "\u0679\u06CC\u06AF\u0627 \u0644\u0648\u06AF",
  "tlh": "\u06A9\u0644\u0646\u06AF\u0646",
  "tn": "\u0633\u0648\u0627\u0646\u0627",
  "to": "\u0679\u0648\u0646\u06AF\u0646",
  "tpi": "\u0679\u0648\u06A9 \u067E\u0650\u0633\u0650\u0646",
  "tr": "\u062A\u0631\u06A9\u06CC",
  "trv": "\u0679\u0648\u0631\u0648\u06A9\u0648",
  "ts": "\u0632\u0648\u0646\u06AF\u0627",
  "tt": "\u062A\u0627\u062A\u0627\u0631",
  "tum": "\u0679\u0645\u0628\u0648\u06A9\u0627",
  "tvl": "\u062A\u0648\u0648\u0627\u0644\u0648",
  "tw": "\u062A\u0648\u06CC",
  "twq": "\u062A\u0627\u0633\u0627\u0648\u0627\u0642",
  "ty": "\u062A\u0627\u06C1\u06CC\u062A\u06CC",
  "tyv": "\u062A\u0648\u0648\u06CC\u0646\u06CC\u0646",
  "tzm": "\u0633\u06CC\u0646\u0679\u0631\u0644 \u0627\u06CC\u0679\u0644\u0633 \u0679\u0645\u0627\u0632\u0627\u0626\u0679",
  "udm": "\u0627\u062F\u0645\u0648\u0631\u062A",
  "ug": "\u06CC\u0648\u0626\u06AF\u06C1\u0631",
  "uk": "\u06CC\u0648\u06A9\u0631\u06CC\u0646\u06CC\u0627\u0626\u06CC",
  "umb": "\u0627\u0648\u0645\u0628\u0648\u0646\u062F\u0648",
  "und": "\u0646\u0627\u0645\u0639\u0644\u0648\u0645 \u0632\u0628\u0627\u0646",
  "ur": "\u0627\u0631\u062F\u0648",
  "uz": "\u0627\u0632\u0628\u06CC\u06A9",
  "vai": "\u0648\u0627\u0626\u06CC",
  "ve": "\u0648\u06CC\u0646\u0688\u0627",
  "vi": "\u0648\u06CC\u062A\u0646\u0627\u0645\u06CC",
  "vo": "\u0648\u0648\u0644\u0627\u067E\u0648\u06A9",
  "vun": "\u0648\u0646\u062C\u0648",
  "wa": "\u0648\u0627\u0644\u0648\u0646",
  "wae": "\u0648\u0627\u0644\u0633\u0631",
  "wal": "\u0648\u0648\u0644\u0627\u06CC\u062A\u0627",
  "war": "\u0648\u0627\u0631\u06D2",
  "wbp": "\u0648\u0627\u0631\u0644\u067E\u06CC\u0631\u06CC",
  "wo": "\u0648\u0648\u0644\u0648\u0641",
  "xal": "\u06A9\u0627\u0644\u0645\u06CC\u06A9",
  "xh": "\u0698\u0648\u0633\u0627",
  "xog": "\u0633\u0648\u06AF\u0627",
  "yav": "\u06CC\u0627\u0646\u06AF\u0628\u06CC\u0646",
  "ybb": "\u06CC\u0645\u0628\u0627",
  "yi": "\u06CC\u062F\u0634",
  "yo": "\u06CC\u0648\u0631\u0648\u0628\u0627",
  "yrl": "yrl",
  "yue": "\u06A9\u06CC\u0646\u0679\u0648\u0646\u06CC\u0632",
  "zgh": "\u0627\u0633\u0679\u06CC\u0646\u0688\u0631\u0688 \u0645\u0631\u0627\u0642\u0634\u06CC \u062A\u0645\u0627\u0632\u06CC\u0642\u06CC",
  "zh": "\u0686\u06CC\u0646\u06CC",
  "zh-Hans": "\u0686\u06CC\u0646\u06CC (\u0622\u0633\u0627\u0646 \u06A9\u0631\u062F\u06C1)",
  "zh-Hant": "\u0631\u0648\u0627\u06CC\u062A\u06CC \u0686\u06CC\u0646\u06CC",
  "zu": "\u0632\u0648\u0644\u0648",
  "zun": "\u0632\u0648\u0646\u06CC",
  "zxx": "\u06A9\u0648\u0626\u06CC \u0644\u0633\u0627\u0646\u06CC \u0645\u0648\u0627\u062F \u0646\u06C1\u06CC\u06BA",
  "zza": "\u0632\u0627\u0632\u0627"
};

// src/l10n/locale/vi.ts
var vi_default = {
  "aa": "Ti\u1EBFng Afar",
  "ab": "Ti\u1EBFng Abkhazia",
  "ace": "Ti\u1EBFng Achinese",
  "ach": "Ti\u1EBFng Acoli",
  "ada": "Ti\u1EBFng Adangme",
  "ady": "Ti\u1EBFng Adyghe",
  "ae": "Ti\u1EBFng Avestan",
  "af": "Ti\u1EBFng Afrikaans",
  "afh": "Ti\u1EBFng Afrihili",
  "agq": "Ti\u1EBFng Aghem",
  "ain": "Ti\u1EBFng Ainu",
  "ak": "Ti\u1EBFng Akan",
  "akk": "Ti\u1EBFng Akkadia",
  "akz": "Ti\u1EBFng Alabama",
  "ale": "Ti\u1EBFng Aleut",
  "aln": "Ti\u1EBFng Gheg Albani",
  "alt": "Ti\u1EBFng Altai Mi\u1EC1n Nam",
  "am": "Ti\u1EBFng Amharic",
  "an": "Ti\u1EBFng Aragon",
  "ang": "Ti\u1EBFng Anh c\u1ED5",
  "anp": "Ti\u1EBFng Angika",
  "ar": "Ti\u1EBFng \u1EA2 R\u1EADp",
  "ar-001": "Ti\u1EBFng \u1EA2 R\u1EADp Hi\u1EC7n \u0111\u1EA1i",
  "arc": "Ti\u1EBFng Aramaic",
  "arn": "Ti\u1EBFng Mapuche",
  "aro": "Ti\u1EBFng Araona",
  "arp": "Ti\u1EBFng Arapaho",
  "arq": "Ti\u1EBFng \u1EA2 R\u1EADp Algeria",
  "ars": "Ti\u1EBFng \u1EA2 R\u1EADp Najdi",
  "arw": "Ti\u1EBFng Arawak",
  "arz": "Ti\u1EBFng \u1EA2 R\u1EADp Ai C\u1EADp",
  "as": "Ti\u1EBFng Assam",
  "asa": "Ti\u1EBFng Asu",
  "ase": "Ng\xF4n ng\u1EEF K\xFD hi\u1EC7u M\u1EF9",
  "ast": "Ti\u1EBFng Asturias",
  "av": "Ti\u1EBFng Avaric",
  "awa": "Ti\u1EBFng Awadhi",
  "ay": "Ti\u1EBFng Aymara",
  "az": "Ti\u1EBFng Azerbaijan",
  "ba": "Ti\u1EBFng Bashkir",
  "bal": "Ti\u1EBFng Baluchi",
  "ban": "Ti\u1EBFng Bali",
  "bar": "Ti\u1EBFng Bavaria",
  "bas": "Ti\u1EBFng Basaa",
  "bax": "Ti\u1EBFng Bamun",
  "bbc": "Ti\u1EBFng Batak Toba",
  "bbj": "Ti\u1EBFng Ghomala",
  "be": "Ti\u1EBFng Belarus",
  "bej": "Ti\u1EBFng Beja",
  "bem": "Ti\u1EBFng Bemba",
  "bew": "Ti\u1EBFng Betawi",
  "bez": "Ti\u1EBFng Bena",
  "bfd": "Ti\u1EBFng Bafut",
  "bfq": "Ti\u1EBFng Badaga",
  "bg": "Ti\u1EBFng Bulgaria",
  "bgn": "Ti\u1EBFng T\xE2y Balochi",
  "bho": "Ti\u1EBFng Bhojpuri",
  "bi": "Ti\u1EBFng Bislama",
  "bik": "Ti\u1EBFng Bikol",
  "bin": "Ti\u1EBFng Bini",
  "bjn": "Ti\u1EBFng Banjar",
  "bkm": "Ti\u1EBFng Kom",
  "bla": "Ti\u1EBFng Siksika",
  "bm": "Ti\u1EBFng Bambara",
  "bn": "Ti\u1EBFng Bangla",
  "bo": "Ti\u1EBFng T\xE2y T\u1EA1ng",
  "bpy": "Ti\u1EBFng Bishnupriya",
  "bqi": "Ti\u1EBFng Bakhtiari",
  "br": "Ti\u1EBFng Breton",
  "bra": "Ti\u1EBFng Braj",
  "brh": "Ti\u1EBFng Brahui",
  "brx": "Ti\u1EBFng Bodo",
  "bs": "Ti\u1EBFng Bosnia",
  "bss": "Ti\u1EBFng Akoose",
  "bua": "Ti\u1EBFng Buriat",
  "bug": "Ti\u1EBFng Bugin",
  "bum": "Ti\u1EBFng Bulu",
  "byn": "Ti\u1EBFng Blin",
  "byv": "Ti\u1EBFng Medumba",
  "ca": "Ti\u1EBFng Catalan",
  "cad": "Ti\u1EBFng Caddo",
  "car": "Ti\u1EBFng Carib",
  "cay": "Ti\u1EBFng Cayuga",
  "cch": "Ti\u1EBFng Atsam",
  "ccp": "Ti\u1EBFng Chakma",
  "ce": "Ti\u1EBFng Chechen",
  "ceb": "Ti\u1EBFng Cebuano",
  "cgg": "Ti\u1EBFng Chiga",
  "ch": "Ti\u1EBFng Chamorro",
  "chb": "Ti\u1EBFng Chibcha",
  "chg": "Ti\u1EBFng Chagatai",
  "chk": "Ti\u1EBFng Chuuk",
  "chm": "Ti\u1EBFng Mari",
  "chn": "Bi\u1EC7t ng\u1EEF Chinook",
  "cho": "Ti\u1EBFng Choctaw",
  "chp": "Ti\u1EBFng Chipewyan",
  "chr": "Ti\u1EBFng Cherokee",
  "chy": "Ti\u1EBFng Cheyenne",
  "ckb": "Ti\u1EBFng Kurd Mi\u1EC1n Trung",
  "co": "Ti\u1EBFng Corsica",
  "cop": "Ti\u1EBFng Coptic",
  "cps": "Ti\u1EBFng Capiznon",
  "cr": "Ti\u1EBFng Cree",
  "crh": "Ti\u1EBFng Th\u1ED5 Nh\u0129 K\u1EF3 Crimean",
  "crs": "Ti\u1EBFng Ph\xE1p Seselwa Creole",
  "cs": "Ti\u1EBFng S\xE9c",
  "csb": "Ti\u1EBFng Kashubia",
  "cu": "Ti\u1EBFng Slav\u01A1 Nh\xE0 th\u1EDD",
  "cv": "Ti\u1EBFng Chuvash",
  "cy": "Ti\u1EBFng Wales",
  "da": "Ti\u1EBFng \u0110an M\u1EA1ch",
  "dak": "Ti\u1EBFng Dakota",
  "dar": "Ti\u1EBFng Dargwa",
  "dav": "Ti\u1EBFng Taita",
  "de": "Ti\u1EBFng \u0110\u1EE9c",
  "de-AT": "Ti\u1EBFng \u0110\u1EE9c (\xC1o)",
  "de-CH": "Ti\u1EBFng Th\u01B0\u1EE3ng Gi\xE9c-man (Th\u1EE5y S\u0129)",
  "del": "Ti\u1EBFng Delaware",
  "den": "Ti\u1EBFng Slave",
  "dgr": "Ti\u1EBFng Dogrib",
  "din": "Ti\u1EBFng Dinka",
  "dje": "Ti\u1EBFng Zarma",
  "doi": "Ti\u1EBFng Dogri",
  "dsb": "Ti\u1EBFng H\u1EA1 Sorbia",
  "dtp": "Ti\u1EBFng Dusun Mi\u1EC1n Trung",
  "dua": "Ti\u1EBFng Duala",
  "dum": "Ti\u1EBFng H\xE0 Lan Trung c\u1ED5",
  "dv": "Ti\u1EBFng Divehi",
  "dyo": "Ti\u1EBFng Jola-Fonyi",
  "dyu": "Ti\u1EBFng Dyula",
  "dz": "Ti\u1EBFng Dzongkha",
  "dzg": "Ti\u1EBFng Dazaga",
  "ebu": "Ti\u1EBFng Embu",
  "ee": "Ti\u1EBFng Ewe",
  "efi": "Ti\u1EBFng Efik",
  "egl": "Ti\u1EBFng Emilia",
  "egy": "Ti\u1EBFng Ai C\u1EADp c\u1ED5",
  "eka": "Ti\u1EBFng Ekajuk",
  "el": "Ti\u1EBFng Hy L\u1EA1p",
  "elx": "Ti\u1EBFng Elamite",
  "en": "Ti\u1EBFng Anh",
  "en-AU": "Ti\u1EBFng Anh (Australia)",
  "en-CA": "Ti\u1EBFng Anh (Canada)",
  "en-GB": "Ti\u1EBFng Anh (Anh)",
  "en-US": "Ti\u1EBFng Anh (M\u1EF9)",
  "enm": "Ti\u1EBFng Anh Trung c\u1ED5",
  "eo": "Ti\u1EBFng Qu\u1ED1c T\u1EBF Ng\u1EEF",
  "es": "Ti\u1EBFng T\xE2y Ban Nha",
  "es-419": "Ti\u1EBFng T\xE2y Ban Nha (M\u1EF9 La tinh)",
  "es-ES": "Ti\u1EBFng T\xE2y Ban Nha (Ch\xE2u \xC2u)",
  "es-MX": "Ti\u1EBFng T\xE2y Ban Nha (Mexico)",
  "esu": "Ti\u1EBFng Yupik Mi\u1EC1n Trung",
  "et": "Ti\u1EBFng Estonia",
  "eu": "Ti\u1EBFng Basque",
  "ewo": "Ti\u1EBFng Ewondo",
  "ext": "Ti\u1EBFng Extremadura",
  "fa": "Ti\u1EBFng Ba T\u01B0",
  "fa-AF": "Ti\u1EBFng Dari",
  "fan": "Ti\u1EBFng Fang",
  "fat": "Ti\u1EBFng Fanti",
  "ff": "Ti\u1EBFng Fulah",
  "fi": "Ti\u1EBFng Ph\u1EA7n Lan",
  "fil": "Ti\u1EBFng Philippines",
  "fj": "Ti\u1EBFng Fiji",
  "fo": "Ti\u1EBFng Faroe",
  "fon": "Ti\u1EBFng Fon",
  "fr": "Ti\u1EBFng Ph\xE1p",
  "fr-CA": "Ti\u1EBFng Ph\xE1p (Canada)",
  "fr-CH": "Ti\u1EBFng Ph\xE1p (Th\u1EE5y S\u0129)",
  "frc": "Ti\u1EBFng Ph\xE1p Cajun",
  "frm": "Ti\u1EBFng Ph\xE1p Trung c\u1ED5",
  "fro": "Ti\u1EBFng Ph\xE1p c\u1ED5",
  "frp": "Ti\u1EBFng Arpitan",
  "frr": "Ti\u1EBFng Frisia Mi\u1EC1n B\u1EAFc",
  "frs": "Ti\u1EBFng Frisian Mi\u1EC1n \u0110\xF4ng",
  "fur": "Ti\u1EBFng Friulian",
  "fy": "Ti\u1EBFng Frisia",
  "ga": "Ti\u1EBFng Ireland",
  "gaa": "Ti\u1EBFng Ga",
  "gag": "Ti\u1EBFng Gagauz",
  "gan": "Ti\u1EBFng C\xE1m",
  "gay": "Ti\u1EBFng Gayo",
  "gba": "Ti\u1EBFng Gbaya",
  "gd": "Ti\u1EBFng Gael Scotland",
  "gez": "Ti\u1EBFng Geez",
  "gil": "Ti\u1EBFng Gilbert",
  "gl": "Ti\u1EBFng Galician",
  "glk": "Ti\u1EBFng Gilaki",
  "gmh": "Ti\u1EBFng Th\u01B0\u1EE3ng Gi\xE9c-man Trung c\u1ED5",
  "gn": "Ti\u1EBFng Guarani",
  "goh": "Ti\u1EBFng Th\u01B0\u1EE3ng Gi\xE9c-man c\u1ED5",
  "gom": "Ti\u1EBFng Goan Konkani",
  "gon": "Ti\u1EBFng Gondi",
  "gor": "Ti\u1EBFng Gorontalo",
  "got": "Ti\u1EBFng G\xF4-t\xEDch",
  "grb": "Ti\u1EBFng Grebo",
  "grc": "Ti\u1EBFng Hy L\u1EA1p c\u1ED5",
  "gsw": "Ti\u1EBFng \u0110\u1EE9c (Th\u1EE5y S\u0129)",
  "gu": "Ti\u1EBFng Gujarati",
  "gur": "Ti\u1EBFng Frafra",
  "guz": "Ti\u1EBFng Gusii",
  "gv": "Ti\u1EBFng Manx",
  "gwi": "Ti\u1EBFng Gwich\u02BCin",
  "ha": "Ti\u1EBFng Hausa",
  "hai": "Ti\u1EBFng Haida",
  "hak": "Ti\u1EBFng Kh\xE1ch Gia",
  "haw": "Ti\u1EBFng Hawaii",
  "he": "Ti\u1EBFng Do Th\xE1i",
  "hi": "Ti\u1EBFng Hindi",
  "hif": "Ti\u1EBFng Fiji Hindi",
  "hil": "Ti\u1EBFng Hiligaynon",
  "hit": "Ti\u1EBFng Hittite",
  "hmn": "Ti\u1EBFng H\u2019M\xF4ng",
  "ho": "Ti\u1EBFng Hiri Motu",
  "hr": "Ti\u1EBFng Croatia",
  "hsb": "Ti\u1EBFng Th\u01B0\u1EE3ng Sorbia",
  "hsn": "Ti\u1EBFng T\u01B0\u01A1ng",
  "ht": "Ti\u1EBFng Haiti",
  "hu": "Ti\u1EBFng Hungary",
  "hup": "Ti\u1EBFng Hupa",
  "hy": "Ti\u1EBFng Armenia",
  "hz": "Ti\u1EBFng Herero",
  "ia": "Ti\u1EBFng Khoa H\u1ECDc Qu\u1ED1c T\u1EBF",
  "iba": "Ti\u1EBFng Iban",
  "ibb": "Ti\u1EBFng Ibibio",
  "id": "Ti\u1EBFng Indonesia",
  "ie": "Ti\u1EBFng Interlingue",
  "ig": "Ti\u1EBFng Igbo",
  "ii": "Ti\u1EBFng Di T\u1EE9 Xuy\xEAn",
  "ik": "Ti\u1EBFng Inupiaq",
  "ilo": "Ti\u1EBFng Iloko",
  "inh": "Ti\u1EBFng Ingush",
  "io": "Ti\u1EBFng Ido",
  "is": "Ti\u1EBFng Iceland",
  "it": "Ti\u1EBFng Italy",
  "iu": "Ti\u1EBFng Inuktitut",
  "izh": "Ti\u1EBFng Ingria",
  "ja": "Ti\u1EBFng Nh\u1EADt",
  "jam": "Ti\u1EBFng Anh Jamaica Creole",
  "jbo": "Ti\u1EBFng Lojban",
  "jgo": "Ti\u1EBFng Ngomba",
  "jmc": "Ti\u1EBFng Machame",
  "jpr": "Ti\u1EBFng Judeo-Ba T\u01B0",
  "jrb": "Ti\u1EBFng Judeo-\u1EA2 R\u1EADp",
  "jut": "Ti\u1EBFng Jutish",
  "jv": "Ti\u1EBFng Java",
  "ka": "Ti\u1EBFng Georgia",
  "kaa": "Ti\u1EBFng Kara-Kalpak",
  "kab": "Ti\u1EBFng Kabyle",
  "kac": "Ti\u1EBFng Kachin",
  "kaj": "Ti\u1EBFng Jju",
  "kam": "Ti\u1EBFng Kamba",
  "kaw": "Ti\u1EBFng Kawi",
  "kbd": "Ti\u1EBFng Kabardian",
  "kbl": "Ti\u1EBFng Kanembu",
  "kcg": "Ti\u1EBFng Tyap",
  "kde": "Ti\u1EBFng Makonde",
  "kea": "Ti\u1EBFng Kabuverdianu",
  "kfo": "Ti\u1EBFng Koro",
  "kg": "Ti\u1EBFng Kongo",
  "kgp": "kgp",
  "kha": "Ti\u1EBFng Khasi",
  "kho": "Ti\u1EBFng Khotan",
  "khq": "Ti\u1EBFng Koyra Chiini",
  "ki": "Ti\u1EBFng Kikuyu",
  "kj": "Ti\u1EBFng Kuanyama",
  "kk": "Ti\u1EBFng Kazakh",
  "kkj": "Ti\u1EBFng Kako",
  "kl": "Ti\u1EBFng Kalaallisut",
  "kln": "Ti\u1EBFng Kalenjin",
  "km": "Ti\u1EBFng Khmer",
  "kmb": "Ti\u1EBFng Kimbundu",
  "kn": "Ti\u1EBFng Kannada",
  "ko": "Ti\u1EBFng H\xE0n",
  "koi": "Ti\u1EBFng Komi-Permyak",
  "kok": "Ti\u1EBFng Konkani",
  "kos": "Ti\u1EBFng Kosrae",
  "kpe": "Ti\u1EBFng Kpelle",
  "kr": "Ti\u1EBFng Kanuri",
  "krc": "Ti\u1EBFng Karachay-Balkar",
  "krl": "Ti\u1EBFng Karelian",
  "kru": "Ti\u1EBFng Kurukh",
  "ks": "Ti\u1EBFng Kashmir",
  "ksb": "Ti\u1EBFng Shambala",
  "ksf": "Ti\u1EBFng Bafia",
  "ksh": "Ti\u1EBFng Cologne",
  "ku": "Ti\u1EBFng Kurd",
  "kum": "Ti\u1EBFng Kumyk",
  "kut": "Ti\u1EBFng Kutenai",
  "kv": "Ti\u1EBFng Komi",
  "kw": "Ti\u1EBFng Cornwall",
  "ky": "Ti\u1EBFng Kyrgyz",
  "la": "Ti\u1EBFng La-tinh",
  "lad": "Ti\u1EBFng Ladino",
  "lag": "Ti\u1EBFng Langi",
  "lah": "Ti\u1EBFng Lahnda",
  "lam": "Ti\u1EBFng Lamba",
  "lb": "Ti\u1EBFng Luxembourg",
  "lez": "Ti\u1EBFng Lezghian",
  "lg": "Ti\u1EBFng Ganda",
  "li": "Ti\u1EBFng Limburg",
  "lij": "lij",
  "lkt": "Ti\u1EBFng Lakota",
  "ln": "Ti\u1EBFng Lingala",
  "lo": "Ti\u1EBFng L\xE0o",
  "lol": "Ti\u1EBFng Mongo",
  "lou": "Ti\u1EBFng Creole Louisiana",
  "loz": "Ti\u1EBFng Lozi",
  "lrc": "Ti\u1EBFng B\u1EAFc Luri",
  "lt": "Ti\u1EBFng Litva",
  "lu": "Ti\u1EBFng Luba-Katanga",
  "lua": "Ti\u1EBFng Luba-Lulua",
  "lui": "Ti\u1EBFng Luiseno",
  "lun": "Ti\u1EBFng Lunda",
  "luo": "Ti\u1EBFng Luo",
  "lus": "Ti\u1EBFng Lushai",
  "luy": "Ti\u1EBFng Luyia",
  "lv": "Ti\u1EBFng Latvia",
  "mad": "Ti\u1EBFng Madura",
  "maf": "Ti\u1EBFng Mafa",
  "mag": "Ti\u1EBFng Magahi",
  "mai": "Ti\u1EBFng Maithili",
  "mak": "Ti\u1EBFng Makasar",
  "man": "Ti\u1EBFng Mandingo",
  "mas": "Ti\u1EBFng Masai",
  "mde": "Ti\u1EBFng Maba",
  "mdf": "Ti\u1EBFng Moksha",
  "mdr": "Ti\u1EBFng Mandar",
  "men": "Ti\u1EBFng Mende",
  "mer": "Ti\u1EBFng Meru",
  "mfe": "Ti\u1EBFng Morisyen",
  "mg": "Ti\u1EBFng Malagasy",
  "mga": "Ti\u1EBFng Ai-len Trung c\u1ED5",
  "mgh": "Ti\u1EBFng Makhuwa-Meetto",
  "mgo": "Ti\u1EBFng Meta\u2019",
  "mh": "Ti\u1EBFng Marshall",
  "mi": "Ti\u1EBFng M\u0101ori",
  "mic": "Ti\u1EBFng Micmac",
  "min": "Ti\u1EBFng Minangkabau",
  "mk": "Ti\u1EBFng Macedonia",
  "ml": "Ti\u1EBFng Malayalam",
  "mn": "Ti\u1EBFng M\xF4ng C\u1ED5",
  "mnc": "Ti\u1EBFng M\xE3n Ch\xE2u",
  "mni": "Ti\u1EBFng Manipuri",
  "moh": "Ti\u1EBFng Mohawk",
  "mos": "Ti\u1EBFng Mossi",
  "mr": "Ti\u1EBFng Marathi",
  "ms": "Ti\u1EBFng M\xE3 Lai",
  "mt": "Ti\u1EBFng Malta",
  "mua": "Ti\u1EBFng Mundang",
  "mul": "Nhi\u1EC1u Ng\xF4n ng\u1EEF",
  "mus": "Ti\u1EBFng Creek",
  "mwl": "Ti\u1EBFng Miranda",
  "mwr": "Ti\u1EBFng Marwari",
  "my": "Ti\u1EBFng Mi\u1EBFn \u0110i\u1EC7n",
  "mye": "Ti\u1EBFng Myene",
  "myv": "Ti\u1EBFng Erzya",
  "mzn": "Ti\u1EBFng Mazanderani",
  "na": "Ti\u1EBFng Nauru",
  "nan": "Ti\u1EBFng M\xE2n Nam",
  "nap": "Ti\u1EBFng Napoli",
  "naq": "Ti\u1EBFng Nama",
  "nb": "Ti\u1EBFng Na Uy (Bokm\xE5l)",
  "nd": "Ti\u1EBFng Ndebele Mi\u1EC1n B\u1EAFc",
  "nds": "Ti\u1EBFng H\u1EA1 Gi\xE9c-man",
  "nds-NL": "Ti\u1EBFng H\u1EA1 Saxon",
  "ne": "Ti\u1EBFng Nepal",
  "new": "Ti\u1EBFng Newari",
  "ng": "Ti\u1EBFng Ndonga",
  "nia": "Ti\u1EBFng Nias",
  "niu": "Ti\u1EBFng Niuean",
  "njo": "Ti\u1EBFng Ao Naga",
  "nl": "Ti\u1EBFng H\xE0 Lan",
  "nl-BE": "Ti\u1EBFng Flemish",
  "nmg": "Ti\u1EBFng Kwasio",
  "nn": "Ti\u1EBFng Na Uy (Nynorsk)",
  "nnh": "Ti\u1EBFng Ngiemboon",
  "no": "Ti\u1EBFng Na Uy",
  "nog": "Ti\u1EBFng Nogai",
  "non": "Ti\u1EBFng Na Uy c\u1ED5",
  "nqo": "Ti\u1EBFng N\u2019Ko",
  "nr": "Ti\u1EBFng Ndebele Mi\u1EC1n Nam",
  "nso": "Ti\u1EBFng Sotho Mi\u1EC1n B\u1EAFc",
  "nus": "Ti\u1EBFng Nuer",
  "nv": "Ti\u1EBFng Navajo",
  "nwc": "Ti\u1EBFng Newari c\u1ED5",
  "ny": "Ti\u1EBFng Nyanja",
  "nym": "Ti\u1EBFng Nyamwezi",
  "nyn": "Ti\u1EBFng Nyankole",
  "nyo": "Ti\u1EBFng Nyoro",
  "nzi": "Ti\u1EBFng Nzima",
  "oc": "Ti\u1EBFng Occitan",
  "oj": "Ti\u1EBFng Ojibwa",
  "om": "Ti\u1EBFng Oromo",
  "or": "Ti\u1EBFng Odia",
  "os": "Ti\u1EBFng Ossetic",
  "osa": "Ti\u1EBFng Osage",
  "ota": "Ti\u1EBFng Th\u1ED5 Nh\u0129 K\u1EF3 Ottoman",
  "pa": "Ti\u1EBFng Punjab",
  "pag": "Ti\u1EBFng Pangasinan",
  "pal": "Ti\u1EBFng Pahlavi",
  "pam": "Ti\u1EBFng Pampanga",
  "pap": "Ti\u1EBFng Papiamento",
  "pau": "Ti\u1EBFng Palauan",
  "pcm": "Ti\u1EBFng Nigeria Pidgin",
  "peo": "Ti\u1EBFng Ba T\u01B0 c\u1ED5",
  "phn": "Ti\u1EBFng Phoenicia",
  "pi": "Ti\u1EBFng Pali",
  "pl": "Ti\u1EBFng Ba Lan",
  "pon": "Ti\u1EBFng Pohnpeian",
  "prg": "Ti\u1EBFng Prussia",
  "pro": "Ti\u1EBFng Proven\xE7al c\u1ED5",
  "ps": "Ti\u1EBFng Pashto",
  "pt": "Ti\u1EBFng B\u1ED3 \u0110\xE0o Nha",
  "pt-BR": "Ti\u1EBFng B\u1ED3 \u0110\xE0o Nha (Brazil)",
  "pt-PT": "Ti\u1EBFng B\u1ED3 \u0110\xE0o Nha (Ch\xE2u \xC2u)",
  "qu": "Ti\u1EBFng Quechua",
  "quc": "Ti\u1EBFng K\u02BCiche\u02BC",
  "qug": "Ti\u1EBFng Quechua \u1EDF Cao nguy\xEAn Chimborazo",
  "raj": "Ti\u1EBFng Rajasthani",
  "rap": "Ti\u1EBFng Rapanui",
  "rar": "Ti\u1EBFng Rarotongan",
  "rhg": "Ti\u1EBFng Rohingya",
  "rm": "Ti\u1EBFng Romansh",
  "rn": "Ti\u1EBFng Rundi",
  "ro": "Ti\u1EBFng Romania",
  "ro-MD": "Ti\u1EBFng Moldova",
  "rof": "Ti\u1EBFng Rombo",
  "rom": "Ti\u1EBFng Romany",
  "ru": "Ti\u1EBFng Nga",
  "rup": "Ti\u1EBFng Aromania",
  "rw": "Ti\u1EBFng Kinyarwanda",
  "rwk": "Ti\u1EBFng Rwa",
  "sa": "Ti\u1EBFng Ph\u1EA1n",
  "sad": "Ti\u1EBFng Sandawe",
  "sah": "Ti\u1EBFng Sakha",
  "sam": "Ti\u1EBFng Samaritan Aramaic",
  "saq": "Ti\u1EBFng Samburu",
  "sas": "Ti\u1EBFng Sasak",
  "sat": "Ti\u1EBFng Santali",
  "sba": "Ti\u1EBFng Ngambay",
  "sbp": "Ti\u1EBFng Sangu",
  "sc": "Ti\u1EBFng Sardinia",
  "scn": "Ti\u1EBFng Sicilia",
  "sco": "Ti\u1EBFng Scots",
  "sd": "Ti\u1EBFng Sindhi",
  "sdh": "Ti\u1EBFng Kurd Mi\u1EC1n Nam",
  "se": "Ti\u1EBFng Sami Mi\u1EC1n B\u1EAFc",
  "see": "Ti\u1EBFng Seneca",
  "seh": "Ti\u1EBFng Sena",
  "sel": "Ti\u1EBFng Selkup",
  "ses": "Ti\u1EBFng Koyraboro Senni",
  "sg": "Ti\u1EBFng Sango",
  "sga": "Ti\u1EBFng Ai-len c\u1ED5",
  "sh": "Ti\u1EBFng Serbo-Croatia",
  "shi": "Ti\u1EBFng Tachelhit",
  "shn": "Ti\u1EBFng Shan",
  "shu": "Ti\u1EBFng \u1EA2-R\u1EADp Chad",
  "si": "Ti\u1EBFng Sinhala",
  "sid": "Ti\u1EBFng Sidamo",
  "sk": "Ti\u1EBFng Slovak",
  "sl": "Ti\u1EBFng Slovenia",
  "sm": "Ti\u1EBFng Samoa",
  "sma": "Ti\u1EBFng Sami Mi\u1EC1n Nam",
  "smj": "Ti\u1EBFng Lule Sami",
  "smn": "Ti\u1EBFng Inari Sami",
  "sms": "Ti\u1EBFng Skolt Sami",
  "sn": "Ti\u1EBFng Shona",
  "snk": "Ti\u1EBFng Soninke",
  "so": "Ti\u1EBFng Somali",
  "sog": "Ti\u1EBFng Sogdien",
  "sq": "Ti\u1EBFng Albania",
  "sr": "Ti\u1EBFng Serbia",
  "srn": "Ti\u1EBFng Sranan Tongo",
  "srr": "Ti\u1EBFng Serer",
  "ss": "Ti\u1EBFng Swati",
  "ssy": "Ti\u1EBFng Saho",
  "st": "Ti\u1EBFng Sotho Mi\u1EC1n Nam",
  "su": "Ti\u1EBFng Sunda",
  "suk": "Ti\u1EBFng Sukuma",
  "sus": "Ti\u1EBFng Susu",
  "sux": "Ti\u1EBFng Sumeria",
  "sv": "Ti\u1EBFng Th\u1EE5y \u0110i\u1EC3n",
  "sw": "Ti\u1EBFng Swahili",
  "sw-CD": "Ti\u1EBFng Swahili Congo",
  "swb": "Ti\u1EBFng C\xF4mo",
  "syc": "Ti\u1EBFng Syriac c\u1ED5",
  "syr": "Ti\u1EBFng Syriac",
  "ta": "Ti\u1EBFng Tamil",
  "te": "Ti\u1EBFng Telugu",
  "tem": "Ti\u1EBFng Timne",
  "teo": "Ti\u1EBFng Teso",
  "ter": "Ti\u1EBFng Tereno",
  "tet": "Ti\u1EBFng Tetum",
  "tg": "Ti\u1EBFng Tajik",
  "th": "Ti\u1EBFng Th\xE1i",
  "ti": "Ti\u1EBFng Tigrinya",
  "tig": "Ti\u1EBFng Tigre",
  "tiv": "Ti\u1EBFng Tiv",
  "tk": "Ti\u1EBFng Turkmen",
  "tkl": "Ti\u1EBFng Tokelau",
  "tl": "Ti\u1EBFng Tagalog",
  "tlh": "Ti\u1EBFng Klingon",
  "tli": "Ti\u1EBFng Tlingit",
  "tmh": "Ti\u1EBFng Tamashek",
  "tn": "Ti\u1EBFng Tswana",
  "to": "Ti\u1EBFng Tonga",
  "tog": "Ti\u1EBFng Nyasa Tonga",
  "tpi": "Ti\u1EBFng Tok Pisin",
  "tr": "Ti\u1EBFng Th\u1ED5 Nh\u0129 K\u1EF3",
  "trv": "Ti\u1EBFng Taroko",
  "ts": "Ti\u1EBFng Tsonga",
  "tsi": "Ti\u1EBFng Tsimshian",
  "tt": "Ti\u1EBFng Tatar",
  "tum": "Ti\u1EBFng Tumbuka",
  "tvl": "Ti\u1EBFng Tuvalu",
  "tw": "Ti\u1EBFng Twi",
  "twq": "Ti\u1EBFng Tasawaq",
  "ty": "Ti\u1EBFng Tahiti",
  "tyv": "Ti\u1EBFng Tuvinian",
  "tzm": "Ti\u1EBFng Tamazight Mi\u1EC1n Trung Ma-r\u1ED1c",
  "udm": "Ti\u1EBFng Udmurt",
  "ug": "Ti\u1EBFng Uyghur",
  "uga": "Ti\u1EBFng Ugaritic",
  "uk": "Ti\u1EBFng Ukraina",
  "umb": "Ti\u1EBFng Umbundu",
  "und": "Ng\xF4n ng\u1EEF kh\xF4ng x\xE1c \u0111\u1ECBnh",
  "ur": "Ti\u1EBFng Urdu",
  "uz": "Ti\u1EBFng Uzbek",
  "vai": "Ti\u1EBFng Vai",
  "ve": "Ti\u1EBFng Venda",
  "vi": "Ti\u1EBFng Vi\u1EC7t",
  "vo": "Ti\u1EBFng Volap\xFCk",
  "vot": "Ti\u1EBFng Votic",
  "vun": "Ti\u1EBFng Vunjo",
  "wa": "Ti\u1EBFng Walloon",
  "wae": "Ti\u1EBFng Walser",
  "wal": "Ti\u1EBFng Walamo",
  "war": "Ti\u1EBFng Waray",
  "was": "Ti\u1EBFng Washo",
  "wbp": "Ti\u1EBFng Warlpiri",
  "wo": "Ti\u1EBFng Wolof",
  "wuu": "Ti\u1EBFng Ng\xF4",
  "xal": "Ti\u1EBFng Kalmyk",
  "xh": "Ti\u1EBFng Xhosa",
  "xog": "Ti\u1EBFng Soga",
  "yao": "Ti\u1EBFng Yao",
  "yap": "Ti\u1EBFng Yap",
  "yav": "Ti\u1EBFng Yangben",
  "ybb": "Ti\u1EBFng Yemba",
  "yi": "Ti\u1EBFng Yiddish",
  "yo": "Ti\u1EBFng Yoruba",
  "yrl": "yrl",
  "yue": "Ti\u1EBFng Qu\u1EA3ng \u0110\xF4ng",
  "za": "Ti\u1EBFng Choang",
  "zap": "Ti\u1EBFng Zapotec",
  "zbl": "K\xFD hi\u1EC7u Blissymbols",
  "zen": "Ti\u1EBFng Zenaga",
  "zgh": "Ti\u1EBFng Tamazight Chu\u1EA9n c\u1EE7a Ma-r\u1ED1c",
  "zh": "Ti\u1EBFng Trung",
  "zh-Hans": "Ti\u1EBFng Trung (Gi\u1EA3n th\u1EC3)",
  "zh-Hant": "Ti\u1EBFng Trung (Ph\u1ED3n th\u1EC3)",
  "zu": "Ti\u1EBFng Zulu",
  "zun": "Ti\u1EBFng Zuni",
  "zxx": "Kh\xF4ng c\xF3 n\u1ED9i dung ng\xF4n ng\u1EEF",
  "zza": "Ti\u1EBFng Zaza"
};

// src/l10n/locale/zh-cn.ts
var zh_cn_default = {
  "aa": "\u963F\u6CD5\u5C14\u8BED",
  "ab": "\u963F\u5E03\u54C8\u897F\u4E9A\u8BED",
  "ace": "\u4E9A\u9F50\u8BED",
  "ach": "\u963F\u4E54\u5229\u8BED",
  "ada": "\u963F\u5F53\u6885\u8BED",
  "ady": "\u963F\u8FEA\u683C\u8BED",
  "ae": "\u963F\u7EF4\u65AF\u5854\u8BED",
  "af": "\u5357\u975E\u8377\u5170\u8BED",
  "afh": "\u963F\u5F17\u91CC\u5E0C\u5229\u8BED",
  "agq": "\u4E9A\u7F55\u8BED",
  "ain": "\u963F\u4F0A\u52AA\u8BED",
  "ak": "\u963F\u80AF\u8BED",
  "akk": "\u963F\u5361\u5FB7\u8BED",
  "ale": "\u963F\u7559\u7533\u8BED",
  "alt": "\u5357\u963F\u5C14\u6CF0\u8BED",
  "am": "\u963F\u59C6\u54C8\u62C9\u8BED",
  "an": "\u963F\u62C9\u8D21\u8BED",
  "ang": "\u53E4\u82F1\u8BED",
  "anp": "\u6602\u52A0\u8BED",
  "ar": "\u963F\u62C9\u4F2F\u8BED",
  "ar-001": "\u73B0\u4EE3\u6807\u51C6\u963F\u62C9\u4F2F\u8BED",
  "arc": "\u963F\u62C9\u7C73\u8BED",
  "arn": "\u9A6C\u666E\u5207\u8BED",
  "arp": "\u963F\u62C9\u5E15\u970D\u8BED",
  "ars": "\u7EB3\u5409\u8FEA\u963F\u62C9\u4F2F\u8BED",
  "arw": "\u963F\u62C9\u74E6\u514B\u8BED",
  "as": "\u963F\u8428\u59C6\u8BED",
  "asa": "\u5E15\u96F7\u8BED",
  "ast": "\u963F\u65AF\u56FE\u91CC\u4E9A\u65AF\u8BED",
  "av": "\u963F\u74E6\u5C14\u8BED",
  "awa": "\u963F\u74E6\u5FB7\u8BED",
  "ay": "\u827E\u9A6C\u62C9\u8BED",
  "az": "\u963F\u585E\u62DC\u7586\u8BED",
  "az-Arab": "\u5357\u963F\u585E\u62DC\u7586\u8BED",
  "ba": "\u5DF4\u4EC0\u57FA\u5C14\u8BED",
  "bal": "\u4FFE\u8DEF\u652F\u8BED",
  "ban": "\u5DF4\u5398\u8BED",
  "bas": "\u5DF4\u8428\u8BED",
  "bax": "\u5DF4\u59C6\u7A46\u8BED",
  "bbj": "\u6208\u9A6C\u62C9\u8BED",
  "be": "\u767D\u4FC4\u7F57\u65AF\u8BED",
  "bej": "\u8D1D\u6C99\u8BED",
  "bem": "\u672C\u5DF4\u8BED",
  "bez": "\u8D1D\u7EB3\u8BED",
  "bfd": "\u5DF4\u975E\u7279\u8BED",
  "bg": "\u4FDD\u52A0\u5229\u4E9A\u8BED",
  "bgn": "\u897F\u4FFE\u8DEF\u652F\u8BED",
  "bho": "\u535A\u6770\u666E\u5C14\u8BED",
  "bi": "\u6BD4\u65AF\u62C9\u9A6C\u8BED",
  "bik": "\u6BD4\u79D1\u5C14\u8BED",
  "bin": "\u6BD4\u5C3C\u8BED",
  "bkm": "\u79D1\u59C6\u8BED",
  "bla": "\u897F\u514B\u897F\u5361\u8BED",
  "bm": "\u73ED\u5DF4\u62C9\u8BED",
  "bn": "\u5B5F\u52A0\u62C9\u8BED",
  "bo": "\u85CF\u8BED",
  "br": "\u5E03\u5217\u5854\u5C3C\u8BED",
  "bra": "\u5E03\u62C9\u6770\u8BED",
  "brx": "\u535A\u591A\u8BED",
  "bs": "\u6CE2\u65AF\u5C3C\u4E9A\u8BED",
  "bss": "\u963F\u5E93\u8272\u8BED",
  "bua": "\u5E03\u91CC\u4E9A\u7279\u8BED",
  "bug": "\u5E03\u5409\u8BED",
  "bum": "\u5E03\u9C81\u8BED",
  "byn": "\u6BD4\u6797\u8BED",
  "byv": "\u6885\u6566\u5DF4\u8BED",
  "ca": "\u52A0\u6CF0\u7F57\u5C3C\u4E9A\u8BED",
  "cad": "\u5361\u591A\u8BED",
  "car": "\u52A0\u52D2\u6BD4\u8BED",
  "cay": "\u5361\u5C24\u52A0\u8BED",
  "cch": "\u963F\u707F\u8BED",
  "ccp": "\u67E5\u514B\u739B\u8BED",
  "ce": "\u8F66\u81E3\u8BED",
  "ceb": "\u5BBF\u52A1\u8BED",
  "cgg": "\u5947\u52A0\u8BED",
  "ch": "\u67E5\u83AB\u7F57\u8BED",
  "chb": "\u5947\u5E03\u67E5\u8BED",
  "chg": "\u5BDF\u5408\u53F0\u8BED",
  "chk": "\u695A\u514B\u8BED",
  "chm": "\u9A6C\u91CC\u8BED",
  "chn": "\u5947\u52AA\u514B\u6DF7\u5408\u8BED",
  "cho": "\u4E54\u514B\u6258\u8BED",
  "chp": "\u5947\u4F69\u7EF4\u5B89\u8BED",
  "chr": "\u5207\u7F57\u57FA\u8BED",
  "chy": "\u590F\u5EF6\u8BED",
  "ckb": "\u4E2D\u5E93\u5C14\u5FB7\u8BED",
  "co": "\u79D1\u897F\u5609\u8BED",
  "cop": "\u79D1\u666E\u7279\u8BED",
  "cr": "\u514B\u91CC\u65CF\u8BED",
  "crh": "\u514B\u91CC\u7C73\u4E9A\u571F\u8033\u5176\u8BED",
  "crs": "\u585E\u820C\u5C14\u514B\u91CC\u5965\u5C14\u8BED",
  "cs": "\u6377\u514B\u8BED",
  "csb": "\u5361\u8212\u6BD4\u8BED",
  "cu": "\u6559\u4F1A\u65AF\u62C9\u592B\u8BED",
  "cv": "\u695A\u74E6\u4EC0\u8BED",
  "cy": "\u5A01\u5C14\u58EB\u8BED",
  "da": "\u4E39\u9EA6\u8BED",
  "dak": "\u8FBE\u79D1\u4ED6\u8BED",
  "dar": "\u8FBE\u5C14\u683C\u74E6\u8BED",
  "dav": "\u53F0\u5854\u8BED",
  "de": "\u5FB7\u8BED",
  "de-AT": "\u5965\u5730\u5229\u5FB7\u8BED",
  "de-CH": "\u745E\u58EB\u9AD8\u5730\u5FB7\u8BED",
  "del": "\u7279\u62C9\u534E\u8BED",
  "den": "\u53F2\u62C9\u7EF4\u8BED",
  "dgr": "\u591A\u683C\u91CC\u5E03\u8BED",
  "din": "\u4E01\u5361\u8BED",
  "dje": "\u54F2\u5C14\u9A6C\u8BED",
  "doi": "\u591A\u683C\u62C9\u8BED",
  "dsb": "\u4E0B\u7D22\u5E03\u8BED",
  "dua": "\u675C\u963F\u62C9\u8BED",
  "dum": "\u4E2D\u53E4\u8377\u5170\u8BED",
  "dv": "\u8FEA\u7EF4\u5E0C\u8BED",
  "dyo": "\u6731\u62C9\u8BED",
  "dyu": "\u8FEA\u5C24\u62C9\u8BED",
  "dz": "\u5B97\u5361\u8BED",
  "dzg": "\u8FBE\u624E\u845B\u8BED",
  "ebu": "\u6069\u5E03\u8BED",
  "ee": "\u57C3\u7EF4\u8BED",
  "efi": "\u57C3\u83F2\u514B\u8BED",
  "egy": "\u53E4\u57C3\u53CA\u8BED",
  "eka": "\u827E\u5361\u6731\u514B\u8BED",
  "el": "\u5E0C\u814A\u8BED",
  "elx": "\u57C3\u5170\u8BED",
  "en": "\u82F1\u8BED",
  "en-AU": "\u6FB3\u5927\u5229\u4E9A\u82F1\u8BED",
  "en-CA": "\u52A0\u62FF\u5927\u82F1\u8BED",
  "en-GB": "\u82F1\u56FD\u82F1\u8BED",
  "en-US": "\u7F8E\u56FD\u82F1\u8BED",
  "enm": "\u4E2D\u53E4\u82F1\u8BED",
  "eo": "\u4E16\u754C\u8BED",
  "es": "\u897F\u73ED\u7259\u8BED",
  "es-419": "\u62C9\u4E01\u7F8E\u6D32\u897F\u73ED\u7259\u8BED",
  "es-ES": "\u6B27\u6D32\u897F\u73ED\u7259\u8BED",
  "es-MX": "\u58A8\u897F\u54E5\u897F\u73ED\u7259\u8BED",
  "et": "\u7231\u6C99\u5C3C\u4E9A\u8BED",
  "eu": "\u5DF4\u65AF\u514B\u8BED",
  "ewo": "\u57C3\u7FC1\u591A\u8BED",
  "fa": "\u6CE2\u65AF\u8BED",
  "fa-AF": "\u8FBE\u91CC\u8BED",
  "fan": "\u82B3\u683C\u8BED",
  "fat": "\u82B3\u8482\u8BED",
  "ff": "\u5BCC\u62C9\u8BED",
  "fi": "\u82AC\u5170\u8BED",
  "fil": "\u83F2\u5F8B\u5BBE\u8BED",
  "fj": "\u6590\u6D4E\u8BED",
  "fo": "\u6CD5\u7F57\u8BED",
  "fon": "\u4E30\u8BED",
  "fr": "\u6CD5\u8BED",
  "fr-CA": "\u52A0\u62FF\u5927\u6CD5\u8BED",
  "fr-CH": "\u745E\u58EB\u6CD5\u8BED",
  "frc": "\u5361\u771F\u6CD5\u8BED",
  "frm": "\u4E2D\u53E4\u6CD5\u8BED",
  "fro": "\u53E4\u6CD5\u8BED",
  "frr": "\u5317\u5F17\u91CC\u897F\u4E9A\u8BED",
  "frs": "\u4E1C\u5F17\u91CC\u897F\u4E9A\u8BED",
  "fur": "\u5F17\u7559\u5229\u8BED",
  "fy": "\u897F\u5F17\u91CC\u897F\u4E9A\u8BED",
  "ga": "\u7231\u5C14\u5170\u8BED",
  "gaa": "\u52A0\u65CF\u8BED",
  "gag": "\u52A0\u544A\u5179\u8BED",
  "gan": "\u8D63\u8BED",
  "gay": "\u8FE6\u7EA6\u8BED",
  "gba": "\u683C\u5DF4\u4E9A\u8BED",
  "gd": "\u82CF\u683C\u5170\u76D6\u5C14\u8BED",
  "gez": "\u5409\u5179\u8BED",
  "gil": "\u5409\u5C14\u4F2F\u7279\u8BED",
  "gl": "\u52A0\u5229\u897F\u4E9A\u8BED",
  "gmh": "\u4E2D\u53E4\u9AD8\u5730\u5FB7\u8BED",
  "gn": "\u74DC\u62C9\u5C3C\u8BED",
  "goh": "\u53E4\u9AD8\u5730\u5FB7\u8BED",
  "gon": "\u5188\u5FB7\u8BED",
  "gor": "\u54E5\u4F26\u6253\u6D1B\u8BED",
  "got": "\u54E5\u7279\u8BED",
  "grb": "\u683C\u5217\u535A\u8BED",
  "grc": "\u53E4\u5E0C\u814A\u8BED",
  "gsw": "\u745E\u58EB\u5FB7\u8BED",
  "gu": "\u53E4\u5409\u62C9\u7279\u8BED",
  "guz": "\u53E4\u897F\u8BED",
  "gv": "\u9A6C\u6069\u8BED",
  "gwi": "\u54E5\u5A01\u8FC5\u8BED",
  "ha": "\u8C6A\u8428\u8BED",
  "hai": "\u6D77\u8FBE\u8BED",
  "hak": "\u5BA2\u5BB6\u8BED",
  "haw": "\u590F\u5A01\u5937\u8BED",
  "he": "\u5E0C\u4F2F\u6765\u8BED",
  "hi": "\u5370\u5730\u8BED",
  "hil": "\u5E0C\u5229\u76D6\u519C\u8BED",
  "hit": "\u8D6B\u68AF\u8BED",
  "hmn": "\u82D7\u8BED",
  "ho": "\u5E0C\u91CC\u83AB\u56FE\u8BED",
  "hr": "\u514B\u7F57\u5730\u4E9A\u8BED",
  "hsb": "\u4E0A\u7D22\u5E03\u8BED",
  "hsn": "\u6E58\u8BED",
  "ht": "\u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED",
  "hu": "\u5308\u7259\u5229\u8BED",
  "hup": "\u80E1\u5E15\u8BED",
  "hy": "\u4E9A\u7F8E\u5C3C\u4E9A\u8BED",
  "hz": "\u8D6B\u96F7\u7F57\u8BED",
  "ia": "\u56FD\u9645\u8BED",
  "iba": "\u4F0A\u73ED\u8BED",
  "ibb": "\u4F0A\u6BD4\u6BD4\u5965\u8BED",
  "id": "\u5370\u5EA6\u5C3C\u897F\u4E9A\u8BED",
  "ie": "\u56FD\u9645\u6587\u5B57\uFF08E\uFF09",
  "ig": "\u4F0A\u535A\u8BED",
  "ii": "\u56DB\u5DDD\u5F5D\u8BED",
  "ik": "\u4F0A\u52AA\u76AE\u514B\u8BED",
  "ilo": "\u4F0A\u6D1B\u5361\u8BFA\u8BED",
  "inh": "\u5370\u53E4\u4EC0\u8BED",
  "io": "\u4F0A\u591A\u8BED",
  "is": "\u51B0\u5C9B\u8BED",
  "it": "\u610F\u5927\u5229\u8BED",
  "iu": "\u56E0\u7EBD\u7279\u8BED",
  "ja": "\u65E5\u8BED",
  "jbo": "\u903B\u8F91\u8BED",
  "jgo": "\u6069\u826E\u5DF4\u8BED",
  "jmc": "\u9A6C\u5207\u59C6\u8BED",
  "jpr": "\u72B9\u592A\u6CE2\u65AF\u8BED",
  "jrb": "\u72B9\u592A\u963F\u62C9\u4F2F\u8BED",
  "jv": "\u722A\u54C7\u8BED",
  "ka": "\u683C\u9C81\u5409\u4E9A\u8BED",
  "kaa": "\u5361\u62C9\u5361\u5C14\u5E15\u514B\u8BED",
  "kab": "\u5361\u62DC\u5C14\u8BED",
  "kac": "\u514B\u94A6\u8BED",
  "kaj": "\u5361\u6377\u8BED",
  "kam": "\u5361\u59C6\u5DF4\u8BED",
  "kaw": "\u5361\u5A01\u8BED",
  "kbd": "\u5361\u5DF4\u5C14\u5FB7\u8BED",
  "kbl": "\u52A0\u6D85\u59C6\u5E03\u8BED",
  "kcg": "\u5361\u5854\u5E03\u8BED",
  "kde": "\u9A6C\u5B54\u5FB7\u8BED",
  "kea": "\u5361\u5E03\u4F5B\u5F97\u9C81\u8BED",
  "kfo": "\u514B\u7F57\u8BED",
  "kg": "\u521A\u679C\u8BED",
  "kgp": "kgp",
  "kha": "\u5361\u897F\u8BED",
  "kho": "\u548C\u7530\u8BED",
  "khq": "\u897F\u6851\u6D77\u8BED",
  "ki": "\u5409\u5E93\u5C24\u8BED",
  "kj": "\u5BBD\u4E9A\u739B\u8BED",
  "kk": "\u54C8\u8428\u514B\u8BED",
  "kkj": "\u5361\u5E93\u8BED",
  "kl": "\u683C\u9675\u5170\u8BED",
  "kln": "\u5361\u4F26\u91D1\u8BED",
  "km": "\u9AD8\u68C9\u8BED",
  "kmb": "\u91D1\u90A6\u675C\u8BED",
  "kn": "\u5361\u7EB3\u8FBE\u8BED",
  "ko": "\u97E9\u8BED",
  "koi": "\u79D1\u7C73-\u5F7C\u5C14\u7C73\u4E9A\u514B\u8BED",
  "kok": "\u5B54\u5361\u5C3C\u8BED",
  "kos": "\u79D1\u65AF\u62C9\u4F0A\u8BED",
  "kpe": "\u514B\u4F69\u5217\u8BED",
  "kr": "\u5361\u52AA\u91CC\u8BED",
  "krc": "\u5361\u62C9\u6070\u4F0A\u5DF4\u5C14\u5361\u5C14\u8BED",
  "krl": "\u5361\u7D2F\u5229\u963F\u8BED",
  "kru": "\u5E93\u9C81\u514B\u8BED",
  "ks": "\u514B\u4EC0\u7C73\u5C14\u8BED",
  "ksb": "\u9999\u5DF4\u62C9\u8BED",
  "ksf": "\u5DF4\u83F2\u4E9A\u8BED",
  "ksh": "\u79D1\u9686\u8BED",
  "ku": "\u5E93\u5C14\u5FB7\u8BED",
  "kum": "\u5E93\u6885\u514B\u8BED",
  "kut": "\u5E93\u7279\u5948\u8BED",
  "kv": "\u79D1\u7C73\u8BED",
  "kw": "\u5EB7\u6C83\u5C14\u8BED",
  "ky": "\u67EF\u5C14\u514B\u5B5C\u8BED",
  "la": "\u62C9\u4E01\u8BED",
  "lad": "\u62C9\u8FEA\u8BFA\u8BED",
  "lag": "\u6717\u5409\u8BED",
  "lah": "\u5370\u5EA6-\u96C5\u5229\u5B89\u8BED",
  "lam": "\u5170\u5DF4\u8BED",
  "lb": "\u5362\u68EE\u5821\u8BED",
  "lez": "\u5217\u5179\u91D1\u8BED",
  "lg": "\u5362\u5E72\u8FBE\u8BED",
  "li": "\u6797\u5821\u8BED",
  "lij": "lij",
  "lkt": "\u62C9\u79D1\u5854\u8BED",
  "ln": "\u6797\u52A0\u62C9\u8BED",
  "lo": "\u8001\u631D\u8BED",
  "lol": "\u8499\u6208\u8BED",
  "lou": "\u8DEF\u6613\u65AF\u5B89\u90A3\u514B\u91CC\u5965\u5C14\u8BED",
  "loz": "\u6D1B\u9F50\u8BED",
  "lrc": "\u5317\u5362\u5C14\u8BED",
  "lt": "\u7ACB\u9676\u5B9B\u8BED",
  "lu": "\u9C81\u5DF4\u52A0\u4E39\u52A0\u8BED",
  "lua": "\u5362\u5DF4-\u5362\u62C9\u8BED",
  "lui": "\u5362\u4F0A\u585E\u8BFA\u8BED",
  "lun": "\u9686\u8FBE\u8BED",
  "luo": "\u5362\u5965\u8BED",
  "lus": "\u7C73\u4F50\u8BED",
  "luy": "\u5362\u96C5\u8BED",
  "lv": "\u62C9\u8131\u7EF4\u4E9A\u8BED",
  "mad": "\u9A6C\u90FD\u62C9\u8BED",
  "maf": "\u9A6C\u6CD5\u8BED",
  "mag": "\u6469\u63ED\u9640\u8BED",
  "mai": "\u8FC8\u8482\u5229\u8BED",
  "mak": "\u671B\u52A0\u9521\u8BED",
  "man": "\u66FC\u4E01\u54E5\u8BED",
  "mas": "\u9A6C\u8D5B\u8BED",
  "mde": "\u9A6C\u575D\u8BED",
  "mdf": "\u83AB\u514B\u6C99\u8BED",
  "mdr": "\u66FC\u8FBE\u5C14\u8BED",
  "men": "\u95E8\u5FB7\u8BED",
  "mer": "\u6885\u9C81\u8BED",
  "mfe": "\u6BDB\u91CC\u6C42\u65AF\u514B\u91CC\u5965\u5C14\u8BED",
  "mg": "\u9A6C\u62C9\u52A0\u65AF\u8BED",
  "mga": "\u4E2D\u53E4\u7231\u5C14\u5170\u8BED",
  "mgh": "\u9A6C\u5E93\u963F\u8BED",
  "mgo": "\u6885\u5854\u8BED",
  "mh": "\u9A6C\u7ECD\u5C14\u8BED",
  "mi": "\u6BDB\u5229\u8BED",
  "mic": "\u5BC6\u514B\u9A6C\u514B\u8BED",
  "min": "\u7C73\u5357\u4F73\u4FDD\u8BED",
  "mk": "\u9A6C\u5176\u987F\u8BED",
  "ml": "\u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED",
  "mn": "\u8499\u53E4\u8BED",
  "mnc": "\u6EE1\u8BED",
  "mni": "\u66FC\u5C3C\u666E\u5C14\u8BED",
  "moh": "\u6469\u970D\u514B\u8BED",
  "mos": "\u83AB\u897F\u8BED",
  "mr": "\u9A6C\u62C9\u5730\u8BED",
  "ms": "\u9A6C\u6765\u8BED",
  "mt": "\u9A6C\u8033\u4ED6\u8BED",
  "mua": "\u8499\u5F53\u8BED",
  "mul": "\u591A\u8BED\u79CD",
  "mus": "\u514B\u91CC\u514B\u8BED",
  "mwl": "\u7C73\u5170\u5FB7\u65AF\u8BED",
  "mwr": "\u9A6C\u5C14\u74E6\u91CC\u8BED",
  "my": "\u7F05\u7538\u8BED",
  "mye": "\u59C6\u8036\u5185\u8BED",
  "myv": "\u5384\u5C14\u5179\u4E9A\u8BED",
  "mzn": "\u9A6C\u8D5E\u5FB7\u5170\u8BED",
  "na": "\u7459\u9C81\u8BED",
  "nan": "\u95FD\u5357\u8BED",
  "nap": "\u90A3\u4E0D\u52D2\u65AF\u8BED",
  "naq": "\u7EB3\u9A6C\u8BED",
  "nb": "\u4E66\u9762\u632A\u5A01\u8BED",
  "nd": "\u5317\u6069\u5FB7\u8D1D\u52D2\u8BED",
  "nds": "\u4F4E\u5730\u5FB7\u8BED",
  "nds-NL": "\u4F4E\u8428\u514B\u68EE\u8BED",
  "ne": "\u5C3C\u6CCA\u5C14\u8BED",
  "new": "\u5C3C\u74E6\u5C14\u8BED",
  "ng": "\u6069\u4E1C\u52A0\u8BED",
  "nia": "\u5C3C\u4E9A\u65AF\u8BED",
  "niu": "\u7EBD\u57C3\u8BED",
  "nl": "\u8377\u5170\u8BED",
  "nl-BE": "\u5F17\u62C9\u8292\u8BED",
  "nmg": "\u5938\u897F\u5965\u8BED",
  "nn": "\u632A\u5A01\u5C3C\u8BFA\u65AF\u514B\u8BED",
  "nnh": "\u6069\u7518\u6F8E\u8BED",
  "no": "\u632A\u5A01\u8BED",
  "nog": "\u8BFA\u76D6\u8BED",
  "non": "\u53E4\u8BFA\u5C14\u65AF\u8BED",
  "nqo": "\u897F\u975E\u4E66\u9762\u6587\u5B57",
  "nr": "\u5357\u6069\u5FB7\u8D1D\u52D2\u8BED",
  "nso": "\u5317\u7D22\u6258\u8BED",
  "nus": "\u52AA\u57C3\u5C14\u8BED",
  "nv": "\u7EB3\u74E6\u970D\u8BED",
  "nwc": "\u53E4\u5178\u5C3C\u74E6\u5C14\u8BED",
  "ny": "\u9F50\u5207\u74E6\u8BED",
  "nym": "\u5C3C\u626C\u97E6\u9F50\u8BED",
  "nyn": "\u5C3C\u6602\u79D1\u52D2\u8BED",
  "nyo": "\u5C3C\u5965\u7F57\u8BED",
  "nzi": "\u6069\u6D4E\u9A6C\u8BED",
  "oc": "\u5965\u514B\u8BED",
  "oj": "\u5965\u5409\u5E03\u74E6\u8BED",
  "om": "\u5965\u7F57\u83AB\u8BED",
  "or": "\u5965\u91CC\u4E9A\u8BED",
  "os": "\u5965\u585E\u68AF\u8BED",
  "osa": "\u5965\u585E\u6CBB\u8BED",
  "ota": "\u5965\u65AF\u66FC\u571F\u8033\u5176\u8BED",
  "pa": "\u65C1\u906E\u666E\u8BED",
  "pag": "\u90A6\u963F\u897F\u5357\u8BED",
  "pal": "\u5DF4\u62C9\u7EF4\u8BED",
  "pam": "\u90A6\u677F\u7259\u8BED",
  "pap": "\u5E15\u76AE\u963F\u95E8\u6258\u8BED",
  "pau": "\u5E15\u52B3\u8BED",
  "pcm": "\u5C3C\u65E5\u5229\u4E9A\u76AE\u94A6\u8BED",
  "peo": "\u53E4\u6CE2\u65AF\u8BED",
  "phn": "\u8153\u5C3C\u57FA\u8BED",
  "pi": "\u5DF4\u5229\u8BED",
  "pl": "\u6CE2\u5170\u8BED",
  "pon": "\u6CE2\u7EB3\u4F69\u8BED",
  "prg": "\u666E\u9C81\u58EB\u8BED",
  "pro": "\u53E4\u666E\u7F57\u6587\u65AF\u8BED",
  "ps": "\u666E\u4EC0\u56FE\u8BED",
  "pt": "\u8461\u8404\u7259\u8BED",
  "pt-BR": "\u5DF4\u897F\u8461\u8404\u7259\u8BED",
  "pt-PT": "\u6B27\u6D32\u8461\u8404\u7259\u8BED",
  "qu": "\u514B\u4E18\u4E9A\u8BED",
  "quc": "\u57FA\u5207\u8BED",
  "raj": "\u62C9\u8D3E\u65AF\u5766\u8BED",
  "rap": "\u62C9\u5E15\u52AA\u4F0A\u8BED",
  "rar": "\u62C9\u7F57\u6C64\u52A0\u8BED",
  "rhg": "\u7F57\u5174\u4E9A\u8BED",
  "rm": "\u7F57\u66FC\u4EC0\u8BED",
  "rn": "\u9686\u8FEA\u8BED",
  "ro": "\u7F57\u9A6C\u5C3C\u4E9A\u8BED",
  "ro-MD": "\u6469\u5C14\u591A\u74E6\u8BED",
  "rof": "\u5170\u535A\u8BED",
  "rom": "\u5409\u666E\u8D5B\u8BED",
  "ru": "\u4FC4\u8BED",
  "rup": "\u963F\u7F57\u9A6C\u5C3C\u4E9A\u8BED",
  "rw": "\u5362\u65FA\u8FBE\u8BED",
  "rwk": "\u7F57\u74E6\u8BED",
  "sa": "\u68B5\u8BED",
  "sad": "\u6851\u8FBE\u97E6\u8BED",
  "sah": "\u8428\u54C8\u8BED",
  "sam": "\u8428\u9A6C\u5229\u4E9A\u963F\u62C9\u59C6\u8BED",
  "saq": "\u6851\u5E03\u9C81\u8BED",
  "sas": "\u8428\u8428\u514B\u6587",
  "sat": "\u6851\u5854\u5229\u8BED",
  "sba": "\u7518\u62DC\u8BED",
  "sbp": "\u6851\u53E4\u8BED",
  "sc": "\u8428\u4E01\u8BED",
  "scn": "\u897F\u897F\u91CC\u8BED",
  "sco": "\u82CF\u683C\u5170\u8BED",
  "sd": "\u4FE1\u5FB7\u8BED",
  "sdh": "\u5357\u5E93\u5C14\u5FB7\u8BED",
  "se": "\u5317\u65B9\u8428\u7C73\u8BED",
  "see": "\u585E\u5185\u5361\u8BED",
  "seh": "\u585E\u7EB3\u8BED",
  "sel": "\u585E\u5C14\u5E93\u666E\u8BED",
  "ses": "\u4E1C\u6851\u6D77\u8BED",
  "sg": "\u6851\u6208\u8BED",
  "sga": "\u53E4\u7231\u5C14\u5170\u8BED",
  "sh": "\u585E\u5C14\u7EF4\u4E9A-\u514B\u7F57\u5730\u4E9A\u8BED",
  "shi": "\u5E0C\u5C14\u54C8\u8BED",
  "shn": "\u63B8\u8BED",
  "shu": "\u4E4D\u5F97\u963F\u62C9\u4F2F\u8BED",
  "si": "\u50E7\u4F3D\u7F57\u8BED",
  "sid": "\u6089\u8FBE\u6469\u8BED",
  "sk": "\u65AF\u6D1B\u4F10\u514B\u8BED",
  "sl": "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED",
  "sm": "\u8428\u6469\u4E9A\u8BED",
  "sma": "\u5357\u8428\u7C73\u8BED",
  "smj": "\u5415\u52D2\u8428\u7C73\u8BED",
  "smn": "\u4F0A\u7EB3\u91CC\u8428\u7C73\u8BED",
  "sms": "\u65AF\u79D1\u7279\u8428\u7C73\u8BED",
  "sn": "\u7ECD\u7EB3\u8BED",
  "snk": "\u7D22\u5B81\u514B\u8BED",
  "so": "\u7D22\u9A6C\u91CC\u8BED",
  "sog": "\u7C9F\u7279\u8BED",
  "sq": "\u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED",
  "sr": "\u585E\u5C14\u7EF4\u4E9A\u8BED",
  "srn": "\u82CF\u91CC\u5357\u6C64\u52A0\u8BED",
  "srr": "\u585E\u96F7\u5C14\u8BED",
  "ss": "\u65AF\u74E6\u8482\u8BED",
  "ssy": "\u8428\u970D\u8BED",
  "st": "\u5357\u7D22\u6258\u8BED",
  "su": "\u5DFD\u4ED6\u8BED",
  "suk": "\u82CF\u5E93\u9A6C\u8BED",
  "sus": "\u82CF\u82CF\u8BED",
  "sux": "\u82CF\u7F8E\u5C14\u8BED",
  "sv": "\u745E\u5178\u8BED",
  "sw": "\u65AF\u74E6\u5E0C\u91CC\u8BED",
  "sw-CD": "\u521A\u679C\u65AF\u74E6\u5E0C\u91CC\u8BED",
  "swb": "\u79D1\u6469\u7F57\u8BED",
  "syc": "\u53E4\u5178\u53D9\u5229\u4E9A\u8BED",
  "syr": "\u53D9\u5229\u4E9A\u8BED",
  "ta": "\u6CF0\u7C73\u5C14\u8BED",
  "te": "\u6CF0\u5362\u56FA\u8BED",
  "tem": "\u6CF0\u59C6\u5948\u8BED",
  "teo": "\u7279\u7D22\u8BED",
  "ter": "\u7279\u4F26\u8BFA\u8BED",
  "tet": "\u5FB7\u987F\u8BED",
  "tg": "\u5854\u5409\u514B\u8BED",
  "th": "\u6CF0\u8BED",
  "ti": "\u63D0\u683C\u5229\u5C3C\u4E9A\u8BED",
  "tig": "\u63D0\u683C\u96F7\u8BED",
  "tiv": "\u8482\u592B\u8BED",
  "tk": "\u571F\u5E93\u66FC\u8BED",
  "tkl": "\u6258\u514B\u52B3\u8BED",
  "tl": "\u4ED6\u52A0\u7984\u8BED",
  "tlh": "\u514B\u6797\u8D21\u8BED",
  "tli": "\u7279\u6797\u5409\u7279\u8BED",
  "tmh": "\u5854\u9A6C\u5947\u514B\u8BED",
  "tn": "\u8328\u74E6\u7EB3\u8BED",
  "to": "\u6C64\u52A0\u8BED",
  "tog": "\u5C3C\u4E9A\u8428\u6C64\u52A0\u8BED",
  "tpi": "\u6258\u514B\u76AE\u8F9B\u8BED",
  "tr": "\u571F\u8033\u5176\u8BED",
  "trv": "\u8D5B\u5FB7\u514B\u8BED",
  "ts": "\u806A\u52A0\u8BED",
  "tsi": "\u94A6\u897F\u5B89\u8BED",
  "tt": "\u9791\u977C\u8BED",
  "tum": "\u901A\u5E03\u5361\u8BED",
  "tvl": "\u56FE\u74E6\u5362\u8BED",
  "tw": "\u5951\u7EF4\u8BED",
  "twq": "\u5317\u6851\u6D77\u8BED",
  "ty": "\u5854\u5E0C\u63D0\u8BED",
  "tyv": "\u56FE\u74E6\u8BED",
  "tzm": "\u5854\u9A6C\u9F50\u683C\u7279\u8BED",
  "udm": "\u4E4C\u5FB7\u7A46\u5C14\u7279\u8BED",
  "ug": "\u7EF4\u543E\u5C14\u8BED",
  "uga": "\u4E4C\u52A0\u91CC\u7279\u8BED",
  "uk": "\u4E4C\u514B\u5170\u8BED",
  "umb": "\u7FC1\u672C\u675C\u8BED",
  "und": "\u672A\u77E5\u8BED\u8A00",
  "ur": "\u4E4C\u5C14\u90FD\u8BED",
  "uz": "\u4E4C\u5179\u522B\u514B\u8BED",
  "vai": "\u74E6\u4F0A\u8BED",
  "ve": "\u6587\u8FBE\u8BED",
  "vep": "\u7EF4\u666E\u68EE\u8BED",
  "vi": "\u8D8A\u5357\u8BED",
  "vo": "\u6C83\u62C9\u666E\u514B\u8BED",
  "vot": "\u6C83\u63D0\u514B\u8BED",
  "vun": "\u6E29\u65E7\u8BED",
  "wa": "\u74E6\u9686\u8BED",
  "wae": "\u74E6\u5C14\u745F\u8BED",
  "wal": "\u74E6\u62C9\u83AB\u8BED",
  "war": "\u74E6\u745E\u8BED",
  "was": "\u74E6\u7ECD\u8BED",
  "wbp": "\u74E6\u5C14\u76AE\u745E\u8BED",
  "wo": "\u6C83\u6D1B\u592B\u8BED",
  "wuu": "\u5434\u8BED",
  "xal": "\u5361\u5C14\u6885\u514B\u8BED",
  "xh": "\u79D1\u8428\u8BED",
  "xog": "\u7D22\u52A0\u8BED",
  "yao": "\u7476\u65CF\u8BED",
  "yap": "\u96C5\u6D66\u8BED",
  "yav": "\u6D0B\u535E\u8BED",
  "ybb": "\u8036\u59C6\u5DF4\u8BED",
  "yi": "\u610F\u7B2C\u7EEA\u8BED",
  "yo": "\u7EA6\u9C81\u5DF4\u8BED",
  "yrl": "yrl",
  "yue": "\u7CA4\u8BED",
  "za": "\u58EE\u8BED",
  "zap": "\u8428\u6CE2\u8482\u514B\u8BED",
  "zbl": "\u5E03\u91CC\u65AF\u7B26\u53F7",
  "zen": "\u6CFD\u7EB3\u52A0\u8BED",
  "zgh": "\u6807\u51C6\u6469\u6D1B\u54E5\u5854\u9A6C\u585E\u7279\u8BED",
  "zh": "\u4E2D\u6587",
  "zh-Hans": "\u7B80\u4F53\u4E2D\u6587",
  "zh-Hant": "\u7E41\u4F53\u4E2D\u6587",
  "zu": "\u7956\u9C81\u8BED",
  "zun": "\u7956\u5C3C\u8BED",
  "zxx": "\u65E0\u8BED\u8A00\u5185\u5BB9",
  "zza": "\u624E\u624E\u8BED"
};

// src/l10n/locale/zh-tw.ts
var zh_tw_default = {
  "aa": "\u963F\u6CD5\u6587",
  "ab": "\u963F\u5E03\u54C8\u8332\u6587",
  "ace": "\u4E9E\u9F4A\u6587",
  "ach": "\u963F\u50D1\u5229\u6587",
  "ada": "\u963F\u7576\u83AB\u6587",
  "ady": "\u963F\u8FEA\u5404\u6587",
  "ae": "\u963F\u7DAD\u65AF\u5854\u6587",
  "aeb": "\u7A81\u5C3C\u65AF\u963F\u62C9\u4F2F\u6587",
  "af": "\u5357\u975E\u8377\u862D\u6587",
  "afh": "\u963F\u5F17\u91CC\u5E0C\u5229\u6587",
  "agq": "\u4E9E\u7F55\u6587",
  "ain": "\u963F\u4F0A\u52AA\u6587",
  "ak": "\u963F\u574E\u6587",
  "akk": "\u963F\u5361\u5FB7\u6587",
  "akz": "\u963F\u62C9\u5DF4\u99AC\u6587",
  "ale": "\u963F\u7559\u7533\u6587",
  "aln": "\u84CB\u683C\u963F\u723E\u5DF4\u5C3C\u4E9E\u6587",
  "alt": "\u5357\u963F\u723E\u6CF0\u6587",
  "am": "\u963F\u59C6\u54C8\u62C9\u6587",
  "an": "\u963F\u62C9\u8CA2\u6587",
  "ang": "\u53E4\u82F1\u6587",
  "anp": "\u6602\u52A0\u6587",
  "ar": "\u963F\u62C9\u4F2F\u6587",
  "ar-001": "\u73FE\u4EE3\u6A19\u6E96\u963F\u62C9\u4F2F\u6587",
  "arc": "\u963F\u62C9\u7C73\u6587",
  "arn": "\u99AC\u666E\u5207\u6587",
  "aro": "\u963F\u62C9\u5967\u7D0D\u6587",
  "arp": "\u963F\u62C9\u5E15\u970D\u6587",
  "arq": "\u963F\u723E\u53CA\u5229\u4E9E\u963F\u62C9\u4F2F\u6587",
  "ars": "\u7D0D\u5409\u8FEA\u963F\u62C9\u4F2F\u6587",
  "arw": "\u963F\u62C9\u74E6\u514B\u6587",
  "ary": "\u6469\u6D1B\u54E5\u963F\u62C9\u4F2F\u6587",
  "arz": "\u57C3\u53CA\u963F\u62C9\u4F2F\u6587",
  "as": "\u963F\u85A9\u59C6\u6587",
  "asa": "\u963F\u8607\u6587",
  "ase": "\u7F8E\u570B\u624B\u8A9E",
  "ast": "\u963F\u65AF\u5716\u91CC\u4E9E\u6587",
  "av": "\u963F\u74E6\u723E\u6587",
  "avk": "\u79D1\u5854\u74E6\u6587",
  "awa": "\u963F\u74E6\u6587",
  "ay": "\u827E\u99AC\u62C9\u6587",
  "az": "\u4E9E\u585E\u62DC\u7136\u6587",
  "ba": "\u5DF4\u4EC0\u5580\u723E\u6587",
  "bal": "\u4FFE\u8DEF\u652F\u6587",
  "ban": "\u5CC7\u91CC\u6587",
  "bar": "\u5DF4\u4F10\u5229\u4E9E\u6587",
  "bas": "\u5DF4\u85A9\u6587",
  "bax": "\u5DF4\u59C6\u7A46\u6587",
  "bbc": "\u5DF4\u5854\u514B\u6258\u5DF4\u6587",
  "bbj": "\u6208\u99AC\u62C9\u6587",
  "be": "\u767D\u4FC4\u7F85\u65AF\u6587",
  "bej": "\u8C9D\u624E\u6587",
  "bem": "\u5225\u59C6\u5DF4\u6587",
  "bew": "\u8C9D\u5854\u7DAD\u6587",
  "bez": "\u8C9D\u7D0D\u6587",
  "bfd": "\u5BCC\u7279\u6587",
  "bfq": "\u5DF4\u9054\u52A0\u6587",
  "bg": "\u4FDD\u52A0\u5229\u4E9E\u6587",
  "bgn": "\u897F\u4FFE\u8DEF\u652F\u6587",
  "bho": "\u535A\u5091\u666E\u723E\u6587",
  "bi": "\u6BD4\u65AF\u62C9\u99AC\u6587",
  "bik": "\u6BD4\u79D1\u723E\u6587",
  "bin": "\u6BD4\u5C3C\u6587",
  "bjn": "\u73ED\u4E9E\u723E\u6587",
  "bkm": "\u5EB7\u59C6\u6587",
  "bla": "\u932B\u514B\u932B\u5361\u6587",
  "bm": "\u73ED\u5DF4\u62C9\u6587",
  "bn": "\u5B5F\u52A0\u62C9\u6587",
  "bo": "\u85CF\u6587",
  "bpy": "\u6BD4\u4EC0\u5974\u666E\u840A\u5229\u4E9E\u6587",
  "bqi": "\u5DF4\u8D6B\u8482\u4E9E\u91CC\u6587",
  "br": "\u5E03\u5217\u5854\u5C3C\u6587",
  "bra": "\u5E03\u62C9\u6770\u6587",
  "brh": "\u5E03\u62C9\u7DAD\u6587",
  "brx": "\u535A\u591A\u6587",
  "bs": "\u6CE2\u58EB\u5C3C\u4E9E\u6587",
  "bss": "\u963F\u5EAB\u8272\u6587",
  "bua": "\u5E03\u91CC\u963F\u7279\u6587",
  "bug": "\u5E03\u5409\u65AF\u6587",
  "bum": "\u5E03\u9B6F\u6587",
  "byn": "\u6BD4\u6797\u6587",
  "byv": "\u6885\u6566\u5DF4\u6587",
  "ca": "\u52A0\u6CF0\u862D\u6587",
  "cad": "\u5361\u591A\u6587",
  "car": "\u52A0\u52D2\u6BD4\u6587",
  "cay": "\u5361\u5C24\u52A0\u6587",
  "cch": "\u963F\u71E6\u6587",
  "ccp": "\u67E5\u514B\u99AC\u6587",
  "ce": "\u8ECA\u81E3\u6587",
  "ceb": "\u5BBF\u9727\u6587",
  "cgg": "\u5947\u52A0\u6587",
  "ch": "\u67E5\u83AB\u6D1B\u6587",
  "chb": "\u5947\u5E03\u67E5\u6587",
  "chg": "\u67E5\u52A0\u6587",
  "chk": "\u8655\u5947\u65AF\u6587",
  "chm": "\u99AC\u91CC\u6587",
  "chn": "\u5951\u5974\u514B\u6587",
  "cho": "\u55AC\u514B\u6258\u6587",
  "chp": "\u5947\u4F69\u74E6\u63DA\u6587",
  "chr": "\u67F4\u7F85\u57FA\u6587",
  "chy": "\u6C99\u4F0A\u5B89\u6587",
  "ckb": "\u4E2D\u5EAB\u5FB7\u6587",
  "co": "\u79D1\u897F\u5609\u6587",
  "cop": "\u79D1\u666E\u7279\u6587",
  "cps": "\u5361\u76AE\u8332\u6587",
  "cr": "\u514B\u91CC\u6587",
  "crh": "\u571F\u8033\u5176\u6587\uFF08\u514B\u91CC\u7C73\u4E9E\u534A\u5CF6\uFF09",
  "crs": "\u585E\u5E2D\u723E\u514B\u91CC\u5967\u723E\u6CD5\u6587",
  "cs": "\u6377\u514B\u6587",
  "csb": "\u5361\u8212\u5E03\u6587",
  "cu": "\u5B97\u6559\u65AF\u62C9\u592B\u6587",
  "cv": "\u695A\u74E6\u4EC0\u6587",
  "cy": "\u5A01\u723E\u65AF\u6587",
  "da": "\u4E39\u9EA5\u6587",
  "dak": "\u9054\u79D1\u4ED6\u6587",
  "dar": "\u9054\u723E\u683C\u74E6\u6587",
  "dav": "\u53F0\u5854\u6587",
  "de": "\u5FB7\u6587",
  "de-AT": "\u5FB7\u6587\uFF08\u5967\u5730\u5229\uFF09",
  "de-CH": "\u9AD8\u5730\u5FB7\u6587\uFF08\u745E\u58EB\uFF09",
  "del": "\u5FB7\u62C9\u74E6\u6587",
  "den": "\u65AF\u62C9\u592B",
  "dgr": "\u591A\u683C\u91CC\u5E03\u6587",
  "din": "\u4E01\u5361\u6587",
  "dje": "\u624E\u723E\u99AC\u6587",
  "doi": "\u591A\u683C\u4F86\u6587",
  "dsb": "\u4E0B\u7D22\u5E03\u6587",
  "dtp": "\u4E2D\u90E8\u675C\u9806\u6587",
  "dua": "\u675C\u4E9E\u62C9\u6587",
  "dum": "\u4E2D\u53E4\u8377\u862D\u6587",
  "dv": "\u8FEA\u7DAD\u897F\u6587",
  "dyo": "\u6731\u62C9\u6587",
  "dyu": "\u8FEA\u5C24\u62C9\u6587",
  "dz": "\u5B97\u5361\u6587",
  "dzg": "\u9054\u85A9\u6587",
  "ebu": "\u6069\u5E03\u6587",
  "ee": "\u57C3\u7DAD\u6587",
  "efi": "\u57C3\u83F2\u514B\u6587",
  "egl": "\u57C3\u7C73\u5229\u5B89\u6587",
  "egy": "\u53E4\u57C3\u53CA\u6587",
  "eka": "\u827E\u5361\u6731\u514B\u6587",
  "el": "\u5E0C\u81D8\u6587",
  "elx": "\u57C3\u862D\u6587",
  "en": "\u82F1\u6587",
  "en-AU": "\u82F1\u6587\uFF08\u6FB3\u6D32\uFF09",
  "en-CA": "\u82F1\u6587\uFF08\u52A0\u62FF\u5927\uFF09",
  "en-GB": "\u82F1\u6587\uFF08\u82F1\u570B\uFF09",
  "en-US": "\u82F1\u6587\uFF08\u7F8E\u570B\uFF09",
  "enm": "\u4E2D\u53E4\u82F1\u6587",
  "eo": "\u4E16\u754C\u6587",
  "es": "\u897F\u73ED\u7259\u6587",
  "es-419": "\u897F\u73ED\u7259\u6587\uFF08\u62C9\u4E01\u7F8E\u6D32\uFF09",
  "es-ES": "\u897F\u73ED\u7259\u6587\uFF08\u897F\u73ED\u7259\uFF09",
  "es-MX": "\u897F\u73ED\u7259\u6587\uFF08\u58A8\u897F\u54E5\uFF09",
  "esu": "\u4E2D\u5C24\u76AE\u514B\u6587",
  "et": "\u611B\u6C99\u5C3C\u4E9E\u6587",
  "eu": "\u5DF4\u65AF\u514B\u6587",
  "ewo": "\u4F9D\u6C6A\u90FD\u6587",
  "ext": "\u57C3\u65AF\u7279\u96F7\u99AC\u675C\u62C9\u6587",
  "fa": "\u6CE2\u65AF\u6587",
  "fa-AF": "\u6CE2\u65AF\u6587\uFF08\u963F\u5BCC\u6C57\uFF09",
  "fan": "\u82B3\u65CF\u6587",
  "fat": "\u82B3\u8482\u6587",
  "ff": "\u5BCC\u62C9\u6587",
  "fi": "\u82AC\u862D\u6587",
  "fil": "\u83F2\u5F8B\u8CD3\u6587",
  "fit": "\u6258\u723E\u8A25\u82AC\u862D\u6587",
  "fj": "\u6590\u6FDF\u6587",
  "fo": "\u6CD5\u7F85\u6587",
  "fon": "\u8C50\u6587",
  "fr": "\u6CD5\u6587",
  "fr-CA": "\u6CD5\u6587\uFF08\u52A0\u62FF\u5927\uFF09",
  "fr-CH": "\u6CD5\u6587\uFF08\u745E\u58EB\uFF09",
  "frc": "\u5361\u771F\u6CD5\u6587",
  "frm": "\u4E2D\u53E4\u6CD5\u6587",
  "fro": "\u53E4\u6CD5\u6587",
  "frp": "\u6CD5\u862D\u514B-\u666E\u7F85\u65FA\u65AF\u6587",
  "frr": "\u5317\u5F17\u91CC\u897F\u4E9E\u6587",
  "frs": "\u6771\u5F17\u91CC\u897F\u4E9E\u6587",
  "fur": "\u5F17\u7559\u5229\u6587",
  "fy": "\u897F\u5F17\u91CC\u897F\u4E9E\u6587",
  "ga": "\u611B\u723E\u862D\u6587",
  "gaa": "\u52A0\u65CF\u6587",
  "gag": "\u52A0\u544A\u8332\u6587",
  "gan": "\u8D1B\u8A9E",
  "gay": "\u52A0\u7D04\u6587",
  "gba": "\u845B\u5DF4\u4E9E\u6587",
  "gbz": "\u7D22\u7F85\u4E9E\u65AF\u5FB7\u6559\u9054\u91CC\u6587",
  "gd": "\u8607\u683C\u862D\u84CB\u723E\u6587",
  "gez": "\u5409\u8332\u6587",
  "gil": "\u5409\u723E\u4F2F\u7279\u7FA4\u5CF6\u6587",
  "gl": "\u52A0\u5229\u897F\u4E9E\u6587",
  "glk": "\u5409\u62C9\u57FA\u6587",
  "gmh": "\u4E2D\u53E4\u9AD8\u5730\u5FB7\u6587",
  "gn": "\u74DC\u62C9\u5C3C\u6587",
  "goh": "\u53E4\u9AD8\u5730\u5FB7\u6587",
  "gom": "\u5B54\u5361\u5C3C\u6587",
  "gon": "\u5CA1\u5FB7\u6587",
  "gor": "\u79D1\u9686\u9054\u7F85\u6587",
  "got": "\u54E5\u5FB7\u6587",
  "grb": "\u683C\u5217\u535A\u6587",
  "grc": "\u53E4\u5E0C\u81D8\u6587",
  "gsw": "\u5FB7\u6587\uFF08\u745E\u58EB\uFF09",
  "gu": "\u53E4\u5409\u62C9\u7279\u6587",
  "guc": "\u74E6\u5C24\u6587",
  "gur": "\u5F17\u62C9\u5F17\u62C9\u6587",
  "guz": "\u53E4\u897F\u6587",
  "gv": "\u66FC\u5CF6\u6587",
  "gwi": "\u572D\u5951\u6587",
  "ha": "\u8C6A\u6492\u6587",
  "hai": "\u6D77\u9054\u6587",
  "hak": "\u5BA2\u5BB6\u8A71",
  "haw": "\u590F\u5A01\u5937\u6587",
  "he": "\u5E0C\u4F2F\u4F86\u6587",
  "hi": "\u5370\u5730\u6587",
  "hif": "\u6590\u6FDF\u5370\u5730\u6587",
  "hil": "\u5E0C\u5229\u84CB\u8FB2\u6587",
  "hit": "\u8D6B\u68AF\u6587",
  "hmn": "\u5B5F\u6587",
  "ho": "\u897F\u91CC\u83AB\u5716\u571F\u6587",
  "hr": "\u514B\u7F85\u57C3\u897F\u4E9E\u6587",
  "hsb": "\u4E0A\u7D22\u5E03\u6587",
  "hsn": "\u6E58\u8A9E",
  "ht": "\u6D77\u5730\u6587",
  "hu": "\u5308\u7259\u5229\u6587",
  "hup": "\u80E1\u5E15\u6587",
  "hy": "\u4E9E\u7F8E\u5C3C\u4E9E\u6587",
  "hz": "\u8D6B\u96F7\u7F85\u6587",
  "ia": "\u570B\u969B\u6587",
  "iba": "\u4F0A\u73ED\u6587",
  "ibb": "\u4F0A\u6BD4\u6BD4\u5967\u6587",
  "id": "\u5370\u5C3C\u6587",
  "ie": "\u570B\u969B\u6587\uFF08E\uFF09",
  "ig": "\u4F0A\u5E03\u6587",
  "ii": "\u56DB\u5DDD\u5F5D\u6587",
  "ik": "\u4F9D\u5974\u76AE\u7DAD\u514B\u6587",
  "ilo": "\u4F0A\u6D1B\u95CA\u6587",
  "inh": "\u5370\u53E4\u4EC0\u6587",
  "io": "\u4F0A\u591A\u6587",
  "is": "\u51B0\u5CF6\u6587",
  "it": "\u7FA9\u5927\u5229\u6587",
  "iu": "\u56E0\u7D10\u7279\u6587",
  "izh": "\u82F1\u683C\u91CC\u4E9E\u6587",
  "ja": "\u65E5\u6587",
  "jam": "\u7259\u8CB7\u52A0\u514B\u91CC\u5967\u723E\u82F1\u6587",
  "jbo": "\u908F\u8F2F\u6587",
  "jgo": "\u6069\u683C\u59C6\u5DF4\u6587",
  "jmc": "\u99AC\u6070\u7F8E\u6587",
  "jpr": "\u7336\u592A\u6559-\u6CE2\u65AF\u6587",
  "jrb": "\u7336\u592A\u963F\u62C9\u4F2F\u6587",
  "jut": "\u65E5\u5FB7\u862D\u6587",
  "jv": "\u722A\u54C7\u6587",
  "ka": "\u55AC\u6CBB\u4E9E\u6587",
  "kaa": "\u5361\u62C9\u5361\u723E\u5E15\u514B\u6587",
  "kab": "\u5361\u6BD4\u723E\u6587",
  "kac": "\u5361\u7434\u6587",
  "kaj": "\u5361\u6377\u6587",
  "kam": "\u5361\u59C6\u5DF4\u6587",
  "kaw": "\u5361\u5A01\u6587",
  "kbd": "\u5361\u5DF4\u723E\u9054\u6587",
  "kbl": "\u5361\u5FF5\u5E03\u6587",
  "kcg": "\u5361\u5854\u5E03\u6587",
  "kde": "\u99AC\u5B54\u5FB7\u6587",
  "kea": "\u5361\u5E03\u5A01\u723E\u7B2C\u6587",
  "ken": "\u80AF\u63DA\u6587",
  "kfo": "\u79D1\u7F85\u6587",
  "kg": "\u525B\u679C\u6587",
  "kgp": "\u574E\u525B\u6587",
  "kha": "\u5361\u897F\u6587",
  "kho": "\u548C\u95D0\u6587",
  "khq": "\u897F\u6851\u6D77\u6587",
  "khw": "\u79D1\u74E6\u6587",
  "ki": "\u5409\u5EAB\u5C24\u6587",
  "kiu": "\u5317\u7D2E\u7D2E\u5176\u6587",
  "kj": "\u5EE3\u4E9E\u99AC\u6587",
  "kk": "\u54C8\u85A9\u514B\u6587",
  "kkj": "\u5361\u5EAB\u6587",
  "kl": "\u683C\u9675\u862D\u6587",
  "kln": "\u5361\u502B\u91D1\u6587",
  "km": "\u9AD8\u68C9\u6587",
  "kmb": "\u91D1\u90A6\u675C\u6587",
  "kn": "\u574E\u90A3\u9054\u6587",
  "ko": "\u97D3\u6587",
  "koi": "\u79D1\u7C73-\u5F7C\u723E\u7C73\u4E9E\u514B\u6587",
  "kok": "\u8CA2\u6839\u6587",
  "kos": "\u79D1\u65AF\u96F7\u6069\u6587",
  "kpe": "\u514B\u4F69\u5217\u6587",
  "kr": "\u5361\u52AA\u91CC\u6587",
  "krc": "\u5361\u62C9\u67F4-\u5305\u723E\u5361\u723E\u6587",
  "kri": "\u585E\u62C9\u5229\u6602\u514B\u88CF\u5967\u723E\u6587",
  "krj": "\u57FA\u90A3\u4F86\u963F\u6587",
  "krl": "\u5361\u7D2F\u5229\u963F\u6587",
  "kru": "\u5EAB\u9B6F\u79D1\u6587",
  "ks": "\u5580\u4EC0\u7C73\u723E\u6587",
  "ksb": "\u5C1A\u5DF4\u62C9\u6587",
  "ksf": "\u5DF4\u83F2\u4E9E\u6587",
  "ksh": "\u79D1\u9686\u6587",
  "ku": "\u5EAB\u5FB7\u6587",
  "kum": "\u5EAB\u5BC6\u514B\u6587",
  "kut": "\u5EAB\u7279\u5948\u6587",
  "kv": "\u79D1\u7C73\u6587",
  "kw": "\u5EB7\u74E6\u8033\u6587",
  "ky": "\u5409\u723E\u5409\u65AF\u6587",
  "la": "\u62C9\u4E01\u6587",
  "lad": "\u62C9\u8FEA\u8AFE\u6587",
  "lag": "\u6717\u5409\u6587",
  "lah": "\u62C9\u4EA8\u9054\u6587",
  "lam": "\u862D\u5DF4\u6587",
  "lb": "\u76E7\u68EE\u5821\u6587",
  "lez": "\u5217\u8332\u5E72\u6587",
  "lfn": "\u65B0\u5171\u540C\u8A9E\u8A00",
  "lg": "\u5E72\u9054\u6587",
  "li": "\u6797\u5821\u6587",
  "lij": "\u5229\u53E4\u91CC\u4E9E\u6587",
  "liv": "\u5229\u4F0F\u5C3C\u4E9E\u6587",
  "lkt": "\u62C9\u79D1\u5854\u6587",
  "lmo": "\u502B\u5DF4\u5E95\u6587",
  "ln": "\u6797\u52A0\u62C9\u6587",
  "lo": "\u5BEE\u6587",
  "lol": "\u8292\u6208\u6587",
  "lou": "\u8DEF\u6613\u65AF\u5B89\u90A3\u514B\u91CC\u5967\u723E\u6587",
  "loz": "\u6D1B\u9F4A\u6587",
  "lrc": "\u5317\u76E7\u723E\u6587",
  "lt": "\u7ACB\u9676\u5B9B\u6587",
  "ltg": "\u62C9\u7279\u52A0\u840A\u6587",
  "lu": "\u9B6F\u5DF4\u52A0\u4E39\u52A0\u6587",
  "lua": "\u9B6F\u5DF4\u9B6F\u9B6F\u4E9E\u6587",
  "lui": "\u8DEF\u6613\u585E\u8AFE\u6587",
  "lun": "\u76E7\u6069\u9054\u6587",
  "luo": "\u76E7\u5967\u6587",
  "lus": "\u7C73\u4F50\u6587",
  "luy": "\u76E7\u96C5\u6587",
  "lv": "\u62C9\u812B\u7DAD\u4E9E\u6587",
  "lzh": "\u6587\u8A00\u6587",
  "lzz": "\u62C9\u8332\u6587",
  "mad": "\u99AC\u90FD\u62C9\u6587",
  "maf": "\u99AC\u6CD5\u6587",
  "mag": "\u99AC\u52A0\u4F0A\u6587",
  "mai": "\u9081\u8482\u5229\u6587",
  "mak": "\u671B\u52A0\u932B\u6587",
  "man": "\u66FC\u4E01\u54E5\u6587",
  "mas": "\u99AC\u8CFD\u6587",
  "mde": "\u99AC\u5DF4\u6587",
  "mdf": "\u83AB\u514B\u6C99\u6587",
  "mdr": "\u66FC\u9054\u6587",
  "men": "\u9580\u5FB7\u6587",
  "mer": "\u6885\u9B6F\u6587",
  "mfe": "\u514B\u91CC\u5967\u6587\uFF08\u6A21\u91CC\u897F\u65AF\uFF09",
  "mg": "\u99AC\u9054\u52A0\u65AF\u52A0\u6587",
  "mga": "\u4E2D\u53E4\u611B\u723E\u862D\u6587",
  "mgh": "\u99AC\u5938\u6587",
  "mgo": "\u7F8E\u5854\u6587",
  "mh": "\u99AC\u7D39\u723E\u6587",
  "mi": "\u6BDB\u5229\u6587",
  "mic": "\u7C73\u514B\u99AC\u514B\u6587",
  "min": "\u7C73\u5357\u5361\u5821\u6587",
  "mk": "\u99AC\u5176\u9813\u6587",
  "ml": "\u99AC\u4F86\u4E9E\u62C9\u59C6\u6587",
  "mn": "\u8499\u53E4\u6587",
  "mnc": "\u6EFF\u65CF\u6587",
  "mni": "\u66FC\u5C3C\u666E\u723E\u6587",
  "moh": "\u83AB\u970D\u514B\u6587",
  "mos": "\u83AB\u897F\u6587",
  "mr": "\u99AC\u62C9\u5730\u6587",
  "mrj": "\u897F\u99AC\u91CC\u6587",
  "ms": "\u99AC\u4F86\u6587",
  "mt": "\u99AC\u723E\u4ED6\u6587",
  "mua": "\u8499\u7576\u6587",
  "mul": "\u591A\u7A2E\u8A9E\u8A00",
  "mus": "\u514B\u91CC\u514B\u6587",
  "mwl": "\u7C73\u862D\u5FB7\u65AF\u6587",
  "mwr": "\u99AC\u74E6\u91CC\u6587",
  "mwv": "\u660E\u6253\u5A01\u6587",
  "my": "\u7DEC\u7538\u6587",
  "mye": "\u59C6\u8036\u5167\u6587",
  "myv": "\u5384\u723E\u8332\u4E9E\u6587",
  "mzn": "\u99AC\u8D0A\u5FB7\u862D\u6587",
  "na": "\u8AFE\u9B6F\u6587",
  "nan": "\u95A9\u5357\u8A9E",
  "nap": "\u62FF\u6CE2\u91CC\u6587",
  "naq": "\u7D0D\u99AC\u6587",
  "nb": "\u5DF4\u514B\u6469\u632A\u5A01\u6587",
  "nd": "\u5317\u5730\u7562\u5217\u6587",
  "nds": "\u4F4E\u5730\u5FB7\u6587",
  "nds-NL": "\u4F4E\u5730\u85A9\u514B\u905C\u6587",
  "ne": "\u5C3C\u6CCA\u723E\u6587",
  "new": "\u5C3C\u74E6\u723E\u6587",
  "ng": "\u6069\u6771\u52A0\u6587",
  "nia": "\u5C3C\u4E9E\u65AF\u6587",
  "niu": "\u7D10\u57C3\u6587",
  "njo": "\u963F\u6C83\u90A3\u52A0\u6587",
  "nl": "\u8377\u862D\u6587",
  "nl-BE": "\u4F5B\u862D\u8292\u6587",
  "nmg": "\u5938\u897F\u5967\u6587",
  "nn": "\u8010\u8AFE\u65AF\u514B\u632A\u5A01\u6587",
  "nnh": "\u6069\u7518\u6F8E\u6587",
  "no": "\u632A\u5A01\u6587",
  "nog": "\u8AFE\u84CB\u6587",
  "non": "\u53E4\u8AFE\u723E\u65AF\u6587",
  "nov": "\u8AFE\u7DAD\u4E9E\u6587",
  "nqo": "\u66FC\u5FB7\u6587\u5B57 (N\u2019Ko)",
  "nr": "\u5357\u5730\u7562\u5217\u6587",
  "nso": "\u5317\u7D22\u6258\u6587",
  "nus": "\u52AA\u57C3\u723E\u6587",
  "nv": "\u7D0D\u74E6\u970D\u6587",
  "nwc": "\u53E4\u5C3C\u74E6\u723E\u6587",
  "ny": "\u5C3C\u63DA\u8CC8\u6587",
  "nym": "\u5C3C\u63DA\u97CB\u9F4A\u6587",
  "nyn": "\u5C3C\u63DA\u79D1\u840A\u6587",
  "nyo": "\u5C3C\u5967\u56C9\u6587",
  "nzi": "\u5C3C\u8332\u99AC\u6587",
  "oc": "\u5967\u514B\u897F\u5766\u6587",
  "oj": "\u5967\u6770\u5E03\u74E6\u6587",
  "om": "\u5967\u7F85\u83AB\u6587",
  "or": "\u6B50\u8FEA\u4E9E\u6587",
  "os": "\u5967\u585E\u63D0\u6587",
  "osa": "\u6B50\u585E\u5947\u6587",
  "ota": "\u9102\u5716\u66FC\u571F\u8033\u5176\u6587",
  "pa": "\u65C1\u906E\u666E\u6587",
  "pag": "\u6F58\u52A0\u8F9B\u6587",
  "pal": "\u5DF4\u5217\u7DAD\u6587",
  "pam": "\u6F58\u5E15\u5609\u6587",
  "pap": "\u5E15\u76AE\u963F\u9580\u6258\u6587",
  "pau": "\u5E1B\u7409\u6587",
  "pcd": "\u5E87\u5361\u5E95\u6587",
  "pcm": "\u5948\u53CA\u5229\u4E9E\u76AE\u6B3D\u6587",
  "pdc": "\u8CD3\u5915\u6CD5\u5C3C\u4E9E\u5FB7\u6587",
  "pdt": "\u9580\u8AFE\u4F4E\u5730\u5FB7\u6587",
  "peo": "\u53E4\u6CE2\u65AF\u6587",
  "pfl": "\u666E\u6CD5\u723E\u8328\u5FB7\u6587",
  "phn": "\u8153\u5C3C\u57FA\u6587",
  "pi": "\u5DF4\u5229\u6587",
  "pl": "\u6CE2\u862D\u6587",
  "pms": "\u76AE\u57C3\u8499\u7279\u6587",
  "pnt": "\u65C1\u72C4\u5E0C\u81D8\u6587",
  "pon": "\u6CE2\u90A3\u8C9D\u6587",
  "prg": "\u666E\u9B6F\u58EB\u6587",
  "pro": "\u53E4\u666E\u7F85\u65FA\u65AF\u6587",
  "ps": "\u666E\u4EC0\u5716\u6587",
  "pt": "\u8461\u8404\u7259\u6587",
  "pt-BR": "\u8461\u8404\u7259\u6587\uFF08\u5DF4\u897F\uFF09",
  "pt-PT": "\u8461\u8404\u7259\u6587\uFF08\u8461\u8404\u7259\uFF09",
  "qu": "\u84CB\u695A\u74E6\u6587",
  "quc": "\u57FA\u5207\u6587",
  "qug": "\u6B3D\u535A\u62C9\u7D22\u6D77\u862D\u84CB\u4E18\u4E9E\u6587",
  "raj": "\u62C9\u8CC8\u65AF\u5766\u8AF8\u6587",
  "rap": "\u5FA9\u6D3B\u5CF6\u6587",
  "rar": "\u62C9\u7F85\u901A\u52A0\u6587",
  "rgn": "\u7F85\u99AC\u683C\u8AFE\u91CC\u6587",
  "rhg": "\u7F85\u8208\u4E9E\u6587",
  "rif": "\u91CC\u83F2\u4E9E\u8AFE\u6587",
  "rm": "\u7F85\u66FC\u65AF\u6587",
  "rn": "\u9686\u8FEA\u6587",
  "ro": "\u7F85\u99AC\u5C3C\u4E9E\u6587",
  "ro-MD": "\u6469\u723E\u591A\u74E6\u6587",
  "rof": "\u862D\u535A\u6587",
  "rom": "\u5409\u666E\u8CFD\u6587",
  "rtm": "\u7F85\u5716\u99AC\u5CF6\u6587",
  "ru": "\u4FC4\u6587",
  "rue": "\u76E7\u68EE\u5C3C\u4E9E\u6587",
  "rug": "\u7F85\u7DAD\u963F\u7D0D\u6587",
  "rup": "\u7F85\u99AC\u5C3C\u4E9E\u8A9E\u7CFB",
  "rw": "\u76E7\u5B89\u9054\u6587",
  "rwk": "\u7F85\u74E6\u6587",
  "sa": "\u68B5\u6587",
  "sad": "\u6851\u9054\u97CB\u6587",
  "sah": "\u96C5\u5EAB\u7279\u6587",
  "sam": "\u85A9\u746A\u5229\u4E9E\u963F\u62C9\u59C6\u6587",
  "saq": "\u85A9\u5E03\u9B6F\u6587",
  "sas": "\u6492\u6492\u514B\u6587",
  "sat": "\u6851\u5854\u5229\u6587",
  "saz": "\u7D22\u62C9\u4EC0\u7279\u62C9\u6587",
  "sba": "\u7518\u62DC\u6587",
  "sbp": "\u6851\u53E4\u6587",
  "sc": "\u6492\u4E01\u6587",
  "scn": "\u897F\u897F\u91CC\u6587",
  "sco": "\u8607\u683C\u862D\u6587",
  "sd": "\u4FE1\u5FB7\u6587",
  "sdc": "\u85A9\u4E01\u5C3C\u4E9E-\u85A9\u85A9\u91CC\u6587",
  "sdh": "\u5357\u5EAB\u5FB7\u6587",
  "se": "\u5317\u85A9\u7C73\u6587",
  "see": "\u585E\u8A25\u5361\u6587",
  "seh": "\u8CFD\u7D0D\u6587",
  "sei": "\u745F\u91CC\u6587",
  "sel": "\u585E\u723E\u5EAB\u666E\u6587",
  "ses": "\u6771\u6851\u6D77\u6587",
  "sg": "\u6851\u6208\u6587",
  "sga": "\u53E4\u611B\u723E\u862D\u6587",
  "sgs": "\u85A9\u83AB\u5409\u5E0C\u4E9E\u6587",
  "sh": "\u585E\u723E\u7DAD\u4E9E\u514B\u7F85\u57C3\u897F\u4E9E\u6587",
  "shi": "\u5E0C\u723E\u54C8\u6587",
  "shn": "\u64A3\u6587",
  "shu": "\u963F\u62C9\u4F2F\u6587\uFF08\u67E5\u5FB7\uFF09",
  "si": "\u50E7\u4F3D\u7F85\u6587",
  "sid": "\u5E0C\u9054\u6469\u6587",
  "sk": "\u65AF\u6D1B\u4F10\u514B\u6587",
  "sl": "\u65AF\u6D1B\u7DAD\u5C3C\u4E9E\u6587",
  "sli": "\u4E0B\u897F\u5229\u897F\u4E9E\u6587",
  "sly": "\u585E\u62C9\u4E9E\u6587",
  "sm": "\u85A9\u6469\u4E9E\u6587",
  "sma": "\u5357\u85A9\u7C73\u6587",
  "smj": "\u9B6F\u52D2\u85A9\u7C73\u6587",
  "smn": "\u4F0A\u7D0D\u91CC\u85A9\u7C73\u6587",
  "sms": "\u65AF\u79D1\u7279\u85A9\u7C73\u6587",
  "sn": "\u7D39\u7D0D\u6587",
  "snk": "\u7D22\u5C3C\u57FA\u6587",
  "so": "\u7D22\u99AC\u5229\u6587",
  "sog": "\u7D22\u683C\u5E95\u4E9E\u7D0D\u6587",
  "sq": "\u963F\u723E\u5DF4\u5C3C\u4E9E\u6587",
  "sr": "\u585E\u723E\u7DAD\u4E9E\u6587",
  "srn": "\u8607\u62C9\u5357\u6771\u588E\u6587",
  "srr": "\u585E\u96F7\u723E\u6587",
  "ss": "\u65AF\u74E6\u7279\u6587",
  "ssy": "\u85A9\u970D\u6587",
  "st": "\u585E\u7D22\u6258\u6587",
  "stq": "\u6C99\u7279\u83F2\u58EB\u862D\u6587",
  "su": "\u5DFD\u4ED6\u6587",
  "suk": "\u8607\u5EAB\u99AC\u6587",
  "sus": "\u8607\u8607\u6587",
  "sux": "\u8607\u7F8E\u6587",
  "sv": "\u745E\u5178\u6587",
  "sw": "\u53F2\u74E6\u5E0C\u91CC\u6587",
  "sw-CD": "\u53F2\u74E6\u5E0C\u91CC\u6587\uFF08\u525B\u679C\uFF09",
  "swb": "\u845B\u6469\u6587",
  "syc": "\u53E4\u6558\u5229\u4E9E\u6587",
  "syr": "\u6558\u5229\u4E9E\u6587",
  "szl": "\u897F\u5229\u897F\u4E9E\u6587",
  "ta": "\u5766\u7C73\u723E\u6587",
  "tcy": "\u5716\u76E7\u6587",
  "te": "\u6CF0\u76E7\u56FA\u6587",
  "tem": "\u63D0\u59C6\u6587",
  "teo": "\u7279\u7D22\u6587",
  "ter": "\u6CF0\u96F7\u8AFE\u6587",
  "tet": "\u6CF0\u9813\u6587",
  "tg": "\u5854\u5409\u514B\u6587",
  "th": "\u6CF0\u6587",
  "ti": "\u63D0\u683C\u5229\u5C3C\u4E9E\u6587",
  "tig": "\u8482\u683C\u96F7\u6587",
  "tiv": "\u63D0\u592B\u6587",
  "tk": "\u571F\u5EAB\u66FC\u6587",
  "tkl": "\u6258\u514B\u52DE\u6587",
  "tkr": "\u67E5\u5EAB\u723E\u6587",
  "tl": "\u5854\u52A0\u8DEF\u65CF\u6587",
  "tlh": "\u514B\u6797\u8CA2\u6587",
  "tli": "\u7279\u6797\u57FA\u7279\u6587",
  "tly": "\u5854\u91CC\u4EC0\u6587",
  "tmh": "\u5854\u99AC\u5947\u514B\u6587",
  "tn": "\u585E\u8332\u74E6\u7D0D\u6587",
  "to": "\u6771\u52A0\u6587",
  "tog": "\u6771\u52A0\u6587\uFF08\u5C3C\u4E9E\u85A9\uFF09",
  "tpi": "\u6258\u6BD4\u8F9B\u6587",
  "tr": "\u571F\u8033\u5176\u6587",
  "tru": "\u5716\u7F85\u5C24\u6587",
  "trv": "\u592A\u9B6F\u95A3\u6587",
  "ts": "\u7279\u677E\u52A0\u6587",
  "tsd": "\u7279\u85A9\u514B\u5C3C\u6069\u6587",
  "tsi": "\u6B3D\u897F\u5B89\u6587",
  "tt": "\u97C3\u977C\u6587",
  "ttt": "\u7A46\u65AF\u6797\u5854\u7279\u6587",
  "tum": "\u5716\u59C6\u5E03\u5361\u6587",
  "tvl": "\u5410\u74E6\u9B6F\u6587",
  "tw": "\u7279\u5A01\u6587",
  "twq": "\u5317\u6851\u6D77\u6587",
  "ty": "\u5927\u6EAA\u5730\u6587",
  "tyv": "\u5716\u74E6\u6587",
  "tzm": "\u4E2D\u963F\u7279\u62C9\u65AF\u5854\u99AC\u585E\u7279\u6587",
  "udm": "\u70CF\u5FB7\u7A46\u723E\u7279\u6587",
  "ug": "\u7DAD\u543E\u723E\u6587",
  "uga": "\u70CF\u52A0\u5217\u6587",
  "uk": "\u70CF\u514B\u862D\u6587",
  "umb": "\u59C6\u672C\u675C\u6587",
  "und": "\u672A\u77E5\u8A9E\u8A00",
  "ur": "\u70CF\u90FD\u6587",
  "uz": "\u70CF\u8332\u5225\u514B\u6587",
  "vai": "\u74E6\u4F0A\u6587",
  "ve": "\u6EAB\u9054\u6587",
  "vec": "\u5A01\u5C3C\u65AF\u6587",
  "vep": "\u7DAD\u666E\u68EE\u6587",
  "vi": "\u8D8A\u5357\u6587",
  "vls": "\u897F\u4F5B\u862D\u5FB7\u6587",
  "vmf": "\u7F8E\u8335-\u6CD5\u862D\u514B\u5C3C\u4E9E\u6587",
  "vo": "\u6C83\u62C9\u666E\u514B\u6587",
  "vot": "\u6C83\u63D0\u514B\u6587",
  "vro": "\u4F5B\u7F85\u6587",
  "vun": "\u6EAB\u820A\u6587",
  "wa": "\u74E6\u9686\u6587",
  "wae": "\u74E6\u723E\u745F\u6587",
  "wal": "\u74E6\u62C9\u83AB\u6587",
  "war": "\u74E6\u745E\u6587",
  "was": "\u74E6\u7D39\u6587",
  "wbp": "\u6C83\u76AE\u745E\u6587",
  "wo": "\u6C83\u6D1B\u592B\u6587",
  "wuu": "\u5433\u8A9E",
  "xal": "\u5361\u723E\u6885\u514B\u6587",
  "xh": "\u79D1\u85A9\u6587",
  "xmf": "\u660E\u683C\u5217\u723E\u6587",
  "xog": "\u7D22\u52A0\u6587",
  "yao": "\u7464\u6587",
  "yap": "\u96C5\u6D66\u6587",
  "yav": "\u6D0B\u535E\u6587",
  "ybb": "\u8036\u59C6\u5DF4\u6587",
  "yi": "\u610F\u7B2C\u7DD2\u6587",
  "yo": "\u7D04\u9B6F\u5DF4\u6587",
  "yrl": "\u5948\u6069\u52A0\u5716\u6587",
  "yue": "\u7CB5\u8A9E",
  "za": "\u58EF\u6587",
  "zap": "\u85A9\u6CE2\u7279\u514B\u6587",
  "zbl": "\u5E03\u5217\u65AF\u7B26\u865F",
  "zea": "\u897F\u862D\u6587",
  "zen": "\u6FA4\u7D0D\u52A0\u6587",
  "zgh": "\u6A19\u6E96\u6469\u6D1B\u54E5\u5854\u99AC\u585E\u7279\u6587",
  "zh": "\u4E2D\u6587",
  "zh-Hans": "\u7C21\u9AD4\u4E2D\u6587",
  "zh-Hant": "\u7E41\u9AD4\u4E2D\u6587",
  "zu": "\u7956\u9B6F\u6587",
  "zun": "\u7956\u5C3C\u6587",
  "zxx": "\u7121\u8A9E\u8A00\u5167\u5BB9",
  "zza": "\u624E\u624E\u6587"
};

// src/l10n/index.ts
var locales = {
  ar: ar_default,
  be: be_default,
  bg: bg_default,
  ca: ca_default,
  cs: cs_default,
  da: da_default,
  de: de_default,
  el: el_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  eu: eu_default,
  fa: fa_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  ml: ml_default,
  ms: ms_default,
  nl: nl_default,
  no: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  se: se_default,
  sk: sk_default,
  sq: sq_default,
  sr: sr_default,
  th: th_default,
  tm: tm_default,
  tr: tr_default,
  uk: uk_default,
  ur: ur_default,
  vi: vi_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = locales[import_obsidian4.moment.locale()];
function t(str) {
  if (!locale)
    console.error("Error: translator locale not found", import_obsidian4.moment.locale());
  return locale && locale[str] || en_default[str] || str;
}

// src/handlers/dummy-translate.ts
var DummyTranslate = class {
  /**
   * Internal counter for the number of times the service has failed
   */
  failure_count;
  /**
   * Writable for the number of times the service has failed
   * @remark This is a writable store, so that a listener can set the service as invalidated if it fails too many times, and update other components
   */
  failure_count_watcher;
  /**
   * Identifier for the service, used to get display name, icon, etc.
   * @virtual
   */
  id = "dummy";
  /**
   * Lists all languages supported by the service
   */
  available_languages;
  /**
   * Default options/actions for the service
   */
  options = {};
  /**
   * Internal validity status of the service, service functionality cannot be used if this is false
   * @remark Service becomes invalid when it fails too many times, or when the user changes the settings
   */
  valid;
  /**
   * Determines whether the service is the default/global service for the plugin (i.e. the one used for translating files)
   */
  default;
  /**
   * The maximum number of bytes that can be sent in a single translation request
   */
  character_limit = Infinity;
  /**
   * Amount of time service should wait between sending requests
   */
  wait_time = 0;
  base_status_code_lookup = {
    200: void 0,
    400: "Bad request, query parameters missing [OPEN ISSUE ON GITHUB]",
    401: "Unauthenticated request, check credentials",
    402: "Insufficient funds, check API key status",
    403: "Unauthorized request, check credentials/free quota exceeded",
    404: "Not found [OPEN ISSUE ON GITHUB]",
    405: "Method not allowed",
    408: "Request timed out, try again later",
    413: "Request too large, reduce text size [OPEN ISSUE ON GITHUB]",
    422: "Text can not be translated",
    429: "Exceeded rate limit, try again later",
    456: "Character quota exceeded",
    500: "Internal server error, try again later",
    503: "Service unavailable, try again later"
  };
  constructor() {
    this.failure_count = 0;
    this.failure_count_watcher = writable(0);
    this.valid = true;
  }
  /**
   * Internal function to handle errors, keep track of failure count
   * @internal
   */
  failed() {
    this.failure_count++;
    this.failure_count_watcher.set(this.failure_count);
  }
  /**
   * Internal function to handle succesful requests, reset failure count
   * @internal
   */
  success() {
    this.failure_count = 0;
    this.failure_count_watcher.set(0);
  }
  /**
   * Helper function to update private translator variables
   * @param settings - Settings to update
   */
  update_settings(settings2) {
  }
  /**
   * Validate the service based upon its current settings
   * @returns Object containing validation output, status code, and message
   */
  async validate() {
    let output;
    try {
      output = await this.service_validate();
      if (output.valid)
        this.failure_count = 0;
      else
        output.message = `Validation failed:
	${output.message || output.status_code}`;
      return output;
    } catch (e) {
      output = { status_code: 400, valid: false, message: `Validation failed:
	${e.message}` };
      return output;
    } finally {
      this.valid = output.valid;
    }
  }
  /**
   * Internal function to run the service-specific validation logic
   * @virtual
   */
  async service_validate() {
    return { status_code: 400, valid: false, message: "This should not ever be called" };
  }
  /**
   * Detect the language of the given input text
   * @param text - Text to detect language of
   * @returns Object containing detected languages and calculated confidences, status code, and message
   */
  async detect(text2) {
    if (!this.valid) {
      if (this.id === "fasttext")
        return { status_code: 400, message: "FastText is not installed" };
      return { status_code: 400, message: "Translation service is not validated" };
    }
    if (!text2.trim())
      return { status_code: 400, message: "No text was provided" };
    let output;
    try {
      output = await this.service_detect(text2.split(/\s+/).slice(0, 20).join(" "));
      if (output.status_code > 200)
        return this.detected_error("Language detection failed", output);
      if (!output.detected_languages)
        output = { message: "Language detection failed:\n	(Could not detect language)", status_code: 400 };
      this.success();
      return output;
    } catch (e) {
      return this.detected_error("Language detection failed", { message: e.message });
    }
  }
  /**
   * Internal function to run the service-specific language detection logic
   * @param text - Text to detect language of
   * @virtual
   */
  async service_detect(text2) {
    return { status_code: 400, detected_languages: [], message: "This should not ever be called" };
  }
  /**
   * Translate the given text from a source language to a target language
   *
   * @param text - Text to translate
   * @param from - Source language, may be null if language is to be detected, must exist in available_languages
   * @param to - Target language, must exist in available_languages
   * @param options - Additional options to pass to the service, see 'types.d.ts' for more information
   * @returns Object containing translated text, detected language, detection confidence, status code, and message
   */
  async translate(text2, from, to, options = {}) {
    if (!this.valid) {
      if (this.id === "bergamot")
        return { status_code: 400, message: "Bergamot is not installed" };
      return { status_code: 400, message: "Translation service is not validated" };
    }
    if (!text2.trim())
      return { status_code: 400, message: "No text was provided" };
    if (!to)
      return { status_code: 400, message: "No target language was provided" };
    if (from === to)
      return { status_code: 200, translation: text2 };
    if (from && from !== "auto" && !this.available_languages.includes(from))
      return { status_code: 400, message: `Source language "${t(from)}" is not supported` };
    if (!this.available_languages.includes(to))
      return { status_code: 400, message: `Target language "${t(to)}" is not supported` };
    if (!from)
      from = "auto";
    let output;
    try {
      let temp_detected_language = from;
      let detecting_language = false;
      if (options.apply_glossary && !options.glossary) {
        detecting_language = from === "auto" && !(globals2.plugin.detector == null) && globals2.plugin.detector.valid;
        if (detecting_language || from !== "auto") {
          if (detecting_language) {
            const detection_results = await globals2.plugin.detector.detect(text2);
            if (detection_results.detected_languages)
              temp_detected_language = detection_results.detected_languages[0].language;
            else
              temp_detected_language = null;
          }
          if (temp_detected_language) {
            from = temp_detected_language;
            const language_pair = from + "_" + to;
            const loaded_settings = get_store_value(settings);
            if (loaded_settings.glossary_preference !== "local") {
              options.glossary_id = loaded_settings.service_settings[this.id].uploaded_glossaries?.[language_pair];
            }
            if (loaded_settings.glossary_preference === "local" || loaded_settings.glossary_preference === "online" && !options.glossary) {
              const glossary_pair = glossary.dicts[language_pair];
              if (from && glossary_pair) {
                text2 = text2.replace(
                  glossary.replacements[language_pair],
                  (match) => {
                    return glossary_pair.find((x) => x[0].toLowerCase() === match.toLowerCase())[1] || match;
                  }
                );
              }
            }
          }
        }
      }
      options = { ...options, ...this.options };
      if (text2.length < this.character_limit) {
        output = await this.service_translate(text2, from, to, options);
        if (output.status_code !== 200)
          return this.detected_error("Translation failed", output);
        if (detecting_language && temp_detected_language)
          output.detected_language = temp_detected_language;
      } else {
        let idx = 0;
        let translation = "";
        const languages_occurrences = new DefaultDict({}, 0);
        while (idx < text2.length) {
          let r_idx;
          if (idx + this.character_limit >= text2.length)
            r_idx = Infinity;
          else {
            r_idx = regexLastIndexOf(text2, /\p{Zs}/gu, idx + this.character_limit);
            if (r_idx === -1 || r_idx < idx)
              r_idx = idx + this.character_limit;
          }
          const chunk = text2.slice(idx, r_idx).trim();
          const result = await this.service_translate(chunk, from, to, options);
          if (result.status_code !== 200) {
            return this.detected_error("Translation failed", result);
          } else {
            translation += (idx ? text2.at(idx - 1) : "") + result.translation;
            if (result.detected_language)
              languages_occurrences[result.detected_language]++;
            idx = r_idx + 1;
          }
        }
        output = {
          translation,
          detected_language: Object.entries(languages_occurrences).reduce((a, b) => a[1] > b[1] ? a : b)[0],
          status_code: 200
        };
      }
      this.success();
      return output;
    } catch (e) {
      return this.detected_error("Translation failed", { message: e.message });
    }
  }
  /**
   * Internal function to run the service-specific translation logic
   * @param text - The text to translate
   * @param from - The language to translate from
   * @param to - The language to translate to
   * @param [glossary_id=undefined] - The glossary ID of the online service to use (leave undefined if not applicable)
   * @returns Object containing the translation and the detected language & confidence (if applicable), as well as the status code and message
   * @virtual
   */
  async service_translate(text2, from, to, options = {} = {}) {
    return { status_code: 400, translation: text2, detected_language: null };
  }
  /**
   * Get most up-to-date list of supported languages for this service
   * @returns Object containing the list of supported languages, the status code and message
   */
  async languages() {
    if (!this.valid)
      return { status_code: 400, message: "Translation service is not validated" };
    let output;
    try {
      output = await this.service_languages();
      if (output.status_code !== 200)
        return this.detected_error("Languages fetching failed", output);
      this.success();
      if (this.id !== "bergamot")
        this.available_languages = output.languages;
      return output;
    } catch (e) {
      return this.detected_error("Languages fetching failed", { message: e.message });
    }
  }
  /**
   * Internal function to run the service-specific languages fetching logic
   * @returns Object containing the list of supported languages, the status code and message
   * @virtual
   */
  async service_languages() {
    return { status_code: 400, message: "This should not ever be called" };
  }
  /**
   * Get most up-to-date list of supported glossary language-pairs for this service
   * @returns Object containing the list of supported glossary language-pairs, the status code and message
   * @virtual
   */
  async glossary_languages() {
    if (!this.valid)
      return { status_code: 400, message: "Translation service is not validated" };
    const output = await this.service_glossary_languages();
    if (output.status_code !== 200)
      return this.detected_error("Glossary languages fetching failed", output);
    this.success();
    return output;
  }
  /**
   * Internal function to run the service-specific glossary languages fetching logic
   * @returns Object containing the list of supported glossary language-pairs, the status code and message
   * @virtual
   */
  async service_glossary_languages() {
    return { status_code: 400, message: "This should not ever be called" };
  }
  /**
   * Upload glossaries for all supported language-pairs to this service
   * @param glossary - The glossaries to upload
   * @param glossary_languages - All supported glossary language-pairs
   * @param previous_glossaries_ids - The glossary IDs of the previous glossaries, will be removed and replaced by the new glossaries
   * @returns Object containing the list of new glossary IDs, the status code and message
   */
  async glossary_upload(glossary2, glossary_languages, previous_glossaries_ids) {
    if (!this.valid)
      return { status_code: 400, message: "Translation service is not validated" };
    const output = await this.service_glossary_upload(glossary2, glossary_languages, previous_glossaries_ids);
    if (!output.message) {
      if (output.status_code === 200) {
        output.message = "Glossary uploaded successfully";
        this.success();
      }
    } else {
      return this.detected_error("Glossary uploading failed", output);
    }
    return output;
  }
  /**
   * Internal function to run the service-specific glossary uploading logic
   * @param glossary - The glossaries to upload
   * @param glossary_languages - All supported glossary language-pairs
   * @param previous_glossaries_ids - The glossary IDs of the previous glossaries, will be removed and replaced by the new glossaries
   * @returns Object containing the list of new glossary IDs, the status code and message
   * @virtual
   */
  async service_glossary_upload(glossary2, glossary_languages, previous_glossaries_ids) {
    return { status_code: 400, message: "This should not ever be called" };
  }
  /**
   * Function to determine whether service is capable of auto-detecting the language of the text and translating from it
   * @returns Boolean indicating whether auto-detection is supported
   * @virtual
   */
  has_autodetect_capability() {
    return false;
  }
  update_data(available_models) {
  }
  setup_service(available_models) {
  }
  /**
   * Internal function to prettify error messages from the handlers and update failure count
   * @param prefix - The prefix to add to the error message (e.g. "Translation failed")
   * @param response - The response object from the handler
   * @returns Object containing prettified status code and message
   * @private
   */
  detected_error(prefix, response) {
    if (!response.message) {
      response.message = this.base_status_code_lookup[response.status_code];
      if (!response.message)
        response.message = `Unknown error`;
    }
    response.message += ` (${response.status_code})`;
    this.failed();
    return {
      message: `${prefix}:
	${response.message}`,
      status_code: response.status_code || 400
    };
  }
};

// src/handlers/azure-translator.ts
var import_obsidian5 = require("obsidian");
var AzureTranslator = class extends DummyTranslate {
  #api_key;
  #region;
  id = "azure_translator";
  character_limit = 5e4;
  // Maximum 33300 characters per minute for F0 tier
  wait_time = 6e4;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#region = settings2.region;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#region = settings2.region ?? this.#region;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    const headers = {
      "Content-Type": "application/json",
      "Ocp-Apim-Subscription-Key": this.#api_key
    };
    if (this.#region)
      headers["Ocp-Apim-Subscription-Region"] = this.#region;
    const response = await (0, import_obsidian5.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&` + new URLSearchParams({
        from: "",
        to: "en",
        textType: "plain"
      }),
      headers,
      body: JSON.stringify([{ Text: "" }])
    });
    const data = response.json;
    return {
      status_code: response.status,
      valid: response.status === 200,
      message: data.error?.message
    };
  }
  async service_detect(text2) {
    const headers = {
      "Content-Type": "application/json",
      "Ocp-Apim-Subscription-Key": this.#api_key
    };
    if (this.#region)
      headers["Ocp-Apim-Subscription-Region"] = this.#region;
    const response = await (0, import_obsidian5.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://api.cognitive.microsofttranslator.com/detect?api-version=3.0&scope=text` + new URLSearchParams({
        textType: "plain"
      }),
      headers,
      body: JSON.stringify([{ Text: text2 }])
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    let results = [{ language: data[0].language, confidence: data[0].score }];
    if (data[0].alternatives)
      results = results.concat(data[0].alternatives.map((alternative) => ({
        language: alternative.language,
        confidence: alternative.score
      })));
    return {
      status_code: response.status,
      detected_languages: results
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const headers = {
      "Content-Type": "application/json",
      "Ocp-Apim-Subscription-Key": this.#api_key
    };
    if (this.#region)
      headers["Ocp-Apim-Subscription-Region"] = this.#region;
    let profanity_action = "NoAction";
    if (options.profanity_filter.action === "mark")
      profanity_action = "Marked";
    else if (options.profanity_filter.action === "delete")
      profanity_action = "Deleted";
    let profanity_mark = void 0;
    if (options.profanity_filter.marker === "mask")
      profanity_mark = "Asterisk";
    else if (options.profanity_filter.marker === "html-tag")
      profanity_mark = "Tag";
    const response = await (0, import_obsidian5.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&` + new URLSearchParams({
        from: from === "auto" ? "" : from,
        to,
        textType: "plain",
        allowFallback: "true",
        profanityAction: profanity_action,
        profanityMarker: profanity_mark
      }),
      headers,
      body: JSON.stringify([{ Text: text2 }])
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    const detected_language = from === "auto" && data[0].detectedLanguage.language;
    return {
      status_code: response.status,
      translation: data[0].translations[0].text,
      detected_language: detected_language ? data[0].detectedLanguage.language : null,
      confidence: detected_language ? data[0].detectedLanguage.score : null
    };
  }
  // No API key required, service may be invalid
  async service_languages() {
    const response = await (0, import_obsidian5.requestUrl)({
      throw: false,
      method: "GET",
      url: `https://api.cognitive.microsofttranslator.com/languages?api-version=3.0&scope=translation`,
      headers: { "Content-Type": "application/json" }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    return {
      status_code: response.status,
      languages: Object.keys(data.translation)
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/google-translate.ts
var import_obsidian6 = require("obsidian");
var GoogleTranslate = class extends DummyTranslate {
  #api_key;
  id = "google_translate";
  character_limit = 1e5;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    const response = await (0, import_obsidian6.requestUrl)({
      throw: false,
      url: `https://translation.googleapis.com/language/translate/v2/languages?` + new URLSearchParams({
        key: this.#api_key,
        target: "en",
        model: "nmt"
      }),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    const data = response.json;
    return {
      status_code: response.status,
      valid: response.status === 200,
      message: data.error?.message
    };
  }
  async service_detect(text2) {
    const response = await (0, import_obsidian6.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translation.googleapis.com/language/translate/v2/detect?` + new URLSearchParams({
        key: this.#api_key
      }),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({
        q: text2
      })
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    return {
      status_code: response.status,
      detected_languages: [{
        language: data.data.detections[0][0].language,
        confidence: data.data.detections[0][0].confidence
      }]
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const response = await (0, import_obsidian6.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translation.googleapis.com/language/translate/v2?` + new URLSearchParams({
        key: this.#api_key
      }),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({
        q: text2,
        source: from === "auto" ? void 0 : from,
        target: to,
        format: "text",
        model: "nmt"
      })
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    return {
      status_code: response.status,
      translation: data.data.translations[0].translatedText,
      detected_language: from === "auto" && data.data.translations[0].detectedSourceLanguage ? data.data.translations[0].detectedSourceLanguage : null
    };
  }
  async service_languages() {
    const response = await (0, import_obsidian6.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translation.googleapis.com/language/translate/v2/languages?` + new URLSearchParams({
        key: this.#api_key,
        target: "en",
        model: "nmt"
      }),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    return {
      status_code: response.status,
      languages: data.data.languages.map((l) => l.language)
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/yandex-translate.ts
var import_obsidian7 = require("obsidian");
var YandexTranslate = class extends DummyTranslate {
  #api_key;
  id = "yandex_translate";
  character_limit = 1e4;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    const response = await (0, import_obsidian7.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translate.yandex.net/api/v1.5/tr.json/getLangs?` + new URLSearchParams({
        key: this.#api_key,
        ui: "en"
      })
    });
    const data = response.json;
    const status_code = data.code ? data.code : response.status;
    return {
      status_code,
      valid: status_code === 200,
      message: data.message
    };
  }
  async service_detect(text2) {
    const response = await (0, import_obsidian7.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translate.yandex.net/api/v1.5/tr.json/detect?` + new URLSearchParams({
        key: this.#api_key,
        text: text2
      })
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      detected_languages: [{ language: data.language }]
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const response = await (0, import_obsidian7.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translate.yandex.net/api/v1.5/tr.json/translate?` + new URLSearchParams({
        key: this.#api_key,
        text: text2,
        lang: from === "auto" ? to : `${from}-${to}`,
        format: "plain"
      })
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      translation: data.text[0],
      detected_language: from === "auto" && data.lang ? data.lang : null
    };
  }
  async service_languages() {
    const response = await (0, import_obsidian7.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://translate.yandex.net/api/v1.5/tr.json/getLangs?` + new URLSearchParams({
        key: this.#api_key,
        ui: "en"
      })
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      languages: Object.keys(data.langs)
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/libre-translate.ts
var import_obsidian8 = require("obsidian");
var LibreTranslate = class extends DummyTranslate {
  #host;
  id = "libre_translate";
  constructor(settings2) {
    super();
    this.#host = settings2.host;
  }
  update_settings(settings2) {
    this.#host = settings2.host ?? this.#host;
  }
  async service_validate() {
    if (!this.#host)
      return { status_code: 400, valid: false, message: "Host was not specified" };
    const response = await (0, import_obsidian8.requestUrl)({
      throw: false,
      method: "GET",
      url: `${this.#host}/languages`
    });
    const data = response.json;
    return {
      status_code: response.status,
      valid: response.status === 200,
      message: data.error
    };
  }
  async service_detect(text2) {
    const response = await (0, import_obsidian8.requestUrl)({
      throw: false,
      method: "POST",
      url: `${this.#host}/detect`,
      body: JSON.stringify({ q: text2 }),
      headers: { "Content-Type": "application/json" }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error };
    return {
      status_code: response.status,
      detected_languages: response.status === 200 ? [{
        language: data[0].language,
        confidence: data[0].confidence / 100
      }] : void 0
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const response = await (0, import_obsidian8.requestUrl)({
      throw: false,
      method: "POST",
      url: `${this.#host}/translate`,
      body: JSON.stringify({
        q: text2,
        source: from,
        target: to
      }),
      headers: { "Content-Type": "application/json" }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error };
    return {
      status_code: response.status,
      translation: data.translatedText,
      detected_language: from === "auto" && data.detectedLanguage.language ? data.detectedLanguage.language : void 0
    };
  }
  async service_languages() {
    const response = await (0, import_obsidian8.requestUrl)({
      throw: false,
      method: "GET",
      url: `${this.#host}/languages`
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error };
    return {
      status_code: response.status,
      languages: response.status === 200 ? Array.from(data).map((x) => x.code) : void 0
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/deepl.ts
var import_obsidian9 = require("obsidian");
var Deepl = class extends DummyTranslate {
  #api_key;
  #host;
  id = "deepl";
  // Body size may maximally be 128KiB
  character_limit = 13e4;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#host = settings2.host || "https://api-free.deepl.com/v2";
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#host = settings2.host ?? this.#host;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    this.#host = this.#api_key.endsWith(":fx") ? "https://api-free.deepl.com/v2" : "https://api.deepl.com/v2";
    const response = await (0, import_obsidian9.requestUrl)({
      throw: false,
      url: `${this.#host}/usage`,
      method: "GET",
      headers: {
        "Authorization": "DeepL-Auth-Key " + this.#api_key
      }
    });
    if (response.status !== 200)
      return { status_code: response.status, valid: false, message: "Invalid API key" };
    const data = response.json;
    return {
      status_code: response.status,
      valid: response.status === 200,
      host: this.#host
    };
  }
  // DeepL doesn't actually support language detection, so the text is being auto-translated to English in order
  //   to detect the language
  // Language detection is not really a high-volume operation, so this is good-enough.
  // Amount of characters being sent is also reduced by the base detect method (selecting only first 20 words)
  async service_detect(text2) {
    const response = await (0, import_obsidian9.requestUrl)({
      throw: false,
      url: `${this.#host}/translate?` + new URLSearchParams({
        text: text2,
        target_lang: "en"
      }),
      method: "POST",
      headers: {
        "Authorization": "DeepL-Auth-Key " + this.#api_key
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      detected_languages: [{ language: data.translations[0].detected_source_language.toLowerCase() }]
    };
  }
  async service_translate(text2, from, to, options = {}) {
    let split_sentences = "1";
    if (options.split_sentences === "punctuation")
      split_sentences = "nonewlines";
    else if (options.split_sentences === "newline" || options.split_sentences === "both")
      split_sentences = "0";
    let preserve_formatting = options.preserve_formatting ? "1" : "0";
    let formality = "default";
    if (options.formality === "formal")
      formality = "prefer_more";
    else if (options.formality === "informal")
      formality = "prefer_less";
    const response = await (0, import_obsidian9.requestUrl)({
      throw: false,
      url: `${this.#host}/translate?` + new URLSearchParams({
        text: text2,
        source_lang: from === "auto" ? "" : from,
        target_lang: to,
        glossary_id: options.glossary || "",
        split_sentences,
        preserve_formatting,
        formality
      }),
      method: "POST",
      headers: {
        "Authorization": "DeepL-Auth-Key " + this.#api_key
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      translation: data.translations[0].text,
      detected_language: from === "auto" && data.translations[0].detected_source_language ? data.translations[0].detected_source_language.toLowerCase() : null
    };
  }
  async service_languages() {
    const response = await (0, import_obsidian9.requestUrl)({
      throw: false,
      url: `${this.#host}/languages`,
      method: "POST",
      headers: {
        "Authorization": "DeepL-Auth-Key " + this.#api_key
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    return {
      status_code: response.status,
      languages: data.map((o) => o.language.toLowerCase())
    };
  }
  async service_glossary_languages() {
    const response = await (0, import_obsidian9.requestUrl)({
      throw: false,
      url: `${this.#host}/glossary-language-pairs`,
      method: "GET",
      headers: {
        "Authorization": "DeepL-Auth-Key " + this.#api_key
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.message };
    const glossary_pairs = {};
    for (const pair of data["supported_languages"]) {
      if (pair["source_lang"] in glossary_pairs) {
        glossary_pairs[pair["source_lang"]].push(pair["target_lang"]);
      } else {
        glossary_pairs[pair["source_lang"]] = [pair["target_lang"]];
      }
    }
    return {
      status_code: response.status,
      message: data.message,
      languages: glossary_pairs
    };
  }
  async service_glossary_upload(glossary2, glossary_languages, previous_glossaries_ids) {
    for (const [language_pair, id] of Object.entries(previous_glossaries_ids)) {
      const response = await (0, import_obsidian9.requestUrl)({
        throw: false,
        url: `${this.#host}/glossaries/${id}`,
        method: "DELETE",
        headers: {
          "Authorization": "DeepL-Auth-Key " + this.#api_key
        }
      });
      if (response.status > 400)
        return { status_code: response.status, message: response.json?.message };
    }
    const identifiers = {};
    for (const source_lang in glossary_languages) {
      for (const target_lang of glossary_languages[source_lang]) {
        if (glossary2[source_lang + "_" + target_lang]) {
          const response = await (0, import_obsidian9.requestUrl)({
            throw: false,
            url: `${this.#host}/glossaries?`,
            body: "" + new URLSearchParams({
              name: source_lang + "" + target_lang,
              source_lang,
              target_lang,
              entries: glossary2[source_lang + "_" + target_lang].map((entry) => entry[0] + "	" + entry[1]).join("\n"),
              entries_format: "tsv"
            }),
            method: "POST",
            headers: {
              "Authorization": "DeepL-Auth-Key " + this.#api_key,
              "Content-Type": "application/x-www-form-urlencoded"
            }
          });
          const data = response.json;
          if (response.status > 400)
            return { status_code: response.status, message: data.detail || data.message };
          identifiers[source_lang + "_" + target_lang] = data["glossary_id"];
        }
      }
    }
    return {
      status_code: 200,
      identifiers
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/bergamot/bergamot-translator-worker.js
function loadEmscriptenGlueCode(Module) {
  var BERGAMOT_VERSION_FULL = "v0.4.4+5ae1b1e";
  null;
  var Module = typeof Module != "undefined" ? Module : {};
  var moduleOverrides = Object.assign({}, Module);
  var arguments_ = [];
  var thisProgram = "./this.program";
  var quit_ = (status, toThrow) => {
    throw toThrow;
  };
  var ENVIRONMENT_IS_WEB = typeof window == "object";
  var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
  var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
  var scriptDirectory = "";
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var read_, readAsync, readBinary, setWindowTitle;
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    if (ENVIRONMENT_IS_WORKER) {
      scriptDirectory = self.location.href;
    } else if (typeof document != "undefined" && document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    {
      read_ = (url) => {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText;
      };
      if (ENVIRONMENT_IS_WORKER) {
        readBinary = (url) => {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.responseType = "arraybuffer";
          xhr.send(null);
          return new Uint8Array(xhr.response);
        };
      }
      readAsync = (url, onload, onerror) => {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = () => {
          if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
            onload(xhr.response);
            return;
          }
          onerror();
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };
    }
    setWindowTitle = (title) => document.title = title;
  } else {
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  Object.assign(Module, moduleOverrides);
  moduleOverrides = null;
  if (Module["arguments"])
    arguments_ = Module["arguments"];
  if (Module["thisProgram"])
    thisProgram = Module["thisProgram"];
  if (Module["quit"])
    quit_ = Module["quit"];
  var tempRet0 = 0;
  var setTempRet0 = (value) => {
    tempRet0 = value;
  };
  var wasmBinary;
  if (Module["wasmBinary"])
    wasmBinary = Module["wasmBinary"];
  var noExitRuntime = Module["noExitRuntime"] || true;
  if (typeof WebAssembly != "object") {
    abort("no native wasm support detected");
  }
  var wasmMemory;
  var ABORT = false;
  var EXITSTATUS;
  function assert(condition, text2) {
    if (!condition) {
      abort(text2);
    }
  }
  var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (heapOrArray[endPtr] && !(endPtr >= endIdx))
      ++endPtr;
    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = heapOrArray[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0))
      return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
      var u = str.charCodeAt(i);
      if (u >= 55296 && u <= 57343) {
        var u1 = str.charCodeAt(++i);
        u = 65536 + ((u & 1023) << 10) | u1 & 1023;
      }
      if (u <= 127) {
        if (outIdx >= endIdx)
          break;
        heap[outIdx++] = u;
      } else if (u <= 2047) {
        if (outIdx + 1 >= endIdx)
          break;
        heap[outIdx++] = 192 | u >> 6;
        heap[outIdx++] = 128 | u & 63;
      } else if (u <= 65535) {
        if (outIdx + 2 >= endIdx)
          break;
        heap[outIdx++] = 224 | u >> 12;
        heap[outIdx++] = 128 | u >> 6 & 63;
        heap[outIdx++] = 128 | u & 63;
      } else {
        if (outIdx + 3 >= endIdx)
          break;
        heap[outIdx++] = 240 | u >> 18;
        heap[outIdx++] = 128 | u >> 12 & 63;
        heap[outIdx++] = 128 | u >> 6 & 63;
        heap[outIdx++] = 128 | u & 63;
      }
    }
    heap[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
      var u = str.charCodeAt(i);
      if (u >= 55296 && u <= 57343)
        u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
      if (u <= 127)
        ++len;
      else if (u <= 2047)
        len += 2;
      else if (u <= 65535)
        len += 3;
      else
        len += 4;
    }
    return len;
  }
  var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : void 0;
  function UTF16ToString(ptr, maxBytesToRead) {
    var endPtr = ptr;
    var idx = endPtr >> 1;
    var maxIdx = idx + maxBytesToRead / 2;
    while (!(idx >= maxIdx) && HEAPU16[idx])
      ++idx;
    endPtr = idx << 1;
    if (endPtr - ptr > 32 && UTF16Decoder) {
      return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
    } else {
      var str = "";
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[ptr + i * 2 >> 1];
        if (codeUnit == 0)
          break;
        str += String.fromCharCode(codeUnit);
      }
      return str;
    }
  }
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === void 0) {
      maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 2)
      return 0;
    maxBytesToWrite -= 2;
    var startPtr = outPtr;
    var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
      var codeUnit = str.charCodeAt(i);
      HEAP16[outPtr >> 1] = codeUnit;
      outPtr += 2;
    }
    HEAP16[outPtr >> 1] = 0;
    return outPtr - startPtr;
  }
  function lengthBytesUTF16(str) {
    return str.length * 2;
  }
  function UTF32ToString(ptr, maxBytesToRead) {
    var i = 0;
    var str = "";
    while (!(i >= maxBytesToRead / 4)) {
      var utf32 = HEAP32[ptr + i * 4 >> 2];
      if (utf32 == 0)
        break;
      ++i;
      if (utf32 >= 65536) {
        var ch = utf32 - 65536;
        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
      } else {
        str += String.fromCharCode(utf32);
      }
    }
    return str;
  }
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === void 0) {
      maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 4)
      return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
      var codeUnit = str.charCodeAt(i);
      if (codeUnit >= 55296 && codeUnit <= 57343) {
        var trailSurrogate = str.charCodeAt(++i);
        codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
      }
      HEAP32[outPtr >> 2] = codeUnit;
      outPtr += 4;
      if (outPtr + 4 > endPtr)
        break;
    }
    HEAP32[outPtr >> 2] = 0;
    return outPtr - startPtr;
  }
  function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
      var codeUnit = str.charCodeAt(i);
      if (codeUnit >= 55296 && codeUnit <= 57343)
        ++i;
      len += 4;
    }
    return len;
  }
  function allocateUTF8(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = _malloc(size);
    if (ret)
      stringToUTF8Array(str, HEAP8, ret, size);
    return ret;
  }
  function writeArrayToMemory(array, buffer2) {
    HEAP8.set(array, buffer2);
  }
  function writeAsciiToMemory(str, buffer2, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
      HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
    }
    if (!dontAddNull)
      HEAP8[buffer2 >> 0] = 0;
  }
  var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
  if (Module["wasmMemory"]) {
    wasmMemory = Module["wasmMemory"];
  } else {
    wasmMemory = new WebAssembly.Memory({
      "initial": INITIAL_MEMORY / 65536,
      "maximum": 2147483648 / 65536
    });
  }
  if (wasmMemory) {
    buffer = wasmMemory.buffer;
  }
  INITIAL_MEMORY = buffer.byteLength;
  updateGlobalBufferAndViews(buffer);
  var wasmTable;
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATPOSTRUN__ = [];
  var runtimeInitialized = false;
  function keepRuntimeAlive() {
    return noExitRuntime;
  }
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function")
        Module["preRun"] = [Module["preRun"]];
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function")
        Module["postRun"] = [Module["postRun"]];
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnInit(cb) {
    __ATINIT__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null;
  function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  function abort(what) {
    {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
    }
    what = "Aborted(" + what + ")";
    err(what);
    ABORT = true;
    EXITSTATUS = 1;
    what += ". Build with -s ASSERTIONS=1 for more info.";
    var e = new WebAssembly.RuntimeError(what);
    throw e;
  }
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return filename.startsWith(dataURIPrefix);
  }
  var wasmBinaryFile;
  wasmBinaryFile = "bergamot-translator-worker.wasm";
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }
  function getBinary(file) {
    try {
      if (file == wasmBinaryFile && wasmBinary) {
        return new Uint8Array(wasmBinary);
      }
      if (readBinary) {
        return readBinary(file);
      } else {
        throw "both async and sync fetching of the wasm failed";
      }
    } catch (err2) {
      abort(err2);
    }
  }
  function getBinaryPromise() {
    if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
      if (typeof fetch == "function") {
        return fetch(wasmBinaryFile, {
          credentials: "same-origin"
        }).then(function(response) {
          if (!response["ok"]) {
            throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
          }
          return response["arrayBuffer"]();
        }).catch(function() {
          return getBinary(wasmBinaryFile);
        });
      }
    }
    return Promise.resolve().then(function() {
      return getBinary(wasmBinaryFile);
    });
  }
  function createWasm() {
    var info = {
      "env": asmLibraryArg,
      "wasm_gemm": createWasmGemm(),
      "wasi_snapshot_preview1": asmLibraryArg
    };
    function receiveInstance(instance28, module2) {
      var exports2 = instance28.exports;
      Module["asm"] = exports2;
      wasmTable = Module["asm"]["__indirect_function_table"];
      addOnInit(Module["asm"]["__wasm_call_ctors"]);
      exportAsmFunctions(exports2);
      removeRunDependency("wasm-instantiate");
    }
    addRunDependency("wasm-instantiate");
    function receiveInstantiationResult(result) {
      receiveInstance(result["instance"]);
    }
    function instantiateArrayBuffer(receiver) {
      return getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(function(instance28) {
        return instance28;
      }).then(receiver, function(reason) {
        err("failed to asynchronously prepare wasm: " + reason);
        abort(reason);
      });
    }
    function instantiateAsync() {
      if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && typeof fetch == "function") {
        return fetch(wasmBinaryFile, {
          credentials: "same-origin"
        }).then(function(response) {
          var result = WebAssembly.instantiateStreaming(response, info);
          return result.then(receiveInstantiationResult, function(reason) {
            err("wasm streaming compile failed: " + reason);
            err("falling back to ArrayBuffer instantiation");
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
        });
      } else {
        return instantiateArrayBuffer(receiveInstantiationResult);
      }
    }
    if (Module["instantiateWasm"]) {
      try {
        var exports = Module["instantiateWasm"](info, receiveInstance);
        return exports;
      } catch (e) {
        err("Module.instantiateWasm callback failed with error: " + e);
        return false;
      }
    }
    instantiateAsync();
    return {};
  }
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback(Module);
        continue;
      }
      var func = callback.func;
      if (typeof func == "number") {
        if (callback.arg === void 0) {
          getWasmTableEntry(func)();
        } else {
          getWasmTableEntry(func)(callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  function asmjsMangle(x) {
    var unmangledSymbols = ["stackAlloc", "stackSave", "stackRestore"];
    return x.indexOf("dynCall_") == 0 || unmangledSymbols.includes(x) ? x : "_" + x;
  }
  function exportAsmFunctions(asm2) {
    var global_object = this;
    for (var __exportedFunc in asm2) {
      var jsname = asmjsMangle(__exportedFunc);
      global_object[jsname] = Module[jsname] = asm2[__exportedFunc];
    }
  }
  var wasmTableMirror = [];
  function getWasmTableEntry(funcPtr) {
    var func = wasmTableMirror[funcPtr];
    if (!func) {
      if (funcPtr >= wasmTableMirror.length)
        wasmTableMirror.length = funcPtr + 1;
      wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
    }
    return func;
  }
  function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
  }
  function ___cxa_allocate_exception(size) {
    return _malloc(size + 16) + 16;
  }
  var exceptionCaught = [];
  var exceptionLast = 0;
  var uncaughtExceptionCount = 0;
  function ___cxa_rethrow() {
    var catchInfo = exceptionCaught.pop();
    if (!catchInfo) {
      abort("no exception to throw");
    }
    var info = catchInfo.get_exception_info();
    var ptr = catchInfo.get_base_ptr();
    if (!info.get_rethrown()) {
      exceptionCaught.push(catchInfo);
      info.set_rethrown(true);
      info.set_caught(false);
      uncaughtExceptionCount++;
    } else {
      catchInfo.free();
    }
    exceptionLast = ptr;
    throw ptr;
  }
  function ExceptionInfo(excPtr) {
    this.excPtr = excPtr;
    this.ptr = excPtr - 16;
    this.set_type = function(type) {
      HEAP32[this.ptr + 4 >> 2] = type;
    };
    this.get_type = function() {
      return HEAP32[this.ptr + 4 >> 2];
    };
    this.set_destructor = function(destructor) {
      HEAP32[this.ptr + 8 >> 2] = destructor;
    };
    this.get_destructor = function() {
      return HEAP32[this.ptr + 8 >> 2];
    };
    this.set_refcount = function(refcount) {
      HEAP32[this.ptr >> 2] = refcount;
    };
    this.set_caught = function(caught) {
      caught = caught ? 1 : 0;
      HEAP8[this.ptr + 12 >> 0] = caught;
    };
    this.get_caught = function() {
      return HEAP8[this.ptr + 12 >> 0] != 0;
    };
    this.set_rethrown = function(rethrown) {
      rethrown = rethrown ? 1 : 0;
      HEAP8[this.ptr + 13 >> 0] = rethrown;
    };
    this.get_rethrown = function() {
      return HEAP8[this.ptr + 13 >> 0] != 0;
    };
    this.init = function(type, destructor) {
      this.set_type(type);
      this.set_destructor(destructor);
      this.set_refcount(0);
      this.set_caught(false);
      this.set_rethrown(false);
    };
    this.add_ref = function() {
      var value = HEAP32[this.ptr >> 2];
      HEAP32[this.ptr >> 2] = value + 1;
    };
    this.release_ref = function() {
      var prev = HEAP32[this.ptr >> 2];
      HEAP32[this.ptr >> 2] = prev - 1;
      return prev === 1;
    };
  }
  function ___cxa_throw(ptr, type, destructor) {
    var info = new ExceptionInfo(ptr);
    info.init(type, destructor);
    exceptionLast = ptr;
    uncaughtExceptionCount++;
    throw ptr;
  }
  var SYSCALLS = {
    buffers: [null, [], []],
    printChar: function(stream, curr) {
      var buffer2 = SYSCALLS.buffers[stream];
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer2, 0));
        buffer2.length = 0;
      } else {
        buffer2.push(curr);
      }
    },
    varargs: void 0,
    get: function() {
      SYSCALLS.varargs += 4;
      var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
      return ret;
    },
    getStr: function(ptr) {
      var ret = UTF8ToString(ptr);
      return ret;
    },
    get64: function(low, high) {
      return low;
    }
  };
  function ___syscall_faccessat(dirfd, path, amode, flags) {
    path = SYSCALLS.getStr(path);
    path = SYSCALLS.calculateAt(dirfd, path);
    return SYSCALLS.doAccess(path, amode);
  }
  function ___syscall_fcntl64(fd, cmd, varargs) {
    SYSCALLS.varargs = varargs;
    return 0;
  }
  function ___syscall_fstat64(fd, buf) {
  }
  function ___syscall_getcwd(buf, size) {
  }
  function ___syscall_ioctl(fd, op, varargs) {
    SYSCALLS.varargs = varargs;
    return 0;
  }
  function ___syscall_lstat64(path, buf) {
  }
  function ___syscall_newfstatat(dirfd, path, buf, flags) {
  }
  function ___syscall_openat(dirfd, path, flags, varargs) {
    SYSCALLS.varargs = varargs;
  }
  function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {
  }
  function ___syscall_rmdir(path) {
  }
  function ___syscall_stat64(path, buf) {
  }
  function ___syscall_unlinkat(dirfd, path, flags) {
  }
  var structRegistrations = {};
  function runDestructors(destructors) {
    while (destructors.length) {
      var ptr = destructors.pop();
      var del = destructors.pop();
      del(ptr);
    }
  }
  function simpleReadValueFromPointer(pointer) {
    return this["fromWireType"](HEAPU32[pointer >> 2]);
  }
  var awaitingDependencies = {};
  var registeredTypes = {};
  var typeDependencies = {};
  var char_0 = 48;
  var char_9 = 57;
  function makeLegalFunctionName(name) {
    if (void 0 === name) {
      return "_unknown";
    }
    name = name.replace(/[^a-zA-Z0-9_]/g, "$");
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
      return "_" + name;
    }
    return name;
  }
  function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    return function() {
      null;
      return body.apply(this, arguments);
    };
  }
  function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
      this.name = errorName;
      this.message = message;
      var stack = new Error(message).stack;
      if (stack !== void 0) {
        this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
      }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
      if (this.message === void 0) {
        return this.name;
      } else {
        return this.name + ": " + this.message;
      }
    };
    return errorClass;
  }
  var InternalError = void 0;
  function throwInternalError(message) {
    throw new InternalError(message);
  }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
      typeDependencies[type] = dependentTypes;
    });
    function onComplete(typeConverters2) {
      var myTypeConverters = getTypeConverters(typeConverters2);
      if (myTypeConverters.length !== myTypes.length) {
        throwInternalError("Mismatched type converter count");
      }
      for (var i = 0; i < myTypes.length; ++i) {
        registerType(myTypes[i], myTypeConverters[i]);
      }
    }
    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach((dt, i) => {
      if (registeredTypes.hasOwnProperty(dt)) {
        typeConverters[i] = registeredTypes[dt];
      } else {
        unregisteredTypes.push(dt);
        if (!awaitingDependencies.hasOwnProperty(dt)) {
          awaitingDependencies[dt] = [];
        }
        awaitingDependencies[dt].push(() => {
          typeConverters[i] = registeredTypes[dt];
          ++registered;
          if (registered === unregisteredTypes.length) {
            onComplete(typeConverters);
          }
        });
      }
    });
    if (0 === unregisteredTypes.length) {
      onComplete(typeConverters);
    }
  }
  function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map((field) => field.getterReturnType).concat(fieldRecords.map((field) => field.setterArgumentType));
    whenDependentTypesAreResolved([structType], fieldTypes, (fieldTypes2) => {
      var fields = {};
      fieldRecords.forEach((field, i) => {
        var fieldName = field.fieldName;
        var getterReturnType = fieldTypes2[i];
        var getter = field.getter;
        var getterContext = field.getterContext;
        var setterArgumentType = fieldTypes2[i + fieldRecords.length];
        var setter = field.setter;
        var setterContext = field.setterContext;
        fields[fieldName] = {
          read: (ptr) => {
            return getterReturnType["fromWireType"](getter(getterContext, ptr));
          },
          write: (ptr, o) => {
            var destructors = [];
            setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
            runDestructors(destructors);
          }
        };
      });
      return [{
        name: reg.name,
        "fromWireType": function(ptr) {
          var rv = {};
          for (var i in fields) {
            rv[i] = fields[i].read(ptr);
          }
          rawDestructor(ptr);
          return rv;
        },
        "toWireType": function(destructors, o) {
          for (var fieldName in fields) {
            if (!(fieldName in o)) {
              throw new TypeError('Missing field:  "' + fieldName + '"');
            }
          }
          var ptr = rawConstructor();
          for (fieldName in fields) {
            fields[fieldName].write(ptr, o[fieldName]);
          }
          if (destructors !== null) {
            destructors.push(rawDestructor, ptr);
          }
          return ptr;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": simpleReadValueFromPointer,
        destructorFunction: rawDestructor
      }];
    });
  }
  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {
  }
  function getShiftFromSize(size) {
    switch (size) {
      case 1:
        return 0;
      case 2:
        return 1;
      case 4:
        return 2;
      case 8:
        return 3;
      default:
        throw new TypeError("Unknown type size: " + size);
    }
  }
  function embind_init_charCodes() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
      codes[i] = String.fromCharCode(i);
    }
    embind_charCodes = codes;
  }
  var embind_charCodes = void 0;
  function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
      ret += embind_charCodes[HEAPU8[c++]];
    }
    return ret;
  }
  var BindingError = void 0;
  function throwBindingError(message) {
    throw new BindingError(message);
  }
  function registerType(rawType, registeredInstance, options = {}) {
    if (!("argPackAdvance" in registeredInstance)) {
      throw new TypeError("registerType registeredInstance requires argPackAdvance");
    }
    var name = registeredInstance.name;
    if (!rawType) {
      throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
      if (options.ignoreDuplicateRegistrations) {
        return;
      } else {
        throwBindingError("Cannot register type '" + name + "' twice");
      }
    }
    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];
    if (awaitingDependencies.hasOwnProperty(rawType)) {
      var callbacks = awaitingDependencies[rawType];
      delete awaitingDependencies[rawType];
      callbacks.forEach((cb) => cb());
    }
  }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      "fromWireType": function(wt) {
        return !!wt;
      },
      "toWireType": function(destructors, o) {
        return o ? trueValue : falseValue;
      },
      "argPackAdvance": 8,
      "readValueFromPointer": function(pointer) {
        var heap;
        if (size === 1) {
          heap = HEAP8;
        } else if (size === 2) {
          heap = HEAP16;
        } else if (size === 4) {
          heap = HEAP32;
        } else {
          throw new TypeError("Unknown boolean type size: " + name);
        }
        return this["fromWireType"](heap[pointer >> shift]);
      },
      destructorFunction: null
    });
  }
  function ClassHandle_isAliasOf(other) {
    if (!(this instanceof ClassHandle)) {
      return false;
    }
    if (!(other instanceof ClassHandle)) {
      return false;
    }
    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;
    while (leftClass.baseClass) {
      left = leftClass.upcast(left);
      leftClass = leftClass.baseClass;
    }
    while (rightClass.baseClass) {
      right = rightClass.upcast(right);
      rightClass = rightClass.baseClass;
    }
    return leftClass === rightClass && left === right;
  }
  function shallowCopyInternalPointer(o) {
    return {
      count: o.count,
      deleteScheduled: o.deleteScheduled,
      preservePointerOnDelete: o.preservePointerOnDelete,
      ptr: o.ptr,
      ptrType: o.ptrType,
      smartPtr: o.smartPtr,
      smartPtrType: o.smartPtrType
    };
  }
  function throwInstanceAlreadyDeleted(obj) {
    function getInstanceTypeName(handle) {
      return handle.$$.ptrType.registeredClass.name;
    }
    throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
  }
  var finalizationRegistry = false;
  function detachFinalizer(handle) {
  }
  function runDestructor($$) {
    if ($$.smartPtr) {
      $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
      $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
  }
  function releaseClassHandle($$) {
    $$.count.value -= 1;
    var toDelete = 0 === $$.count.value;
    if (toDelete) {
      runDestructor($$);
    }
  }
  function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
      return ptr;
    }
    if (void 0 === desiredClass.baseClass) {
      return null;
    }
    var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
    if (rv === null) {
      return null;
    }
    return desiredClass.downcast(rv);
  }
  var registeredPointers = {};
  function getInheritedInstanceCount() {
    return Object.keys(registeredInstances).length;
  }
  function getLiveInheritedInstances() {
    var rv = [];
    for (var k in registeredInstances) {
      if (registeredInstances.hasOwnProperty(k)) {
        rv.push(registeredInstances[k]);
      }
    }
    return rv;
  }
  var deletionQueue = [];
  function flushPendingDeletes() {
    while (deletionQueue.length) {
      var obj = deletionQueue.pop();
      obj.$$.deleteScheduled = false;
      obj["delete"]();
    }
  }
  var delayFunction = void 0;
  function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
      delayFunction(flushPendingDeletes);
    }
  }
  function init_embind() {
    Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
    Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
    Module["flushPendingDeletes"] = flushPendingDeletes;
    Module["setDelayFunction"] = setDelayFunction;
  }
  var registeredInstances = {};
  function getBasestPointer(class_, ptr) {
    if (ptr === void 0) {
      throwBindingError("ptr should not be undefined");
    }
    while (class_.baseClass) {
      ptr = class_.upcast(ptr);
      class_ = class_.baseClass;
    }
    return ptr;
  }
  function getInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    return registeredInstances[ptr];
  }
  function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
      throwInternalError("makeClassHandle requires ptr and ptrType");
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
      throwInternalError("Both smartPtrType and smartPtr must be specified");
    }
    record.count = {
      value: 1
    };
    return attachFinalizer(Object.create(prototype, {
      $$: {
        value: record
      }
    }));
  }
  function RegisteredPointer_fromWireType(ptr) {
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
      this.destructor(ptr);
      return null;
    }
    var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
    if (void 0 !== registeredInstance) {
      if (0 === registeredInstance.$$.count.value) {
        registeredInstance.$$.ptr = rawPointer;
        registeredInstance.$$.smartPtr = ptr;
        return registeredInstance["clone"]();
      } else {
        var rv = registeredInstance["clone"]();
        this.destructor(ptr);
        return rv;
      }
    }
    function makeDefaultHandle() {
      if (this.isSmartPointer) {
        return makeClassHandle(this.registeredClass.instancePrototype, {
          ptrType: this.pointeeType,
          ptr: rawPointer,
          smartPtrType: this,
          smartPtr: ptr
        });
      } else {
        return makeClassHandle(this.registeredClass.instancePrototype, {
          ptrType: this,
          ptr
        });
      }
    }
    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
      return makeDefaultHandle.call(this);
    }
    var toType;
    if (this.isConst) {
      toType = registeredPointerRecord.constPointerType;
    } else {
      toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
    if (dp === null) {
      return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
      return makeClassHandle(toType.registeredClass.instancePrototype, {
        ptrType: toType,
        ptr: dp,
        smartPtrType: this,
        smartPtr: ptr
      });
    } else {
      return makeClassHandle(toType.registeredClass.instancePrototype, {
        ptrType: toType,
        ptr: dp
      });
    }
  }
  function attachFinalizer(handle) {
    if ("undefined" === typeof FinalizationRegistry) {
      attachFinalizer = (handle2) => handle2;
      return handle;
    }
    finalizationRegistry = new FinalizationRegistry((info) => {
      releaseClassHandle(info.$$);
    });
    attachFinalizer = (handle2) => {
      var $$ = handle2.$$;
      var hasSmartPtr = !!$$.smartPtr;
      if (hasSmartPtr) {
        var info = {
          $$
        };
        finalizationRegistry.register(handle2, info, handle2);
      }
      return handle2;
    };
    detachFinalizer = (handle2) => finalizationRegistry.unregister(handle2);
    return attachFinalizer(handle);
  }
  function ClassHandle_clone() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.preservePointerOnDelete) {
      this.$$.count.value += 1;
      return this;
    } else {
      var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
        $$: {
          value: shallowCopyInternalPointer(this.$$)
        }
      }));
      clone.$$.count.value += 1;
      clone.$$.deleteScheduled = false;
      return clone;
    }
  }
  function ClassHandle_delete() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
      throwBindingError("Object already scheduled for deletion");
    }
    detachFinalizer(this);
    releaseClassHandle(this.$$);
    if (!this.$$.preservePointerOnDelete) {
      this.$$.smartPtr = void 0;
      this.$$.ptr = void 0;
    }
  }
  function ClassHandle_isDeleted() {
    return !this.$$.ptr;
  }
  function ClassHandle_deleteLater() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
      throwBindingError("Object already scheduled for deletion");
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
      delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
  }
  function init_ClassHandle() {
    ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
    ClassHandle.prototype["clone"] = ClassHandle_clone;
    ClassHandle.prototype["delete"] = ClassHandle_delete;
    ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
    ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
  }
  function ClassHandle() {
  }
  function ensureOverloadTable(proto, methodName, humanName) {
    if (void 0 === proto[methodName].overloadTable) {
      var prevFunc = proto[methodName];
      proto[methodName] = function() {
        if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
          throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
        }
        return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
      };
      proto[methodName].overloadTable = [];
      proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
  }
  function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
      if (void 0 === numArguments || void 0 !== Module[name].overloadTable && void 0 !== Module[name].overloadTable[numArguments]) {
        throwBindingError("Cannot register public name '" + name + "' twice");
      }
      ensureOverloadTable(Module, name, name);
      if (Module.hasOwnProperty(numArguments)) {
        throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
      }
      Module[name].overloadTable[numArguments] = value;
    } else {
      Module[name] = value;
      if (void 0 !== numArguments) {
        Module[name].numArguments = numArguments;
      }
    }
  }
  function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
    this.pureVirtualFunctions = [];
  }
  function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
      if (!ptrClass.upcast) {
        throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
      }
      ptr = ptrClass.upcast(ptr);
      ptrClass = ptrClass.baseClass;
    }
    return ptr;
  }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      return 0;
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
  }
  function genericPointerToWireType(destructors, handle) {
    var ptr;
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      if (this.isSmartPointer) {
        ptr = this.rawConstructor();
        if (destructors !== null) {
          destructors.push(this.rawDestructor, ptr);
        }
        return ptr;
      } else {
        return 0;
      }
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
      throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    if (this.isSmartPointer) {
      if (void 0 === handle.$$.smartPtr) {
        throwBindingError("Passing raw pointer to smart pointer is illegal");
      }
      switch (this.sharingPolicy) {
        case 0:
          if (handle.$$.smartPtrType === this) {
            ptr = handle.$$.smartPtr;
          } else {
            throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
          }
          break;
        case 1:
          ptr = handle.$$.smartPtr;
          break;
        case 2:
          if (handle.$$.smartPtrType === this) {
            ptr = handle.$$.smartPtr;
          } else {
            var clonedHandle = handle["clone"]();
            ptr = this.rawShare(ptr, Emval.toHandle(function() {
              clonedHandle["delete"]();
            }));
            if (destructors !== null) {
              destructors.push(this.rawDestructor, ptr);
            }
          }
          break;
        default:
          throwBindingError("Unsupporting sharing policy");
      }
    }
    return ptr;
  }
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      return 0;
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    if (handle.$$.ptrType.isConst) {
      throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
  }
  function RegisteredPointer_getPointee(ptr) {
    if (this.rawGetPointee) {
      ptr = this.rawGetPointee(ptr);
    }
    return ptr;
  }
  function RegisteredPointer_destructor(ptr) {
    if (this.rawDestructor) {
      this.rawDestructor(ptr);
    }
  }
  function RegisteredPointer_deleteObject(handle) {
    if (handle !== null) {
      handle["delete"]();
    }
  }
  function init_RegisteredPointer() {
    RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
    RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
    RegisteredPointer.prototype["argPackAdvance"] = 8;
    RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
    RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
    RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
  }
  function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;
    if (!isSmartPointer && registeredClass.baseClass === void 0) {
      if (isConst) {
        this["toWireType"] = constNoSmartPtrRawPointerToWireType;
        this.destructorFunction = null;
      } else {
        this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
        this.destructorFunction = null;
      }
    } else {
      this["toWireType"] = genericPointerToWireType;
    }
  }
  function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
      throwInternalError("Replacing nonexistant public symbol");
    }
    if (void 0 !== Module[name].overloadTable && void 0 !== numArguments) {
      Module[name].overloadTable[numArguments] = value;
    } else {
      Module[name] = value;
      Module[name].argCount = numArguments;
    }
  }
  function dynCallLegacy(sig, ptr, args) {
    var f = Module["dynCall_" + sig];
    return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
  }
  function dynCall(sig, ptr, args) {
    if (sig.includes("j")) {
      return dynCallLegacy(sig, ptr, args);
    }
    return getWasmTableEntry(ptr).apply(null, args);
  }
  function getDynCaller(sig, ptr) {
    var argCache = [];
    return function() {
      argCache.length = 0;
      Object.assign(argCache, arguments);
      return dynCall(sig, ptr, argCache);
    };
  }
  function embind__requireFunction(signature, rawFunction) {
    signature = readLatin1String(signature);
    function makeDynCaller() {
      if (signature.includes("j")) {
        return getDynCaller(signature, rawFunction);
      }
      return getWasmTableEntry(rawFunction);
    }
    var fp = makeDynCaller();
    if (typeof fp != "function") {
      throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
    }
    return fp;
  }
  var UnboundTypeError = void 0;
  function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
  }
  function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
      if (seen[type]) {
        return;
      }
      if (registeredTypes[type]) {
        return;
      }
      if (typeDependencies[type]) {
        typeDependencies[type].forEach(visit);
        return;
      }
      unboundTypes.push(type);
      seen[type] = true;
    }
    types.forEach(visit);
    throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
  }
  function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
    name = readLatin1String(name);
    getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
    if (upcast) {
      upcast = embind__requireFunction(upcastSignature, upcast);
    }
    if (downcast) {
      downcast = embind__requireFunction(downcastSignature, downcast);
    }
    rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
    var legalFunctionName = makeLegalFunctionName(name);
    exposePublicSymbol(legalFunctionName, function() {
      throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
    });
    whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
      base = base[0];
      var baseClass;
      var basePrototype;
      if (baseClassRawType) {
        baseClass = base.registeredClass;
        basePrototype = baseClass.instancePrototype;
      } else {
        basePrototype = ClassHandle.prototype;
      }
      var constructor = createNamedFunction(legalFunctionName, function() {
        if (Object.getPrototypeOf(this) !== instancePrototype) {
          throw new BindingError("Use 'new' to construct " + name);
        }
        if (void 0 === registeredClass.constructor_body) {
          throw new BindingError(name + " has no accessible constructor");
        }
        var body = registeredClass.constructor_body[arguments.length];
        if (void 0 === body) {
          throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
        }
        return body.apply(this, arguments);
      });
      var instancePrototype = Object.create(basePrototype, {
        constructor: {
          value: constructor
        }
      });
      constructor.prototype = instancePrototype;
      var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
      var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
      var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
      var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
      registeredPointers[rawType] = {
        pointerType: pointerConverter,
        constPointerType: constPointerConverter
      };
      replacePublicSymbol(legalFunctionName, constructor);
      return [referenceConverter, pointerConverter, constPointerConverter];
    });
  }
  function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
      array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
  }
  function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
    assert(argCount > 0);
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = embind__requireFunction(invokerSignature, invoker);
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
      classType = classType[0];
      var humanName = "constructor " + classType.name;
      if (void 0 === classType.registeredClass.constructor_body) {
        classType.registeredClass.constructor_body = [];
      }
      if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
        throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
      }
      classType.registeredClass.constructor_body[argCount - 1] = () => {
        throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
      };
      whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        argTypes.splice(1, 0, null);
        classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
        return [];
      });
      return [];
    });
  }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    var argCount = argTypes.length;
    if (argCount < 2) {
      throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    var isClassMethodFunc = argTypes[1] !== null && classType !== null;
    var needsDestructorStack = false;
    for (var i = 1; i < argTypes.length; ++i) {
      if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
        needsDestructorStack = true;
        break;
      }
    }
    var returns = argTypes[0].name !== "void";
    var expectedArgCount = argCount - 2;
    var argsWired = new Array(expectedArgCount);
    var invokerFuncArgs = [];
    var destructors = [];
    return function() {
      if (arguments.length !== expectedArgCount) {
        throwBindingError("function " + humanName + " called with " + arguments.length + " arguments, expected " + expectedArgCount + " args!");
      }
      destructors.length = 0;
      var thisWired;
      invokerFuncArgs.length = isClassMethodFunc ? 2 : 1;
      invokerFuncArgs[0] = cppTargetFunc;
      if (isClassMethodFunc) {
        thisWired = argTypes[1]["toWireType"](destructors, this);
        invokerFuncArgs[1] = thisWired;
      }
      for (var i2 = 0; i2 < expectedArgCount; ++i2) {
        argsWired[i2] = argTypes[i2 + 2]["toWireType"](destructors, arguments[i2]);
        invokerFuncArgs.push(argsWired[i2]);
      }
      var rv = cppInvokerFunc.apply(null, invokerFuncArgs);
      function onDone(rv2) {
        if (needsDestructorStack) {
          runDestructors(destructors);
        } else {
          for (var i3 = isClassMethodFunc ? 1 : 2; i3 < argTypes.length; i3++) {
            var param = i3 === 1 ? thisWired : argsWired[i3 - 2];
            if (argTypes[i3].destructorFunction !== null) {
              argTypes[i3].destructorFunction(param);
            }
          }
        }
        if (returns) {
          return argTypes[0]["fromWireType"](rv2);
        }
      }
      return onDone(rv);
    };
  }
  function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
      classType = classType[0];
      var humanName = classType.name + "." + methodName;
      if (methodName.startsWith("@@")) {
        methodName = Symbol[methodName.substring(2)];
      }
      if (isPureVirtual) {
        classType.registeredClass.pureVirtualFunctions.push(methodName);
      }
      function unboundTypesHandler() {
        throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
      }
      var proto = classType.registeredClass.instancePrototype;
      var method = proto[methodName];
      if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
        unboundTypesHandler.argCount = argCount - 2;
        unboundTypesHandler.className = classType.name;
        proto[methodName] = unboundTypesHandler;
      } else {
        ensureOverloadTable(proto, methodName, humanName);
        proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
      }
      whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
        if (void 0 === proto[methodName].overloadTable) {
          memberFunction.argCount = argCount - 2;
          proto[methodName] = memberFunction;
        } else {
          proto[methodName].overloadTable[argCount - 2] = memberFunction;
        }
        return [];
      });
      return [];
    });
  }
  var emval_free_list = [];
  var emval_handle_array = [{}, {
    value: void 0
  }, {
    value: null
  }, {
    value: true
  }, {
    value: false
  }];
  function __emval_decref(handle) {
    if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
      emval_handle_array[handle] = void 0;
      emval_free_list.push(handle);
    }
  }
  function count_emval_handles() {
    var count = 0;
    for (var i = 5; i < emval_handle_array.length; ++i) {
      if (emval_handle_array[i] !== void 0) {
        ++count;
      }
    }
    return count;
  }
  function get_first_emval() {
    for (var i = 5; i < emval_handle_array.length; ++i) {
      if (emval_handle_array[i] !== void 0) {
        return emval_handle_array[i];
      }
    }
    return null;
  }
  function init_emval() {
    Module["count_emval_handles"] = count_emval_handles;
    Module["get_first_emval"] = get_first_emval;
  }
  var Emval = {
    toValue: (handle) => {
      if (!handle) {
        throwBindingError("Cannot use deleted val. handle = " + handle);
      }
      return emval_handle_array[handle].value;
    },
    toHandle: (value) => {
      switch (value) {
        case void 0:
          return 1;
        case null:
          return 2;
        case true:
          return 3;
        case false:
          return 4;
        default: {
          var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
          emval_handle_array[handle] = {
            refcount: 1,
            value
          };
          return handle;
        }
      }
    }
  };
  function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      "fromWireType": function(handle) {
        var rv = Emval.toValue(handle);
        __emval_decref(handle);
        return rv;
      },
      "toWireType": function(destructors, value) {
        return Emval.toHandle(value);
      },
      "argPackAdvance": 8,
      "readValueFromPointer": simpleReadValueFromPointer,
      destructorFunction: null
    });
  }
  function _embind_repr(v) {
    if (v === null) {
      return "null";
    }
    var t2 = typeof v;
    if (t2 === "object" || t2 === "array" || t2 === "function") {
      return v.toString();
    } else {
      return "" + v;
    }
  }
  function floatReadValueFromPointer(name, shift) {
    switch (shift) {
      case 2:
        return function(pointer) {
          return this["fromWireType"](HEAPF32[pointer >> 2]);
        };
      case 3:
        return function(pointer) {
          return this["fromWireType"](HEAPF64[pointer >> 3]);
        };
      default:
        throw new TypeError("Unknown float type: " + name);
    }
  }
  function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      "fromWireType": function(value) {
        return value;
      },
      "toWireType": function(destructors, value) {
        return value;
      },
      "argPackAdvance": 8,
      "readValueFromPointer": floatReadValueFromPointer(name, shift),
      destructorFunction: null
    });
  }
  function integerReadValueFromPointer(name, shift, signed) {
    switch (shift) {
      case 0:
        return signed ? function readS8FromPointer(pointer) {
          return HEAP8[pointer];
        } : function readU8FromPointer(pointer) {
          return HEAPU8[pointer];
        };
      case 1:
        return signed ? function readS16FromPointer(pointer) {
          return HEAP16[pointer >> 1];
        } : function readU16FromPointer(pointer) {
          return HEAPU16[pointer >> 1];
        };
      case 2:
        return signed ? function readS32FromPointer(pointer) {
          return HEAP32[pointer >> 2];
        } : function readU32FromPointer(pointer) {
          return HEAPU32[pointer >> 2];
        };
      default:
        throw new TypeError("Unknown integer type: " + name);
    }
  }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) {
      maxRange = 4294967295;
    }
    var shift = getShiftFromSize(size);
    var fromWireType = (value) => value;
    if (minRange === 0) {
      var bitshift = 32 - 8 * size;
      fromWireType = (value) => value << bitshift >>> bitshift;
    }
    var isUnsignedType = name.includes("unsigned");
    var checkAssertions = (value, toTypeName) => {
    };
    var toWireType;
    if (isUnsignedType) {
      toWireType = function(destructors, value) {
        checkAssertions(value, this.name);
        return value >>> 0;
      };
    } else {
      toWireType = function(destructors, value) {
        checkAssertions(value, this.name);
        return value;
      };
    }
    registerType(primitiveType, {
      name,
      "fromWireType": fromWireType,
      "toWireType": toWireType,
      "argPackAdvance": 8,
      "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
      destructorFunction: null
    });
  }
  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
    var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
    var TA = typeMapping[dataTypeIndex];
    function decodeMemoryView(handle) {
      handle = handle >> 2;
      var heap = HEAPU32;
      var size = heap[handle];
      var data = heap[handle + 1];
      return new TA(buffer, data, size);
    }
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      "fromWireType": decodeMemoryView,
      "argPackAdvance": 8,
      "readValueFromPointer": decodeMemoryView
    }, {
      ignoreDuplicateRegistrations: true
    });
  }
  function __embind_register_smart_ptr(rawType, rawPointeeType, name, sharingPolicy, getPointeeSignature, rawGetPointee, constructorSignature, rawConstructor, shareSignature, rawShare, destructorSignature, rawDestructor) {
    name = readLatin1String(name);
    rawGetPointee = embind__requireFunction(getPointeeSignature, rawGetPointee);
    rawConstructor = embind__requireFunction(constructorSignature, rawConstructor);
    rawShare = embind__requireFunction(shareSignature, rawShare);
    rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
      pointeeType = pointeeType[0];
      var registeredPointer = new RegisteredPointer(name, pointeeType.registeredClass, false, false, true, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor);
      return [registeredPointer];
    });
  }
  function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    var stdStringIsUTF8 = name === "std::string";
    registerType(rawType, {
      name,
      "fromWireType": function(value) {
        var length = HEAPU32[value >> 2];
        var str;
        if (stdStringIsUTF8) {
          var decodeStartPtr = value + 4;
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i;
            if (i == length || HEAPU8[currentBytePtr] == 0) {
              var maxRead = currentBytePtr - decodeStartPtr;
              var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
              if (str === void 0) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + 1;
            }
          }
        } else {
          var a = new Array(length);
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
          }
          str = a.join("");
        }
        _free(value);
        return str;
      },
      "toWireType": function(destructors, value) {
        if (value instanceof ArrayBuffer) {
          value = new Uint8Array(value);
        }
        var getLength;
        var valueIsOfTypeString = typeof value == "string";
        if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
          throwBindingError("Cannot pass non-string to std::string");
        }
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          getLength = () => lengthBytesUTF8(value);
        } else {
          getLength = () => value.length;
        }
        var length = getLength();
        var ptr = _malloc(4 + length + 1);
        HEAPU32[ptr >> 2] = length;
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          stringToUTF8(value, ptr + 4, length + 1);
        } else {
          if (valueIsOfTypeString) {
            for (var i = 0; i < length; ++i) {
              var charCode = value.charCodeAt(i);
              if (charCode > 255) {
                _free(ptr);
                throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
              }
              HEAPU8[ptr + 4 + i] = charCode;
            }
          } else {
            for (var i = 0; i < length; ++i) {
              HEAPU8[ptr + 4 + i] = value[i];
            }
          }
        }
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      },
      "argPackAdvance": 8,
      "readValueFromPointer": simpleReadValueFromPointer,
      destructorFunction: function(ptr) {
        _free(ptr);
      }
    });
  }
  function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
    if (charSize === 2) {
      decodeString = UTF16ToString;
      encodeString = stringToUTF16;
      lengthBytesUTF = lengthBytesUTF16;
      getHeap = () => HEAPU16;
      shift = 1;
    } else if (charSize === 4) {
      decodeString = UTF32ToString;
      encodeString = stringToUTF32;
      lengthBytesUTF = lengthBytesUTF32;
      getHeap = () => HEAPU32;
      shift = 2;
    }
    registerType(rawType, {
      name,
      "fromWireType": function(value) {
        var length = HEAPU32[value >> 2];
        var HEAP = getHeap();
        var str;
        var decodeStartPtr = value + 4;
        for (var i = 0; i <= length; ++i) {
          var currentBytePtr = value + 4 + i * charSize;
          if (i == length || HEAP[currentBytePtr >> shift] == 0) {
            var maxReadBytes = currentBytePtr - decodeStartPtr;
            var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
            if (str === void 0) {
              str = stringSegment;
            } else {
              str += String.fromCharCode(0);
              str += stringSegment;
            }
            decodeStartPtr = currentBytePtr + charSize;
          }
        }
        _free(value);
        return str;
      },
      "toWireType": function(destructors, value) {
        if (!(typeof value == "string")) {
          throwBindingError("Cannot pass non-string to C++ string type " + name);
        }
        var length = lengthBytesUTF(value);
        var ptr = _malloc(4 + length + charSize);
        HEAPU32[ptr >> 2] = length >> shift;
        encodeString(value, ptr + 4, length + charSize);
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      },
      "argPackAdvance": 8,
      "readValueFromPointer": simpleReadValueFromPointer,
      destructorFunction: function(ptr) {
        _free(ptr);
      }
    });
  }
  function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    structRegistrations[rawType] = {
      name: readLatin1String(name),
      rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
      rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
      fields: []
    };
  }
  function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
    structRegistrations[structType].fields.push({
      fieldName: readLatin1String(fieldName),
      getterReturnType,
      getter: embind__requireFunction(getterSignature, getter),
      getterContext,
      setterArgumentType,
      setter: embind__requireFunction(setterSignature, setter),
      setterContext
    });
  }
  function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
      isVoid: true,
      name,
      "argPackAdvance": 0,
      "fromWireType": function() {
        return void 0;
      },
      "toWireType": function(destructors, o) {
        return void 0;
      }
    });
  }
  function __emscripten_date_now() {
    return Date.now();
  }
  var nowIsMonotonic = true;
  function __emscripten_get_now_is_monotonic() {
    return nowIsMonotonic;
  }
  function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (void 0 === impl) {
      throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
  }
  function __emval_lookupTypes(argCount, argTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
      a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
    }
    return a;
  }
  function __emval_call(handle, argCount, argTypes, argv) {
    handle = Emval.toValue(handle);
    var types = __emval_lookupTypes(argCount, argTypes);
    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
      var type = types[i];
      args[i] = type["readValueFromPointer"](argv);
      argv += type["argPackAdvance"];
    }
    var rv = handle.apply(void 0, args);
    return Emval.toHandle(rv);
  }
  function __emval_incref(handle) {
    if (handle > 4) {
      emval_handle_array[handle].refcount += 1;
    }
  }
  function __emval_take_value(type, argv) {
    type = requireRegisteredType(type, "_emval_take_value");
    var v = type["readValueFromPointer"](argv);
    return Emval.toHandle(v);
  }
  function __localtime_js(time, tmPtr) {
    var date = new Date(HEAP32[time >> 2] * 1e3);
    HEAP32[tmPtr >> 2] = date.getSeconds();
    HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
    HEAP32[tmPtr + 8 >> 2] = date.getHours();
    HEAP32[tmPtr + 12 >> 2] = date.getDate();
    HEAP32[tmPtr + 16 >> 2] = date.getMonth();
    HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
    HEAP32[tmPtr + 24 >> 2] = date.getDay();
    var start = new Date(date.getFullYear(), 0, 1);
    var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
    HEAP32[tmPtr + 28 >> 2] = yday;
    HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
    var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
    var winterOffset = start.getTimezoneOffset();
    var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
    HEAP32[tmPtr + 32 >> 2] = dst;
  }
  function __mmap_js(addr, len, prot, flags, fd, off, allocated, builtin) {
    return -52;
  }
  function __munmap_js(addr, len, prot, flags, fd, offset) {
  }
  function _tzset_impl(timezone, daylight, tzname) {
    var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
    var winter = new Date(currentYear, 0, 1);
    var summer = new Date(currentYear, 6, 1);
    var winterOffset = winter.getTimezoneOffset();
    var summerOffset = summer.getTimezoneOffset();
    var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
    HEAP32[timezone >> 2] = stdTimezoneOffset * 60;
    HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
    function extractZone(date) {
      var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
      return match ? match[1] : "GMT";
    }
    var winterName = extractZone(winter);
    var summerName = extractZone(summer);
    var winterNamePtr = allocateUTF8(winterName);
    var summerNamePtr = allocateUTF8(summerName);
    if (summerOffset < winterOffset) {
      HEAP32[tzname >> 2] = winterNamePtr;
      HEAP32[tzname + 4 >> 2] = summerNamePtr;
    } else {
      HEAP32[tzname >> 2] = summerNamePtr;
      HEAP32[tzname + 4 >> 2] = winterNamePtr;
    }
  }
  function __tzset_js(timezone, daylight, tzname) {
    if (__tzset_js.called)
      return;
    __tzset_js.called = true;
    _tzset_impl(timezone, daylight, tzname);
  }
  function _abort() {
    abort("");
  }
  function _emscripten_get_heap_max() {
    return 2147483648;
  }
  var _emscripten_get_now;
  _emscripten_get_now = () => performance.now();
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.copyWithin(dest, src, src + num);
  }
  function emscripten_realloc_buffer(size) {
    try {
      wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
      updateGlobalBufferAndViews(wasmMemory.buffer);
      return 1;
    } catch (e) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    var oldSize = HEAPU8.length;
    requestedSize = requestedSize >>> 0;
    var maxHeapSize = _emscripten_get_heap_max();
    if (requestedSize > maxHeapSize) {
      return false;
    }
    let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
    for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
      var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
      overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
      var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
      var replacement = emscripten_realloc_buffer(newSize);
      if (replacement) {
        return true;
      }
    }
    return false;
  }
  var ENV = {};
  function getExecutableName() {
    return thisProgram || "./this.program";
  }
  function getEnvStrings() {
    if (!getEnvStrings.strings) {
      var lang = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
      var env = {
        "USER": "web_user",
        "LOGNAME": "web_user",
        "PATH": "/",
        "PWD": "/",
        "HOME": "/home/web_user",
        "LANG": lang,
        "_": getExecutableName()
      };
      for (var x in ENV) {
        if (ENV[x] === void 0)
          delete env[x];
        else
          env[x] = ENV[x];
      }
      var strings = [];
      for (var x in env) {
        strings.push(x + "=" + env[x]);
      }
      getEnvStrings.strings = strings;
    }
    return getEnvStrings.strings;
  }
  function _environ_get(__environ, environ_buf) {
    var bufSize = 0;
    getEnvStrings().forEach(function(string, i) {
      var ptr = environ_buf + bufSize;
      HEAP32[__environ + i * 4 >> 2] = ptr;
      writeAsciiToMemory(string, ptr);
      bufSize += string.length + 1;
    });
    return 0;
  }
  function _environ_sizes_get(penviron_count, penviron_buf_size) {
    var strings = getEnvStrings();
    HEAP32[penviron_count >> 2] = strings.length;
    var bufSize = 0;
    strings.forEach(function(string) {
      bufSize += string.length + 1;
    });
    HEAP32[penviron_buf_size >> 2] = bufSize;
    return 0;
  }
  function _exit(status) {
    exit(status);
  }
  function _fd_close(fd) {
    return 0;
  }
  function _fd_read(fd, iov, iovcnt, pnum) {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = SYSCALLS.doReadv(stream, iov, iovcnt);
    HEAP32[pnum >> 2] = num;
    return 0;
  }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  }
  function _fd_write(fd, iov, iovcnt, pnum) {
    var num = 0;
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[iov >> 2];
      var len = HEAP32[iov + 4 >> 2];
      iov += 8;
      for (var j = 0; j < len; j++) {
        SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
      }
      num += len;
    }
    HEAP32[pnum >> 2] = num;
    return 0;
  }
  function getRandomDevice() {
    if (typeof crypto == "object" && typeof crypto["getRandomValues"] == "function") {
      var randomBuffer = new Uint8Array(1);
      return function() {
        crypto.getRandomValues(randomBuffer);
        return randomBuffer[0];
      };
    } else
      return function() {
        abort("randomDevice");
      };
  }
  function _getentropy(buffer2, size) {
    if (!_getentropy.randomDevice) {
      _getentropy.randomDevice = getRandomDevice();
    }
    for (var i = 0; i < size; i++) {
      HEAP8[buffer2 + i >> 0] = _getentropy.randomDevice();
    }
    return 0;
  }
  function _pclose() {
    err("missing function: pclose");
    abort(-1);
  }
  function _setTempRet0(val) {
    setTempRet0(val);
  }
  function __isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function __arraySum(array, index) {
    var sum = 0;
    for (var i = 0; i <= index; sum += array[i++]) {
    }
    return sum;
  }
  var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function __addDays(date, days) {
    var newDate = new Date(date.getTime());
    while (days > 0) {
      var leap = __isLeapYear(newDate.getFullYear());
      var currentMonth = newDate.getMonth();
      var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
      if (days > daysInCurrentMonth - newDate.getDate()) {
        days -= daysInCurrentMonth - newDate.getDate() + 1;
        newDate.setDate(1);
        if (currentMonth < 11) {
          newDate.setMonth(currentMonth + 1);
        } else {
          newDate.setMonth(0);
          newDate.setFullYear(newDate.getFullYear() + 1);
        }
      } else {
        newDate.setDate(newDate.getDate() + days);
        return newDate;
      }
    }
    return newDate;
  }
  function _strftime(s, maxsize, format, tm) {
    var tm_zone = HEAP32[tm + 40 >> 2];
    var date = {
      tm_sec: HEAP32[tm >> 2],
      tm_min: HEAP32[tm + 4 >> 2],
      tm_hour: HEAP32[tm + 8 >> 2],
      tm_mday: HEAP32[tm + 12 >> 2],
      tm_mon: HEAP32[tm + 16 >> 2],
      tm_year: HEAP32[tm + 20 >> 2],
      tm_wday: HEAP32[tm + 24 >> 2],
      tm_yday: HEAP32[tm + 28 >> 2],
      tm_isdst: HEAP32[tm + 32 >> 2],
      tm_gmtoff: HEAP32[tm + 36 >> 2],
      tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
    };
    var pattern = UTF8ToString(format);
    var EXPANSION_RULES_1 = {
      "%c": "%a %b %d %H:%M:%S %Y",
      "%D": "%m/%d/%y",
      "%F": "%Y-%m-%d",
      "%h": "%b",
      "%r": "%I:%M:%S %p",
      "%R": "%H:%M",
      "%T": "%H:%M:%S",
      "%x": "%m/%d/%y",
      "%X": "%H:%M:%S",
      "%Ec": "%c",
      "%EC": "%C",
      "%Ex": "%m/%d/%y",
      "%EX": "%H:%M:%S",
      "%Ey": "%y",
      "%EY": "%Y",
      "%Od": "%d",
      "%Oe": "%e",
      "%OH": "%H",
      "%OI": "%I",
      "%Om": "%m",
      "%OM": "%M",
      "%OS": "%S",
      "%Ou": "%u",
      "%OU": "%U",
      "%OV": "%V",
      "%Ow": "%w",
      "%OW": "%W",
      "%Oy": "%y"
    };
    for (var rule in EXPANSION_RULES_1) {
      pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
    }
    var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    function leadingSomething(value, digits, character) {
      var str = typeof value == "number" ? value.toString() : value || "";
      while (str.length < digits) {
        str = character[0] + str;
      }
      return str;
    }
    function leadingNulls(value, digits) {
      return leadingSomething(value, digits, "0");
    }
    function compareByDay(date1, date2) {
      function sgn(value) {
        return value < 0 ? -1 : value > 0 ? 1 : 0;
      }
      var compare;
      if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
        if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
          compare = sgn(date1.getDate() - date2.getDate());
        }
      }
      return compare;
    }
    function getFirstWeekStartDate(janFourth) {
      switch (janFourth.getDay()) {
        case 0:
          return new Date(janFourth.getFullYear() - 1, 11, 29);
        case 1:
          return janFourth;
        case 2:
          return new Date(janFourth.getFullYear(), 0, 3);
        case 3:
          return new Date(janFourth.getFullYear(), 0, 2);
        case 4:
          return new Date(janFourth.getFullYear(), 0, 1);
        case 5:
          return new Date(janFourth.getFullYear() - 1, 11, 31);
        case 6:
          return new Date(janFourth.getFullYear() - 1, 11, 30);
      }
    }
    function getWeekBasedYear(date2) {
      var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
      var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
      var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
      var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
      var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
      if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
        if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
          return thisDate.getFullYear() + 1;
        } else {
          return thisDate.getFullYear();
        }
      } else {
        return thisDate.getFullYear() - 1;
      }
    }
    var EXPANSION_RULES_2 = {
      "%a": function(date2) {
        return WEEKDAYS[date2.tm_wday].substring(0, 3);
      },
      "%A": function(date2) {
        return WEEKDAYS[date2.tm_wday];
      },
      "%b": function(date2) {
        return MONTHS[date2.tm_mon].substring(0, 3);
      },
      "%B": function(date2) {
        return MONTHS[date2.tm_mon];
      },
      "%C": function(date2) {
        var year = date2.tm_year + 1900;
        return leadingNulls(year / 100 | 0, 2);
      },
      "%d": function(date2) {
        return leadingNulls(date2.tm_mday, 2);
      },
      "%e": function(date2) {
        return leadingSomething(date2.tm_mday, 2, " ");
      },
      "%g": function(date2) {
        return getWeekBasedYear(date2).toString().substring(2);
      },
      "%G": function(date2) {
        return getWeekBasedYear(date2);
      },
      "%H": function(date2) {
        return leadingNulls(date2.tm_hour, 2);
      },
      "%I": function(date2) {
        var twelveHour = date2.tm_hour;
        if (twelveHour == 0)
          twelveHour = 12;
        else if (twelveHour > 12)
          twelveHour -= 12;
        return leadingNulls(twelveHour, 2);
      },
      "%j": function(date2) {
        return leadingNulls(date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1), 3);
      },
      "%m": function(date2) {
        return leadingNulls(date2.tm_mon + 1, 2);
      },
      "%M": function(date2) {
        return leadingNulls(date2.tm_min, 2);
      },
      "%n": function() {
        return "\n";
      },
      "%p": function(date2) {
        if (date2.tm_hour >= 0 && date2.tm_hour < 12) {
          return "AM";
        } else {
          return "PM";
        }
      },
      "%S": function(date2) {
        return leadingNulls(date2.tm_sec, 2);
      },
      "%t": function() {
        return "	";
      },
      "%u": function(date2) {
        return date2.tm_wday || 7;
      },
      "%U": function(date2) {
        var days = date2.tm_yday + 7 - date2.tm_wday;
        return leadingNulls(Math.floor(days / 7), 2);
      },
      "%V": function(date2) {
        var val = Math.floor((date2.tm_yday + 7 - (date2.tm_wday + 6) % 7) / 7);
        if ((date2.tm_wday + 371 - date2.tm_yday - 2) % 7 <= 2) {
          val++;
        }
        if (!val) {
          val = 52;
          var dec31 = (date2.tm_wday + 7 - date2.tm_yday - 1) % 7;
          if (dec31 == 4 || dec31 == 5 && __isLeapYear(date2.tm_year % 400 - 1)) {
            val++;
          }
        } else if (val == 53) {
          var jan1 = (date2.tm_wday + 371 - date2.tm_yday) % 7;
          if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date2.tm_year)))
            val = 1;
        }
        return leadingNulls(val, 2);
      },
      "%w": function(date2) {
        return date2.tm_wday;
      },
      "%W": function(date2) {
        var days = date2.tm_yday + 7 - (date2.tm_wday + 6) % 7;
        return leadingNulls(Math.floor(days / 7), 2);
      },
      "%y": function(date2) {
        return (date2.tm_year + 1900).toString().substring(2);
      },
      "%Y": function(date2) {
        return date2.tm_year + 1900;
      },
      "%z": function(date2) {
        var off = date2.tm_gmtoff;
        var ahead = off >= 0;
        off = Math.abs(off) / 60;
        off = off / 60 * 100 + off % 60;
        return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
      },
      "%Z": function(date2) {
        return date2.tm_zone;
      },
      "%%": function() {
        return "%";
      }
    };
    pattern = pattern.replace(/%%/g, "\0\0");
    for (var rule in EXPANSION_RULES_2) {
      if (pattern.includes(rule)) {
        pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
      }
    }
    pattern = pattern.replace(/\0\0/g, "%");
    var bytes = intArrayFromString(pattern, false);
    if (bytes.length > maxsize) {
      return 0;
    }
    writeArrayToMemory(bytes, s);
    return bytes.length - 1;
  }
  function _strftime_l(s, maxsize, format, tm) {
    return _strftime(s, maxsize, format, tm);
  }
  InternalError = Module["InternalError"] = extendError(Error, "InternalError");
  embind_init_charCodes();
  BindingError = Module["BindingError"] = extendError(Error, "BindingError");
  init_ClassHandle();
  init_embind();
  init_RegisteredPointer();
  UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
  init_emval();
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull)
      u8array.length = numBytesWritten;
    return u8array;
  }
  var asmLibraryArg = {
    "__assert_fail": ___assert_fail,
    "__cxa_allocate_exception": ___cxa_allocate_exception,
    "__cxa_rethrow": ___cxa_rethrow,
    "__cxa_throw": ___cxa_throw,
    "__syscall_faccessat": ___syscall_faccessat,
    "__syscall_fcntl64": ___syscall_fcntl64,
    "__syscall_fstat64": ___syscall_fstat64,
    "__syscall_getcwd": ___syscall_getcwd,
    "__syscall_ioctl": ___syscall_ioctl,
    "__syscall_lstat64": ___syscall_lstat64,
    "__syscall_newfstatat": ___syscall_newfstatat,
    "__syscall_openat": ___syscall_openat,
    "__syscall_renameat": ___syscall_renameat,
    "__syscall_rmdir": ___syscall_rmdir,
    "__syscall_stat64": ___syscall_stat64,
    "__syscall_unlinkat": ___syscall_unlinkat,
    "_embind_finalize_value_object": __embind_finalize_value_object,
    "_embind_register_bigint": __embind_register_bigint,
    "_embind_register_bool": __embind_register_bool,
    "_embind_register_class": __embind_register_class,
    "_embind_register_class_constructor": __embind_register_class_constructor,
    "_embind_register_class_function": __embind_register_class_function,
    "_embind_register_emval": __embind_register_emval,
    "_embind_register_float": __embind_register_float,
    "_embind_register_integer": __embind_register_integer,
    "_embind_register_memory_view": __embind_register_memory_view,
    "_embind_register_smart_ptr": __embind_register_smart_ptr,
    "_embind_register_std_string": __embind_register_std_string,
    "_embind_register_std_wstring": __embind_register_std_wstring,
    "_embind_register_value_object": __embind_register_value_object,
    "_embind_register_value_object_field": __embind_register_value_object_field,
    "_embind_register_void": __embind_register_void,
    "_emscripten_date_now": __emscripten_date_now,
    "_emscripten_get_now_is_monotonic": __emscripten_get_now_is_monotonic,
    "_emval_call": __emval_call,
    "_emval_decref": __emval_decref,
    "_emval_incref": __emval_incref,
    "_emval_take_value": __emval_take_value,
    "_localtime_js": __localtime_js,
    "_mmap_js": __mmap_js,
    "_munmap_js": __munmap_js,
    "_tzset_js": __tzset_js,
    "abort": _abort,
    "emscripten_get_heap_max": _emscripten_get_heap_max,
    "emscripten_get_now": _emscripten_get_now,
    "emscripten_memcpy_big": _emscripten_memcpy_big,
    "emscripten_resize_heap": _emscripten_resize_heap,
    "environ_get": _environ_get,
    "environ_sizes_get": _environ_sizes_get,
    "exit": _exit,
    "fd_close": _fd_close,
    "fd_read": _fd_read,
    "fd_seek": _fd_seek,
    "fd_write": _fd_write,
    "getentropy": _getentropy,
    "memory": wasmMemory,
    "pclose": _pclose,
    "setTempRet0": _setTempRet0,
    "strftime_l": _strftime_l
  };
  var asm = createWasm();
  var calledRun;
  function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
  }
  dependenciesFulfilled = function runCaller() {
    if (!calledRun)
      run2();
    if (!calledRun)
      dependenciesFulfilled = runCaller;
  };
  function run2(args) {
    args = args || arguments_;
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0) {
      return;
    }
    function doRun() {
      if (calledRun)
        return;
      calledRun = true;
      Module["calledRun"] = true;
      if (ABORT)
        return;
      initRuntime();
      if (Module["onRuntimeInitialized"])
        Module["onRuntimeInitialized"]();
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run2;
  function exit(status, implicit) {
    EXITSTATUS = status;
    procExit(status);
  }
  function procExit(code) {
    EXITSTATUS = code;
    if (!keepRuntimeAlive()) {
      if (Module["onExit"])
        Module["onExit"](code);
      ABORT = true;
    }
    quit_(code, new ExitStatus(code));
  }
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function")
      Module["preInit"] = [Module["preInit"]];
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  run2();
  function createWasmGemm() {
    const GEMM_TO_FALLBACK_FUNCTIONS_MAP = {
      "int8_prepare_a": "int8PrepareAFallback",
      "int8_prepare_b": "int8PrepareBFallback",
      "int8_prepare_b_from_transposed": "int8PrepareBFromTransposedFallback",
      "int8_prepare_b_from_quantized_transposed": "int8PrepareBFromQuantizedTransposedFallback",
      "int8_prepare_bias": "int8PrepareBiasFallback",
      "int8_multiply_and_add_bias": "int8MultiplyAndAddBiasFallback",
      "int8_select_columns_of_b": "int8SelectColumnsOfBFallback"
    };
    const OPTIMIZED_GEMM = "mozIntGemm";
    const optimizedGemmModule = WebAssembly[OPTIMIZED_GEMM];
    if (!optimizedGemmModule) {
      return fallbackGemm(GEMM_TO_FALLBACK_FUNCTIONS_MAP);
    }
    const optimizedGemmModuleExports = new WebAssembly.Instance(optimizedGemmModule(), { "": { memory: wasmMemory } }).exports;
    for (let key in GEMM_TO_FALLBACK_FUNCTIONS_MAP) {
      if (!optimizedGemmModuleExports[key]) {
        return fallbackGemm(GEMM_TO_FALLBACK_FUNCTIONS_MAP);
      }
    }
    return optimizedGemmModuleExports;
  }
  function fallbackGemm(gemmToFallbackFunctionsMap) {
    const FALLBACK_GEMM = "asm";
    let fallbackGemmModuleExports = {};
    for (let key in gemmToFallbackFunctionsMap) {
      fallbackGemmModuleExports[key] = (...a) => Module[FALLBACK_GEMM][gemmToFallbackFunctionsMap[key]](...a);
    }
    return fallbackGemmModuleExports;
  }
  return Module;
}

// src/handlers/bergamot/bergamot.js
var Bergamot = class {
  available_models = {};
  constructor(available_models = {}) {
    this.available_models = available_models;
    this.translationService = null;
    this.translationModels = /* @__PURE__ */ new Map();
    this.WasmEngineModule = null;
    this.PIVOT_LANGUAGE = "en";
    this.modelFileAlignments = {
      "model": 256,
      "lex": 64,
      "vocab": 64,
      "qualityModel": 64,
      "srcvocab": 64,
      "trgvocab": 64
    };
  }
  async loadTranslationEngine() {
    let path = `${app.vault.configDir}/plugins/translate/models/bergamot/bergamot-translator-worker.wasm`;
    if (!await app.vault.adapter.exists(path))
      throw "Could not find bergamot-translator-worker.wasm in the vault";
    let wasmArrayBuffer = await app.vault.adapter.readBinary(path);
    const initialModule = {
      preRun: [],
      onAbort() {
        console.log("Error loading wasm module.");
      },
      onRuntimeInitialized: function() {
        this.constructTranslationService();
      }.bind(this),
      wasmBinary: wasmArrayBuffer
    };
    try {
      this.WasmEngineModule = loadEmscriptenGlueCode(initialModule);
    } catch (e) {
      console.log("Error loading wasm module:", e);
    }
  }
  // instantiate the Translation Service
  constructTranslationService() {
    if (!this.translationService) {
      let translationServiceConfig = { cacheSize: 0 };
      this.translationService = new this.WasmEngineModule.BlockingService(translationServiceConfig);
    }
  }
  async translate(text2, from, to) {
    let vectorResponse, vectorResponseOptions, vectorSourceText;
    try {
      const vectorResponseOptions2 = new this.WasmEngineModule.VectorResponseOptions();
      vectorResponseOptions2.push_back({
        qualityScores: true,
        alignment: true,
        html: false
      });
      vectorSourceText = new this.WasmEngineModule.VectorString();
      vectorSourceText.push_back(text2);
      if (this._isPivotingRequired(from, to)) {
        const from_model = await this.getTranslationModel(from, this.PIVOT_LANGUAGE);
        const to_model = await this.getTranslationModel(this.PIVOT_LANGUAGE, to);
        vectorResponse = this.translationService.translateViaPivoting(from_model, to_model, vectorSourceText, vectorResponseOptions2);
      } else {
        const model = await this.getTranslationModel(from, to);
        vectorResponse = this.translationService.translate(model, vectorSourceText, vectorResponseOptions2);
      }
      return this._parseTranslatedText(vectorResponse);
    } catch (e) {
      console.error("Error in translation engine ", e);
      throw e;
    } finally {
      if (typeof vectorSourceText !== "undefined")
        vectorSourceText.delete();
      if (typeof vectorResponseOptions !== "undefined")
        vectorResponseOptions.delete();
      if (typeof vectorResponse !== "undefined")
        vectorResponse.delete();
    }
  }
  async getTranslationModel(from, to) {
    const languagePair = this._getLanguagePair(from, to);
    if (this.translationModels.has(languagePair)) {
      return this.translationModels.get(languagePair);
    } else {
      const target_language = from === "en" ? to : from;
      const is_from = from === target_language;
      let model = this.available_models.models.find((x) => x.locale === target_language);
      if (!model)
        throw "Model was not found";
      let data = model.files.filter((x) => x.usage === "both" || x.usage === (is_from ? "from" : "to"));
      let quality_model = data.find((x) => x.name.startsWith("qualityModel"));
      let language_model = data.find((x) => x.name.startsWith("model"));
      let has_quality_estimation = quality_model !== null;
      let precision = language_model.name.endsWith("intgemm8.bin") ? "int8shiftAll" : "int8shiftAlphaAll";
      const modelConfig = `
            beam-size: 1
            normalize: 1.0
            word-penalty: 0
            max-length-break: 128
            mini-batch-words: 1024
            workspace: 128
            max-length-factor: 2.0
            skip-cost: ${!has_quality_estimation}
            cpu-threads: 0
            quiet: true
            quiet-translation: true
            gemm-precision: ${precision}
            alignment: soft
            `;
      let lex_model = data.find((x) => x.name.startsWith("lex"));
      let vocab_model = data.find((x) => x.name.startsWith("vocab"));
      const alignedModelMemory = await this.loadBinary(target_language, language_model.name, "model");
      const alignedShortlistMemory = await this.loadBinary(target_language, lex_model.name, "lex");
      let alignedVocabMemoryList = new this.WasmEngineModule.AlignedMemoryList();
      if (vocab_model)
        alignedVocabMemoryList.push_back(await this.loadBinary(target_language, vocab_model.name, "vocab"));
      else {
        let src_vocab_model = data.find((x) => x.name.startsWith("srcvocab"));
        let trg_vocab_model = data.find((x) => x.name.startsWith("trgvocab"));
        alignedVocabMemoryList.push_back(await this.loadBinary(target_language, src_vocab_model.name, "srcvocab"));
        alignedVocabMemoryList.push_back(await this.loadBinary(target_language, trg_vocab_model.name, "trgvocab"));
      }
      let alignedQEMemory = null;
      if (quality_model) {
        alignedQEMemory = await this.loadBinary(target_language, quality_model.name, "qualityModel");
      }
      let translationModel = new this.WasmEngineModule.TranslationModel(modelConfig, alignedModelMemory, alignedShortlistMemory, alignedVocabMemoryList, alignedQEMemory);
      this.translationModels.set(languagePair, translationModel);
      return translationModel;
    }
  }
  async loadBinary(language, filename, type) {
    return app.vault.adapter.readBinary(`${app.vault.configDir}/plugins/translate/models/bergamot/${language}/${filename}`).then((file) => {
      return this.prepareAlignedMemoryFromBuffer(file, this.modelFileAlignments[type]);
    });
  }
  get ENGINE_STATE() {
    return {
      LOAD_PENDING: 0,
      LOADING: 1,
      LOADED: 2
    };
  }
  deleteModels() {
    this.translationModels.forEach((value, key) => {
      console.log(`Destructing model '${key}'`);
      value.delete();
    });
    this.translationModels.clear();
  }
  _isPivotingRequired(from, to) {
    return from !== this.PIVOT_LANGUAGE && to !== this.PIVOT_LANGUAGE;
  }
  _getLanguagePair(from, to) {
    return `${from}${to}`;
  }
  // this function constructs and initializes the AlignedMemory from the array buffer and alignment size
  prepareAlignedMemoryFromBuffer(buffer, alignmentSize) {
    let byteArray = new Int8Array(buffer);
    let alignedMemory = new this.WasmEngineModule.AlignedMemory(byteArray.byteLength, alignmentSize);
    const alignedByteArrayView = alignedMemory.getByteArrayView();
    alignedByteArrayView.set(byteArray);
    return alignedMemory;
  }
  // _getLoadedTranslationModel(from, to) {
  // 	const languagePair = this._getLanguagePair(from, to);
  // 	if (!this.translationModels.has(languagePair)) {
  // 		throw Error(`Translation model '${languagePair}' not loaded`);
  // 	}
  // 	return this.translationModels.get(languagePair);
  // }
  _prepareResponseOptions(messages) {
    const vectorResponseOptions = new this.WasmEngineModule.VectorResponseOptions();
    messages.forEach((message) => {
      vectorResponseOptions.push_back({
        qualityScores: message.withQualityEstimation,
        alignment: true,
        html: message.isHTML
      });
    });
    if (vectorResponseOptions.size() === 0) {
      vectorResponseOptions.delete();
      throw Error("No Translation Options provided");
    }
    return vectorResponseOptions;
  }
  _prepareSourceText(messages) {
    let vectorSourceText = new this.WasmEngineModule.VectorString();
    messages.forEach((message) => {
      const sourceParagraph = message.sourceParagraph;
      if (sourceParagraph.trim() === "")
        return;
      vectorSourceText.push_back(sourceParagraph);
    });
    if (vectorSourceText.size() === 0) {
      vectorSourceText.delete();
      throw Error("No text provided to translate");
    }
    return vectorSourceText;
  }
  _parseTranslatedText(vectorResponse) {
    const result = [];
    for (let i = 0; i < vectorResponse.size(); i += 1) {
      const response = vectorResponse.get(i);
      result.push(response.getTranslatedText());
    }
    return result.join("\n");
  }
  // this function extracts all the translated sentences from the Response and returns them.
  // getAllTranslatedSentencesOfParagraph (response) {
  // 	const sentences = [];
  // 	const text = response.getTranslatedText();
  // 	for (let sentenceIndex = 0; sentenceIndex < response.size(); sentenceIndex+=1) {
  // 		const utf8SentenceByteRange = response.getTranslatedSentence(sentenceIndex);
  // 		sentences.push(this._getSentenceFromByteRange(text, utf8SentenceByteRange));
  // 	}
  // 	return sentences;
  // }
  // this function extracts all the source sentences from the Response and returns them.
  // getAllSourceSentencesOfParagraph (response) {
  // 	const sentences = [];
  // 	const text = response.getOriginalText();
  // 	for (let sentenceIndex = 0; sentenceIndex < response.size(); sentenceIndex+=1) {
  // 		const utf8SentenceByteRange = response.getSourceSentence(sentenceIndex);
  // 		sentences.push(this._getSentenceFromByteRange(text, utf8SentenceByteRange));
  // 	}
  // 	return sentences;
  // }
  /*
   * this function returns a substring of text (a string). The substring is represented by
   * byteRange (begin and end endices) within the utf-8 encoded version of the text.
   */
  // _getSentenceFromByteRange (text, byteRange) {
  // 	const encoder = new TextEncoder(); // string to utf-8 converter
  // 	const decoder = new TextDecoder(); // utf-8 to string converter
  // 	const utf8BytesView = encoder.encode(text);
  // 	const utf8SentenceBytes = utf8BytesView.subarray(byteRange.begin, byteRange.end);
  // 	return decoder.decode(utf8SentenceBytes);
  // }
};

// src/handlers/bergamot.ts
var import_obsidian10 = require("obsidian");
var BergamotTranslate = class extends DummyTranslate {
  translator;
  detector = null;
  plugin;
  available_languages = ["en"];
  id = "bergamot";
  update_data(available_models) {
    if (available_models) {
      this.available_languages = ["en"].concat(available_models.models.map((x) => x.locale));
      this.translator.available_models = available_models;
    }
  }
  setup_service(available_models) {
    if (!this.translator) {
      if (available_models.binary) {
        try {
          this.translator = new Bergamot(available_models);
          this.translator.loadTranslationEngine();
          this.available_languages = ["en"].concat(available_models.models.map((x) => x.locale));
          this.valid = true;
        } catch (e) {
          this.plugin.message_queue(`Error while loading Bergamot: ${e.message}`);
          this.translator = null;
          this.valid = false;
        }
      } else {
        this.plugin.message_queue("Bergamot binary is not installed");
        this.translator = null;
        this.valid = false;
      }
    } else {
      this.valid = true;
      this.available_languages = ["en"].concat(available_models.models.map((x) => x.locale));
    }
  }
  constructor(detector = null, plugin, available_models) {
    super();
    this.plugin = plugin;
    this.detector = detector;
    this.valid = false;
    this.setup_service(available_models);
  }
  async service_validate() {
    return { valid: this.translator != null };
  }
  async service_detect(text2) {
    return this.detector.detect(text2);
  }
  async service_translate(text2, from, to, options = {}) {
    let detected_language = "";
    if (from === "auto") {
      if (this.has_autodetect_capability()) {
        detected_language = (await this.detector.detect(text2)).detected_languages.first()?.language;
        if (detected_language && detected_language !== "auto")
          from = detected_language;
        else
          return { status_code: 400, message: "Could not detect language" };
      } else {
        return { status_code: 400, message: "Automatic language detection is not supported" };
      }
    }
    if (from === to)
      return { status_code: 200, translation: text2, detected_language: from };
    if (!this.available_languages.includes(from))
      return { status_code: 400, message: `${t(from)} is not installed as a language model` };
    if (!this.available_languages.includes(to))
      return { status_code: 400, message: `${t(to)} is not installed as a language model` };
    return {
      status_code: 200,
      translation: await this.translator.translate(text2, from, to),
      detected_language
    };
  }
  async service_languages() {
    const rootURL = "https://storage.googleapis.com/bergamot-models-sandbox";
    let response = await (0, import_obsidian10.requestUrl)({ url: `${rootURL}/latest.txt` });
    let version = response.text.trim();
    response = await (0, import_obsidian10.requestUrl)({ url: `${rootURL}/${version}/registry.json` });
    let registry = response.json;
    let all_language_pairs = Object.keys(registry);
    let available_languages2 = all_language_pairs.filter((x) => {
      return x.startsWith("en");
    }).map((x) => {
      return x.substring(2);
    }).filter((x) => {
      return all_language_pairs.includes(`${x}en`);
    });
    let mapped_languages = available_languages2.map((x) => {
      let duplicates = Object.values(registry[`${x}en`]).map((x2) => x2.name).concat(Object.values(registry[`en${x}`]).map((x2) => x2.name)).filter((e, i, a) => a.indexOf(e) !== i);
      const models_from = Object.values(registry[`${x}en`]).map((x2) => {
        return { name: x2.name, size: x2.size, usage: duplicates.includes(x2.name) ? "both" : "from" };
      });
      const models_to = Object.values(registry[`en${x}`]).filter((x2) => !duplicates.includes(x2.name)).map((x2) => {
        return { name: x2.name, size: x2.size, usage: duplicates.includes(x2.name) ? "both" : "to" };
      });
      let files = models_from.concat(models_to);
      return {
        size: files.reduce((acc, x2) => acc + x2.size, 0),
        locale: x,
        files: models_from.concat(models_to),
        dev: registry[`en${x}`].lex.modelType === "dev"
      };
    });
    return { status_code: 200, languages: mapped_languages, data: version };
  }
  has_autodetect_capability() {
    return this.detector != null && this.detector.valid;
  }
};

// src/handlers/fanyi-qq.ts
var import_util2 = require("util");
var import_obsidian11 = require("obsidian");
var FanyiQq = class extends DummyTranslate {
  #api_key;
  #app_id;
  #region;
  id = "fanyi_qq";
  character_limit = 2e3;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#app_id = settings2.app_id;
    this.#region = settings2.region;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#app_id = settings2.app_id ?? this.#app_id;
    this.#region = settings2.region ?? this.#region;
  }
  async sign_message(payload) {
    async function hash_string(str, encoding = "hex") {
      const digest = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(str));
      const buffer = new Uint8Array(digest);
      if (encoding === "hex")
        return Array.from(buffer).map((b) => b.toString(16).padStart(2, "0")).join("");
      else
        return new import_util2.TextDecoder().decode(buffer);
    }
    async function hmac_hash_string(str, key, encoding = "") {
      const encoder = new TextEncoder();
      const imported_key = await crypto.subtle.importKey("raw", encoder.encode(key), {
        name: "HMAC",
        hash: "SHA-256"
      }, false, ["sign", "verify"]);
      const digest = await crypto.subtle.sign("HMAC", imported_key, encoder.encode(str));
      const buffer = new Uint8Array(digest);
      if (encoding === "hex")
        return Array.from(buffer).map((b) => b.toString(16).padStart(2, "0")).join("");
      else
        return new import_util2.TextDecoder().decode(buffer);
    }
    const date = /* @__PURE__ */ new Date();
    const timestamp = (date.getTime() / 1e3).toFixed(0);
    const full_date = `${date.getUTCFullYear()}-${("0" + (date.getUTCMonth() + 1)).slice(-2)}-${("0" + date.getUTCDate()).slice(-2)}`;
    const version = "2018-03-21";
    const signed_headers = "content-type;host";
    const hashed_payload = await hash_string(JSON.stringify(payload));
    const http_request_method = "POST";
    const canonical_uri = "/";
    const canonical_querystring = "";
    const canonical_headers = ["content-type:application/json", `host:tmt.tencentcloudapi.com`].join("\n");
    const canonical_request = [http_request_method, canonical_uri, canonical_querystring, canonical_headers, signed_headers, hashed_payload].join("\n");
    const hashed_canonical_request = await hash_string(canonical_request);
    const credential_scope = `${full_date}/tmt/tc3_request`;
    const message_string = ["TC3-HMAC-SHA256", timestamp, credential_scope, hashed_canonical_request].join("\n");
    const keyed_date = await hmac_hash_string(full_date, "TC3" + this.#api_key);
    const keyed_service = await hmac_hash_string("tmt", keyed_date);
    const keyed_signing = await hmac_hash_string("tc3_request", keyed_service);
    const signature = await hmac_hash_string(message_string, keyed_signing, "hex");
    const authorization = [
      "TC3-HMAC-SHA256 Credential=" + this.#api_key + "/" + credential_scope,
      "SignedHeaders=" + signed_headers,
      "Signature=" + signature
    ].join(", ");
    return {
      authorization,
      timestamp: timestamp.toString()
    };
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    if (!this.#app_id)
      return { status_code: 400, valid: false, message: "App ID was not specified" };
    const payload = {
      Action: "LanguageDetect",
      Version: "2018-03-21",
      Region: this.#region,
      Text: "I",
      ProjectId: this.#app_id
    };
    const signature = await this.sign_message(payload);
    const response = await (0, import_obsidian11.requestUrl)({
      throw: false,
      url: `https://tmt.tencentcloudapi.com/?` + new URLSearchParams(payload),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": signature.authorization,
        "X-TC-Timestamp": signature.timestamp,
        "X-TC-Action": "LanguageDetect",
        "X-TC-Version": "2018-03-21"
      }
    });
    const data = response.json;
    const status_code = data.Response.Error ? 400 : response.status;
    return {
      status_code,
      valid: status_code === 200,
      message: data.Response.Error?.Message
    };
  }
  async service_detect(text2) {
    const payload = {
      Action: "LanguageDetect",
      Version: "2018-03-21",
      Region: this.#region,
      Text: text2,
      ProjectId: this.#app_id
    };
    const signature = await this.sign_message(payload);
    const response = await (0, import_obsidian11.requestUrl)({
      throw: false,
      url: `https://tmt.tencentcloudapi.com/?` + new URLSearchParams(payload),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": signature.authorization,
        "X-TC-Timestamp": signature.timestamp,
        "X-TC-Action": "LanguageDetect",
        "X-TC-Version": "2018-03-21"
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.Response.Error.Message };
    return {
      status_code: response.status,
      detected_languages: [{ language: data.Response.Lang }]
    };
  }
  async attempt_translation(sourceText, source, target) {
    const payload = {
      Action: "TextTranslate",
      Version: "2018-03-21",
      Region: this.#region,
      SourceText: sourceText,
      Source: source,
      Target: target,
      ProjectId: this.#app_id
    };
    const signature = await this.sign_message(payload);
    return (0, import_obsidian11.requestUrl)({
      throw: false,
      url: `https://tmt.tencentcloudapi.com/?` + new URLSearchParams(payload),
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": signature.authorization,
        "X-TC-Timestamp": signature.timestamp,
        "X-TC-Action": "TextTranslate",
        "X-TC-Version": "2018-03-21"
      }
    });
  }
  async service_translate(text2, from, to, options = {}) {
    let response = await this.attempt_translation(text2, from, to);
    let data = response.json;
    if (response.status !== 200 || data.Response.Error) {
      if (data.Response.Error.Code === "UnsupportedOperation.UnsupportedSourceLanguage") {
        response = await this.attempt_translation(text2, from, "en");
        data = response.json;
        if (response.status !== 200 || data.Response.Error)
          return {
            status_code: response.status !== 200 ? response.status : 400,
            message: data.Response.Error.Message
          };
        response = await this.attempt_translation(data.Response.TargetText, "en", to);
        data = response.json;
        if (response.status !== 200 || data.Response.Error)
          return {
            status_code: response.status !== 200 ? response.status : 400,
            message: data.Response.Error.Message
          };
      } else {
        return {
          status_code: response.status !== 200 ? response.status : 400,
          message: data.Response.Error.Message
        };
      }
    }
    let detected_language = data.Response.Source;
    return {
      status_code: response.status,
      translation: data.Response.TargetText,
      detected_language: from === "auto" && detected_language ? detected_language : null
    };
  }
  async service_languages() {
    return {
      status_code: 200,
      languages: DEFAULT_SETTINGS.service_settings.fanyi_qq.available_languages
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/fanyi-youdao.ts
var import_obsidian12 = require("obsidian");
var FanyiYoudao = class extends DummyTranslate {
  #api_key;
  #app_id;
  id = "fanyi_youdao";
  character_limit = 5e3;
  status_code_lookup = {
    0: { message: void 0, status_code: 200 },
    101: { message: "Missing required parameter", status_code: 400 },
    102: { message: "Unsupported language type", status_code: 400 },
    103: { message: "Translated text is too long", status_code: 400 },
    104: { message: "Unsupported API type", status_code: 400 },
    105: { message: "Unsupported signature type", status_code: 400 },
    106: { message: "Unsupported response type", status_code: 400 },
    107: { message: "Unsupported transport encryption type", status_code: 400 },
    108: { message: "Invalid app ID", status_code: 401 },
    110: { message: "No application of related service", status_code: 401 },
    111: { message: "Invalid developer account", status_code: 401 },
    112: { message: "Invalid request service", status_code: 401 },
    113: { message: "Query may not be empty", status_code: 400 },
    201: { message: "Decryption failed (DES/BASE64/URLDecode error)", status_code: 400 },
    202: { message: "Signature verification failed, possibly query encoding error", status_code: 400 },
    203: { message: "Access IP is not in list of accessible IPs", status_code: 401 },
    205: { message: "Requested interface inconsistent with platform type of application", status_code: 401 },
    206: { message: "Signature verification failed due to invalid timestamp", status_code: 400 },
    301: { message: "Dictionary lookup failed", status_code: 500 },
    302: { message: "Translation query failed", status_code: 500 },
    303: { message: "Unknown error server-side", status_code: 500 },
    304: { message: "Session idle for too long, timed out", status_code: 408 },
    309: { message: "Domain parameter error", status_code: 400 },
    401: { message: "Insufficient account balance", status_code: 402 },
    402: { message: "Offlinesdk is not available", status_code: 400 },
    411: { message: "Access frequency is too high, please try again later", status_code: 429 },
    412: { message: "Too many big requests, please try again later", status_code: 429 },
    1411: { message: "Access frequency limited", status_code: 429 }
  };
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#app_id = settings2.app_id;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#app_id = settings2.app_id ?? this.#app_id;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    if (!this.#app_id)
      return { status_code: 400, valid: false, message: "App ID was not specified" };
    const signed_message = await this.sign_message("I");
    const response = await (0, import_obsidian12.requestUrl)({
      throw: false,
      url: `https://openapi.youdao.com/api?` + new URLSearchParams({
        q: "I",
        appKey: this.#app_id,
        salt: signed_message.salt,
        from: "en",
        to: "en",
        sign: signed_message.signature,
        signType: "v3",
        curtime: signed_message.current_time,
        vocabId: ""
      }),
      method: "POST"
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, valid: false };
    const output = this.status_code_lookup[parseInt(data.errorCode)];
    if (output) {
      return { ...output, valid: output.status_code === 200 };
    } else {
      return { status_code: data.errorCode, valid: false };
    }
  }
  async service_detect(text2) {
    let result = await this.service_translate(text2, "auto", "en");
    result.detected_languages = [{ language: result.detected_language }];
    return result;
  }
  async sign_message(message) {
    function truncate(text2) {
      const len = text2.length;
      if (len <= 20)
        return text2;
      return text2.substring(0, 10) + len + text2.substring(len - 10, len);
    }
    const salt = (/* @__PURE__ */ new Date()).getTime();
    const current_time = Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3);
    const hashMessage = this.#app_id + truncate(message) + salt + current_time + this.#api_key;
    const hashBuffer = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(hashMessage));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const signature = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    return {
      salt: salt.toString(),
      text: message,
      signature,
      current_time: current_time.toString()
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const signed_message = await this.sign_message(text2);
    const response = await (0, import_obsidian12.requestUrl)({
      throw: false,
      url: `https://openapi.youdao.com/api?` + new URLSearchParams({
        q: text2,
        appKey: this.#app_id,
        salt: signed_message.salt,
        from,
        to,
        sign: signed_message.signature,
        signType: "v3",
        curtime: signed_message.current_time,
        vocabId: ""
      }),
      method: "POST"
    });
    const data = response.json;
    const output = this.status_code_lookup[parseInt(data.errorCode)];
    if (output) {
      if (output.status_code === 200) {
        return {
          ...output,
          translation: data.translation.join("\n"),
          detected_language: from === "auto" ? data.l.split("2")[0].toLowerCase() : void 0
        };
      } else {
        return { ...output };
      }
    } else {
      return { status_code: data.errorCode };
    }
  }
  async service_languages() {
    return {
      status_code: 200,
      languages: DEFAULT_SETTINGS.service_settings.fanyi_youdao.available_languages
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/md5.js
function MD5(string) {
  function RotateLeft(lValue, iShiftBits) {
    return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
  }
  function AddUnsigned(lX, lY) {
    var lX4, lY4, lX8, lY8, lResult;
    lX8 = lX & 2147483648;
    lY8 = lY & 2147483648;
    lX4 = lX & 1073741824;
    lY4 = lY & 1073741824;
    lResult = (lX & 1073741823) + (lY & 1073741823);
    if (lX4 & lY4) {
      return lResult ^ 2147483648 ^ lX8 ^ lY8;
    }
    if (lX4 | lY4) {
      if (lResult & 1073741824) {
        return lResult ^ 3221225472 ^ lX8 ^ lY8;
      } else {
        return lResult ^ 1073741824 ^ lX8 ^ lY8;
      }
    } else {
      return lResult ^ lX8 ^ lY8;
    }
  }
  function F(x2, y, z) {
    return x2 & y | ~x2 & z;
  }
  function G(x2, y, z) {
    return x2 & z | y & ~z;
  }
  function H(x2, y, z) {
    return x2 ^ y ^ z;
  }
  function I(x2, y, z) {
    return y ^ (x2 | ~z);
  }
  function FF(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(F(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  ;
  function GG(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(G(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  ;
  function HH(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(H(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  ;
  function II(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(I(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  ;
  function ConvertToWordArray(string2) {
    var lWordCount;
    var lMessageLength = string2.length;
    var lNumberOfWords_temp1 = lMessageLength + 8;
    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
    var lWordArray = Array(lNumberOfWords - 1);
    var lBytePosition = 0;
    var lByteCount = 0;
    while (lByteCount < lMessageLength) {
      lWordCount = (lByteCount - lByteCount % 4) / 4;
      lBytePosition = lByteCount % 4 * 8;
      lWordArray[lWordCount] = lWordArray[lWordCount] | string2.charCodeAt(lByteCount) << lBytePosition;
      lByteCount++;
    }
    lWordCount = (lByteCount - lByteCount % 4) / 4;
    lBytePosition = lByteCount % 4 * 8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
    return lWordArray;
  }
  ;
  function WordToHex(lValue) {
    var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
    for (lCount = 0; lCount <= 3; lCount++) {
      lByte = lValue >>> lCount * 8 & 255;
      WordToHexValue_temp = "0" + lByte.toString(16);
      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
    }
    return WordToHexValue;
  }
  ;
  function Utf8Encode(string2) {
    string2 = string2.replace(/\r\n/g, "\n");
    var utftext = "";
    for (var n = 0; n < string2.length; n++) {
      var c2 = string2.charCodeAt(n);
      if (c2 < 128) {
        utftext += String.fromCharCode(c2);
      } else if (c2 > 127 && c2 < 2048) {
        utftext += String.fromCharCode(c2 >> 6 | 192);
        utftext += String.fromCharCode(c2 & 63 | 128);
      } else {
        utftext += String.fromCharCode(c2 >> 12 | 224);
        utftext += String.fromCharCode(c2 >> 6 & 63 | 128);
        utftext += String.fromCharCode(c2 & 63 | 128);
      }
    }
    return utftext;
  }
  ;
  var x = Array();
  var k, AA, BB, CC, DD, a, b, c, d;
  var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
  var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
  var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
  var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
  string = Utf8Encode(string);
  x = ConvertToWordArray(string);
  a = 1732584193;
  b = 4023233417;
  c = 2562383102;
  d = 271733878;
  for (k = 0; k < x.length; k += 16) {
    AA = a;
    BB = b;
    CC = c;
    DD = d;
    a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
    d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
    c = FF(c, d, a, b, x[k + 2], S13, 606105819);
    b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
    a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
    d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
    c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
    b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
    a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
    d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
    c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
    b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
    a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
    d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
    c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
    b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
    a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
    d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
    c = GG(c, d, a, b, x[k + 11], S23, 643717713);
    b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
    a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
    d = GG(d, a, b, c, x[k + 10], S22, 38016083);
    c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
    b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
    a = GG(a, b, c, d, x[k + 9], S21, 568446438);
    d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
    c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
    b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
    a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
    d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
    c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
    b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
    a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
    d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
    c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
    b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
    a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
    d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
    c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
    b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
    a = HH(a, b, c, d, x[k + 13], S31, 681279174);
    d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
    c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
    b = HH(b, c, d, a, x[k + 6], S34, 76029189);
    a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
    d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
    c = HH(c, d, a, b, x[k + 15], S33, 530742520);
    b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
    a = II(a, b, c, d, x[k + 0], S41, 4096336452);
    d = II(d, a, b, c, x[k + 7], S42, 1126891415);
    c = II(c, d, a, b, x[k + 14], S43, 2878612391);
    b = II(b, c, d, a, x[k + 5], S44, 4237533241);
    a = II(a, b, c, d, x[k + 12], S41, 1700485571);
    d = II(d, a, b, c, x[k + 3], S42, 2399980690);
    c = II(c, d, a, b, x[k + 10], S43, 4293915773);
    b = II(b, c, d, a, x[k + 1], S44, 2240044497);
    a = II(a, b, c, d, x[k + 8], S41, 1873313359);
    d = II(d, a, b, c, x[k + 15], S42, 4264355552);
    c = II(c, d, a, b, x[k + 6], S43, 2734768916);
    b = II(b, c, d, a, x[k + 13], S44, 1309151649);
    a = II(a, b, c, d, x[k + 4], S41, 4149444226);
    d = II(d, a, b, c, x[k + 11], S42, 3174756917);
    c = II(c, d, a, b, x[k + 2], S43, 718787259);
    b = II(b, c, d, a, x[k + 9], S44, 3951481745);
    a = AddUnsigned(a, AA);
    b = AddUnsigned(b, BB);
    c = AddUnsigned(c, CC);
    d = AddUnsigned(d, DD);
  }
  var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
  return temp.toLowerCase();
}

// src/handlers/fanyi-baidu.ts
var import_obsidian13 = require("obsidian");
var FanyiBaidu = class extends DummyTranslate {
  #api_key;
  #app_id;
  id = "fanyi_baidu";
  character_limit = 6e3;
  premium = false;
  status_code_lookup = {
    52e3: { message: void 0, status_code: 200 },
    52001: { message: "Request timed out, please try again later", status_code: 408 },
    52002: { message: "System error, please try again later", status_code: 500 },
    52003: { message: "Unauthorized user, check credentials", status_code: 401 },
    54e3: { message: "Required parameter is missing [OPEN ISSUE ON GITHUB]", status_code: 400 },
    54001: { message: "Invalid signature [OPEN ISSUE ON GITHUB]", status_code: 400 },
    54003: { message: "Too many requests, please try again later", status_code: 429 },
    54004: { message: "Insufficient balance, please check your account", status_code: 402 },
    54005: { message: "Frequent long queries, please try again later", status_code: 429 },
    58e3: { message: "Client IP is not whitelisted", status_code: 403 },
    58001: { message: "Target language is not supported", status_code: 400 },
    58002: { message: "Service unavailable, please try again later", status_code: 503 },
    90107: { message: "Certification failed/invalid, please check certification", status_code: 401 }
  };
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#app_id = settings2.app_id;
    this.premium = settings2.premium;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#app_id = settings2.app_id ?? this.#app_id;
    this.premium = settings2.premium ?? this.premium;
  }
  async sign_message(text2) {
    const salt = Date.now().toString();
    const signature_text = `${this.#app_id}${text2}${salt}${this.#api_key}`;
    const signature = MD5(signature_text);
    return {
      signature,
      salt
    };
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    if (!this.#app_id)
      return { status_code: 400, valid: false, message: "App ID was not specified" };
    const signature = await this.sign_message("I");
    const payload = {
      q: "I",
      from: "en",
      to: "zh",
      appid: this.#app_id,
      salt: signature.salt,
      sign: signature.signature
    };
    const response = await (0, import_obsidian13.requestUrl)({
      throw: false,
      url: `http://api.fanyi.baidu.com/api/trans/vip/translate/?` + new URLSearchParams(payload),
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, valid: false };
    if (data.error_code) {
      const output2 = this.status_code_lookup[parseInt(data.error_code)];
      if (output2.status_code !== 200)
        return { valid: false, ...output2 || { status_code: data.error_code, message: data.error_msg } };
    }
    const output = await this.service_translate("I", "en", "sq");
    this.premium = output.status_code === 200;
    return { status_code: 200, valid: true, premium: this.premium };
  }
  async service_detect(text2) {
    const signature = await this.sign_message(text2);
    const payload = {
      q: text2,
      appid: this.#app_id,
      salt: signature.salt,
      sign: signature.signature
    };
    const response = await (0, import_obsidian13.requestUrl)({
      throw: false,
      url: `http://api.fanyi.baidu.com/api/trans/vip/language/?` + new URLSearchParams(payload),
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" }
    });
    const data = response.json;
    if (data.error_code) {
      const output = this.status_code_lookup[parseInt(data.error_code)];
      if (output.status_code !== 200)
        return output || { status_code: data.error_code, message: data.error_msg };
    }
    return {
      status_code: 200,
      detected_languages: [{ language: iso639_3to1[data.src] || data.src }]
    };
  }
  async service_translate(text2, from, to, options = {}) {
    const signature = await this.sign_message(text2);
    const payload = {
      q: text2,
      from,
      to: iso639_1to3[to] || to,
      appid: this.#app_id,
      salt: signature.salt,
      sign: signature.signature,
      action: options.apply_glossary ? "1" : "0"
    };
    const response = await (0, import_obsidian13.requestUrl)({
      throw: false,
      url: `http://api.fanyi.baidu.com/api/trans/vip/translate/?` + new URLSearchParams(payload),
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" }
    });
    let data = response.json;
    if (data.error_code) {
      const output = this.status_code_lookup[parseInt(data.error_code)];
      if (output.status_code !== 200)
        return output || { status_code: data.error_code, message: data.error_msg };
    }
    return {
      status_code: 200,
      translation: data.trans_result[0].dst,
      detected_language: from === "auto" && data.to ? iso639_3to1[data.to] || data.to : null
    };
  }
  async service_languages() {
    return {
      status_code: 200,
      languages: this.premium ? DEFAULT_SETTINGS.service_settings.fanyi_baidu.available_languages : SERVICES_INFO["fanyi_baidu"].standard_languages
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/amazon-translate.ts
var AmazonTranslate = class extends DummyTranslate {
  #api_key;
  #region;
  id = "amazon_translate";
  character_limit = 5e3;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#region = settings2.region;
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#region = settings2.region ?? this.#region;
  }
  async service_validate() {
    if (!this.#api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    const response = await fetch(`https://translate.${this.#region}.amazonaws.com/TranslateText`, {
      body: JSON.stringify({
        Text: "I",
        SourceLanguageCode: "en",
        TargetLanguageCode: "en"
      }),
      headers: {
        "Action": "TranslateText",
        "Version": "2017-07-01",
        "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
        "X-Amz-Date": (/* @__PURE__ */ new Date()).toISOString().replace(/[:\-]|\.\d{3}/g, ""),
        "Content-Type": "application/x-amz-json-1.1",
        "X-Amz-Target": `AWSShineFrontendService_20170701.TranslateText`
      }
    });
    const data = await response.json();
    return {
      valid: response.ok,
      status_code: response.status
    };
  }
  async service_detect(text2) {
    let result = await this.service_translate(text2, "auto", "en");
    return { detected_languages: [{ language: result.detected_language }], status_code: result.status_code };
  }
  async service_translate(text2, from, to, options = {}) {
    const response = await fetch(`https://translate.${this.#region}.amazonaws.com/TranslateText`, {
      body: JSON.stringify({
        Text: text2,
        SourceLanguageCode: from,
        TargetLanguageCode: to
      }),
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    const data = await response.json();
    if (response.status !== 200)
      return { status_code: response.status };
    return {
      status_code: response.status,
      translation: data.TranslatedText,
      detected_language: from === "auto" && data.SourceLanguageCode ? data.SourceLanguageCode : null
    };
  }
  async service_languages() {
    const response = await fetch(`https://translate.${this.#region}.amazonaws.com/ListLanguages`, {
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    const data = await response.json();
    if (response.status !== 200)
      return { status_code: response.status };
    return {
      status_code: response.status,
      languages: data.Languages.map((l) => l.LanguageCode)
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/lingva-translate.ts
var import_obsidian14 = require("obsidian");
var LingvaTranslate = class extends DummyTranslate {
  #host;
  id = "lingva_translate";
  character_limit = 7500;
  constructor(settings2) {
    super();
    this.#host = settings2.host;
    if (!this.#host.startsWith("http"))
      this.#host = `https://${this.#host}`;
  }
  update_settings(settings2) {
    this.#host = settings2.host ?? this.#host;
    if (!this.#host.startsWith("http"))
      this.#host = `https://${this.#host}`;
  }
  async service_validate() {
    if (!this.#host)
      return { status_code: 400, valid: false, message: "Host was not specified" };
    const response = await (0, import_obsidian14.requestUrl)({
      throw: false,
      url: `${this.#host}/api/v1/languages`
    });
    const data = response.json;
    return {
      status_code: response.status,
      valid: response.status === 200,
      message: data.error
    };
  }
  async service_detect(text2) {
    let result = await this.service_translate(text2, "auto", "en");
    result.detected_languages = [{ language: result.detected_language }];
    return result;
  }
  async service_translate(text2, from, to, options = {}) {
    const response = await (0, import_obsidian14.requestUrl)({
      throw: false,
      url: `${this.#host}/api/v1/${from}/${to}/${encodeURIComponent(text2)}`
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error };
    return {
      status_code: response.status,
      translation: data.translation,
      detected_language: from === "auto" && data.info?.detectedSource ? data.info.detectedSource : null
    };
  }
  async service_languages() {
    const response = await (0, import_obsidian14.requestUrl)({
      throw: false,
      url: `${this.#host}/api/v1/languages`
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error };
    return {
      status_code: response.status,
      languages: response.status !== 200 ? void 0 : data.languages.filter((l) => l.code !== "auto").map((l) => l.code.replace("_", "-"))
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/openai-translator.ts
var import_obsidian15 = require("obsidian");
var OpenaiTranslator = class extends DummyTranslate {
  #host;
  #api_key;
  id = "openai_translator";
  model = "gpt-3.5-turbo";
  temperature = 0.3;
  requires_api_key = false;
  constructor(settings2) {
    super();
    this.#api_key = settings2.api_key;
    this.#host = settings2.host;
    this.model = settings2.model;
    this.requires_api_key = this.#host === "api.openai.com" || this.#host === "api.pawan.krd";
  }
  update_settings(settings2) {
    this.#api_key = settings2.api_key ?? this.#api_key;
    this.#host = settings2.host ?? this.#host;
    this.model = settings2.model ?? "gpt-3.5-turbo";
    this.requires_api_key = this.#host === "api.openai.com" || this.#host === "api.pawan.krd";
  }
  async service_validate() {
    if (!this.#host)
      return { status_code: 400, valid: false, message: "Host was not specified" };
    if (!this.#api_key && this.requires_api_key)
      return { status_code: 400, valid: false, message: "API key was not specified" };
    if (this.requires_api_key) {
      const response = await (0, import_obsidian15.requestUrl)({
        throw: false,
        method: "GET",
        url: `https://${this.#host}/v1/engines`,
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${this.#api_key}`
        }
      });
      if (response.status !== 200) {
        const data = response.json;
        if (data.error)
          return { status_code: response.status, valid: false, message: data.error.message };
        else
          return { status_code: response.status, valid: false, message: "Invalid API key or host" };
      }
      return { status_code: response.status, valid: true };
    } else {
      const response = await (0, import_obsidian15.requestUrl)({
        throw: false,
        method: "GET",
        url: `${this.#host}/languages`
      });
    }
  }
  async service_detect(text2) {
    const response = await (0, import_obsidian15.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://${this.#host}/v1/chat/completions`,
      body: JSON.stringify({
        "model": this.model,
        "messages": [
          { "role": "user", "content": "Identify the language of the input, please ONLY output its ISO639-1 code:\n" + text2 }
        ],
        "temperature": this.temperature
      }),
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.#api_key}`
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    return {
      status_code: response.status,
      detected_languages: response.status === 200 ? [{
        language: data.choices[0].message["content"].toLowerCase(),
        confidence: 1
      }] : void 0
    };
  }
  async service_translate(text2, from, to, options = {}) {
    let prompt;
    if (from === "auto")
      prompt = `Translate following text to '${to}' without explanation, include ISO639-1 locale of the input in the first line:`;
    else
      prompt = `Translate following text from '${from}' to '${to}' without explanation:`;
    const response = await (0, import_obsidian15.requestUrl)({
      throw: false,
      method: "POST",
      url: `https://${this.#host}/v1/chat/completions`,
      body: JSON.stringify({
        "model": this.model,
        "messages": [
          { "role": "user", "content": prompt + "\n" + text2 }
        ],
        "temperature": this.temperature
      }),
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.#api_key}`
      }
    });
    const data = response.json;
    if (response.status !== 200)
      return { status_code: response.status, message: data.error.message };
    const output = data.choices[0].message["content"];
    if (from === "auto") {
      const first_newline = output.indexOf("\n");
      if (first_newline === -1) {
        return {
          status_code: response.status,
          translation: output,
          detected_language: "Detection failed"
        };
      } else {
        return {
          status_code: response.status,
          translation: output.substring(first_newline + 1).trimStart(),
          detected_language: output.substring(0, first_newline).toLowerCase()
        };
      }
    } else {
      return {
        status_code: response.status,
        translation: output
      };
    }
  }
  async service_languages() {
    return {
      status_code: 200,
      languages: ALL_TRANSLATOR_LANGUAGES
    };
  }
  has_autodetect_capability() {
    return true;
  }
};

// src/handlers/fasttext/fasttext.js
var import_fasttext_wasm = __toESM(require_fasttext_wasm());
var fastTextModule = null;
var postRunFunc = null;
var modelFileInWasmFs = "model.bin";
var getFloat32ArrayFromHeap = (len) => {
  const dataBytes = len * Float32Array.BYTES_PER_ELEMENT;
  const dataPtr = fastTextModule._malloc(dataBytes);
  const dataHeap = new Uint8Array(
    fastTextModule.HEAPU8.buffer,
    dataPtr,
    dataBytes
  );
  return {
    "ptr": dataHeap.byteOffset,
    "size": len,
    "buffer": dataHeap.buffer
  };
};
var heapToFloat32 = (r) => new Float32Array(r.buffer, r.ptr, r.size);
var FastText = class _FastText {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async initialize() {
    fastTextModule = await (0, import_fasttext_wasm.default)();
    if (postRunFunc)
      postRunFunc();
    this.f = new fastTextModule.FastText();
  }
  static async create(plugin) {
    try {
      const o = new _FastText(plugin);
      await o.initialize();
      return o;
    } catch (e) {
      return e;
    }
  }
  /**
   * loadModel
   * Loads the model file from the specified url, and returns the
   * corresponding `FastTextModel` object.
   * @param {string}     url
   *     the url of the model file.
   * @return {Promise}   promise object that resolves to a `FastTextModel`
   */
  async loadModel(url) {
    const fastTextNative = this.f;
    try {
      let bytes = await app.vault.adapter.readBinary(`${app.vault.configDir}/plugins/translate/models/fasttext/${url}`);
      const FS = fastTextModule.FS;
      FS.writeFile(modelFileInWasmFs, new Uint8Array(bytes));
      fastTextNative.loadModel(modelFileInWasmFs);
      let model = new FastTextModel(fastTextNative);
      return model;
    } catch (e) {
      throw e;
    }
  }
};
var FastTextModel = class {
  /**
   * `FastTextModel` represents a trained model.
   * @constructor
   * @param {object}       fastTextNative
   *     webassembly object that makes the bridge between js and C++
   */
  constructor(fastTextNative) {
    this.f = fastTextNative;
  }
  /**
   * isQuant
   * @return {bool}   true if the model is quantized
   */
  isQuant() {
    return this.f.isQuant;
  }
  /**
   * getDimension
   * @return {int}    the dimension (size) of a lookup vector (hidden layer)
   */
  getDimension() {
    return this.f.args.dim;
  }
  /**
   * getWordVector
   * @param {string}          word
   * @return {Float32Array}   the vector representation of `word`.
   */
  getWordVector(word) {
    const b = getFloat32ArrayFromHeap(this.getDimension());
    this.f.getWordVector(b, word);
    return heapToFloat32(b);
  }
  /**
   * getSentenceVector
   * @param {string}          text
   * @return {Float32Array}   the vector representation of `text`.
   */
  getSentenceVector(text2) {
    if (text2.indexOf("\n") != -1) {
      "sentence vector processes one line at a time (remove '\\n')";
    }
    text2 += "\n";
    const b = getFloat32ArrayFromHeap(this.getDimension());
    this.f.getSentenceVector(b, text2);
    return heapToFloat32(b);
  }
  /**
   * getNearestNeighbors
   * returns the nearest `k` neighbors of `word`.
   * @param {string}          word
   * @param {int}             k
   * @return {Array.<Pair.<number, string>>}
   *     words and their corresponding cosine similarities.
   */
  getNearestNeighbors(word, k = 10) {
    return this.f.getNN(word, k);
  }
  /**
   * getAnalogies
   * returns the nearest `k` neighbors of the operation
   * `wordA - wordB + wordC`.
   * @param {string}          wordA
   * @param {string}          wordB
   * @param {string}          wordC
   * @param {int}             k
   * @return {Array.<Pair.<number, string>>}
   *     words and their corresponding cosine similarities
   */
  getAnalogies(wordA, wordB, wordC, k) {
    return this.f.getAnalogies(k, wordA, wordB, wordC);
  }
  /**
   * getWordId
   * Given a word, get the word id within the dictionary.
   * Returns -1 if word is not in the dictionary.
   * @return {int}    word id
   */
  getWordId(word) {
    return this.f.getWordId(word);
  }
  /**
   * getSubwordId
   * Given a subword, return the index (within input matrix) it hashes to.
   * @return {int}    subword id
   */
  getSubwordId(subword) {
    return this.f.getSubwordId(subword);
  }
  /**
   * getSubwords
   * returns the subwords and their indicies.
   * @param {string}          word
   * @return {Pair.<Array.<string>, Array.<int>>}
   *     words and their corresponding indicies
   */
  getSubwords(word) {
    return this.f.getSubwords(word);
  }
  /**
   * getInputVector
   * Given an index, get the corresponding vector of the Input Matrix.
   * @param {int}             ind
   * @return {Float32Array}   the vector of the `ind`'th index
   */
  getInputVector(ind) {
    const b = getFloat32ArrayFromHeap(this.getDimension());
    this.f.getInputVector(b, ind);
    return heapToFloat32(b);
  }
  /**
   * predict
   * Given a string, get a list of labels and a list of corresponding
   * probabilities. k controls the number of returned labels.
   * @param {string}          text
   * @param {int}             k, the number of predictions to be returned
   * @param {number}          probability threshold
   * @return {Array.<Pair.<number, string>>}
   *     labels and their probabilities
   */
  predict(text2, k = 1, threshold = 0) {
    return this.f.predict(text2, k, threshold);
  }
  /**
   * getWords
   * Get the entire list of words of the dictionary including the frequency
   * of the individual words. This does not include any subwords. For that
   * please consult the function get_subwords.
   * @return {Pair.<Array.<string>, Array.<int>>}
   *     words and their corresponding frequencies
   */
  getWords() {
    return this.f.getWords();
  }
  /**
   * getLabels
   * Get the entire list of labels of the dictionary including the frequency
   * of the individual labels.
   * @return {Pair.<Array.<string>, Array.<int>>}
   *     labels and their corresponding frequencies
   */
  getLabels() {
    return this.f.getLabels();
  }
  /**
   * getLine
   * Split a line of text into words and labels. Labels must start with
   * the prefix used to create the model (__label__ by default).
   * @param {string}          text
   * @return {Pair.<Array.<string>, Array.<string>>}
   *     words and labels
   */
  getLine(text2) {
    return this.f.getLine(text2);
  }
};

// src/handlers/fasttext.ts
var import_obsidian16 = require("obsidian");
var FastTextDetector = class extends DummyTranslate {
  detector;
  id = "fasttext";
  version;
  status = "";
  data = null;
  default = false;
  setup_service(available_models) {
    if (available_models?.binary) {
      FastText.create().then((ft) => {
        try {
          if (ft instanceof WebAssembly.RuntimeError) {
            this.valid = false;
            new import_obsidian16.Notice(ft.message.match(/\(([^)]+)\)/)[0].slice(1, -1), 4e3);
          } else {
            ft.loadModel(Object.values(available_models.models)[0].name).then((model) => {
              this.detector = model;
              this.validate().then((x) => {
                this.valid = x.valid;
              });
            });
          }
        } catch (e) {
          this.valid = false;
          new import_obsidian16.Notice("Error loading model: " + e, 4e3);
        }
      });
    } else {
      this.valid = false;
    }
  }
  constructor(available_models) {
    super();
    this.setup_service(available_models);
  }
  async service_validate() {
    return { valid: this.has_autodetect_capability() };
  }
  async service_detect(text2) {
    let predictions = this.detector.predict(text2, 5, 0);
    let results = [];
    for (let i = 0; i < predictions.size(); i++)
      results.push({ language: predictions.get(i)[1].replace("__label__", ""), confidence: predictions.get(i)[0] });
    return { status_code: 200, detected_languages: results };
  }
  has_autodetect_capability() {
    return this.detector != null;
  }
};

// src/ui/obsidian-components/SettingItem.svelte
var get_subcontrol_slot_changes = (dirty) => ({});
var get_subcontrol_slot_context = (ctx) => ({});
var get_control_slot_changes = (dirty) => ({});
var get_control_slot_context = (ctx) => ({});
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  child_ctx[11] = i;
  return child_ctx;
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_else_block_1(ctx) {
  let each_1_anchor;
  let each_value_1 = ensure_array_like(
    /*notices*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*notices*/
      8) {
        each_value_1 = ensure_array_like(
          /*notices*/
          ctx2[3]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block4(ctx) {
  let html_tag;
  let t2;
  let each_1_anchor;
  let each_value = ensure_array_like(
    /*notices*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  return {
    c() {
      html_tag = new HtmlTag(false);
      t2 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
      html_tag.a = t2;
    },
    m(target, anchor) {
      html_tag.m(
        /*description*/
        ctx[1],
        target,
        anchor
      );
      insert(target, t2, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*description*/
      2)
        html_tag.p(
          /*description*/
          ctx2[1]
        );
      if (dirty & /*notices*/
      8) {
        each_value = ensure_array_like(
          /*notices*/
          ctx2[3]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        html_tag.d();
        detach(t2);
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let t2;
  let if_block1_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (
      /*notice*/
      ctx2[7].type === "href"
    )
      return create_if_block_5;
    return create_else_block_2;
  }
  let current_block_type = select_block_type_2(ctx, -1);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*idx*/
    ctx[11] < /*notices*/
    ctx[3].length - 1 && create_if_block_4(ctx)
  );
  return {
    c() {
      if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if_block0.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(t2.parentNode, t2);
        }
      }
      if (
        /*idx*/
        ctx2[11] < /*notices*/
        ctx2[3].length - 1
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_4(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block1_anchor);
      }
      if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function create_else_block_2(ctx) {
  let span;
  let raw_value = (
    /*notice*/
    ctx[7].text + ""
  );
  let span_class_value;
  return {
    c() {
      span = element("span");
      attr(span, "class", span_class_value = /*notice*/
      ctx[7].style);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      span.innerHTML = raw_value;
    },
    p(ctx2, dirty) {
      if (dirty & /*notices*/
      8 && raw_value !== (raw_value = /*notice*/
      ctx2[7].text + ""))
        span.innerHTML = raw_value;
      ;
      if (dirty & /*notices*/
      8 && span_class_value !== (span_class_value = /*notice*/
      ctx2[7].style)) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_5(ctx) {
  let a;
  let t_value = (
    /*notice*/
    ctx[7].text + ""
  );
  let t2;
  let a_href_value;
  return {
    c() {
      a = element("a");
      t2 = text(t_value);
      attr(a, "href", a_href_value = /*notice*/
      ctx[7].url);
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*notices*/
      8 && t_value !== (t_value = /*notice*/
      ctx2[7].text + ""))
        set_data(t2, t_value);
      if (dirty & /*notices*/
      8 && a_href_value !== (a_href_value = /*notice*/
      ctx2[7].url)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
    }
  };
}
function create_if_block_4(ctx) {
  let br;
  return {
    c() {
      br = element("br");
    },
    m(target, anchor) {
      insert(target, br, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(br);
      }
    }
  };
}
function create_each_block_1(ctx) {
  let if_block_anchor;
  let if_block = (
    /*notice*/
    ctx[7] && create_if_block_3(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*notice*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_12(ctx) {
  let br;
  let t2;
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*notice*/
      ctx2[7].type === "href"
    )
      return create_if_block_2;
    return create_else_block2;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      br = element("br");
      t2 = space();
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      insert(target, br, anchor);
      insert(target, t2, anchor);
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(br);
        detach(t2);
        detach(if_block_anchor);
      }
      if_block.d(detaching);
    }
  };
}
function create_else_block2(ctx) {
  let span;
  let html_tag;
  let raw_value = (
    /*notice*/
    ctx[7].text + ""
  );
  let t2;
  let span_class_value;
  return {
    c() {
      span = element("span");
      html_tag = new HtmlTag(false);
      t2 = space();
      html_tag.a = t2;
      attr(span, "class", span_class_value = /*notice*/
      ctx[7].style);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      html_tag.m(raw_value, span);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & /*notices*/
      8 && raw_value !== (raw_value = /*notice*/
      ctx2[7].text + ""))
        html_tag.p(raw_value);
      if (dirty & /*notices*/
      8 && span_class_value !== (span_class_value = /*notice*/
      ctx2[7].style)) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block_2(ctx) {
  let a;
  let t0_value = (
    /*notice*/
    ctx[7].text + ""
  );
  let t0;
  let t1;
  let a_href_value;
  return {
    c() {
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      attr(a, "href", a_href_value = /*notice*/
      ctx[7].url);
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t0);
      append(a, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*notices*/
      8 && t0_value !== (t0_value = /*notice*/
      ctx2[7].text + ""))
        set_data(t0, t0_value);
      if (dirty & /*notices*/
      8 && a_href_value !== (a_href_value = /*notice*/
      ctx2[7].url)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(a);
      }
    }
  };
}
function create_each_block4(ctx) {
  let if_block_anchor;
  let if_block = (
    /*notice*/
    ctx[7] && create_if_block_12(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*notice*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_12(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment10(ctx) {
  let div5;
  let div3;
  let div1;
  let div0;
  let t0;
  let div2;
  let t1;
  let div4;
  let div5_class_value;
  let div5_transition;
  let t2;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*description*/
      ctx2[1]
    )
      return create_if_block4;
    return create_else_block_1;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  const control_slot_template = (
    /*#slots*/
    ctx[6].control
  );
  const control_slot = create_slot(
    control_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_control_slot_context
  );
  const subcontrol_slot_template = (
    /*#slots*/
    ctx[6].subcontrol
  );
  const subcontrol_slot = create_slot(
    subcontrol_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    get_subcontrol_slot_context
  );
  return {
    c() {
      div5 = element("div");
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      div2 = element("div");
      if_block.c();
      t1 = space();
      div4 = element("div");
      if (control_slot)
        control_slot.c();
      t2 = space();
      if (subcontrol_slot)
        subcontrol_slot.c();
      attr(div1, "class", "setting-item-name");
      attr(div2, "class", "setting-item-description");
      attr(div3, "class", "setting-item-info");
      attr(div4, "class", "setting-item-control");
      attr(div5, "class", div5_class_value = /*$$props*/
      ctx[4].class + " setting-item");
      toggle_class(
        div5,
        "mod-dropdown",
        /*type*/
        ctx[2] === "dropdown"
      );
      toggle_class(
        div5,
        "mod-toggle",
        /*type*/
        ctx[2] === "toggle"
      );
      toggle_class(
        div5,
        "mod-slider",
        /*type*/
        ctx[2] === "slider"
      );
      toggle_class(
        div5,
        "setting-item-heading",
        /*type*/
        ctx[2] === "heading"
      );
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div3);
      append(div3, div1);
      append(div1, div0);
      div0.innerHTML = /*name*/
      ctx[0];
      append(div3, t0);
      append(div3, div2);
      if_block.m(div2, null);
      append(div5, t1);
      append(div5, div4);
      if (control_slot) {
        control_slot.m(div4, null);
      }
      insert(target, t2, anchor);
      if (subcontrol_slot) {
        subcontrol_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*name*/
      1)
        div0.innerHTML = /*name*/
        ctx2[0];
      ;
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div2, null);
        }
      }
      if (control_slot) {
        if (control_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            control_slot,
            control_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              control_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_control_slot_changes
            ),
            get_control_slot_context
          );
        }
      }
      if (!current || dirty & /*$$props*/
      16 && div5_class_value !== (div5_class_value = /*$$props*/
      ctx2[4].class + " setting-item")) {
        attr(div5, "class", div5_class_value);
      }
      if (!current || dirty & /*$$props, type*/
      20) {
        toggle_class(
          div5,
          "mod-dropdown",
          /*type*/
          ctx2[2] === "dropdown"
        );
      }
      if (!current || dirty & /*$$props, type*/
      20) {
        toggle_class(
          div5,
          "mod-toggle",
          /*type*/
          ctx2[2] === "toggle"
        );
      }
      if (!current || dirty & /*$$props, type*/
      20) {
        toggle_class(
          div5,
          "mod-slider",
          /*type*/
          ctx2[2] === "slider"
        );
      }
      if (!current || dirty & /*$$props, type*/
      20) {
        toggle_class(
          div5,
          "setting-item-heading",
          /*type*/
          ctx2[2] === "heading"
        );
      }
      if (subcontrol_slot) {
        if (subcontrol_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            subcontrol_slot,
            subcontrol_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              subcontrol_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              get_subcontrol_slot_changes
            ),
            get_subcontrol_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(control_slot, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div5_transition)
            div5_transition = create_bidirectional_transition(div5, slide, {}, true);
          div5_transition.run(1);
        });
      }
      transition_in(subcontrol_slot, local);
      current = true;
    },
    o(local) {
      transition_out(control_slot, local);
      if (local) {
        if (!div5_transition)
          div5_transition = create_bidirectional_transition(div5, slide, {}, false);
        div5_transition.run(0);
      }
      transition_out(subcontrol_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
        detach(t2);
      }
      if_block.d();
      if (control_slot)
        control_slot.d(detaching);
      if (detaching && div5_transition)
        div5_transition.end();
      if (subcontrol_slot)
        subcontrol_slot.d(detaching);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { name } = $$props;
  let { description = null } = $$props;
  let { type = "" } = $$props;
  let { notices = [] } = $$props;
  $$self.$$set = ($$new_props) => {
    $$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("name" in $$new_props)
      $$invalidate(0, name = $$new_props.name);
    if ("description" in $$new_props)
      $$invalidate(1, description = $$new_props.description);
    if ("type" in $$new_props)
      $$invalidate(2, type = $$new_props.type);
    if ("notices" in $$new_props)
      $$invalidate(3, notices = $$new_props.notices);
    if ("$$scope" in $$new_props)
      $$invalidate(5, $$scope = $$new_props.$$scope);
  };
  $$props = exclude_internal_props($$props);
  return [name, description, type, notices, $$props, $$scope, slots];
}
var SettingItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, {
      name: 0,
      description: 1,
      type: 2,
      notices: 3
    });
  }
};
var SettingItem_default = SettingItem;

// src/ui/obsidian-components/View.svelte
var get_view_slot_changes = (dirty) => ({ class: dirty & /*$$props*/
1 });
var get_view_slot_context = (ctx) => ({ class: (
  /*$$props*/
  ctx[0].class
) });
var get_header_slot_changes = (dirty) => ({ class: dirty & /*$$props*/
1 });
var get_header_slot_context = (ctx) => ({ class: (
  /*$$props*/
  ctx[0].class
) });
function create_fragment11(ctx) {
  let t2;
  let current;
  const header_slot_template = (
    /*#slots*/
    ctx[2].header
  );
  const header_slot = create_slot(
    header_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    get_header_slot_context
  );
  const view_slot_template = (
    /*#slots*/
    ctx[2].view
  );
  const view_slot = create_slot(
    view_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    get_view_slot_context
  );
  return {
    c() {
      if (header_slot)
        header_slot.c();
      t2 = space();
      if (view_slot)
        view_slot.c();
    },
    m(target, anchor) {
      if (header_slot) {
        header_slot.m(target, anchor);
      }
      insert(target, t2, anchor);
      if (view_slot) {
        view_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (header_slot) {
        if (header_slot.p && (!current || dirty & /*$$scope, $$props*/
        3)) {
          update_slot_base(
            header_slot,
            header_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              header_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              get_header_slot_changes
            ),
            get_header_slot_context
          );
        }
      }
      if (view_slot) {
        if (view_slot.p && (!current || dirty & /*$$scope, $$props*/
        3)) {
          update_slot_base(
            view_slot,
            view_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              view_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              get_view_slot_changes
            ),
            get_view_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(header_slot, local);
      transition_in(view_slot, local);
      current = true;
    },
    o(local) {
      transition_out(header_slot, local);
      transition_out(view_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      if (header_slot)
        header_slot.d(detaching);
      if (view_slot)
        view_slot.d(detaching);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("$$scope" in $$new_props)
      $$invalidate(1, $$scope = $$new_props.$$scope);
  };
  $$props = exclude_internal_props($$props);
  return [$$props, $$scope, slots];
}
var View = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, {});
  }
};
var View_default = View;

// src/ui/modals/switch-service.ts
var import_obsidian17 = require("obsidian");
var SwitchService = class extends import_obsidian17.FuzzySuggestModal {
  plugin;
  options;
  callback;
  constructor(app2, plugin, callback) {
    super(app2);
    this.plugin = plugin;
    this.options = get_store_value(available_translator_services).map((service) => {
      return { "value": service, "label": SERVICES_INFO[service].display_name };
    }).sort((a, b) => a.label.localeCompare(b.label));
    this.setPlaceholder("Select a translation service");
    this.callback = callback;
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item.label;
  }
  async onChooseItem(item) {
    this.callback(item.value);
    this.close();
  }
};

// src/ui/modals/translate.ts
var import_obsidian19 = require("obsidian");

// src/helpers.ts
var import_obsidian18 = require("obsidian");
async function translate_file(plugin, file, language_to, replace_original = false, options) {
  if (!file)
    return { status_code: 400, message: "No file was selected" };
  const file_content = await plugin.app.vault.read(file);
  if (!file_content.trim()) {
    return { status_code: 400, message: "Selected file is empty" };
  }
  let paragraphs = file_content.split("\n\n");
  let translated_text = [];
  for (let paragraph of paragraphs) {
    if (paragraph.trim().length === 0) {
      translated_text.push(paragraph);
    } else {
      const output = await plugin.translator.translate(paragraph, "auto", language_to, options);
      if (output.status_code !== 200) {
        output.translation = translated_text.join("\n\n");
        return output;
      }
      translated_text.push(output.translation);
    }
  }
  if (replace_original) {
    await plugin.app.vault.modify(file, translated_text.join("\n\n"));
  } else {
    let filename = file?.name.replace(/\.[^/.]+$/, "");
    const filename_translation = (await plugin.translator.translate(filename, "auto", language_to, options)).translation;
    const translated_filename = !filename_translation || filename_translation === filename ? `[${language_to}] ${filename}` : filename_translation;
    const translated_document = translated_text.join("\n\n");
    const translated_document_path = (file.parent.path === "/" ? "" : file.parent.path + "/") + translated_filename + ".md";
    let existing_file = plugin.app.vault.getAbstractFileByPath(translated_document_path);
    if (existing_file && existing_file instanceof import_obsidian18.TFile) {
      await plugin.app.vault.modify(existing_file, translated_document);
    } else {
      existing_file = await plugin.app.vault.create(translated_document_path, translated_document);
    }
    const leaf = plugin.app.workspace.getLeaf(false);
    plugin.app.workspace.setActiveLeaf(leaf, { focus: true });
    await leaf.openFile(existing_file, { eState: { focus: true } });
  }
  return {
    status_code: 200,
    translation: translated_text.join("\n\n")
  };
}
async function translate_selection(plugin, editor, language_to, options, handle_text = "replace") {
  if (editor.getSelection().length === 0) {
    plugin.message_queue("Selection is empty");
    return;
  }
  let text2 = editor.getSelection();
  let results = await plugin.translator.translate(text2, "auto", language_to, options);
  if (results.translation) {
    if (handle_text === "replace")
      editor.replaceSelection(results.translation);
    else if (handle_text === "below")
      editor.replaceSelection(text2 + "\n" + results.translation);
    else if (handle_text === "clipboard")
      await navigator.clipboard.writeText(results.translation);
  }
  if (results.message)
    plugin.message_queue(results.message);
  return results;
}
async function detect_selection(plugin, editor) {
  let selection = editor.getSelection();
  if (editor.getSelection().length === 0) {
    plugin.message_queue("Selection is empty");
    return;
  }
  let results;
  if (plugin.detector && plugin.detector.valid && plugin.detector.default)
    results = await plugin.detector.detect(selection);
  else
    results = await plugin.translator.detect(selection);
  if (results.message)
    new import_obsidian18.Notice(results.message, 4e3);
  if (results.status_code === 200) {
    const detected_languages = results.detected_languages.sort((a, b) => {
      return b.confidence - a.confidence;
    });
    if (detected_languages) {
      const alternatives = detected_languages.map((result) => {
        return `${t(result.language)}` + (result.confidence !== void 0 ? ` [${(result.confidence * 100).toFixed(2)}%]` : "");
      });
      new import_obsidian18.Notice(`Detected languages:
	${alternatives.join("\n	")}`, 0);
    }
  }
}

// src/ui/modals/translate.ts
var TranslateModal = class extends import_obsidian19.FuzzySuggestModal {
  plugin;
  options;
  translation_type;
  file;
  settings;
  // FIXME?: Pass the editor context if provided
  constructor(app2, plugin, translation_type, file = null) {
    super(app2);
    this.plugin = plugin;
    this.translation_type = translation_type;
    this.file = file;
    const loaded_available_languages = get_store_value(available_languages);
    const loaded_all_languages = get_store_value(all_languages);
    this.settings = get_store_value(settings);
    this.options = Array.from(loaded_available_languages).map((locale2) => {
      return {
        value: locale2,
        label: loaded_all_languages.get(locale2)
      };
    }).sort((a, b) => {
      return a.label.localeCompare(b.label);
    });
    let pinned_languages = [];
    if (this.settings.target_language_preference === "last") {
      pinned_languages = this.settings.last_used_target_languages;
    } else if (this.settings.target_language_preference === "specific") {
      pinned_languages = [this.settings.default_target_language];
    } else if (this.settings.target_language_preference === "display") {
      pinned_languages = [this.plugin.current_language];
    }
    pinned_languages = pinned_languages.filter((x) => loaded_available_languages.contains(x));
    let top_languages = pinned_languages.map((x) => {
      return {
        value: x,
        label: loaded_all_languages.get(x)
      };
    });
    this.options = [...top_languages, ...this.options.filter((x) => !pinned_languages.contains(x.value))];
    this.setPlaceholder("Translate to...");
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item.label;
  }
  async onChooseItem(item) {
    let output;
    if (this.translation_type.contains("file")) {
      output = await translate_file(
        this.plugin,
        this.file || this.app.workspace.getActiveFile(),
        item.value,
        this.translation_type === "file-current",
        {
          apply_glossary: this.settings.apply_glossary
        }
      );
    } else if (this.translation_type === "selection") {
      const loaded_settings = get_store_value(settings);
      let editor = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView).editor;
      output = await translate_selection(this.plugin, editor, item.value, {
        apply_glossary: this.settings.apply_glossary
      }, loaded_settings.translation_command_action);
    }
    if (output.status_code === 200) {
      settings.update((x) => {
        if (!x.last_used_target_languages.contains(item.value)) {
          x.last_used_target_languages = [item.value, ...x.last_used_target_languages].slice(0, 3);
        } else {
          x.last_used_target_languages = x.last_used_target_languages.filter((x2) => x2 !== item.value);
          x.last_used_target_languages = [item.value, ...x.last_used_target_languages];
        }
        return x;
      });
    } else if (output.message) {
      this.plugin.message_queue(output.message);
    }
  }
};

// src/ui/modals/password_modal.ts
var import_obsidian21 = require("obsidian");

// src/ui/modals/PasswordModalView.svelte
var import_obsidian20 = require("obsidian");
function create_fragment12(ctx) {
  let div;
  let b0;
  let t1;
  let input0;
  let t2;
  let b1;
  let t4;
  let input1;
  let t5;
  let button;
  let current;
  let mounted;
  let dispose;
  input0 = new Input_default({
    props: {
      val: (
        /*input_1*/
        ctx[0]
      ),
      type: "password",
      placeholder: (
        /*current_password*/
        ctx[5] ? "(unchanged)" : "Type here..."
      ),
      onChange: (
        /*func*/
        ctx[7]
      )
    }
  });
  input1 = new Input_default({
    props: {
      val: (
        /*input_2*/
        ctx[1]
      ),
      type: "password",
      placeholder: (
        /*current_password*/
        ctx[5] ? "(unchanged)" : "Type here..."
      ),
      onChange: (
        /*func_1*/
        ctx[8]
      ),
      valid: (
        /*valid*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      div = element("div");
      b0 = element("b");
      b0.textContent = "Password:";
      t1 = space();
      create_component(input0.$$.fragment);
      t2 = space();
      b1 = element("b");
      b1.textContent = "Confirm password:";
      t4 = space();
      create_component(input1.$$.fragment);
      t5 = space();
      button = element("button");
      button.textContent = "Submit";
      attr(div, "class", "translator-password-modal-inputs");
      attr(button, "class", "translator-password-modal-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, b0);
      append(div, t1);
      mount_component(input0, div, null);
      append(div, t2);
      append(div, b1);
      append(div, t4);
      mount_component(input1, div, null);
      insert(target, t5, anchor);
      insert(target, button, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const input0_changes = {};
      if (dirty & /*input_1*/
      1)
        input0_changes.val = /*input_1*/
        ctx2[0];
      if (dirty & /*input_1*/
      1)
        input0_changes.onChange = /*func*/
        ctx2[7];
      input0.$set(input0_changes);
      const input1_changes = {};
      if (dirty & /*input_2*/
      2)
        input1_changes.val = /*input_2*/
        ctx2[1];
      if (dirty & /*input_2*/
      2)
        input1_changes.onChange = /*func_1*/
        ctx2[8];
      if (dirty & /*valid*/
      4)
        input1_changes.valid = /*valid*/
        ctx2[2];
      input1.$set(input1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input0.$$.fragment, local);
      transition_in(input1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input0.$$.fragment, local);
      transition_out(input1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t5);
        detach(button);
      }
      destroy_component(input0);
      destroy_component(input1);
      mounted = false;
      dispose();
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let $password;
  let $settings;
  component_subscribe($$self, password, ($$value) => $$invalidate(3, $password = $$value));
  component_subscribe($$self, settings, ($$value) => $$invalidate(4, $settings = $$value));
  let valid = null;
  let input_1 = "";
  let input_2 = "";
  let current_password = $password;
  const dispatch2 = createEventDispatcher();
  const func = (e) => {
    $$invalidate(0, input_1 = e.target.value);
  };
  const func_1 = (e) => {
    $$invalidate(1, input_2 = e.target.value);
  };
  const click_handler = async () => {
    if (valid) {
      for (const service of Object.keys($settings.service_settings)) {
        let api_key = $settings.service_settings[service].api_key;
        if (api_key) {
          if (current_password)
            api_key = await aesGcmDecrypt(api_key, current_password);
          set_store_value(settings, $settings.service_settings[service].api_key = await aesGcmEncrypt(api_key, input_1), $settings);
        }
      }
      app.saveLocalStorage("password", input_1);
      set_store_value(password, $password = input_1, $password);
      dispatch2("close");
    } else if (current_password && !input_1 && !input_2) {
      dispatch2("close");
    } else {
      new import_obsidian20.Notice("Passwords do not match.");
    }
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*input_1, input_2*/
    3) {
      $:
        $$invalidate(2, valid = input_1 && input_2 ? input_1 === input_2 : null);
    }
  };
  return [
    input_1,
    input_2,
    valid,
    $password,
    $settings,
    current_password,
    dispatch2,
    func,
    func_1,
    click_handler
  ];
}
var PasswordModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, {});
  }
};
var PasswordModalView_default = PasswordModalView;

// src/ui/modals/password_modal.ts
var PasswordModal = class extends import_obsidian21.Modal {
  view;
  plugin;
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
    this.titleEl.innerText = "Set new password";
  }
  async onOpen() {
    this.view = new PasswordModalView_default({
      target: this.contentEl
    });
    this.view.$on("close", async (e) => {
      super.close();
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/ui/modals/password_request_modal.ts
var import_obsidian23 = require("obsidian");

// src/ui/modals/PasswordRequestModalView.svelte
var import_obsidian22 = require("obsidian");
function create_fragment13(ctx) {
  let div1;
  let t4;
  let div2;
  let b;
  let t6;
  let input_1;
  let t7;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      div1.innerHTML = `<h3 style="text-align: center">Enter your password <div style="font-weight: 100; font-size: 15px; letter-spacing: 0.7px">(Obsidian Translate)</div></h3>
	Recover encrypted API keys from your settings by entering your password.
	<br/><br/>
	You can reopen this modal via the plugin settings at any time.`;
      t4 = space();
      div2 = element("div");
      b = element("b");
      b.textContent = "Password:";
      t6 = space();
      input_1 = element("input");
      t7 = space();
      button = element("button");
      button.textContent = "Submit";
      set_style(div1, "margin-bottom", "32px");
      attr(input_1, "type", "password");
      input_1.value = /*input*/
      ctx[0];
      attr(input_1, "placeholder", "Type here...");
      toggle_class(
        input_1,
        "translator-input-fail",
        /*invalid*/
        ctx[1]
      );
      attr(div2, "class", "translator-password-modal-inputs");
      attr(button, "class", "translator-password-modal-button");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      insert(target, t4, anchor);
      insert(target, div2, anchor);
      append(div2, b);
      append(div2, t6);
      append(div2, input_1);
      insert(target, t7, anchor);
      insert(target, button, anchor);
      if (!mounted) {
        dispose = [
          listen(
            input_1,
            "keyup",
            /*keyup_handler*/
            ctx[4]
          ),
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*input*/
      1 && input_1.value !== /*input*/
      ctx2[0]) {
        input_1.value = /*input*/
        ctx2[0];
      }
      if (dirty & /*invalid*/
      2) {
        toggle_class(
          input_1,
          "translator-input-fail",
          /*invalid*/
          ctx2[1]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t4);
        detach(div2);
        detach(t7);
        detach(button);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let $passwords_are_encrypted;
  let $password;
  let $settings;
  component_subscribe($$self, passwords_are_encrypted, ($$value) => $$invalidate(7, $passwords_are_encrypted = $$value));
  component_subscribe($$self, password, ($$value) => $$invalidate(8, $password = $$value));
  component_subscribe($$self, settings, ($$value) => $$invalidate(9, $settings = $$value));
  let { plugin } = $$props;
  let input = "";
  let invalid = false;
  const active_services = plugin.reactivity.getAllServices();
  const dispatch2 = createEventDispatcher();
  async function test_password() {
    try {
      let decrypted_keys = /* @__PURE__ */ new Map();
      for (const service of Object.keys(active_services)) {
        const key = await aesGcmDecrypt($settings.service_settings[service].api_key, input);
        decrypted_keys.set(service, key);
        if (key && key.endsWith("==")) {
          new import_obsidian22.Notice("Password is invalid, keys are still encrypted");
          $$invalidate(1, invalid = true);
          return;
        }
      }
      app.saveLocalStorage("password", input);
      set_store_value(password, $password = input, $password);
      for (const [service, key] of decrypted_keys.entries())
        active_services[service].api_key = key;
      set_store_value(passwords_are_encrypted, $passwords_are_encrypted = false, $passwords_are_encrypted);
      dispatch2("close");
    } catch (e) {
      new import_obsidian22.Notice("Password is invalid, keys are still encrypted");
    }
  }
  const keyup_handler = (e) => {
    $$invalidate(1, invalid = false);
    if (e.key === "Enter")
      test_password();
    else
      $$invalidate(0, input = e.target.value);
  };
  const click_handler = async () => await test_password();
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(3, plugin = $$props2.plugin);
  };
  return [input, invalid, test_password, plugin, keyup_handler, click_handler];
}
var PasswordRequestModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, { plugin: 3 });
  }
};
var PasswordRequestModalView_default = PasswordRequestModalView;

// src/ui/modals/password_request_modal.ts
var PasswordModal2 = class extends import_obsidian23.Modal {
  view;
  plugin;
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  async onOpen() {
    this.view = new PasswordRequestModalView_default({
      target: this.contentEl,
      props: {
        plugin: this.plugin
      }
    });
    this.view.$on("close", async (e) => {
      super.close();
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/ui/modals/confirmation_modal.ts
var import_obsidian24 = require("obsidian");

// src/ui/modals/ConfirmationModalView.svelte
function create_fragment14(ctx) {
  let h3;
  let t0;
  let html_tag;
  let t1;
  let div;
  let button0;
  let t3;
  let button1;
  let mounted;
  let dispose;
  return {
    c() {
      h3 = element("h3");
      t0 = space();
      html_tag = new HtmlTag(false);
      t1 = space();
      div = element("div");
      button0 = element("button");
      button0.textContent = "Cancel";
      t3 = space();
      button1 = element("button");
      button1.textContent = "Confirm";
      set_style(h3, "text-align", "center");
      html_tag.a = t1;
      attr(button1, "class", "translator-fail");
      attr(div, "class", "translator-confirmation-buttons");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      h3.innerHTML = /*title*/
      ctx[1];
      insert(target, t0, anchor);
      html_tag.m(
        /*description*/
        ctx[2],
        target,
        anchor
      );
      insert(target, t1, anchor);
      insert(target, div, anchor);
      append(div, button0);
      append(div, t3);
      append(div, button1);
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[4]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*title*/
      2)
        h3.innerHTML = /*title*/
        ctx2[1];
      ;
      if (dirty & /*description*/
      4)
        html_tag.p(
          /*description*/
          ctx2[2]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(h3);
        detach(t0);
        html_tag.d();
        detach(t1);
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { callback } = $$props;
  let { title } = $$props;
  let { description } = $$props;
  const click_handler = async () => dispatch2("close");
  const click_handler_1 = async () => {
    await callback();
    dispatch2("close");
  };
  $$self.$$set = ($$props2) => {
    if ("callback" in $$props2)
      $$invalidate(0, callback = $$props2.callback);
    if ("title" in $$props2)
      $$invalidate(1, title = $$props2.title);
    if ("description" in $$props2)
      $$invalidate(2, description = $$props2.description);
  };
  return [callback, title, description, dispatch2, click_handler, click_handler_1];
}
var ConfirmationModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, { callback: 0, title: 1, description: 2 });
  }
};
var ConfirmationModalView_default = ConfirmationModalView;

// src/ui/modals/confirmation_modal.ts
var PasswordModal3 = class extends import_obsidian24.Modal {
  view;
  plugin;
  callback;
  title;
  description;
  constructor(plugin, title, description, callback) {
    super(plugin.app);
    this.plugin = plugin;
    this.title = title;
    this.description = description;
    this.callback = callback;
  }
  async onOpen() {
    this.view = new ConfirmationModalView_default({
      target: this.contentEl,
      props: {
        callback: this.callback,
        title: this.title,
        description: this.description
      }
    });
    this.view.$on("close", async (e) => {
      super.close();
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/ui/modals/view_appearance_modal.ts
var import_obsidian25 = require("obsidian");

// src/ui/modals/ViewAppearanceModalView.svelte
function create_else_block3(ctx) {
  let div;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_42(ctx) {
  let div3;
  let div2;
  let t3;
  let toggle;
  let div3_intro;
  let div3_outro;
  let current;
  toggle = new Toggle_default({
    props: {
      value: (
        /*show_attribution*/
        ctx[4]
      ),
      onChange: (
        /*func_5*/
        ctx[15]
      )
    }
  });
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">Attribution info</div> <div class="setting-item-description">Add attribution to the bottom of the view</div>`;
      t3 = space();
      create_component(toggle.$$.fragment);
      attr(div2, "class", "setting-item-info");
      attr(div3, "class", "translator-flex-row-element");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div3, t3);
      mount_component(toggle, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*show_attribution*/
      16)
        toggle_changes.value = /*show_attribution*/
        ctx2[4];
      if (dirty & /*show_attribution*/
      16)
        toggle_changes.onChange = /*func_5*/
        ctx2[15];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (div3_outro)
            div3_outro.end(1);
          div3_intro = create_in_transition(div3, slide, { delay: 325, duration: 250 });
          div3_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      if (div3_intro)
        div3_intro.invalidate();
      if (local) {
        div3_outro = create_out_transition(div3, slide, { duration: 250 });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(toggle);
      if (detaching && div3_outro)
        div3_outro.end();
    }
  };
}
function create_if_block_32(ctx) {
  let div5;
  let div3;
  let t12;
  let div4;
  let draganddrop0;
  let t13;
  let draganddrop1;
  let div5_intro;
  let div5_outro;
  let current;
  draganddrop0 = new DragAndDrop_default({
    props: {
      items: [],
      role: "trashcan",
      class: "translator-dnd-trashcan",
      itemstyle: "translator-dnd-trashcan-item",
      tooltip: "Delete action"
    }
  });
  draganddrop1 = new DragAndDrop_default({
    props: {
      items: QUICK_ACTIONS_BUTTONS,
      role: "source",
      class: "translator-dnd-source translator-flex-row-element",
      itemstyle: "translator-dnd-source-item"
    }
  });
  return {
    c() {
      div5 = element("div");
      div3 = element("div");
      div3.innerHTML = `<div class="setting-item-info"><div class="setting-item-name">Quick settings</div> <div class="setting-item-description">Quickly change translator&#39;s settings<br/> <span>\u24D8 Add these <b>quick actions</b> to the view by dragging and dropping
							<b style="color: var(--color-green)">green actions</b> to one of the two
							<b style="color: var(--color-accent)">designated areas</b>.
							Actions can be removed by dragging them to the <b style="color: var(--color-red)">red area</b></span></div></div>`;
      t12 = space();
      div4 = element("div");
      create_component(draganddrop0.$$.fragment);
      t13 = space();
      create_component(draganddrop1.$$.fragment);
      attr(div3, "class", "translator-flex-row-element");
      attr(div4, "class", "translator-dnd-header");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div3);
      append(div5, t12);
      append(div5, div4);
      mount_component(draganddrop0, div4, null);
      append(div4, t13);
      mount_component(draganddrop1, div4, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(draganddrop0.$$.fragment, local);
      transition_in(draganddrop1.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (div5_outro)
            div5_outro.end(1);
          div5_intro = create_in_transition(div5, slide, { delay: 325, duration: 250 });
          div5_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(draganddrop0.$$.fragment, local);
      transition_out(draganddrop1.$$.fragment, local);
      if (div5_intro)
        div5_intro.invalidate();
      if (local) {
        div5_outro = create_out_transition(div5, slide, { duration: 250 });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
      destroy_component(draganddrop0);
      destroy_component(draganddrop1);
      if (detaching && div5_outro)
        div5_outro.end();
    }
  };
}
function create_if_block_22(ctx) {
  let div3;
  let div2;
  let t6;
  let dropdown;
  let div3_intro;
  let div3_outro;
  let current;
  dropdown = new Dropdown_default({
    props: {
      class: "translator-select",
      value: (
        /*view_mode*/
        ctx[0]
      ),
      options: [
        { value: 0, text: "Automatic" },
        { value: 1, text: "Vertical" },
        { value: 2, text: "Mixed" },
        { value: 3, text: "Horizontal" }
      ],
      onChange: (
        /*func_4*/
        ctx[14]
      )
    }
  });
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">Layout</div> <div class="setting-item-description">Determine the layout of the translator<br/> <span class="translator-info-text">\`Automatic\` layout will adapt the layout<br/>based on the width and height of the view</span></div>`;
      t6 = space();
      create_component(dropdown.$$.fragment);
      attr(div2, "class", "setting-item-info");
      attr(div3, "class", "translator-flex-row-element");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div3, t6);
      mount_component(dropdown, div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*view_mode*/
      1)
        dropdown_changes.value = /*view_mode*/
        ctx2[0];
      if (dirty & /*view_mode*/
      1)
        dropdown_changes.onChange = /*func_4*/
        ctx2[14];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (div3_outro)
            div3_outro.end(1);
          div3_intro = create_in_transition(div3, slide, { delay: 325, duration: 250 });
          div3_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      if (div3_intro)
        div3_intro.invalidate();
      if (local) {
        div3_outro = create_out_transition(div3, slide, { duration: 250 });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(dropdown);
      if (detaching && div3_outro)
        div3_outro.end();
    }
  };
}
function create_if_block_13(ctx) {
  let div5;
  let div3;
  let t12;
  let div4;
  let draganddrop0;
  let t13;
  let draganddrop1;
  let div5_intro;
  let div5_outro;
  let current;
  draganddrop0 = new DragAndDrop_default({
    props: {
      items: [],
      role: "trashcan",
      class: "translator-dnd-trashcan",
      itemstyle: "translator-dnd-trashcan-item",
      tooltip: "Delete action"
    }
  });
  draganddrop1 = new DragAndDrop_default({
    props: {
      items: QUICK_SETTINGS_BUTTONS,
      role: "source",
      class: "translator-dnd-source translator-flex-row-element",
      itemstyle: "translator-dnd-source-item"
    }
  });
  return {
    c() {
      div5 = element("div");
      div3 = element("div");
      div3.innerHTML = `<div class="setting-item-info"><div class="setting-item-name">Quick settings</div> <div class="setting-item-description">Quickly change translator&#39;s settings<br/> <span>\u24D8 Add these <b>quick settings</b> to the view by dragging and dropping
								<b style="color: var(--color-green)">green actions</b> to one of the two
								<b style="color: var(--color-accent)">designated areas</b>.
								Settings can be removed by dragging them to the <b style="color: var(--color-red)">red area</b></span></div></div>`;
      t12 = space();
      div4 = element("div");
      create_component(draganddrop0.$$.fragment);
      t13 = space();
      create_component(draganddrop1.$$.fragment);
      attr(div3, "class", "translator-flex-row-element");
      attr(div4, "class", "translator-dnd-header");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div3);
      append(div5, t12);
      append(div5, div4);
      mount_component(draganddrop0, div4, null);
      append(div4, t13);
      mount_component(draganddrop1, div4, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(draganddrop0.$$.fragment, local);
      transition_in(draganddrop1.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (div5_outro)
            div5_outro.end(1);
          div5_intro = create_in_transition(div5, slide, { delay: 325, duration: 250 });
          div5_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      transition_out(draganddrop0.$$.fragment, local);
      transition_out(draganddrop1.$$.fragment, local);
      if (div5_intro)
        div5_intro.invalidate();
      if (local) {
        div5_outro = create_out_transition(div5, slide, { duration: 250 });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
      destroy_component(draganddrop0);
      destroy_component(draganddrop1);
      if (detaching && div5_outro)
        div5_outro.end();
    }
  };
}
function create_if_block5(ctx) {
  let div1;
  let div0;
  let t0;
  let a;
  let icon;
  let t1;
  let div1_transition;
  let current;
  icon = new Icon_default({ props: { icon: "translate" } });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text("Using\n						");
      a = element("a");
      create_component(icon.$$.fragment);
      t1 = text("\n							Dummy Translate");
      attr(a, "href", "https://www.youtube.com/watch?v=dQw4w9WgXcQ");
      attr(a, "target", "_blank");
      attr(a, "class", "translator-icon-text translator-service-text");
      attr(div0, "class", "translator-attribution-column-text");
      attr(div1, "class", "translator-appearance-modal-attribution translator-attribution-column translator-unfocused-element");
      toggle_class(
        div1,
        "translator-focused-element",
        /*current_editing_mode*/
        ctx[7] === 3
      );
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div0, a);
      mount_component(icon, a, null);
      append(a, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*current_editing_mode*/
      128) {
        toggle_class(
          div1,
          "translator-focused-element",
          /*current_editing_mode*/
          ctx2[7] === 3
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div1_transition)
            div1_transition = create_bidirectional_transition(div1, slide, {}, true);
          div1_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      if (local) {
        if (!div1_transition)
          div1_transition = create_bidirectional_transition(div1, slide, {}, false);
        div1_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      if (detaching && div1_transition)
        div1_transition.end();
    }
  };
}
function create_fragment15(ctx) {
  let div12;
  let div0;
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let t3;
  let div1;
  let current_block_type_index;
  let if_block0;
  let t4;
  let div10;
  let div3;
  let div2;
  let draganddrop0;
  let updating_items;
  let t5;
  let div9;
  let div5;
  let dropdown0;
  let t6;
  let div4;
  let textarea0;
  let t7;
  let draganddrop1;
  let updating_items_1;
  let t8;
  let div6;
  let button4;
  let icon0;
  let t9;
  let button5;
  let icon1;
  let t10;
  let div8;
  let dropdown1;
  let t11;
  let div7;
  let textarea1;
  let t12;
  let draganddrop2;
  let updating_items_2;
  let t13;
  let div9_class_value;
  let div9_resize_listener;
  let t14;
  let div11;
  let button6;
  let t16;
  let button7;
  let current;
  let mounted;
  let dispose;
  button0 = new Button_default({
    props: {
      class: (
        /*current_editing_mode*/
        ctx[7] === 0 ? "translator-focused-button" : ""
      ),
      text: "Add Quicksettings",
      onClick: (
        /*func*/
        ctx[10]
      )
    }
  });
  button1 = new Button_default({
    props: {
      class: (
        /*current_editing_mode*/
        ctx[7] === 1 ? "translator-focused-button" : ""
      ),
      text: "Alter layout",
      onClick: (
        /*func_1*/
        ctx[11]
      )
    }
  });
  button2 = new Button_default({
    props: {
      class: (
        /*current_editing_mode*/
        ctx[7] === 2 ? "translator-focused-button" : ""
      ),
      text: "Add Quickactions",
      onClick: (
        /*func_2*/
        ctx[12]
      )
    }
  });
  button3 = new Button_default({
    props: {
      class: (
        /*current_editing_mode*/
        ctx[7] === 3 ? "translator-focused-button" : ""
      ),
      text: "Show attribution info",
      onClick: (
        /*func_3*/
        ctx[13]
      )
    }
  });
  const if_block_creators = [
    create_if_block_13,
    create_if_block_22,
    create_if_block_32,
    create_if_block_42,
    create_else_block3
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*current_editing_mode*/
      ctx2[7] === 0
    )
      return 0;
    if (
      /*current_editing_mode*/
      ctx2[7] === 1
    )
      return 1;
    if (
      /*current_editing_mode*/
      ctx2[7] === 2
    )
      return 2;
    if (
      /*current_editing_mode*/
      ctx2[7] === 3
    )
      return 3;
    return 4;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function draganddrop0_items_binding(value) {
    ctx[16](value);
  }
  let draganddrop0_props = {
    dragDisabled: (
      /*current_editing_mode*/
      ctx[7] !== 0
    ),
    itemstyle: "nav-action-button translator-quicksetting-button",
    class: `translator-appearance-modal-view-header translator-textarea-quickbuttons-editing
								${/*current_editing_mode*/
    ctx[7] === 0 ? "translator-focused-element" : ""}`
  };
  if (
    /*top_buttons*/
    ctx[1] !== void 0
  ) {
    draganddrop0_props.items = /*top_buttons*/
    ctx[1];
  }
  draganddrop0 = new DragAndDrop_default({ props: draganddrop0_props });
  binding_callbacks.push(() => bind(draganddrop0, "items", draganddrop0_items_binding));
  dropdown0 = new Dropdown_default({
    props: {
      disabled: true,
      class: "translator-select",
      value: "auto",
      options: [
        {
          "value": "auto",
          "text": "Detect Language (English)"
        }
      ]
    }
  });
  textarea0 = new TextArea_default({
    props: {
      placeholder: "Type here...",
      class: "translator-textarea",
      readonly: true
    }
  });
  function draganddrop1_items_binding(value) {
    ctx[17](value);
  }
  let draganddrop1_props = {
    dragDisabled: (
      /*current_editing_mode*/
      ctx[7] !== 2
    ),
    itemstyle: "translator-rounded-button clickable-icon",
    class: `translator-textarea-quickbuttons translator-textarea-quickbuttons-editing
							 		${/*current_editing_mode*/
    ctx[7] === 2 ? "translator-focused-element" : ""}`
  };
  if (
    /*left_buttons*/
    ctx[2] !== void 0
  ) {
    draganddrop1_props.items = /*left_buttons*/
    ctx[2];
  }
  draganddrop1 = new DragAndDrop_default({ props: draganddrop1_props });
  binding_callbacks.push(() => bind(draganddrop1, "items", draganddrop1_items_binding));
  icon0 = new Icon_default({ props: { icon: "switch", size: 20 } });
  icon1 = new Icon_default({ props: { icon: "translate", size: 20 } });
  dropdown1 = new Dropdown_default({
    props: {
      disabled: true,
      class: "translator-select",
      value: "fr",
      options: [{ "value": "fr", "text": "French" }]
    }
  });
  textarea1 = new TextArea_default({
    props: {
      placeholder: "Translation",
      class: "translator-textarea",
      readonly: true
    }
  });
  function draganddrop2_items_binding(value) {
    ctx[18](value);
  }
  let draganddrop2_props = {
    dragDisabled: (
      /*current_editing_mode*/
      ctx[7] !== 2
    ),
    itemstyle: "translator-rounded-button clickable-icon",
    class: `translator-textarea-quickbuttons translator-textarea-quickbuttons-editing
							 		${/*current_editing_mode*/
    ctx[7] === 2 ? "translator-focused-element" : ""}`
  };
  if (
    /*right_buttons*/
    ctx[3] !== void 0
  ) {
    draganddrop2_props.items = /*right_buttons*/
    ctx[3];
  }
  draganddrop2 = new DragAndDrop_default({ props: draganddrop2_props });
  binding_callbacks.push(() => bind(draganddrop2, "items", draganddrop2_items_binding));
  let if_block1 = (
    /*show_attribution*/
    ctx[4] && create_if_block5(ctx)
  );
  return {
    c() {
      div12 = element("div");
      div0 = element("div");
      create_component(button0.$$.fragment);
      t0 = space();
      create_component(button1.$$.fragment);
      t1 = space();
      create_component(button2.$$.fragment);
      t2 = space();
      create_component(button3.$$.fragment);
      t3 = space();
      div1 = element("div");
      if_block0.c();
      t4 = space();
      div10 = element("div");
      div3 = element("div");
      div2 = element("div");
      create_component(draganddrop0.$$.fragment);
      t5 = space();
      div9 = element("div");
      div5 = element("div");
      create_component(dropdown0.$$.fragment);
      t6 = space();
      div4 = element("div");
      create_component(textarea0.$$.fragment);
      t7 = space();
      create_component(draganddrop1.$$.fragment);
      t8 = space();
      div6 = element("div");
      button4 = element("button");
      create_component(icon0.$$.fragment);
      t9 = space();
      button5 = element("button");
      create_component(icon1.$$.fragment);
      t10 = space();
      div8 = element("div");
      create_component(dropdown1.$$.fragment);
      t11 = space();
      div7 = element("div");
      create_component(textarea1.$$.fragment);
      t12 = space();
      create_component(draganddrop2.$$.fragment);
      t13 = space();
      if (if_block1)
        if_block1.c();
      t14 = space();
      div11 = element("div");
      button6 = element("button");
      button6.textContent = "Cancel";
      t16 = space();
      button7 = element("button");
      button7.textContent = "Confirm";
      attr(div0, "class", "translator-appearance-modal-header");
      attr(div1, "class", "translator-appearance-modal-settings");
      toggle_class(
        div1,
        "translator-appearance-modal-settings-active",
        /*current_editing_mode*/
        ctx[7] != null
      );
      attr(div2, "class", "nav-buttons-container");
      attr(div3, "class", "nav-header");
      attr(div4, "class", "translator-textarea-column");
      attr(div5, "class", "translator-column translator-left-column");
      attr(button4, "class", "translator-button");
      attr(button4, "aria-label", "Switch languages around");
      attr(button5, "class", "translator-button");
      attr(button5, "aria-label", "Translate");
      attr(div6, "class", "translator-button-container translator-center-column");
      attr(div7, "class", "translator-textarea-column");
      attr(div8, "class", "translator-column translator-right-column");
      attr(div9, "class", div9_class_value = `translator-view translator-appearance-modal-view translator-${/*current_view_mode*/
      ctx[8]}-layout`);
      set_style(div9, "overflow-x", "hidden");
      add_render_callback(() => (
        /*div9_elementresize_handler*/
        ctx[19].call(div9)
      ));
      toggle_class(
        div9,
        "translator-focused-element",
        /*current_editing_mode*/
        ctx[7] === 1
      );
      attr(div10, "class", "translator-appearance-modal-contents");
      attr(button7, "class", "translator-success");
      attr(div11, "class", "translator-confirmation-buttons");
      attr(div12, "class", "translator-appearance-modal");
    },
    m(target, anchor) {
      insert(target, div12, anchor);
      append(div12, div0);
      mount_component(button0, div0, null);
      append(div0, t0);
      mount_component(button1, div0, null);
      append(div0, t1);
      mount_component(button2, div0, null);
      append(div0, t2);
      mount_component(button3, div0, null);
      append(div12, t3);
      append(div12, div1);
      if_blocks[current_block_type_index].m(div1, null);
      append(div12, t4);
      append(div12, div10);
      append(div10, div3);
      append(div3, div2);
      mount_component(draganddrop0, div2, null);
      append(div10, t5);
      append(div10, div9);
      append(div9, div5);
      mount_component(dropdown0, div5, null);
      append(div5, t6);
      append(div5, div4);
      mount_component(textarea0, div4, null);
      append(div4, t7);
      mount_component(draganddrop1, div4, null);
      append(div9, t8);
      append(div9, div6);
      append(div6, button4);
      mount_component(icon0, button4, null);
      append(div6, t9);
      append(div6, button5);
      mount_component(icon1, button5, null);
      append(div9, t10);
      append(div9, div8);
      mount_component(dropdown1, div8, null);
      append(div8, t11);
      append(div8, div7);
      mount_component(textarea1, div7, null);
      append(div7, t12);
      mount_component(draganddrop2, div7, null);
      append(div9, t13);
      if (if_block1)
        if_block1.m(div9, null);
      div9_resize_listener = add_iframe_resize_listener(
        div9,
        /*div9_elementresize_handler*/
        ctx[19].bind(div9)
      );
      append(div12, t14);
      append(div12, div11);
      append(div11, button6);
      append(div11, t16);
      append(div11, button7);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button6,
            "click",
            /*click_handler*/
            ctx[20]
          ),
          listen(
            button7,
            "click",
            /*click_handler_1*/
            ctx[21]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const button0_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        button0_changes.class = /*current_editing_mode*/
        ctx2[7] === 0 ? "translator-focused-button" : "";
      if (dirty & /*current_editing_mode*/
      128)
        button0_changes.onClick = /*func*/
        ctx2[10];
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        button1_changes.class = /*current_editing_mode*/
        ctx2[7] === 1 ? "translator-focused-button" : "";
      if (dirty & /*current_editing_mode*/
      128)
        button1_changes.onClick = /*func_1*/
        ctx2[11];
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        button2_changes.class = /*current_editing_mode*/
        ctx2[7] === 2 ? "translator-focused-button" : "";
      if (dirty & /*current_editing_mode*/
      128)
        button2_changes.onClick = /*func_2*/
        ctx2[12];
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        button3_changes.class = /*current_editing_mode*/
        ctx2[7] === 3 ? "translator-focused-button" : "";
      if (dirty & /*current_editing_mode*/
      128)
        button3_changes.onClick = /*func_3*/
        ctx2[13];
      button3.$set(button3_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div1, null);
      }
      if (!current || dirty & /*current_editing_mode*/
      128) {
        toggle_class(
          div1,
          "translator-appearance-modal-settings-active",
          /*current_editing_mode*/
          ctx2[7] != null
        );
      }
      const draganddrop0_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop0_changes.dragDisabled = /*current_editing_mode*/
        ctx2[7] !== 0;
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop0_changes.class = `translator-appearance-modal-view-header translator-textarea-quickbuttons-editing
								${/*current_editing_mode*/
        ctx2[7] === 0 ? "translator-focused-element" : ""}`;
      if (!updating_items && dirty & /*top_buttons*/
      2) {
        updating_items = true;
        draganddrop0_changes.items = /*top_buttons*/
        ctx2[1];
        add_flush_callback(() => updating_items = false);
      }
      draganddrop0.$set(draganddrop0_changes);
      const draganddrop1_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop1_changes.dragDisabled = /*current_editing_mode*/
        ctx2[7] !== 2;
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop1_changes.class = `translator-textarea-quickbuttons translator-textarea-quickbuttons-editing
							 		${/*current_editing_mode*/
        ctx2[7] === 2 ? "translator-focused-element" : ""}`;
      if (!updating_items_1 && dirty & /*left_buttons*/
      4) {
        updating_items_1 = true;
        draganddrop1_changes.items = /*left_buttons*/
        ctx2[2];
        add_flush_callback(() => updating_items_1 = false);
      }
      draganddrop1.$set(draganddrop1_changes);
      const draganddrop2_changes = {};
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop2_changes.dragDisabled = /*current_editing_mode*/
        ctx2[7] !== 2;
      if (dirty & /*current_editing_mode*/
      128)
        draganddrop2_changes.class = `translator-textarea-quickbuttons translator-textarea-quickbuttons-editing
							 		${/*current_editing_mode*/
        ctx2[7] === 2 ? "translator-focused-element" : ""}`;
      if (!updating_items_2 && dirty & /*right_buttons*/
      8) {
        updating_items_2 = true;
        draganddrop2_changes.items = /*right_buttons*/
        ctx2[3];
        add_flush_callback(() => updating_items_2 = false);
      }
      draganddrop2.$set(draganddrop2_changes);
      if (
        /*show_attribution*/
        ctx2[4]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*show_attribution*/
          16) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block5(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div9, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*current_view_mode*/
      256 && div9_class_value !== (div9_class_value = `translator-view translator-appearance-modal-view translator-${/*current_view_mode*/
      ctx2[8]}-layout`)) {
        attr(div9, "class", div9_class_value);
      }
      if (!current || dirty & /*current_view_mode, current_editing_mode*/
      384) {
        toggle_class(
          div9,
          "translator-focused-element",
          /*current_editing_mode*/
          ctx2[7] === 1
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(button2.$$.fragment, local);
      transition_in(button3.$$.fragment, local);
      transition_in(if_block0);
      transition_in(draganddrop0.$$.fragment, local);
      transition_in(dropdown0.$$.fragment, local);
      transition_in(textarea0.$$.fragment, local);
      transition_in(draganddrop1.$$.fragment, local);
      transition_in(icon0.$$.fragment, local);
      transition_in(icon1.$$.fragment, local);
      transition_in(dropdown1.$$.fragment, local);
      transition_in(textarea1.$$.fragment, local);
      transition_in(draganddrop2.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(button2.$$.fragment, local);
      transition_out(button3.$$.fragment, local);
      transition_out(if_block0);
      transition_out(draganddrop0.$$.fragment, local);
      transition_out(dropdown0.$$.fragment, local);
      transition_out(textarea0.$$.fragment, local);
      transition_out(draganddrop1.$$.fragment, local);
      transition_out(icon0.$$.fragment, local);
      transition_out(icon1.$$.fragment, local);
      transition_out(dropdown1.$$.fragment, local);
      transition_out(textarea1.$$.fragment, local);
      transition_out(draganddrop2.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div12);
      }
      destroy_component(button0);
      destroy_component(button1);
      destroy_component(button2);
      destroy_component(button3);
      if_blocks[current_block_type_index].d();
      destroy_component(draganddrop0);
      destroy_component(dropdown0);
      destroy_component(textarea0);
      destroy_component(draganddrop1);
      destroy_component(icon0);
      destroy_component(icon1);
      destroy_component(dropdown1);
      destroy_component(textarea1);
      destroy_component(draganddrop2);
      if (if_block1)
        if_block1.d();
      div9_resize_listener();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { top_buttons = [] } = $$props;
  let { left_buttons = [] } = $$props;
  let { right_buttons = [] } = $$props;
  let { view_mode = "automatic" } = $$props;
  let { show_attribution = true } = $$props;
  let current_editing_mode = null;
  let current_view_mode;
  let w, h;
  const handleResize = () => {
    if (!view_mode) {
      const width_ratio = w / h;
      if (width_ratio > 1.4)
        $$invalidate(8, current_view_mode = "horizontal");
      else if (width_ratio > 1.2)
        $$invalidate(8, current_view_mode = "mixed");
      else
        $$invalidate(8, current_view_mode = "vertical");
    } else {
      $$invalidate(8, current_view_mode = VIEW_MODES[view_mode].id);
    }
  };
  const func = () => $$invalidate(7, current_editing_mode = current_editing_mode === 0 ? null : 0);
  const func_1 = () => $$invalidate(7, current_editing_mode = current_editing_mode === 1 ? null : 1);
  const func_2 = () => $$invalidate(7, current_editing_mode = current_editing_mode === 2 ? null : 2);
  const func_3 = () => $$invalidate(7, current_editing_mode = current_editing_mode === 3 ? null : 3);
  const func_4 = (e) => {
    $$invalidate(0, view_mode = parseInt(e.target.value));
  };
  const func_5 = async (e) => {
    $$invalidate(4, show_attribution = !show_attribution);
  };
  function draganddrop0_items_binding(value) {
    top_buttons = value;
    $$invalidate(1, top_buttons);
  }
  function draganddrop1_items_binding(value) {
    left_buttons = value;
    $$invalidate(2, left_buttons);
  }
  function draganddrop2_items_binding(value) {
    right_buttons = value;
    $$invalidate(3, right_buttons);
  }
  function div9_elementresize_handler() {
    w = this.clientWidth;
    h = this.clientHeight;
    $$invalidate(5, w);
    $$invalidate(6, h);
  }
  const click_handler = async () => dispatch2("close");
  const click_handler_1 = async () => {
    dispatch2("close", {
      view_mode,
      show_attribution,
      top_buttons,
      left_buttons,
      right_buttons
    });
  };
  $$self.$$set = ($$props2) => {
    if ("top_buttons" in $$props2)
      $$invalidate(1, top_buttons = $$props2.top_buttons);
    if ("left_buttons" in $$props2)
      $$invalidate(2, left_buttons = $$props2.left_buttons);
    if ("right_buttons" in $$props2)
      $$invalidate(3, right_buttons = $$props2.right_buttons);
    if ("view_mode" in $$props2)
      $$invalidate(0, view_mode = $$props2.view_mode);
    if ("show_attribution" in $$props2)
      $$invalidate(4, show_attribution = $$props2.show_attribution);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*view_mode, w, h*/
    97) {
      $:
        view_mode, w, h, handleResize();
    }
  };
  return [
    view_mode,
    top_buttons,
    left_buttons,
    right_buttons,
    show_attribution,
    w,
    h,
    current_editing_mode,
    current_view_mode,
    dispatch2,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    draganddrop0_items_binding,
    draganddrop1_items_binding,
    draganddrop2_items_binding,
    div9_elementresize_handler,
    click_handler,
    click_handler_1
  ];
}
var ViewAppearanceModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment15, safe_not_equal, {
      top_buttons: 1,
      left_buttons: 2,
      right_buttons: 3,
      view_mode: 0,
      show_attribution: 4
    });
  }
};
var ViewAppearanceModalView_default = ViewAppearanceModalView;

// src/ui/modals/view_appearance_modal.ts
var ViewAppearanceModal = class extends import_obsidian25.Modal {
  view;
  translator_view;
  constructor(app2, translator_view) {
    super(app2);
    this.translator_view = translator_view;
    this.titleEl.innerText = "Alter translation view appearance";
  }
  async onOpen() {
    const state = this.translator_view.getState();
    state.top_buttons = state.top_buttons.map((button) => {
      return {
        id: button + `_${generateIdentifier()}`,
        ...QUICK_SETTINGS[button]
      };
    });
    state.left_buttons = state.left_buttons.map((button) => {
      return {
        id: button + `_${generateIdentifier()}`,
        ...QUICK_ACTIONS[button]
      };
    });
    state.right_buttons = state.right_buttons.map((button) => {
      return {
        id: button + `_${generateIdentifier()}`,
        ...QUICK_ACTIONS[button]
      };
    });
    this.view = new ViewAppearanceModalView_default({
      target: this.contentEl,
      props: state
    });
    this.view.$on("close", async (e) => {
      if (e.detail) {
        e.detail.top_buttons = e.detail.top_buttons.map((button) => button.id.split("_")[0]);
        e.detail.left_buttons = e.detail.left_buttons.map((button) => button.id.split("_")[0]);
        e.detail.right_buttons = e.detail.right_buttons.map((button) => button.id.split("_")[0]);
        await this.translator_view.setState(Object.assign(state, e.detail), {});
      }
      super.close();
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/ui/modals/text_modal.ts
var import_obsidian26 = require("obsidian");

// src/ui/modals/TextModalView.svelte
function create_fragment16(ctx) {
  let h3;
  let t2;
  let html_tag;
  let html_anchor;
  return {
    c() {
      h3 = element("h3");
      t2 = space();
      html_tag = new HtmlTag(false);
      html_anchor = empty();
      set_style(h3, "text-align", "center");
      html_tag.a = html_anchor;
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      h3.innerHTML = /*title*/
      ctx[0];
      insert(target, t2, anchor);
      html_tag.m(
        /*description*/
        ctx[1],
        target,
        anchor
      );
      insert(target, html_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*title*/
      1)
        h3.innerHTML = /*title*/
        ctx2[0];
      ;
      if (dirty & /*description*/
      2)
        html_tag.p(
          /*description*/
          ctx2[1]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(h3);
        detach(t2);
        detach(html_anchor);
        html_tag.d();
      }
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let { title } = $$props;
  let { description } = $$props;
  $$self.$$set = ($$props2) => {
    if ("title" in $$props2)
      $$invalidate(0, title = $$props2.title);
    if ("description" in $$props2)
      $$invalidate(1, description = $$props2.description);
  };
  return [title, description];
}
var TextModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, { title: 0, description: 1 });
  }
};
var TextModalView_default = TextModalView;

// src/ui/modals/text_modal.ts
var TextModal = class extends import_obsidian26.Modal {
  view;
  plugin;
  title;
  description;
  constructor(plugin, title, description) {
    super(plugin.app);
    this.title = title;
    this.description = description;
  }
  async onOpen() {
    this.view = new TextModalView_default({
      target: this.contentEl,
      props: {
        title: this.title,
        description: this.description
      }
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/obsidian-util.ts
var import_obsidian27 = require("obsidian");
async function writeRecursive(path, data) {
  await app.vault.adapter.mkdir(path.substring(0, path.lastIndexOf("/")));
  await app.vault.adapter.writeBinary(path, data);
}
function openSettingTab() {
  app.setting.open();
  if (app.setting.lastTabId !== "translate") {
    app.setting.openTabById("translate");
  }
}
async function getObsidianData() {
  let framework_version;
  if (import_obsidian27.Platform.isMobileApp) {
    const capacitor_info = await Capacitor.nativePromise("App", "getInfo");
    if (capacitor_info)
      framework_version = capacitor_info.version + " (" + capacitor_info.build + ")";
  } else {
    framework_version = navigator.userAgent.match(/obsidian\/([\d\.]+\d+)/)?.[1] || "unknown";
  }
  return {
    plugin_version: app.plugins.plugins["translate"].manifest.version,
    platform: import_obsidian27.Platform.isMobileApp ? import_obsidian27.Platform.isAndroidApp ? "Android" : import_obsidian27.Platform.isIosApp ? "iOS" : "mobile" : import_obsidian27.Platform.isMacOS ? "macOS" : "Desktop",
    framework_version,
    obsidian_version: import_obsidian27.apiVersion
  };
}
async function generateGithubIssueLink(title, data = {}) {
  const title_string = title ? `[BUG] ${title} \u2013 ADD A TITLE HERE` : "[BUG] ADD A TITLE HERE";
  try {
    const base_data = await getObsidianData();
    const issue_data = { ...base_data, ...data };
    const data_string = Object.entries(issue_data).map(([key, value]) => `**${key}**: ${JSON.stringify(value)}`).join("\n");
    return `https://github.com/Fevol/obsidian-translate/issues/new?` + new URLSearchParams({
      title: title_string,
      body: `# User report
**Description:** ADD A SHORT DESCRIPTION HERE 



---
# Debugger data (do not alter)
${data_string}`,
      labels: `bug`
    });
  } catch (e) {
    return "https://github.com/Fevol/obsidian-translate/issues/new?" + new URLSearchParams({
      title: title_string,
      body: `# User report
**Description:** ADD A SHORT DESCRIPTION HERE 



---
# Debugger data (do not alter)
**Error while generating debugger data:** ${e}`,
      labels: `bug`
    });
  }
}
async function openGithubIssueLink(title = "", data = {}) {
  window.open(await generateGithubIssueLink(title, data), "_blank");
}

// src/ui/translator-components/settings-tabs/GeneralSettings.svelte
function create_control_slot_5(ctx) {
  let div;
  let dropdown;
  let t2;
  let button;
  let current;
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*$available_translator_services*/
        ctx[4].map(
          /*func*/
          ctx[10]
        )
      ),
      value: (
        /*$settings*/
        ctx[1].translation_service
      ),
      onChange: (
        /*func_1*/
        ctx[11]
      )
    }
  });
  button = new Button_default({
    props: {
      class: "clickable-icon setting-editor-extra-setting-button translator-mobile-button",
      icon: "user-cog",
      tooltip: "Open service's settings",
      onClick: (
        /*func_2*/
        ctx[12]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(dropdown.$$.fragment);
      t2 = space();
      create_component(button.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "translator-flex-row-element");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(dropdown, div, null);
      append(div, t2);
      mount_component(button, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$available_translator_services*/
      16)
        dropdown_changes.options = /*$available_translator_services*/
        ctx2[4].map(
          /*func*/
          ctx2[10]
        );
      if (dirty & /*$settings*/
      2)
        dropdown_changes.value = /*$settings*/
        ctx2[1].translation_service;
      if (dirty & /*$settings*/
      2)
        dropdown_changes.onChange = /*func_1*/
        ctx2[11];
      dropdown.$set(dropdown_changes);
      const button_changes = {};
      if (dirty & /*$settings_tab, $settings*/
      34)
        button_changes.onClick = /*func_2*/
        ctx2[12];
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(dropdown);
      destroy_component(button);
    }
  };
}
function create_control_slot_4(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        { "value": "0", "text": "All languages" },
        {
          "value": "1",
          "text": "Spellchecker languages"
        },
        {
          "value": "2",
          "text": "Manually selected languages"
        }
      ],
      value: (
        /*$settings*/
        ctx[1].filter_mode
      ),
      onChange: (
        /*func_3*/
        ctx[13]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      2)
        dropdown_changes.value = /*$settings*/
        ctx2[1].filter_mode;
      if (dirty & /*$settings*/
      2)
        dropdown_changes.onChange = /*func_3*/
        ctx2[13];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_3(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          "value": "display",
          "text": "Display language"
        },
        {
          "value": "local",
          "text": "Native language"
        }
      ],
      value: (
        /*$settings*/
        ctx[1].display_language
      ),
      onChange: (
        /*func_4*/
        ctx[14]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      2)
        dropdown_changes.value = /*$settings*/
        ctx2[1].display_language;
      if (dirty & /*$settings, display_language_example*/
      6)
        dropdown_changes.onChange = /*func_4*/
        ctx2[14];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_2(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: SECURITY_MODES,
      value: (
        /*$settings*/
        ctx[1].security_setting
      ),
      onChange: (
        /*func_5*/
        ctx[15]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      2)
        dropdown_changes.value = /*$settings*/
        ctx2[1].security_setting;
      if (dirty & /*$settings*/
      2)
        dropdown_changes.onChange = /*func_5*/
        ctx2[15];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block6(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Password",
      type: "password",
      class: "translator-setting-subsetting",
      description: "Update locally stored password",
      $$slots: { control: [create_control_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty & /*$$scope, $password, plugin, $passwords_are_encrypted*/
      268435649) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_else_block4(ctx) {
  let button;
  let current;
  button = new Button_default({
    props: {
      class: "translator-fail",
      text: "Decrypt API keys",
      tooltip: "API keys are still encrypted",
      onClick: (
        /*func_8*/
        ctx[18]
      )
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*plugin*/
      1)
        button_changes.onClick = /*func_8*/
        ctx2[18];
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_if_block_14(ctx) {
  let button;
  let current;
  button = new Button_default({
    props: {
      class: !/*$password*/
      ctx[7] ? "translator-success" : "",
      tooltip: !/*$password*/
      ctx[7] ? "No password is set" : "Set a new password",
      text: !/*$password*/
      ctx[7] ? "Set password" : "Update password",
      onClick: (
        /*func_7*/
        ctx[17]
      )
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*$password*/
      128)
        button_changes.class = !/*$password*/
        ctx2[7] ? "translator-success" : "";
      if (dirty & /*$password*/
      128)
        button_changes.tooltip = !/*$password*/
        ctx2[7] ? "No password is set" : "Set a new password";
      if (dirty & /*$password*/
      128)
        button_changes.text = !/*$password*/
        ctx2[7] ? "Set password" : "Update password";
      if (dirty & /*plugin*/
      1)
        button_changes.onClick = /*func_7*/
        ctx2[17];
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_control_slot_1(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_14, create_else_block4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*$passwords_are_encrypted*/
    ctx2[6])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "slot", "control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_control_slot(ctx) {
  let div;
  let buttonlist;
  let t2;
  let dropdown;
  let div_transition;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*$settings*/
        ctx[1].filtered_services.map(
          /*func_9*/
          ctx[19]
        )
      ),
      icon: "cross",
      onClick: (
        /*func_10*/
        ctx[20]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*selectable_services*/
        ctx[3].map(
          /*func_11*/
          ctx[21]
        )
      ),
      value: "",
      onChange: (
        /*func_12*/
        ctx[22]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t2 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t2);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty & /*$settings*/
      2)
        buttonlist_changes.items = /*$settings*/
        ctx2[1].filtered_services.map(
          /*func_9*/
          ctx2[19]
        );
      if (dirty & /*$settings, plugin*/
      3)
        buttonlist_changes.onClick = /*func_10*/
        ctx2[20];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty & /*selectable_services*/
      8)
        dropdown_changes.options = /*selectable_services*/
        ctx2[3].map(
          /*func_11*/
          ctx2[21]
        );
      if (dirty & /*$settings, plugin*/
      3)
        dropdown_changes.onChange = /*func_12*/
        ctx2[22];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, {}, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, {}, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function create_fragment17(ctx) {
  let settingitem0;
  let t0;
  let settingitem1;
  let t1;
  let settingitem2;
  let t2;
  let settingitem3;
  let t3;
  let t4;
  let settingitem4;
  let t5;
  let div;
  let button0;
  let t6;
  let button1;
  let current;
  settingitem0 = new SettingItem_default({
    props: {
      name: "Translation Service",
      description: "Service used for the plugin's <i>commands</i>",
      notices: [
        {
          type: "text",
          text: `Used for the editor context menu and translating files`,
          style: "translator-info-text"
        }
      ],
      type: "dropdown",
      $$slots: { control: [create_control_slot_5] },
      $$scope: { ctx }
    }
  });
  settingitem1 = new SettingItem_default({
    props: {
      name: "Filter language selection",
      description: "Selection of languages available for <i>global commands</i>",
      type: "dropdown",
      $$slots: { control: [create_control_slot_4] },
      $$scope: { ctx }
    }
  });
  settingitem2 = new SettingItem_default({
    props: {
      name: "Language display name",
      description: `Example: <i>${/*display_language_example*/
      ctx[2]}</i>`,
      type: "dropdown",
      $$slots: { control: [create_control_slot_3] },
      $$scope: { ctx }
    }
  });
  settingitem3 = new SettingItem_default({
    props: {
      name: "Storage settings for plugin authentication data",
      description: "Determine how API keys will be stored on the device",
      type: "dropdown",
      notices: [
        {
          type: "text",
          text: `${SECURITY_MODES.find(
            /*func_6*/
            ctx[16]
          ).info}`,
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot_2] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*$settings*/
    ctx[1].security_setting === "password" && create_if_block6(ctx)
  );
  settingitem4 = new SettingItem_default({
    props: {
      name: "Filter services",
      description: "Only the selected services will be visible in settings, modals and commands",
      $$slots: { control: [create_control_slot] },
      $$scope: { ctx }
    }
  });
  button0 = new Button_default({
    props: {
      class: "translator-important-button",
      text: "DISCLAIMER",
      icon: "scale",
      onClick: (
        /*func_13*/
        ctx[23]
      )
    }
  });
  button1 = new Button_default({
    props: {
      class: "translator-important-button translator-fail",
      text: "REPORT BUG",
      icon: "bug",
      onClick: (
        /*func_14*/
        ctx[24]
      )
    }
  });
  return {
    c() {
      create_component(settingitem0.$$.fragment);
      t0 = space();
      create_component(settingitem1.$$.fragment);
      t1 = space();
      create_component(settingitem2.$$.fragment);
      t2 = space();
      create_component(settingitem3.$$.fragment);
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      create_component(settingitem4.$$.fragment);
      t5 = space();
      div = element("div");
      create_component(button0.$$.fragment);
      t6 = space();
      create_component(button1.$$.fragment);
      attr(div, "class", "translator-important-buttons");
    },
    m(target, anchor) {
      mount_component(settingitem0, target, anchor);
      insert(target, t0, anchor);
      mount_component(settingitem1, target, anchor);
      insert(target, t1, anchor);
      mount_component(settingitem2, target, anchor);
      insert(target, t2, anchor);
      mount_component(settingitem3, target, anchor);
      insert(target, t3, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t4, anchor);
      mount_component(settingitem4, target, anchor);
      insert(target, t5, anchor);
      insert(target, div, anchor);
      mount_component(button0, div, null);
      append(div, t6);
      mount_component(button1, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem0_changes = {};
      if (dirty & /*$$scope, $settings_tab, $settings, $available_translator_services*/
      268435506) {
        settingitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem0.$set(settingitem0_changes);
      const settingitem1_changes = {};
      if (dirty & /*$$scope, $settings*/
      268435458) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
      const settingitem2_changes = {};
      if (dirty & /*display_language_example*/
      4)
        settingitem2_changes.description = `Example: <i>${/*display_language_example*/
        ctx2[2]}</i>`;
      if (dirty & /*$$scope, $settings, display_language_example*/
      268435462) {
        settingitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem2.$set(settingitem2_changes);
      const settingitem3_changes = {};
      if (dirty & /*$settings*/
      2)
        settingitem3_changes.notices = [
          {
            type: "text",
            text: `${SECURITY_MODES.find(
              /*func_6*/
              ctx2[16]
            ).info}`,
            style: "translator-info-text"
          }
        ];
      if (dirty & /*$$scope, $settings*/
      268435458) {
        settingitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem3.$set(settingitem3_changes);
      if (
        /*$settings*/
        ctx2[1].security_setting === "password"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$settings*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block6(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t4.parentNode, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const settingitem4_changes = {};
      if (dirty & /*$$scope, selectable_services, $settings, plugin*/
      268435467) {
        settingitem4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem4.$set(settingitem4_changes);
      const button0_changes = {};
      if (dirty & /*plugin*/
      1)
        button0_changes.onClick = /*func_13*/
        ctx2[23];
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$settings*/
      2)
        button1_changes.onClick = /*func_14*/
        ctx2[24];
      button1.$set(button1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(settingitem1.$$.fragment, local);
      transition_in(settingitem2.$$.fragment, local);
      transition_in(settingitem3.$$.fragment, local);
      transition_in(if_block);
      transition_in(settingitem4.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(settingitem1.$$.fragment, local);
      transition_out(settingitem2.$$.fragment, local);
      transition_out(settingitem3.$$.fragment, local);
      transition_out(if_block);
      transition_out(settingitem4.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(div);
      }
      destroy_component(settingitem0, detaching);
      destroy_component(settingitem1, detaching);
      destroy_component(settingitem2, detaching);
      destroy_component(settingitem3, detaching);
      if (if_block)
        if_block.d(detaching);
      destroy_component(settingitem4, detaching);
      destroy_component(button0);
      destroy_component(button1);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let selectable_services;
  let $settings;
  let $all_languages;
  let $available_translator_services;
  let $settings_tab;
  let $passwords_are_encrypted;
  let $password;
  component_subscribe($$self, settings, ($$value) => $$invalidate(1, $settings = $$value));
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(25, $all_languages = $$value));
  component_subscribe($$self, available_translator_services, ($$value) => $$invalidate(4, $available_translator_services = $$value));
  component_subscribe($$self, settings_tab, ($$value) => $$invalidate(5, $settings_tab = $$value));
  component_subscribe($$self, passwords_are_encrypted, ($$value) => $$invalidate(6, $passwords_are_encrypted = $$value));
  component_subscribe($$self, password, ($$value) => $$invalidate(7, $password = $$value));
  let { plugin } = $$props;
  const example_languages = [...$all_languages.keys()].sort(() => 0.5 - Math.random()).slice(0, 3);
  let display_language_example = generateLanguageExample();
  function generateLanguageExample() {
    return example_languages.map((lang) => $all_languages.get(lang)).join(", ");
  }
  function clearAPIKey(service, old_mode, new_mode) {
    if ((old_mode === "none" || old_mode === "password") && !(new_mode === "none" || new_mode === "password")) {
      set_store_value(settings, $settings.service_settings[service].api_key = void 0, $settings);
    } else if (old_mode === "local_only") {
      localStorage.removeItem(`${app.appId}-${service}_api_key`);
    } else if (old_mode === "dont_save") {
      sessionStorage.removeItem(service + "_api_key");
    }
  }
  async function updateAPIKeys(old_mode, new_mode) {
    for (let service in $settings.service_settings) {
      if (SERVICES_INFO[service].requires_api_key) {
        await plugin.reactivity.setAPIKey(service, new_mode, await plugin.reactivity.getAPIKey(service, old_mode) || "");
        clearAPIKey(service, old_mode, new_mode);
      }
    }
  }
  const func = (service) => {
    return {
      "value": service,
      "text": SERVICES_INFO[service].display_name
    };
  };
  const func_1 = (e) => {
    set_store_value(settings, $settings.translation_service = e.target.value, $settings);
  };
  const func_2 = () => {
    set_store_value(settings_tab, $settings_tab = $settings.translation_service, $settings_tab);
  };
  const func_3 = (e) => {
    set_store_value(settings, $settings.filter_mode = e.target.value, $settings);
  };
  const func_4 = (e) => {
    set_store_value(settings, $settings.display_language = e.target.value, $settings);
    setTimeout(
      () => {
        $$invalidate(2, display_language_example = generateLanguageExample());
      },
      30
    );
  };
  const func_5 = async (e) => {
    await updateAPIKeys($settings.security_setting, e.target.value);
    set_store_value(settings, $settings.security_setting = e.target.value, $settings);
  };
  const func_62 = (x) => x.value === $settings.security_setting;
  const func_72 = () => new PasswordModal(plugin.app, plugin).open();
  const func_82 = () => new PasswordModal2(plugin).open();
  const func_92 = (service) => {
    return {
      "value": service,
      "text": SERVICES_INFO[service].display_name
    };
  };
  const func_10 = (service) => {
    set_store_value(settings, $settings.filtered_services = $settings.filtered_services.filter((x) => x !== service), $settings);
    plugin.reactivity.filterAvailableServices();
  };
  const func_11 = (service) => {
    return {
      "value": service,
      "text": SERVICES_INFO[service].display_name
    };
  };
  const func_12 = (e) => {
    if ($settings.filtered_services.length + 1 === ALL_SERVICES.length)
      set_store_value(settings, $settings.filtered_services = [], $settings);
    else
      set_store_value(settings, $settings.filtered_services = [...$settings.filtered_services, e.target.value], $settings);
    plugin.reactivity.filterAvailableServices();
  };
  const func_13 = () => new TextModal(
    plugin,
    "Legal information",
    `
	THIS SERVICE MAY CONTAIN TRANSLATIONS POWERED BY GOOGLE. GOOGLE DISCLAIMS ALL WARRANTIES RELATED TO THE TRANSLATIONS, EXPRESS OR IMPLIED, INCLUDING ANY WARRANTIES OF ACCURACY, RELIABILITY, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	<br>`
  ).open();
  const func_14 = () => openGithubIssueLink(void 0, {
    selected_service: $settings.translation_service
  });
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    2) {
      $:
        $$invalidate(3, selectable_services = ALL_SERVICES.filter((service) => !$settings.filtered_services.includes(service)));
    }
  };
  return [
    plugin,
    $settings,
    display_language_example,
    selectable_services,
    $available_translator_services,
    $settings_tab,
    $passwords_are_encrypted,
    $password,
    generateLanguageExample,
    updateAPIKeys,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    func_62,
    func_72,
    func_82,
    func_92,
    func_10,
    func_11,
    func_12,
    func_13,
    func_14
  ];
}
var GeneralSettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, { plugin: 0 });
  }
};
var GeneralSettings_default = GeneralSettings;

// src/ui/translator-components/settings-tabs/FunctionalitySettings.svelte
function create_control_slot_7(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[0].apply_glossary
      ),
      onChange: (
        /*func*/
        ctx[8]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      1)
        toggle_changes.value = /*$settings*/
        ctx2[0].apply_glossary;
      if (dirty & /*$settings*/
      1)
        toggle_changes.onChange = /*func*/
        ctx2[8];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_if_block_15(ctx) {
  let settingitem0;
  let t2;
  let settingitem1;
  let current;
  settingitem0 = new SettingItem_default({
    props: {
      name: "Glossary preference",
      class: "translator-setting-subsetting",
      type: "dropdown",
      description: "Determine whether glossary operation should be applied locally or by the online service",
      notices: [
        {
          type: "text",
          text: (
            /*glossary_selected_info*/
            ctx[5][
              /*$settings*/
              ctx[0].glossary_preference
            ]
          ),
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot_6] },
      $$scope: { ctx }
    }
  });
  settingitem1 = new SettingItem_default({
    props: {
      name: "Case insensitive glossary",
      class: "translator-setting-subsetting",
      description: "Local glossary will attempt to match terms regardless of case",
      type: "toggle",
      $$slots: { control: [create_control_slot_52] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem0.$$.fragment);
      t2 = space();
      create_component(settingitem1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem0, target, anchor);
      insert(target, t2, anchor);
      mount_component(settingitem1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem0_changes = {};
      if (dirty & /*$settings*/
      1)
        settingitem0_changes.notices = [
          {
            type: "text",
            text: (
              /*glossary_selected_info*/
              ctx2[5][
                /*$settings*/
                ctx2[0].glossary_preference
              ]
            ),
            style: "translator-info-text"
          }
        ];
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem0.$set(settingitem0_changes);
      const settingitem1_changes = {};
      if (dirty & /*$$scope, $settings, glossary*/
      65539) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(settingitem1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(settingitem1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
      }
      destroy_component(settingitem0, detaching);
      destroy_component(settingitem1, detaching);
    }
  };
}
function create_control_slot_6(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          "value": "both",
          "text": "Both online and local"
        },
        { "value": "online", "text": "Only online" },
        { "value": "local", "text": "Only local" }
      ],
      value: (
        /*$settings*/
        ctx[0].glossary_preference
      ),
      onChange: (
        /*func_1*/
        ctx[9]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].glossary_preference;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_1*/
        ctx2[9];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_52(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[0].case_insensitive_glossary
      ),
      onChange: (
        /*func_2*/
        ctx[10]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      1)
        toggle_changes.value = /*$settings*/
        ctx2[0].case_insensitive_glossary;
      if (dirty & /*$settings, glossary*/
      3)
        toggle_changes.onChange = /*func_2*/
        ctx2[10];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot_42(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          "value": "switch-both",
          "text": "Switch language and text"
        },
        {
          "value": "switch-text",
          "text": "Switch text"
        },
        {
          "value": "switch-language",
          "text": "Switch languages"
        }
      ],
      value: (
        /*$settings*/
        ctx[0].switch_button_action
      ),
      onChange: (
        /*func_3*/
        ctx[11]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].switch_button_action;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_3*/
        ctx2[11];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_32(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          "value": "replace",
          "text": "Replace input with translation"
        },
        {
          "value": "below",
          "text": "Translation added below input"
        },
        {
          "value": "clipboard",
          "text": "Copy to clipboard"
        }
      ],
      value: (
        /*$settings*/
        ctx[0].translation_command_action
      ),
      onChange: (
        /*func_4*/
        ctx[12]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].translation_command_action;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_4*/
        ctx2[12];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_22(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          value: "auto",
          text: "Detect automatically"
        }
      ].concat(
        /*current_all_languages*/
        ctx[4]
      ),
      value: (
        /*$settings*/
        ctx[0].default_source_language
      ),
      onChange: (
        /*func_5*/
        ctx[13]
      ),
      type: "text"
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].default_source_language;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_5*/
        ctx2[13];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_12(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        {
          value: "last",
          text: "Most recently used"
        },
        {
          value: "display",
          text: "Display language"
        },
        {
          value: "specific",
          text: "Manually select language"
        }
      ],
      value: (
        /*$settings*/
        ctx[0].target_language_preference
      ),
      onChange: (
        /*func_6*/
        ctx[14]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].target_language_preference;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_6*/
        ctx2[14];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block7(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Select target language",
      class: "translator-setting-subsetting",
      description: "Set the default target language",
      $$slots: { control: [create_control_slot2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot2(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: (
        /*current_all_languages*/
        ctx[4]
      ),
      value: (
        /*$settings*/
        ctx[0].default_target_language
      ),
      onChange: (
        /*func_7*/
        ctx[15]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].default_target_language;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_7*/
        ctx2[15];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_fragment18(ctx) {
  let settingitem0;
  let t0;
  let t1;
  let settingitem1;
  let t2;
  let settingitem2;
  let t3;
  let settingitem3;
  let t4;
  let settingitem4;
  let t5;
  let if_block1_anchor;
  let current;
  settingitem0 = new SettingItem_default({
    props: {
      name: "Apply glossary",
      type: "toggle",
      description: "Translate sentences using provided glossary terms",
      notices: [
        {
          type: "text",
          text: "Setting applies to global commands (e.g. translating selections) and to newly opened translation views",
          style: "translator-info-text"
        },
        /*$fasttext_data*/
        ctx[3].binary ? null : {
          type: "text",
          text: `This option requires <b>FastText</b> to resolve the language of the input text`,
          style: "translator-warning-text"
        }
      ],
      $$slots: { control: [create_control_slot_7] },
      $$scope: { ctx }
    }
  });
  let if_block0 = (
    /*$settings*/
    ctx[0].apply_glossary && create_if_block_15(ctx)
  );
  settingitem1 = new SettingItem_default({
    props: {
      name: "Switch button action",
      description: "<b>Translation view</b>: determine which action will be executed when pressing the language switch button",
      type: "dropdown",
      $$slots: { control: [create_control_slot_42] },
      $$scope: { ctx }
    }
  });
  settingitem2 = new SettingItem_default({
    props: {
      name: "Translate action",
      description: "Determines how the text selection will be translated using translate <i>commands</i>",
      type: "dropdown",
      $$slots: { control: [create_control_slot_32] },
      $$scope: { ctx }
    }
  });
  settingitem3 = new SettingItem_default({
    props: {
      name: "Default source language",
      description: "This will be the default source language used when opening a <i>translation view</i>",
      $$slots: { control: [create_control_slot_22] },
      $$scope: { ctx }
    }
  });
  settingitem4 = new SettingItem_default({
    props: {
      name: "Default target language",
      description: "This will determine which language will be translated to by default",
      notices: [
        {
          type: "text",
          text: (
            /*target_language_preference*/
            ctx[2][
              /*$settings*/
              ctx[0].target_language_preference
            ]
          ),
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot_12] },
      $$scope: { ctx }
    }
  });
  let if_block1 = (
    /*$settings*/
    ctx[0].target_language_preference === "specific" && create_if_block7(ctx)
  );
  return {
    c() {
      create_component(settingitem0.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      create_component(settingitem1.$$.fragment);
      t2 = space();
      create_component(settingitem2.$$.fragment);
      t3 = space();
      create_component(settingitem3.$$.fragment);
      t4 = space();
      create_component(settingitem4.$$.fragment);
      t5 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem0, target, anchor);
      insert(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t1, anchor);
      mount_component(settingitem1, target, anchor);
      insert(target, t2, anchor);
      mount_component(settingitem2, target, anchor);
      insert(target, t3, anchor);
      mount_component(settingitem3, target, anchor);
      insert(target, t4, anchor);
      mount_component(settingitem4, target, anchor);
      insert(target, t5, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem0_changes = {};
      if (dirty & /*$fasttext_data*/
      8)
        settingitem0_changes.notices = [
          {
            type: "text",
            text: "Setting applies to global commands (e.g. translating selections) and to newly opened translation views",
            style: "translator-info-text"
          },
          /*$fasttext_data*/
          ctx2[3].binary ? null : {
            type: "text",
            text: `This option requires <b>FastText</b> to resolve the language of the input text`,
            style: "translator-warning-text"
          }
        ];
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem0.$set(settingitem0_changes);
      if (
        /*$settings*/
        ctx2[0].apply_glossary
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*$settings*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_15(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const settingitem1_changes = {};
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
      const settingitem2_changes = {};
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem2.$set(settingitem2_changes);
      const settingitem3_changes = {};
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem3.$set(settingitem3_changes);
      const settingitem4_changes = {};
      if (dirty & /*target_language_preference, $settings*/
      5)
        settingitem4_changes.notices = [
          {
            type: "text",
            text: (
              /*target_language_preference*/
              ctx2[2][
                /*$settings*/
                ctx2[0].target_language_preference
              ]
            ),
            style: "translator-info-text"
          }
        ];
      if (dirty & /*$$scope, $settings*/
      65537) {
        settingitem4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem4.$set(settingitem4_changes);
      if (
        /*$settings*/
        ctx2[0].target_language_preference === "specific"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$settings*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block7(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(if_block0);
      transition_in(settingitem1.$$.fragment, local);
      transition_in(settingitem2.$$.fragment, local);
      transition_in(settingitem3.$$.fragment, local);
      transition_in(settingitem4.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(if_block0);
      transition_out(settingitem1.$$.fragment, local);
      transition_out(settingitem2.$$.fragment, local);
      transition_out(settingitem3.$$.fragment, local);
      transition_out(settingitem4.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(if_block1_anchor);
      }
      destroy_component(settingitem0, detaching);
      if (if_block0)
        if_block0.d(detaching);
      destroy_component(settingitem1, detaching);
      destroy_component(settingitem2, detaching);
      destroy_component(settingitem3, detaching);
      destroy_component(settingitem4, detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  let target_language_preference;
  let $settings;
  let $all_languages;
  let $fasttext_data;
  component_subscribe($$self, settings, ($$value) => $$invalidate(0, $settings = $$value));
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(7, $all_languages = $$value));
  component_subscribe($$self, fasttext_data, ($$value) => $$invalidate(3, $fasttext_data = $$value));
  let { plugin } = $$props;
  const current_all_languages = Array.from($all_languages.entries()).map(([key, value]) => {
    return { value: key, text: value };
  }).sort((a, b) => a.text.localeCompare(b.text));
  const glossary_selected_info = {
    both: "Online glossary will be applied first, if it is not available, the local glossary will be used instead",
    online: "Only the online glossary will be applied",
    local: "Only the local glossary will be applied"
  };
  const func = async () => {
    set_store_value(settings, $settings.apply_glossary = !$settings.apply_glossary, $settings);
  };
  const func_1 = async (e) => {
    set_store_value(settings, $settings.glossary_preference = e.target.value, $settings);
  };
  const func_2 = async () => {
    set_store_value(settings, $settings.case_insensitive_glossary = !$settings.case_insensitive_glossary, $settings);
    for (let key in glossary.dicts)
      $$invalidate(1, glossary.replacements[key] = new RegExp(glossary.replacements[key], $settings.case_insensitive_glossary ? "gi" : "g"), glossary);
  };
  const func_3 = (e) => {
    set_store_value(settings, $settings.switch_button_action = e.target.value, $settings);
  };
  const func_4 = (e) => {
    set_store_value(settings, $settings.translation_command_action = e.target.value, $settings);
  };
  const func_5 = async (e) => {
    set_store_value(settings, $settings.default_source_language = e.target.value, $settings);
  };
  const func_62 = (e) => {
    set_store_value(settings, $settings.target_language_preference = e.target.value, $settings);
  };
  const func_72 = (e) => {
    set_store_value(settings, $settings.default_target_language = e.target.value, $settings);
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(6, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$all_languages, $settings, plugin*/
    193) {
      $:
        $$invalidate(2, target_language_preference = {
          last: `Translate to last used language by default (${$all_languages.get($settings.last_used_target_languages.last())})`,
          display: `Translate to display language by default (${$all_languages.get(plugin.current_language)})`,
          specific: `Translate to manually selected language (${$all_languages.get($settings.default_target_language)})`
        });
    }
  };
  return [
    $settings,
    glossary,
    target_language_preference,
    $fasttext_data,
    current_all_languages,
    glossary_selected_info,
    plugin,
    $all_languages,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    func_62,
    func_72
  ];
}
var FunctionalitySettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, { plugin: 6 });
  }
};
var FunctionalitySettings_default = FunctionalitySettings;

// src/ui/translator-components/settings-tabs/GlossarySettings.svelte
var import_obsidian28 = require("obsidian");
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[45] = list[i];
  child_ctx[46] = list;
  child_ctx[47] = i;
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[48] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[51] = list[i];
  child_ctx[52] = list;
  child_ctx[53] = i;
  return child_ctx;
}
function create_control_slot_13(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[13].glossary_bidirectional
      ),
      onChange: (
        /*func*/
        ctx[20]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty[0] & /*$settings*/
      8192)
        toggle_changes.value = /*$settings*/
        ctx2[13].glossary_bidirectional;
      if (dirty[0] & /*$settings*/
      8192)
        toggle_changes.onChange = /*func*/
        ctx2[20];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_if_block_16(ctx) {
  let span;
  let icon;
  let current;
  icon = new Icon_default({
    props: {
      icon: `chevron-${/*sort_direction*/
      ctx[4] === 0 ? "down" : "up"}`
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon.$$.fragment);
      attr(span, "class", "translator-table-cell-header-icon");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(icon, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*sort_direction*/
      16)
        icon_changes.icon = `chevron-${/*sort_direction*/
        ctx2[4] === 0 ? "down" : "up"}`;
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block8(ctx) {
  let span;
  let icon;
  let current;
  icon = new Icon_default({
    props: {
      icon: `chevron-${/*sort_direction*/
      ctx[4] === 2 ? "down" : "up"}`
    }
  });
  return {
    c() {
      span = element("span");
      create_component(icon.$$.fragment);
      attr(span, "class", "translator-table-cell-header-icon");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(icon, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*sort_direction*/
      16)
        icon_changes.icon = `chevron-${/*sort_direction*/
        ctx2[4] === 2 ? "down" : "up"}`;
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_component(icon);
    }
  };
}
function create_each_block_2(ctx) {
  let td;
  let mounted;
  let dispose;
  function td_input_handler() {
    ctx[28].call(
      td,
      /*each_value_2*/
      ctx[52],
      /*i*/
      ctx[53]
    );
  }
  function focusin_handler() {
    return (
      /*focusin_handler*/
      ctx[29](
        /*row*/
        ctx[48]
      )
    );
  }
  function focusout_handler() {
    return (
      /*focusout_handler*/
      ctx[30](
        /*row*/
        ctx[48]
      )
    );
  }
  return {
    c() {
      td = element("td");
      attr(td, "contenteditable", "true");
      if (
        /*cell*/
        ctx[51] === void 0
      )
        add_render_callback(td_input_handler);
    },
    m(target, anchor) {
      insert(target, td, anchor);
      if (
        /*cell*/
        ctx[51] !== void 0
      ) {
        td.innerHTML = /*cell*/
        ctx[51];
      }
      if (!mounted) {
        dispose = [
          listen(td, "input", td_input_handler),
          listen(td, "focusin", focusin_handler),
          listen(td, "focusout", focusout_handler),
          listen(
            td,
            "keydown",
            /*disableLinebreaks*/
            ctx[16]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*glossary_pair*/
      64 && /*cell*/
      ctx[51] !== td.innerHTML) {
        td.innerHTML = /*cell*/
        ctx[51];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(td);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block_12(ctx) {
  let tr;
  let t2;
  let td;
  let button;
  let current;
  let each_value_2 = ensure_array_like(
    /*row*/
    ctx[48]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  function func_5() {
    return (
      /*func_5*/
      ctx[31](
        /*row*/
        ctx[48]
      )
    );
  }
  button = new Button_default({ props: { onClick: func_5, icon: "x" } });
  return {
    c() {
      tr = element("tr");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      td = element("td");
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(tr, null);
        }
      }
      append(tr, t2);
      append(tr, td);
      mount_component(button, td, null);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*glossary_pair, old_row, updateRow, disableLinebreaks*/
      590144) {
        each_value_2 = ensure_array_like(
          /*row*/
          ctx[48]
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(tr, t2);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
      const button_changes = {};
      if (dirty[0] & /*glossary_pair*/
      64)
        button_changes.onClick = func_5;
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(tr);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(button);
    }
  };
}
function create_each_block5(ctx) {
  let td;
  let mounted;
  let dispose;
  function td_input_handler_1() {
    ctx[32].call(
      td,
      /*each_value*/
      ctx[46],
      /*column_index*/
      ctx[47]
    );
  }
  return {
    c() {
      td = element("td");
      attr(td, "contenteditable", "true");
      if (
        /*column*/
        ctx[45] === void 0
      )
        add_render_callback(td_input_handler_1);
    },
    m(target, anchor) {
      insert(target, td, anchor);
      if (
        /*column*/
        ctx[45] !== void 0
      ) {
        td.innerHTML = /*column*/
        ctx[45];
      }
      if (!mounted) {
        dispose = [
          listen(td, "input", td_input_handler_1),
          listen(
            td,
            "keydown",
            /*keydown_handler*/
            ctx[33]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*new_row*/
      512 && /*column*/
      ctx[45] !== td.innerHTML) {
        td.innerHTML = /*column*/
        ctx[45];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(td);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_control_slot3(ctx) {
  let div;
  let dropdown;
  let t2;
  let togglebutton;
  let current;
  dropdown = new Dropdown_default({
    props: {
      class: "translator-select",
      slot: "control",
      options: (
        /*available_services*/
        ctx[15]
      ),
      value: (
        /*sync_service*/
        ctx[12]
      ),
      onChange: (
        /*func_6*/
        ctx[35]
      )
    }
  });
  togglebutton = new ToggleButton_default({
    props: {
      text: "Sync glossary",
      value: (
        /*sync_state*/
        ctx[11]
      ),
      fn: (
        /*func_7*/
        ctx[36]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(dropdown.$$.fragment);
      t2 = space();
      create_component(togglebutton.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "translator-flex-column-element");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(dropdown, div, null);
      append(div, t2);
      mount_component(togglebutton, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*sync_service*/
      4096)
        dropdown_changes.value = /*sync_service*/
        ctx2[12];
      if (dirty[0] & /*sync_service, sync_state, translator, plugin*/
      7169)
        dropdown_changes.onChange = /*func_6*/
        ctx2[35];
      dropdown.$set(dropdown_changes);
      const togglebutton_changes = {};
      if (dirty[0] & /*sync_state*/
      2048)
        togglebutton_changes.value = /*sync_state*/
        ctx2[11];
      if (dirty[0] & /*sync_service, plugin, glossaries, translator, $settings*/
      13345)
        togglebutton_changes.fn = /*func_7*/
        ctx2[36];
      togglebutton.$set(togglebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      transition_in(togglebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      transition_out(togglebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(dropdown);
      destroy_component(togglebutton);
    }
  };
}
function create_fragment19(ctx) {
  let div3;
  let settingitem0;
  let t0;
  let div0;
  let dropdown0;
  let t1;
  let button0;
  let t2;
  let dropdown1;
  let t3;
  let div2;
  let input;
  let t4;
  let div1;
  let icon;
  let t5;
  let table_1;
  let thead;
  let tr0;
  let th0;
  let span0;
  let t6;
  let t7;
  let th1;
  let span1;
  let t8;
  let t9;
  let th2;
  let t10;
  let tbody;
  let t11;
  let tr1;
  let t12;
  let td;
  let button1;
  let t13;
  let settingitem1;
  let current;
  let mounted;
  let dispose;
  settingitem0 = new SettingItem_default({
    props: {
      name: "Add & Update terms in both directions",
      description: "When a glossary entry is added or updated,<br>an entry will be added or updated for the reverse language pair as well",
      type: "toggle",
      $$slots: { control: [create_control_slot_13] },
      $$scope: { ctx }
    }
  });
  dropdown0 = new Dropdown_default({
    props: {
      options: (
        /*current_all_languages*/
        ctx[14]
      ),
      value: (
        /*source_language*/
        ctx[1]
      ),
      onChange: (
        /*func_1*/
        ctx[21]
      )
    }
  });
  button0 = new Button_default({
    props: {
      class: "translator-mobile-button",
      icon: "switch",
      size: 20,
      onClick: (
        /*func_2*/
        ctx[22]
      )
    }
  });
  dropdown1 = new Dropdown_default({
    props: {
      options: (
        /*current_all_languages*/
        ctx[14]
      ),
      value: (
        /*target_language*/
        ctx[2]
      ),
      onChange: (
        /*func_3*/
        ctx[23]
      )
    }
  });
  input = new Input_default({
    props: {
      class: "translator-filter-input",
      type: "text",
      val: (
        /*filter_text*/
        ctx[3]
      ),
      placeholder: "Filter...",
      onChange: (
        /*func_4*/
        ctx[24]
      )
    }
  });
  icon = new Icon_default({ props: { icon: "cross" } });
  let if_block0 = (
    /*sort_direction*/
    ctx[4] !== -1 && /*sort_direction*/
    ctx[4] < 2 && create_if_block_16(ctx)
  );
  let if_block1 = (
    /*sort_direction*/
    ctx[4] !== -1 && /*sort_direction*/
    ctx[4] > 1 && create_if_block8(ctx)
  );
  let each_value_1 = ensure_array_like(
    /*glossary_pair*/
    ctx[6]
  );
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });
  let each_value = ensure_array_like(
    /*new_row*/
    ctx[9]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  button1 = new Button_default({
    props: {
      onClick: (
        /*addRow*/
        ctx[17]
      ),
      icon: "plus"
    }
  });
  settingitem1 = new SettingItem_default({
    props: {
      name: "Sync glossary configuration",
      description: "When you're finished with editing your glossary, sync it to selected translation service",
      notices: [
        {
          type: "text",
          text: "If the online glossary does not support a specific language pair, or if the service does not support online glossaries at all, glossary entries <i>can</i> be applied locally if <b>`Local Glossary`</b> setting is enabled",
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div3 = element("div");
      create_component(settingitem0.$$.fragment);
      t0 = space();
      div0 = element("div");
      create_component(dropdown0.$$.fragment);
      t1 = space();
      create_component(button0.$$.fragment);
      t2 = space();
      create_component(dropdown1.$$.fragment);
      t3 = space();
      div2 = element("div");
      create_component(input.$$.fragment);
      t4 = space();
      div1 = element("div");
      create_component(icon.$$.fragment);
      t5 = space();
      table_1 = element("table");
      thead = element("thead");
      tr0 = element("tr");
      th0 = element("th");
      span0 = element("span");
      t6 = text("Source\n						");
      if (if_block0)
        if_block0.c();
      t7 = space();
      th1 = element("th");
      span1 = element("span");
      t8 = text("Target\n						");
      if (if_block1)
        if_block1.c();
      t9 = space();
      th2 = element("th");
      t10 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t11 = space();
      tr1 = element("tr");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t12 = space();
      td = element("td");
      create_component(button1.$$.fragment);
      t13 = space();
      create_component(settingitem1.$$.fragment);
      attr(div0, "class", "translator-flex-row-element translator-glossary-settings");
      attr(div1, "class", "translator-filter-input-icon");
      attr(div2, "class", "translator-glossary-buttons");
      attr(span0, "class", "translator-table-cell-header");
      attr(th0, "class", "translator-table-wide-col");
      attr(span1, "class", "translator-table-cell-header");
      attr(th1, "class", "translator-table-wide-col");
      attr(th2, "class", "translator-table-empty-col");
      attr(tr1, "class", "translator-table-cell-temporary");
      attr(table_1, "class", "translator-table");
      attr(div3, "class", "translator-flex-column-element markdown-rendered");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      mount_component(settingitem0, div3, null);
      append(div3, t0);
      append(div3, div0);
      mount_component(dropdown0, div0, null);
      append(div0, t1);
      mount_component(button0, div0, null);
      append(div0, t2);
      mount_component(dropdown1, div0, null);
      append(div3, t3);
      append(div3, div2);
      mount_component(input, div2, null);
      append(div2, t4);
      append(div2, div1);
      mount_component(icon, div1, null);
      append(div3, t5);
      append(div3, table_1);
      append(table_1, thead);
      append(thead, tr0);
      append(tr0, th0);
      append(th0, span0);
      append(span0, t6);
      if (if_block0)
        if_block0.m(span0, null);
      append(tr0, t7);
      append(tr0, th1);
      append(th1, span1);
      append(span1, t8);
      if (if_block1)
        if_block1.m(span1, null);
      append(tr0, t9);
      append(tr0, th2);
      append(table_1, t10);
      append(table_1, tbody);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(tbody, null);
        }
      }
      append(tbody, t11);
      append(tbody, tr1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(tr1, null);
        }
      }
      append(tr1, t12);
      append(tr1, td);
      mount_component(button1, td, null);
      ctx[34](table_1);
      append(div3, t13);
      mount_component(settingitem1, div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div1,
            "click",
            /*click_handler*/
            ctx[25]
          ),
          listen(
            th0,
            "click",
            /*click_handler_1*/
            ctx[26]
          ),
          listen(
            th1,
            "click",
            /*click_handler_2*/
            ctx[27]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const settingitem0_changes = {};
      if (dirty[0] & /*$settings*/
      8192 | dirty[1] & /*$$scope*/
      8388608) {
        settingitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem0.$set(settingitem0_changes);
      const dropdown0_changes = {};
      if (dirty[0] & /*source_language*/
      2)
        dropdown0_changes.value = /*source_language*/
        ctx2[1];
      if (dirty[0] & /*source_language*/
      2)
        dropdown0_changes.onChange = /*func_1*/
        ctx2[21];
      dropdown0.$set(dropdown0_changes);
      const button0_changes = {};
      if (dirty[0] & /*target_language, source_language*/
      6)
        button0_changes.onClick = /*func_2*/
        ctx2[22];
      button0.$set(button0_changes);
      const dropdown1_changes = {};
      if (dirty[0] & /*target_language*/
      4)
        dropdown1_changes.value = /*target_language*/
        ctx2[2];
      if (dirty[0] & /*target_language*/
      4)
        dropdown1_changes.onChange = /*func_3*/
        ctx2[23];
      dropdown1.$set(dropdown1_changes);
      const input_changes = {};
      if (dirty[0] & /*filter_text*/
      8)
        input_changes.val = /*filter_text*/
        ctx2[3];
      if (dirty[0] & /*filter_text*/
      8)
        input_changes.onChange = /*func_4*/
        ctx2[24];
      input.$set(input_changes);
      if (
        /*sort_direction*/
        ctx2[4] !== -1 && /*sort_direction*/
        ctx2[4] < 2
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*sort_direction*/
          16) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_16(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(span0, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*sort_direction*/
        ctx2[4] !== -1 && /*sort_direction*/
        ctx2[4] > 1
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*sort_direction*/
          16) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block8(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(span1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (dirty[0] & /*deleteRow, glossary_pair, old_row, updateRow, disableLinebreaks*/
      852288) {
        each_value_1 = ensure_array_like(
          /*glossary_pair*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_12(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(tbody, t11);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty[0] & /*new_row, addRow*/
      131584) {
        each_value = ensure_array_like(
          /*new_row*/
          ctx2[9]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(tr1, t12);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      const settingitem1_changes = {};
      if (dirty[0] & /*sync_state, sync_service, plugin, glossaries, translator, $settings*/
      15393 | dirty[1] & /*$$scope*/
      8388608) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(dropdown0.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(dropdown1.$$.fragment, local);
      transition_in(input.$$.fragment, local);
      transition_in(icon.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      transition_in(button1.$$.fragment, local);
      transition_in(settingitem1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(dropdown0.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(dropdown1.$$.fragment, local);
      transition_out(input.$$.fragment, local);
      transition_out(icon.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      transition_out(button1.$$.fragment, local);
      transition_out(settingitem1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      destroy_component(settingitem0);
      destroy_component(dropdown0);
      destroy_component(button0);
      destroy_component(dropdown1);
      destroy_component(input);
      destroy_component(icon);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
      destroy_component(button1);
      ctx[34](null);
      destroy_component(settingitem1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let $settings;
  let $all_languages;
  component_subscribe($$self, settings, ($$value) => $$invalidate(13, $settings = $$value));
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(40, $all_languages = $$value));
  let { plugin } = $$props;
  const current_all_languages = Array.from($all_languages.entries()).map(([key, value]) => {
    return { value: key, text: value };
  }).sort((a, b) => a.text.localeCompare(b.text));
  let glossaries = new DefaultDict(glossary.dicts, []);
  let source_language = glossary.source_language;
  let target_language = glossary.target_language;
  let glossary_pair;
  let language_pair = "";
  let reverse_language_pair = "";
  let table;
  let old_row = [];
  let new_row = ["", ""];
  let filter_text = "";
  let sort_direction = -1;
  let translator;
  let sync_state = null;
  const available_services = Object.entries(SERVICES_INFO).filter(([key, value]) => value.online_glossary).map(([key, value]) => ({ value: key, text: value.display_name })).sort((a, b) => a.text.localeCompare(b.text));
  let sync_service = available_services[0].value;
  function updateGlossary() {
    $$invalidate(6, glossary_pair = glossaries[language_pair]);
    filterTable();
    sortTable();
  }
  function sortTable() {
    if (sort_direction >= 0) {
      const column = sort_direction > 1 | 0;
      const descending = sort_direction % 2;
      if (!descending)
        $$invalidate(6, glossary_pair = glossary_pair.sort((a, b) => a[column].localeCompare(b[column])));
      else
        $$invalidate(6, glossary_pair = glossary_pair.sort((a, b) => b[column].localeCompare(a[column])));
    }
  }
  function filterTable() {
    $$invalidate(6, glossary_pair = glossaries[language_pair]);
    const q = (0, import_obsidian28.prepareQuery)(filter_text);
    const left_matches = glossary_pair.map((item) => (0, import_obsidian28.fuzzySearch)(q, item[0]));
    const right_matches = glossary_pair.map((item) => (0, import_obsidian28.fuzzySearch)(q, item[1]));
    const indexes = new Set(left_matches.map((x, i) => x ? i : -1).filter((x) => x >= 0).concat(...right_matches.map((x, i) => x ? i : -1).filter((x) => x >= 0)).sort((a, b) => a - b));
    if (glossary_pair.length !== indexes.size)
      $$invalidate(6, glossary_pair = glossary_pair.filter((_, i) => indexes.has(i)));
  }
  const view_scope = new import_obsidian28.Scope(app.scope);
  view_scope.register(["Mod"], "S", () => {
    $$invalidate(2, [target_language, source_language] = [source_language, target_language], target_language, $$invalidate(1, source_language));
    return false;
  });
  app.keymap.pushScope(view_scope);
  onMount(async () => {
    if (sync_service)
      $$invalidate(10, translator = await plugin.reactivity.getTranslationService(sync_service));
    $$invalidate(9, new_row = glossary.text);
  });
  onDestroy(() => {
    let local_glossaries = Object.assign({}, glossaries);
    app.vault.adapter.write(`${app.vault.configDir}/plugins/translate/glossary.json`, JSON.stringify(local_glossaries, null, "	"));
    glossary.dicts = local_glossaries;
    for (let key in glossary.dicts) {
      glossary.replacements[key] = new RegExp(glossary.dicts[key].map((item) => item[0]).join("|"), $settings.case_insensitive_glossary ? "gi" : "g");
    }
    glossary.text = new_row;
    app.keymap.popScope(view_scope);
  });
  const disableLinebreaks = (e) => {
    if (e.keyCode === 13) {
      const uncle = e.shiftKey ? e.target.parentNode.previousSibling : e.target.parentNode.nextSibling;
      if (uncle && uncle.nodeType === 1)
        uncle.children[e.target.cellIndex].focus();
      else if (!e.shiftKey)
        e.target.parentNode.parentNode.lastChild.children[e.target.cellIndex].focus();
      document.activeElement.scrollIntoView({ behavior: "smooth", block: "center" });
      e.preventDefault();
    }
  };
  function addRow() {
    $$invalidate(9, new_row[0] = new_row[0].replace(/^(?:&nbsp;|\s)+|(?:&nbsp;|\s)+$/ig, ""), new_row);
    $$invalidate(9, new_row[1] = new_row[1].replace(/^(?:&nbsp;|\s)+|(?:&nbsp;|\s)+$/ig, ""), new_row);
    if (!new_row[0] || !new_row[1])
      return;
    let duplicate_row = glossaries[language_pair].find((row) => row[0] === new_row[0]);
    let reverse_duplicate_row;
    if ($settings.glossary_bidirectional)
      reverse_duplicate_row = glossaries[reverse_language_pair].find((row) => row[0] === new_row[1]);
    if (duplicate_row || reverse_duplicate_row) {
      const src_language = $all_languages.get(source_language);
      const tgt_language = $all_languages.get(target_language);
      if (duplicate_row && duplicate_row[1] === new_row[1]) {
        plugin.message_queue(`Entry (${new_row[0]}, ${new_row[1]}) already exists in ${src_language} \u2192 ${tgt_language} glossary`, 5e3);
        return;
      }
      new PasswordModal3(
        plugin,
        "Duplicate entries detected",
        `Found a term that already exists in the glossary. Do you wish to <b>overwrite</b> it?<br>
				${!duplicate_row ? "" : `<div class="translator-confirm-glossary"><div>${src_language} \u2B62 ${tgt_language}</div>
					<div>(${duplicate_row[0]}, <span class="translator-confirm-glossary-change">${duplicate_row[1]}</span>) \u2B62
					(${new_row[0]}, <span class="translator-confirm-glossary-change">${new_row[1]}</span>)</div></div>`}<br>
				${!reverse_duplicate_row ? "" : `<div class="translator-confirm-glossary"><div>${tgt_language} \u2B62 ${src_language}</div>
					<div>(${reverse_duplicate_row[0]}, <span class="translator-confirm-glossary-change">${reverse_duplicate_row[1]}</span>) \u2B62
					(${new_row[1]}, <span class="translator-confirm-glossary-change">${new_row[0]}</span>)</div></div>`}`,
        async () => {
          if (duplicate_row)
            glossaries[language_pair].splice(glossaries[language_pair].indexOf(duplicate_row), 1);
          if ($settings.glossary_bidirectional && reverse_duplicate_row)
            $$invalidate(5, glossaries[reverse_language_pair] = glossaries[reverse_language_pair].filter((row) => row[0] !== reverse_duplicate_row[0]), glossaries);
          $$invalidate(5, glossaries[language_pair] = [...glossaries[language_pair], [...new_row]], glossaries);
          if ($settings.glossary_bidirectional)
            $$invalidate(5, glossaries[reverse_language_pair] = [...glossaries[reverse_language_pair], [new_row[1], new_row[0]]], glossaries);
          $$invalidate(9, new_row = ["", ""]);
          plugin.message_queue("Overwritten entry");
          updateGlossary();
        }
      ).open();
    } else {
      $$invalidate(5, glossaries[language_pair] = [...glossaries[language_pair], [...new_row]], glossaries);
      if ($settings.glossary_bidirectional)
        $$invalidate(5, glossaries[reverse_language_pair] = [...glossaries[reverse_language_pair], [new_row[1], new_row[0]]], glossaries);
      $$invalidate(9, new_row = ["", ""]);
      updateGlossary();
    }
    setTimeout(
      () => {
        table.children[1].lastChild.children[0].focus();
        $$invalidate(7, table.scrollTop = table.scrollHeight, table);
      },
      0
    );
  }
  function deleteRow(row) {
    $$invalidate(5, glossaries[language_pair] = glossaries[language_pair].filter((r) => r != row), glossaries);
    updateGlossary();
    if ($settings.glossary_bidirectional)
      $$invalidate(5, glossaries[reverse_language_pair] = glossaries[reverse_language_pair].filter((r) => r[0] != row[1] && r[1] != row[0]), glossaries);
  }
  function updateRow(row) {
    row[0] = row[0].replace(/^(?:&nbsp;|\s)+|(?:&nbsp;|\s)+$/ig, "");
    row[1] = row[1].replace(/^(?:&nbsp;|\s)+|(?:&nbsp;|\s)+$/ig, "");
    if (!(row[0] && row[1])) {
      let idx = glossaries[language_pair].indexOf(row);
      $$invalidate(5, glossaries[language_pair][idx] = old_row, glossaries);
      plugin.message_queue("Empty cells are not allowed");
      return;
    }
    if (row[0] === old_row[0] && row[1] === old_row[1]) {
      $$invalidate(5, glossaries[language_pair][glossaries[language_pair].indexOf(row)] = old_row, glossaries);
      return;
    }
    let duplicate_row;
    let reverse_duplicate_row;
    if (old_row[0] !== row[0]) {
      let duplicate_rows = glossaries[language_pair].filter((r) => r[0] === row[0]);
      if (duplicate_rows.length > 1) {
        duplicate_row = duplicate_rows.find((r) => r[1] !== old_row[1]);
        if (!duplicate_row) {
          $$invalidate(5, glossaries[language_pair] = glossaries[language_pair].map((r) => r === row ? old_row : r), glossaries);
          plugin.message_queue(`Entry (${row[0]}, ${row[1]}) already exists in ${$all_languages.get(source_language)} \u2192 ${$all_languages.get(target_language)} glossary`, 5e3);
          return;
        }
      }
    } else if ($settings.glossary_bidirectional) {
      let reverse_duplicate_rows = glossaries[reverse_language_pair].filter((r) => r[0] === row[1]);
      if (reverse_duplicate_rows)
        reverse_duplicate_row = reverse_duplicate_rows[0];
    }
    if (duplicate_row || reverse_duplicate_row) {
      let src_language = $all_languages.get(source_language), tgt_language = $all_languages.get(target_language);
      new PasswordModal3(
        plugin,
        "Duplicate entries detected",
        `Found a term that already exists in the glossary. Do you wish to <b>overwrite</b> it?<br>
				${!duplicate_row ? "" : `<div class="translator-confirm-glossary"><div>${src_language} \u2B62 ${tgt_language}</div>
					<div>(${duplicate_row[0]}, <span class="translator-confirm-glossary-change">${duplicate_row[1]}</span>) \u2B62
					(${row[0]}, <span class="translator-confirm-glossary-change">${row[1]}</span>)</div></div>`}
				${!reverse_duplicate_row ? "" : `<div class="translator-confirm-glossary"><div>${tgt_language} \u2B62 ${src_language}</div>
					<div>(${reverse_duplicate_row[0]}, <span class="translator-confirm-glossary-change">${reverse_duplicate_row[1]}</span>) \u2B62
					(${row[1]}, <span class="translator-confirm-glossary-change">${row[0]}</span>)</div></div>`}`,
        async () => {
          if (duplicate_row) {
            $$invalidate(5, glossaries[language_pair] = glossaries[language_pair].filter((r) => r !== duplicate_row), glossaries);
            if ($settings.glossary_bidirectional) {
              $$invalidate(
                5,
                glossaries[reverse_language_pair] = glossaries[reverse_language_pair].map((r) => r[0] === old_row[1] && r[1] === old_row[0] ? [row[1], row[0]] : r),
                glossaries
              );
            }
          }
          if (reverse_duplicate_row) {
            $$invalidate(5, glossaries[reverse_language_pair] = glossaries[reverse_language_pair].filter((r) => r !== reverse_duplicate_row), glossaries);
            $$invalidate(
              5,
              glossaries[reverse_language_pair] = glossaries[reverse_language_pair].map((r) => r[0] === old_row[1] && r[1] === old_row[0] ? [row[1], row[0]] : r),
              glossaries
            );
          }
          $$invalidate(5, glossaries[language_pair] = glossaries[language_pair].map((r) => r === old_row ? row : r), glossaries);
          plugin.message_queue(duplicate_row && reverse_duplicate_row ? "Overwritten entries" : "Overwritten entry");
          updateGlossary();
        }
      ).open();
      $$invalidate(5, glossaries[language_pair] = glossaries[language_pair].map((r) => r === row ? old_row : r), glossaries);
    } else if ($settings.glossary_bidirectional) {
      $$invalidate(
        5,
        glossaries[reverse_language_pair] = glossaries[reverse_language_pair].map((r) => r[0] === old_row[1] && r[1] === old_row[0] ? [row[1], row[0]] : r),
        glossaries
      );
    }
  }
  const func = () => set_store_value(settings, $settings.glossary_bidirectional = !$settings.glossary_bidirectional, $settings);
  const func_1 = (e) => {
    $$invalidate(1, source_language = e.target.value);
  };
  const func_2 = () => {
    $$invalidate(2, [target_language, source_language] = [source_language, target_language], target_language, $$invalidate(1, source_language));
  };
  const func_3 = (e) => {
    $$invalidate(2, target_language = e.target.value);
  };
  const func_4 = (e) => {
    $$invalidate(3, filter_text = e.target.value);
  };
  const click_handler = () => $$invalidate(3, filter_text = "");
  const click_handler_1 = () => {
    $$invalidate(4, sort_direction = sort_direction === -1 || sort_direction > 1 ? 0 : 1 - sort_direction);
  };
  const click_handler_2 = () => {
    $$invalidate(4, sort_direction = sort_direction < 2 ? 2 : 5 - sort_direction);
  };
  function td_input_handler(each_value_2, i) {
    each_value_2[i] = this.innerHTML;
    $$invalidate(6, glossary_pair);
  }
  const focusin_handler = (row) => {
    $$invalidate(8, old_row = JSON.parse(JSON.stringify(row)));
  };
  const focusout_handler = (row) => {
    updateRow(row);
  };
  const func_5 = (row) => deleteRow(row);
  function td_input_handler_1(each_value, column_index) {
    each_value[column_index] = this.innerHTML;
    $$invalidate(9, new_row);
  }
  const keydown_handler = (e) => {
    if (e.keyCode === 13) {
      if (e.shiftKey) {
        const grandfather = e.target.parentNode.parentNode;
        grandfather.children[grandfather.children.length - 2].children[0].focus();
        document.activeElement.scrollIntoView({ behavior: "smooth", block: "start" });
      } else {
        addRow();
      }
      e.preventDefault();
    }
  };
  function table_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      table = $$value;
      $$invalidate(7, table);
    });
  }
  const func_62 = async (e) => {
    $$invalidate(12, sync_service = e.target.value);
    $$invalidate(11, sync_state = null);
    $$invalidate(10, translator = await plugin.reactivity.getTranslationService(sync_service));
  };
  const func_72 = async () => {
    if (!sync_service) {
      plugin.message_queue("No translation service was selected");
      return;
    }
    const local_glossaries = Object.assign({}, glossaries);
    const output = await translator.glossary_upload(local_glossaries, $settings.service_settings[sync_service].glossary_languages, $settings.service_settings[sync_service].uploaded_glossaries || {});
    if (output.message)
      plugin.message_queue(output.message);
    if (output.identifiers) {
      set_store_value(settings, $settings.service_settings[sync_service].uploaded_glossaries = output.identifiers, $settings);
      return true;
    }
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*source_language, target_language*/
    6) {
      $: {
        language_pair = source_language + "_" + target_language;
        reverse_language_pair = target_language + "_" + source_language;
        glossary.source_language = source_language;
        glossary.target_language = target_language;
        updateGlossary();
      }
    }
    if ($$self.$$.dirty[0] & /*sort_direction*/
    16) {
      $:
        sort_direction, sortTable();
    }
    if ($$self.$$.dirty[0] & /*filter_text*/
    8) {
      $:
        filter_text, filterTable();
    }
  };
  return [
    plugin,
    source_language,
    target_language,
    filter_text,
    sort_direction,
    glossaries,
    glossary_pair,
    table,
    old_row,
    new_row,
    translator,
    sync_state,
    sync_service,
    $settings,
    current_all_languages,
    available_services,
    disableLinebreaks,
    addRow,
    deleteRow,
    updateRow,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    click_handler,
    click_handler_1,
    click_handler_2,
    td_input_handler,
    focusin_handler,
    focusout_handler,
    func_5,
    td_input_handler_1,
    keydown_handler,
    table_1_binding,
    func_62,
    func_72
  ];
}
var GlossarySettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, { plugin: 0 }, null, [-1, -1]);
  }
};
var GlossarySettings_default = GlossarySettings;

// src/ui/translator-components/settings-tabs/HotkeySettings.svelte
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  child_ctx[7] = list;
  child_ctx[8] = i;
  return child_ctx;
}
function create_else_block5(ctx) {
  let span1;
  let t0_value = getHotKeyString(
    /*hotkey*/
    ctx[6]
  ) + "";
  let t0;
  let t1;
  let span0;
  let icon;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({ props: { icon: "cross" } });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[4](
        /*hotkey*/
        ctx[6],
        /*each_value*/
        ctx[7],
        /*idx*/
        ctx[8]
      )
    );
  }
  return {
    c() {
      span1 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span0 = element("span");
      create_component(icon.$$.fragment);
      attr(span0, "class", "setting-hotkey-icon setting-delete-hotkey");
      attr(span0, "aria-label", "Delete hotkey");
      attr(span1, "class", "setting-hotkey");
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, t0);
      append(span1, t1);
      append(span1, span0);
      mount_component(icon, span0, null);
      current = true;
      if (!mounted) {
        dispose = listen(span0, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*$settings*/
      2) && t0_value !== (t0_value = getHotKeyString(
        /*hotkey*/
        ctx[6]
      ) + ""))
        set_data(t0, t0_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_17(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Blank";
      attr(span, "class", "setting-hotkey mod-empty");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_if_block9(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Press hotkey...";
      attr(span, "class", "setting-hotkey mod-active");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_control_slot4(ctx) {
  let div1;
  let div0;
  let current_block_type_index;
  let if_block;
  let t0;
  let span;
  let icon;
  let t1;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block9, create_if_block_17, create_else_block5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*current_idx*/
      ctx2[0] === /*idx*/
      ctx2[8]
    )
      return 0;
    if (!/*hotkey*/
    ctx2[6].key)
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  icon = new Icon_default({ props: { icon: "plus-circle" } });
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[5](
        /*idx*/
        ctx[8]
      )
    );
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if_block.c();
      t0 = space();
      span = element("span");
      create_component(icon.$$.fragment);
      t1 = space();
      attr(div0, "class", "setting-command-hotkeys");
      attr(span, "class", "clickable-icon setting-add-hotkey-button");
      attr(span, "aria-label", "Customize this command");
      toggle_class(
        span,
        "mod-active",
        /*idx*/
        ctx[8] === /*current_idx*/
        ctx[0]
      );
      attr(div1, "slot", "control");
      attr(div1, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if_blocks[current_block_type_index].m(div0, null);
      append(div1, t0);
      append(div1, span);
      mount_component(icon, span, null);
      append(div1, t1);
      current = true;
      if (!mounted) {
        dispose = listen(span, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div0, null);
      }
      if (!current || dirty & /*current_idx*/
      1) {
        toggle_class(
          span,
          "mod-active",
          /*idx*/
          ctx[8] === /*current_idx*/
          ctx[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if_blocks[current_block_type_index].d();
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block6(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: t(
        /*hotkey*/
        ctx[6].id
      ),
      $$slots: { control: [create_control_slot4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty & /*$settings*/
      2)
        settingitem_changes.name = t(
          /*hotkey*/
          ctx2[6].id
        );
      if (dirty & /*$$scope, current_idx, $settings*/
      515) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_fragment20(ctx) {
  let div;
  let current;
  let each_value = ensure_array_like(
    /*$settings*/
    ctx[1].hotkeys
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "hotkey-list-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*t, $settings, current_idx, document, hotkeyMapper, getHotKeyString*/
      7) {
        each_value = ensure_array_like(
          /*$settings*/
          ctx2[1].hotkeys
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let $settings;
  component_subscribe($$self, settings, ($$value) => $$invalidate(1, $settings = $$value));
  let { plugin } = $$props;
  let current_idx = null;
  onDestroy(() => {
    document.removeEventListener("keydown", hotkeyMapper);
  });
  const hotkeyMapper = (e) => {
    if (current_idx !== null && e.key !== "Shift" && e.key !== "Control" && e.key !== "Meta" && e.key !== "Alt") {
      let active_modifiers = [];
      if (e.ctrlKey)
        active_modifiers.push("Mod");
      if (e.metaKey)
        active_modifiers.push("Meta");
      if (e.altKey)
        active_modifiers.push("Alt");
      if (e.shiftKey)
        active_modifiers.push("Shift");
      if (active_modifiers.length || e.key.match(/^F\d+$/)) {
        let current_hotkey = $settings.hotkeys[current_idx];
        current_hotkey.modifiers = active_modifiers;
        current_hotkey.key = e.key.charAt(0).toUpperCase() + e.key.slice(1);
        set_store_value(settings, $settings.hotkeys[current_idx] = current_hotkey, $settings);
        set_store_value(settings, $settings.hotkeys = [...$settings.hotkeys], $settings);
      }
      if (active_modifiers.length || e.key.match(/^F\d+$/) || e.key === "Escape") {
        $$invalidate(0, current_idx = null);
        document.removeEventListener("keydown", (e2) => hotkeyMapper);
        return false;
      }
    }
  };
  const click_handler = (hotkey, each_value, idx) => {
    set_store_value(settings, each_value[idx].modifiers = [], $settings);
    set_store_value(settings, each_value[idx].key = "", $settings);
  };
  const click_handler_1 = (idx) => {
    if (current_idx === null) {
      $$invalidate(0, current_idx = idx);
      document.addEventListener("keydown", hotkeyMapper, true);
    } else if (current_idx !== idx) {
      $$invalidate(0, current_idx = idx);
    }
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(3, plugin = $$props2.plugin);
  };
  return [current_idx, $settings, hotkeyMapper, plugin, click_handler, click_handler_1];
}
var HotkeySettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, { plugin: 3 });
  }
};
var HotkeySettings_default = HotkeySettings;

// src/ui/translator-components/settings-tabs/AppearanceSettings.svelte
function create_control_slot_72(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[0].enable_animations
      ),
      onChange: (
        /*func*/
        ctx[10]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      1)
        toggle_changes.value = /*$settings*/
        ctx2[0].enable_animations;
      if (dirty & /*$settings*/
      1)
        toggle_changes.onChange = /*func*/
        ctx2[10];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot_62(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*obfuscate_keys*/
        ctx[1]
      ),
      onChange: (
        /*func_1*/
        ctx[11]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*obfuscate_keys*/
      2)
        toggle_changes.value = /*obfuscate_keys*/
        ctx2[1];
      if (dirty & /*obfuscate_keys*/
      2)
        toggle_changes.onChange = /*func_1*/
        ctx2[11];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot_53(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*hide_shortcut_tooltips_toggle*/
        ctx[2]
      ),
      onChange: (
        /*func_2*/
        ctx[12]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*hide_shortcut_tooltips_toggle*/
      4)
        toggle_changes.value = /*hide_shortcut_tooltips_toggle*/
        ctx2[2];
      if (dirty & /*hide_shortcut_tooltips_toggle, $hide_shortcut_tooltips*/
      68)
        toggle_changes.onChange = /*func_2*/
        ctx2[12];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot_43(ctx) {
  let div;
  let buttonlist;
  let t2;
  let dropdown;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*top_quickbuttons*/
        ctx[5]
      ),
      icon: "cross",
      onClick: (
        /*func_3*/
        ctx[13]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*available_quicksettings*/
        ctx[7]
      ),
      value: "",
      onChange: (
        /*func_4*/
        ctx[14]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t2 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t2);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty & /*top_quickbuttons*/
      32)
        buttonlist_changes.items = /*top_quickbuttons*/
        ctx2[5];
      if (dirty & /*$settings*/
      1)
        buttonlist_changes.onClick = /*func_3*/
        ctx2[13];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_4*/
        ctx2[14];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
    }
  };
}
function create_control_slot_33(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      class: "translator-select",
      value: (
        /*$settings*/
        ctx[0].layout_default
      ),
      options: [
        { value: 0, text: "Automatic" },
        { value: 1, text: "Vertical" },
        { value: 2, text: "Mixed" },
        { value: 3, text: "Horizontal" }
      ],
      onChange: (
        /*func_5*/
        ctx[15]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.value = /*$settings*/
        ctx2[0].layout_default;
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_5*/
        ctx2[15];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_23(ctx) {
  let div;
  let buttonlist;
  let t2;
  let dropdown;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*left_quickactions*/
        ctx[4]
      ),
      icon: "cross",
      onClick: (
        /*func_6*/
        ctx[16]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*available_quickactions*/
        ctx[8]
      ),
      value: "",
      onChange: (
        /*func_7*/
        ctx[17]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t2 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t2);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty & /*left_quickactions*/
      16)
        buttonlist_changes.items = /*left_quickactions*/
        ctx2[4];
      if (dirty & /*$settings*/
      1)
        buttonlist_changes.onClick = /*func_6*/
        ctx2[16];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_7*/
        ctx2[17];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
    }
  };
}
function create_control_slot_14(ctx) {
  let div;
  let buttonlist;
  let t2;
  let dropdown;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*right_quickactions*/
        ctx[3]
      ),
      icon: "cross",
      onClick: (
        /*func_8*/
        ctx[18]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*available_quickactions*/
        ctx[8]
      ),
      value: "",
      onChange: (
        /*func_9*/
        ctx[19]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t2 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t2);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty & /*right_quickactions*/
      8)
        buttonlist_changes.items = /*right_quickactions*/
        ctx2[3];
      if (dirty & /*$settings*/
      1)
        buttonlist_changes.onClick = /*func_8*/
        ctx2[18];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty & /*$settings*/
      1)
        dropdown_changes.onChange = /*func_9*/
        ctx2[19];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
    }
  };
}
function create_control_slot5(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[0].hide_attribution_default
      ),
      onChange: (
        /*func_10*/
        ctx[20]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      1)
        toggle_changes.value = /*$settings*/
        ctx2[0].hide_attribution_default;
      if (dirty & /*$settings*/
      1)
        toggle_changes.onChange = /*func_10*/
        ctx2[20];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_fragment21(ctx) {
  let settingitem0;
  let t0;
  let settingitem1;
  let t1;
  let settingitem2;
  let t2;
  let settingitem3;
  let t3;
  let settingitem4;
  let t4;
  let settingitem5;
  let t5;
  let settingitem6;
  let t6;
  let settingitem7;
  let t7;
  let settingitem8;
  let t8;
  let settingitem9;
  let current;
  settingitem0 = new SettingItem_default({
    props: {
      name: "General appearance settings",
      type: "heading"
    }
  });
  settingitem1 = new SettingItem_default({
    props: {
      name: "Enable plugin animations",
      type: "toggle",
      notices: [
        {
          type: "text",
          text: `Disabling this setting might introduce some visual bugs`,
          style: "translator-warning-text"
        }
      ],
      $$slots: { control: [create_control_slot_72] },
      $$scope: { ctx }
    }
  });
  settingitem2 = new SettingItem_default({
    props: {
      name: "Garble sensitive data",
      description: "Obfuscate sensitive data such as API keys and tokens",
      notices: [
        {
          type: "text",
          text: `Useful for sharing a screenshot of your settings without showing the secret data`,
          style: "translator-info-text"
        }
      ],
      type: "toggle",
      $$slots: { control: [create_control_slot_62] },
      $$scope: { ctx }
    }
  });
  settingitem3 = new SettingItem_default({
    props: {
      name: "Hide shortcut tooltips",
      description: "Do not show the keys required to trigger the button's shortcut",
      type: "toggle",
      $$slots: { control: [create_control_slot_53] },
      $$scope: { ctx }
    }
  });
  settingitem4 = new SettingItem_default({
    props: {
      name: "Translation View Defaults",
      type: "heading"
    }
  });
  settingitem5 = new SettingItem_default({
    props: {
      name: "Change default quicksettings",
      type: "toggle",
      $$slots: { control: [create_control_slot_43] },
      $$scope: { ctx }
    }
  });
  settingitem6 = new SettingItem_default({
    props: {
      name: "Change default layout",
      $$slots: { control: [create_control_slot_33] },
      $$scope: { ctx }
    }
  });
  settingitem7 = new SettingItem_default({
    props: {
      name: "Change default <b>left</b> quickactions",
      type: "toggle",
      $$slots: { control: [create_control_slot_23] },
      $$scope: { ctx }
    }
  });
  settingitem8 = new SettingItem_default({
    props: {
      name: "Change default <b>right</b> quickactions",
      type: "toggle",
      $$slots: { control: [create_control_slot_14] },
      $$scope: { ctx }
    }
  });
  settingitem9 = new SettingItem_default({
    props: {
      name: "Hide attribution info",
      type: "toggle",
      $$slots: { control: [create_control_slot5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem0.$$.fragment);
      t0 = space();
      create_component(settingitem1.$$.fragment);
      t1 = space();
      create_component(settingitem2.$$.fragment);
      t2 = space();
      create_component(settingitem3.$$.fragment);
      t3 = space();
      create_component(settingitem4.$$.fragment);
      t4 = space();
      create_component(settingitem5.$$.fragment);
      t5 = space();
      create_component(settingitem6.$$.fragment);
      t6 = space();
      create_component(settingitem7.$$.fragment);
      t7 = space();
      create_component(settingitem8.$$.fragment);
      t8 = space();
      create_component(settingitem9.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem0, target, anchor);
      insert(target, t0, anchor);
      mount_component(settingitem1, target, anchor);
      insert(target, t1, anchor);
      mount_component(settingitem2, target, anchor);
      insert(target, t2, anchor);
      mount_component(settingitem3, target, anchor);
      insert(target, t3, anchor);
      mount_component(settingitem4, target, anchor);
      insert(target, t4, anchor);
      mount_component(settingitem5, target, anchor);
      insert(target, t5, anchor);
      mount_component(settingitem6, target, anchor);
      insert(target, t6, anchor);
      mount_component(settingitem7, target, anchor);
      insert(target, t7, anchor);
      mount_component(settingitem8, target, anchor);
      insert(target, t8, anchor);
      mount_component(settingitem9, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem1_changes = {};
      if (dirty & /*$$scope, $settings*/
      2097153) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
      const settingitem2_changes = {};
      if (dirty & /*$$scope, obfuscate_keys*/
      2097154) {
        settingitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem2.$set(settingitem2_changes);
      const settingitem3_changes = {};
      if (dirty & /*$$scope, hide_shortcut_tooltips_toggle, $hide_shortcut_tooltips*/
      2097220) {
        settingitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem3.$set(settingitem3_changes);
      const settingitem5_changes = {};
      if (dirty & /*$$scope, $settings, top_quickbuttons*/
      2097185) {
        settingitem5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem5.$set(settingitem5_changes);
      const settingitem6_changes = {};
      if (dirty & /*$$scope, $settings*/
      2097153) {
        settingitem6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem6.$set(settingitem6_changes);
      const settingitem7_changes = {};
      if (dirty & /*$$scope, $settings, left_quickactions*/
      2097169) {
        settingitem7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem7.$set(settingitem7_changes);
      const settingitem8_changes = {};
      if (dirty & /*$$scope, $settings, right_quickactions*/
      2097161) {
        settingitem8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem8.$set(settingitem8_changes);
      const settingitem9_changes = {};
      if (dirty & /*$$scope, $settings*/
      2097153) {
        settingitem9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem9.$set(settingitem9_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(settingitem1.$$.fragment, local);
      transition_in(settingitem2.$$.fragment, local);
      transition_in(settingitem3.$$.fragment, local);
      transition_in(settingitem4.$$.fragment, local);
      transition_in(settingitem5.$$.fragment, local);
      transition_in(settingitem6.$$.fragment, local);
      transition_in(settingitem7.$$.fragment, local);
      transition_in(settingitem8.$$.fragment, local);
      transition_in(settingitem9.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(settingitem1.$$.fragment, local);
      transition_out(settingitem2.$$.fragment, local);
      transition_out(settingitem3.$$.fragment, local);
      transition_out(settingitem4.$$.fragment, local);
      transition_out(settingitem5.$$.fragment, local);
      transition_out(settingitem6.$$.fragment, local);
      transition_out(settingitem7.$$.fragment, local);
      transition_out(settingitem8.$$.fragment, local);
      transition_out(settingitem9.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
      }
      destroy_component(settingitem0, detaching);
      destroy_component(settingitem1, detaching);
      destroy_component(settingitem2, detaching);
      destroy_component(settingitem3, detaching);
      destroy_component(settingitem4, detaching);
      destroy_component(settingitem5, detaching);
      destroy_component(settingitem6, detaching);
      destroy_component(settingitem7, detaching);
      destroy_component(settingitem8, detaching);
      destroy_component(settingitem9, detaching);
    }
  };
}
function instance21($$self, $$props, $$invalidate) {
  let top_quickbuttons;
  let left_quickactions;
  let right_quickactions;
  let $settings;
  let $hide_shortcut_tooltips;
  component_subscribe($$self, settings, ($$value) => $$invalidate(0, $settings = $$value));
  component_subscribe($$self, hide_shortcut_tooltips, ($$value) => $$invalidate(6, $hide_shortcut_tooltips = $$value));
  let { plugin } = $$props;
  let obfuscate_keys = app.loadLocalStorage(`obfuscate_keys`) || false;
  let hide_shortcut_tooltips_toggle = app.loadLocalStorage(`hide_shortcut_tooltips_toggle`) || false;
  const available_quicksettings = QUICK_SETTINGS_BUTTONS.map((button) => {
    return { text: button.text, value: button.id };
  });
  const available_quickactions = QUICK_ACTIONS_BUTTONS.map((button) => {
    return { text: button.text, value: button.id };
  });
  const func = async (e) => {
    set_store_value(settings, $settings.enable_animations = !$settings.enable_animations, $settings);
  };
  const func_1 = async (e) => {
    $$invalidate(1, obfuscate_keys = !obfuscate_keys);
    app.saveLocalStorage("obfuscate_keys", obfuscate_keys);
  };
  const func_2 = async (e) => {
    $$invalidate(2, hide_shortcut_tooltips_toggle = !hide_shortcut_tooltips_toggle);
    app.saveLocalStorage("hide_shortcut_tooltips_toggle", hide_shortcut_tooltips_toggle);
    set_store_value(hide_shortcut_tooltips, $hide_shortcut_tooltips = hide_shortcut_tooltips_toggle, $hide_shortcut_tooltips);
  };
  const func_3 = (service, index) => {
    $settings.quicksettings_default.splice(index, 1);
    settings.set($settings);
  };
  const func_4 = (e) => {
    set_store_value(settings, $settings.quicksettings_default = [...$settings.quicksettings_default, e.target.value], $settings);
  };
  const func_5 = (e) => {
    set_store_value(settings, $settings.layout_default = parseInt(e.target.value), $settings);
  };
  const func_62 = (service, index) => {
    $settings.left_quickactions_default.splice(index, 1);
    settings.set($settings);
  };
  const func_72 = (e) => {
    set_store_value(settings, $settings.left_quickactions_default = [...$settings.left_quickactions_default, e.target.value], $settings);
  };
  const func_82 = (service, index) => {
    $settings.right_quickactions_default.splice(index, 1);
    settings.set($settings);
  };
  const func_92 = (e) => {
    set_store_value(settings, $settings.right_quickactions_default = [...$settings.right_quickactions_default, e.target.value], $settings);
  };
  const func_10 = async (e) => {
    set_store_value(settings, $settings.hide_attribution_default = !$settings.hide_attribution_default, $settings);
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(9, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    1) {
      $:
        $$invalidate(5, top_quickbuttons = Array.from($settings.quicksettings_default).map((id) => {
          return { value: id, text: QUICK_SETTINGS[id].text };
        }));
    }
    if ($$self.$$.dirty & /*$settings*/
    1) {
      $:
        $$invalidate(4, left_quickactions = $settings.left_quickactions_default.map((id) => {
          return { value: id, text: QUICK_ACTIONS[id].text };
        }));
    }
    if ($$self.$$.dirty & /*$settings*/
    1) {
      $:
        $$invalidate(3, right_quickactions = $settings.right_quickactions_default.map((id) => {
          return { value: id, text: QUICK_ACTIONS[id].text };
        }));
    }
  };
  return [
    $settings,
    obfuscate_keys,
    hide_shortcut_tooltips_toggle,
    right_quickactions,
    left_quickactions,
    top_quickbuttons,
    $hide_shortcut_tooltips,
    available_quicksettings,
    available_quickactions,
    plugin,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    func_62,
    func_72,
    func_82,
    func_92,
    func_10
  ];
}
var AppearanceSettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, { plugin: 9 });
  }
};
var AppearanceSettings_default = AppearanceSettings;

// src/ui/translator-components/settings-tabs/DetectorSettings.svelte
var import_obsidian29 = require("obsidian");
function create_if_block_18(ctx) {
  let button;
  let button_transition;
  let current;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      button.textContent = "Uninstall";
    },
    m(target, anchor) {
      insert(target, button, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[5]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!button_transition)
            button_transition = create_bidirectional_transition(button, slide, {}, true);
          button_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      if (local) {
        if (!button_transition)
          button_transition = create_bidirectional_transition(button, slide, {}, false);
        button_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (detaching && button_transition)
        button_transition.end();
      mounted = false;
      dispose();
    }
  };
}
function create_control_slot_15(ctx) {
  let div;
  let button;
  let icon;
  let t2;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({ props: { icon: "download" } });
  let if_block = (
    /*$fasttext_data*/
    ctx[3].binary && create_if_block_18(ctx)
  );
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      attr(button, "class", "translator-icon-text");
      attr(button, "aria-label", "Install");
      toggle_class(
        button,
        "translator-success",
        /*$fasttext_data*/
        ctx[3].binary
      );
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(icon, button, null);
      append(div, t2);
      if (if_block)
        if_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*$fasttext_data*/
      8) {
        toggle_class(
          button,
          "translator-success",
          /*$fasttext_data*/
          ctx2[3].binary
        );
      }
      if (
        /*$fasttext_data*/
        ctx2[3].binary
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$fasttext_data*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_18(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block10(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Always use FastText",
      description: "FastText will be used as the default language detection service",
      class: "translator-setting-subsetting",
      type: "toggle",
      $$slots: { control: [create_control_slot6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty & /*$$scope, $settings, plugin*/
      133) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot6(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[2].service_settings.fasttext.default_usage
      ),
      onChange: (
        /*func*/
        ctx[6]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      4)
        toggle_changes.value = /*$settings*/
        ctx2[2].service_settings.fasttext.default_usage;
      if (dirty & /*$settings, plugin*/
      5)
        toggle_changes.onChange = /*func*/
        ctx2[6];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_fragment22(ctx) {
  let settingitem;
  let t2;
  let if_block_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Setup local language detection",
      description: "Install FastText language models for local language detection (size: 1.72MiB)",
      type: "button",
      $$slots: { control: [create_control_slot_15] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*$fasttext_data*/
    ctx[3].binary && create_if_block10(ctx)
  );
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t2 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const settingitem_changes = {};
      if (dirty & /*$$scope, plugin, $fasttext_data, detector*/
      139) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
      if (
        /*$fasttext_data*/
        ctx2[3].binary
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$fasttext_data*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t2);
        detach(if_block_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  let $settings;
  let $fasttext_data;
  component_subscribe($$self, settings, ($$value) => $$invalidate(2, $settings = $$value));
  component_subscribe($$self, fasttext_data, ($$value) => $$invalidate(3, $fasttext_data = $$value));
  let { plugin } = $$props;
  if (!$settings.service_settings.fasttext)
    set_store_value(settings, $settings.service_settings.fasttext = DEFAULT_SETTINGS.service_settings.fasttext, $settings);
  let detector;
  onMount(async () => {
    $$invalidate(1, detector = await plugin.reactivity.getTranslationService("fasttext"));
  });
  const click_handler = async () => {
    let model_path = `${app.vault.configDir}/plugins/translate/models/fasttext/lid.176.ftz`;
    let model_result = await (0, import_obsidian29.requestUrl)({
      url: "https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.ftz"
    });
    await writeRecursive(model_path, model_result.arrayBuffer);
    let binary_path = `${app.vault.configDir}/plugins/translate/models/fasttext/fasttext_wasm.wasm`;
    let binary_result = await (0, import_obsidian29.requestUrl)({
      url: "https://github.com/Fevol/obsidian-translate/blob/master/models/fasttext_wasm.wasm?raw=true"
    });
    await writeRecursive(binary_path, binary_result.arrayBuffer);
    plugin.message_queue("Successfully installed FastText data");
    const models = {
      binary: {
        name: "fasttext_wasm.wasm",
        size: binary_result.arrayBuffer.byteLength
      },
      models: {
        "compressed": {
          name: "lid.176.ftz",
          size: model_result.arrayBuffer.byteLength
        }
      },
      version: "1.0.0"
    };
    $$invalidate(1, detector = await plugin.reactivity.getTranslationService("fasttext"));
    if (!detector?.detector)
      detector.setup_service(models);
    $$invalidate(1, detector.valid = true, detector);
    set_store_value(fasttext_data, $fasttext_data = models, $fasttext_data);
    $$invalidate(0, plugin.detector = detector, plugin);
  };
  const click_handler_1 = async (e) => {
    new PasswordModal3(
      plugin,
      "Confirm uninstallation of FastText",
      "Are you sure you want to uninstall FastText?</div>",
      async () => {
        if (await app.vault.adapter.exists(`${app.vault.configDir}/plugins/translate/models/fasttext`))
          await app.vault.adapter.rmdir(`${app.vault.configDir}/plugins/translate/models/fasttext`, true);
        set_store_value(
          fasttext_data,
          $fasttext_data = {
            binary: void 0,
            models: void 0,
            valid: void 0
          },
          $fasttext_data
        );
        if (detector) {
          $$invalidate(1, detector.valid = false, detector);
          $$invalidate(1, detector.default = false, detector);
        }
        plugin.message_queue("Successfully uninstalled FastText");
      }
    ).open();
  };
  const func = async (val) => {
    set_store_value(settings, $settings.service_settings.fasttext.default_usage = val, $settings);
    $$invalidate(0, plugin.detector.default = val, plugin);
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  return [
    plugin,
    detector,
    $settings,
    $fasttext_data,
    click_handler,
    click_handler_1,
    func
  ];
}
var DetectorSettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, { plugin: 0 });
  }
};
var DetectorSettings_default = DetectorSettings;

// src/ui/translator-components/settings-tabs/TranslatorSettings.svelte
var import_obsidian30 = require("obsidian");
function create_if_block_20(ctx) {
  let div1;
  let icon;
  let t0;
  let div0;
  let b;
  let t2;
  let t3_value = (
    /*info*/
    ctx[12].display_name + ""
  );
  let t3;
  let t4;
  let br0;
  let br1;
  let t5;
  let a;
  let t7;
  let br2;
  let t8;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: { icon: "alert-triangle", size: 50 }
  });
  return {
    c() {
      div1 = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      div0 = element("div");
      b = element("b");
      b.textContent = "WARNING:";
      t2 = space();
      t3 = text(t3_value);
      t4 = text(" has not been tested, so it is very likely that it does not work properly.");
      br0 = element("br");
      br1 = element("br");
      t5 = text("\n			If you encounter any issue, please open an issue over on\n				");
      a = element("a");
      a.textContent = "GitHub";
      t7 = text(",\n			I will try to fix it as soon as possible.");
      br2 = element("br");
      t8 = text("\n			Likewise, if the service works properly, let me know!");
      attr(div1, "class", "translator-warning-message");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(icon, div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div0, b);
      append(div0, t2);
      append(div0, t3);
      append(div0, t4);
      append(div0, br0);
      append(div0, br1);
      append(div0, t5);
      append(div0, a);
      append(div0, t7);
      append(div0, br2);
      append(div0, t8);
      current = true;
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*click_handler*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*info*/
      4096) && t3_value !== (t3_value = /*info*/
      ctx2[12].display_name + ""))
        set_data(t3, t3_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_172(ctx) {
  let settingitem;
  let t_1;
  let if_block_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Setup local translation",
      description: "Install Bergamot translation engine (size: 5.05MiB)",
      type: "button",
      notices: (
        /*translator*/
        ctx[7]?.has_autodetect_capability() ? [] : [
          {
            type: "text",
            text: `Automatic language detection is <b>disabled</b>, install FastText to enable this feature`,
            style: "translator-info-text"
          }
        ]
      ),
      $$slots: { control: [create_control_slot_18] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*$bergamot_data*/
    ctx[5].binary && create_if_block_182(ctx)
  );
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t_1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t_1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*translator*/
      128)
        settingitem_changes.notices = /*translator*/
        ctx2[7]?.has_autodetect_capability() ? [] : [
          {
            type: "text",
            text: `Automatic language detection is <b>disabled</b>, install FastText to enable this feature`,
            style: "translator-info-text"
          }
        ];
      if (dirty[0] & /*plugin, $bergamot_data, $settings, service, translator, current_available_languages, bergamot_update_available*/
      1255 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
      if (
        /*$bergamot_data*/
        ctx2[5].binary
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$bergamot_data*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_182(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
        detach(if_block_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block_19(ctx) {
  let button;
  let button_transition;
  let current;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      button.textContent = "Uninstall";
    },
    m(target, anchor) {
      insert(target, button, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[20]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!button_transition)
            button_transition = create_bidirectional_transition(button, slide, {}, true);
          button_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      if (local) {
        if (!button_transition)
          button_transition = create_bidirectional_transition(button, slide, {}, false);
        button_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      if (detaching && button_transition)
        button_transition.end();
      mounted = false;
      dispose();
    }
  };
}
function create_control_slot_18(ctx) {
  let div;
  let button;
  let icon;
  let button_aria_label_value;
  let t_1;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: {
      icon: (
        /*bergamot_update_available*/
        ctx[10] ? "refresh-cw" : "download"
      )
    }
  });
  let if_block = (
    /*$bergamot_data*/
    ctx[5].binary && create_if_block_19(ctx)
  );
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t_1 = space();
      if (if_block)
        if_block.c();
      attr(button, "aria-label", button_aria_label_value = /*bergamot_update_available*/
      ctx[10] ? "Bergamot update available" : "Install");
      attr(button, "class", "translator-icon-text");
      set_style(button, "justify-content", "center");
      set_style(button, "flex", "1");
      toggle_class(
        button,
        "translator-extra",
        /*bergamot_update_available*/
        ctx[10]
      );
      toggle_class(button, "translator-success", !/*bergamot_update_available*/
      ctx[10] && /*$bergamot_data*/
      ctx[5].binary);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(icon, button, null);
      append(div, t_1);
      if (if_block)
        if_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*bergamot_update_available*/
      1024)
        icon_changes.icon = /*bergamot_update_available*/
        ctx2[10] ? "refresh-cw" : "download";
      icon.$set(icon_changes);
      if (!current || dirty[0] & /*bergamot_update_available*/
      1024 && button_aria_label_value !== (button_aria_label_value = /*bergamot_update_available*/
      ctx2[10] ? "Bergamot update available" : "Install")) {
        attr(button, "aria-label", button_aria_label_value);
      }
      if (!current || dirty[0] & /*bergamot_update_available*/
      1024) {
        toggle_class(
          button,
          "translator-extra",
          /*bergamot_update_available*/
          ctx2[10]
        );
      }
      if (!current || dirty[0] & /*bergamot_update_available, $bergamot_data*/
      1056) {
        toggle_class(button, "translator-success", !/*bergamot_update_available*/
        ctx2[10] && /*$bergamot_data*/
        ctx2[5].binary);
      }
      if (
        /*$bergamot_data*/
        ctx2[5].binary
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$bergamot_data*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_19(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_182(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Manage Bergamot models",
      class: "translator-setting-subsetting",
      $$slots: { control: [create_control_slot_17] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*downloadable_models, $settings, service, $bergamot_data, plugin, translator, current_available_languages, $all_languages*/
      255 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_17(ctx) {
  let div;
  let buttonlist;
  let t_1;
  let dropdown;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*$bergamot_data*/
        ctx[5]?.models.map(
          /*func_1*/
          ctx[21]
        )
      ),
      icon: "cross",
      tooltip: "Uninstall",
      onClick: (
        /*func_2*/
        ctx[22]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*downloadable_models*/
        ctx[3]
      ),
      value: "",
      onChange: (
        /*func_3*/
        ctx[23]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t_1 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t_1);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty[0] & /*$bergamot_data, $all_languages*/
      48)
        buttonlist_changes.items = /*$bergamot_data*/
        ctx2[5]?.models.map(
          /*func_1*/
          ctx2[21]
        );
      if (dirty[0] & /*$bergamot_data, translator, current_available_languages, plugin*/
      165)
        buttonlist_changes.onClick = /*func_2*/
        ctx2[22];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty[0] & /*downloadable_models*/
      8)
        dropdown_changes.options = /*downloadable_models*/
        ctx2[3];
      if (dirty[0] & /*$settings, service, $bergamot_data, plugin, translator, current_available_languages*/
      231)
        dropdown_changes.onChange = /*func_3*/
        ctx2[23];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
    }
  };
}
function create_if_block_142(ctx) {
  let settingitem;
  let t0;
  let t1;
  let if_block1_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "API Key",
      description: "API key for translation service",
      type: "text",
      notices: [
        {
          type: "href",
          text: "\u24D8 Sign up for an API key here",
          url: (
            /*info*/
            ctx[12].request_key
          )
        },
        .../*api_key*/
        ctx[11]?.endsWith("==") ? [
          {
            type: "text",
            text: `API key is still encrypted`,
            style: "translator-error-text"
          }
        ] : []
      ],
      $$slots: { control: [create_control_slot_16] },
      $$scope: { ctx }
    }
  });
  let if_block0 = (
    /*info*/
    ctx[12].requires_app_id && create_if_block_162(ctx)
  );
  let if_block1 = (
    /*info*/
    ctx[12].region_options !== void 0 && create_if_block_152(ctx)
  );
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*info, api_key*/
      6144)
        settingitem_changes.notices = [
          {
            type: "href",
            text: "\u24D8 Sign up for an API key here",
            url: (
              /*info*/
              ctx2[12].request_key
            )
          },
          .../*api_key*/
          ctx2[11]?.endsWith("==") ? [
            {
              type: "text",
              text: `API key is still encrypted`,
              style: "translator-error-text"
            }
          ] : []
        ];
      if (dirty[0] & /*api_key, translator, plugin, service, $settings*/
      2243 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
      if (
        /*info*/
        ctx2[12].requires_app_id
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_162(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].region_options !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_152(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(if_block1_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function create_control_slot_16(ctx) {
  let input;
  let current;
  input = new Input_default({
    props: {
      slot: "control",
      class: (
        /*obfuscate_api_key*/
        ctx[13] ? "obfuscate-text" : ""
      ),
      val: (
        /*api_key*/
        ctx[11]
      ),
      onChange: (
        /*func_4*/
        ctx[24]
      ),
      type: "text"
    }
  });
  return {
    c() {
      create_component(input.$$.fragment);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*api_key*/
      2048)
        input_changes.val = /*api_key*/
        ctx2[11];
      if (dirty[0] & /*api_key, translator, plugin, service, $settings*/
      2243)
        input_changes.onChange = /*func_4*/
        ctx2[24];
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_if_block_162(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "App ID",
      description: "ID used for translation service",
      type: "text",
      $$slots: { control: [create_control_slot_152] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_152(ctx) {
  let input;
  let current;
  input = new Input_default({
    props: {
      slot: "control",
      val: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].app_id
      ),
      class: (
        /*obfuscate_api_key*/
        ctx[13] ? "obfuscate-text" : ""
      ),
      onChange: (
        /*func_5*/
        ctx[25]
      ),
      type: "text"
    }
  });
  return {
    c() {
      create_component(input.$$.fragment);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        input_changes.val = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].app_id;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        input_changes.onChange = /*func_5*/
        ctx2[25];
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_if_block_152(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Region",
      description: "If applicable, set the issue region of the API key",
      type: "dropdown",
      $$slots: { control: [create_control_slot_142] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*info, $settings, service, translator*/
      4290 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_142(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: (
        /*info*/
        ctx[12].region_options
      ),
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].region
      ),
      onChange: (
        /*func_6*/
        ctx[26]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*info*/
      4096)
        dropdown_changes.options = /*info*/
        ctx2[12].region_options;
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].region;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_6*/
        ctx2[26];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block_11(ctx) {
  let settingitem;
  let t_1;
  let show_if = (
    /*info*/
    ctx[12].requires_host && /*info*/
    ctx[12].default_custom_host && /*$settings*/
    (ctx[6].service_settings[
      /*service*/
      ctx[1]
    ].host === /*info*/
    ctx[12].default_custom_host || !/*info*/
    ctx[12].host_options?.find(
      /*func*/
      ctx[17]
    ))
  );
  let if_block_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Host",
      description: "Enter the URL of the translation service",
      type: "text",
      notices: [
        /*service*/
        ctx[1] === "openai_translator" ? null : {
          type: "href",
          text: "\u24D8 You can host this service locally",
          url: (
            /*info*/
            ctx[12].local_host
          )
        }
      ],
      $$slots: { control: [create_control_slot_132] },
      $$scope: { ctx }
    }
  });
  let if_block = show_if && create_if_block_122(ctx);
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t_1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t_1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*service, info*/
      4098)
        settingitem_changes.notices = [
          /*service*/
          ctx2[1] === "openai_translator" ? null : {
            type: "href",
            text: "\u24D8 You can host this service locally",
            url: (
              /*info*/
              ctx2[12].local_host
            )
          }
        ];
      if (dirty[0] & /*info, $settings, service, translator*/
      4290 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
      if (dirty[0] & /*info, $settings, service*/
      4162)
        show_if = /*info*/
        ctx2[12].requires_host && /*info*/
        ctx2[12].default_custom_host && /*$settings*/
        (ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].host === /*info*/
        ctx2[12].default_custom_host || !/*info*/
        ctx2[12].host_options?.find(
          /*func*/
          ctx2[17]
        ));
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*info, $settings, service*/
          4162) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_122(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
        detach(if_block_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_else_block6(ctx) {
  let input;
  let current;
  input = new Input_default({
    props: {
      slot: "control",
      val: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].host
      ),
      onChange: (
        /*func_8*/
        ctx[28]
      ),
      type: "text"
    }
  });
  return {
    c() {
      create_component(input.$$.fragment);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        input_changes.val = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].host;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        input_changes.onChange = /*func_8*/
        ctx2[28];
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_if_block_132(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*info*/
        ctx[12].host_options
      ),
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].host
      ),
      default_value: (
        /*info*/
        ctx[12].default_custom_host
      ),
      onChange: (
        /*func_7*/
        ctx[27]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*info*/
      4096)
        dropdown_changes.options = /*info*/
        ctx2[12].host_options;
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].host;
      if (dirty[0] & /*info*/
      4096)
        dropdown_changes.default_value = /*info*/
        ctx2[12].default_custom_host;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_7*/
        ctx2[27];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_132(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_132, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*info*/
      ctx2[12].host_options
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "slot", "control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_if_block_122(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Custom domain",
      class: "translator-setting-subsetting",
      description: "Enter an alternative service domain",
      type: "text",
      $$slots: { control: [create_control_slot_122] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_122(ctx) {
  let input;
  let current;
  input = new Input_default({
    props: {
      slot: "control",
      val: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].host
      ),
      onChange: (
        /*func_9*/
        ctx[29]
      ),
      type: "text"
    }
  });
  return {
    c() {
      create_component(input.$$.fragment);
    },
    m(target, anchor) {
      mount_component(input, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const input_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        input_changes.val = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].host;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        input_changes.onChange = /*func_9*/
        ctx2[29];
      input.$set(input_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(input.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(input.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(input, detaching);
    }
  };
}
function create_if_block_9(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Model",
      description: "Select which model to use for translation",
      type: "text",
      notices: [
        {
          type: "text",
          text: "\u24D8 GPT-4 can be more expensive but result in more accurate translations"
        }
      ],
      $$slots: { control: [create_control_slot_11] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*info, $settings, service, translator*/
      4290 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_if_block_10(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*info*/
        ctx[12].model_options
      ),
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].model
      ),
      onChange: (
        /*func_10*/
        ctx[30]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*info*/
      4096)
        dropdown_changes.options = /*info*/
        ctx2[12].model_options;
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].model;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_10*/
        ctx2[30];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_11(ctx) {
  let div;
  let current;
  let if_block = (
    /*info*/
    ctx[12].model_options && create_if_block_10(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "slot", "control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*info*/
        ctx2[12].model_options
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_10(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
    }
  };
}
function create_if_block_8(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Validate",
      description: "Ensure that the translation service is set-up properly",
      type: "button",
      $$slots: { control: [create_control_slot_10] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator, plugin, info*/
      4291 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_10(ctx) {
  let togglebutton;
  let current;
  togglebutton = new ToggleButton_default({
    props: {
      text: "Test",
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].validated
      ),
      fn: (
        /*func_11*/
        ctx[31]
      )
    }
  });
  return {
    c() {
      create_component(togglebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(togglebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const togglebutton_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        togglebutton_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].validated;
      if (dirty[0] & /*translator, plugin, $settings, service, info*/
      4291)
        togglebutton_changes.fn = /*func_11*/
        ctx2[31];
      togglebutton.$set(togglebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(togglebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(togglebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(togglebutton, detaching);
    }
  };
}
function create_control_slot_9(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].auto_translate
      ),
      onChange: (
        /*func_12*/
        ctx[32]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        toggle_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].auto_translate;
      if (dirty[0] & /*$settings, service*/
      66)
        toggle_changes.onChange = /*func_12*/
        ctx2[32];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_if_block_7(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Translation delay",
      class: "translator-setting-subsetting",
      description: "How long after the user stops typing should the translation be performed (in milliseconds)",
      type: "slider",
      $$slots: { control: [create_control_slot_8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service*/
      66 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_8(ctx) {
  let input;
  let input_min_value;
  let input_max_value;
  let input_step_value;
  let input_value_value;
  let input_aria_label_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "slot", "control");
      attr(input, "type", "range");
      attr(input, "class", "slider");
      attr(input, "min", input_min_value = 0);
      attr(input, "max", input_max_value = 2e3);
      attr(input, "step", input_step_value = 100);
      input.value = input_value_value = /*$settings*/
      ctx[6].service_settings[
        /*service*/
        ctx[1]
      ].auto_translate_interval;
      attr(input, "aria-label", input_aria_label_value = /*$settings*/
      ctx[6].service_settings[
        /*service*/
        ctx[1]
      ].auto_translate_interval ? (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].auto_translate_interval + "ms"
      ) : "Instant");
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*change_handler*/
          ctx[33]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$settings, service*/
      66 && input_value_value !== (input_value_value = /*$settings*/
      ctx2[6].service_settings[
        /*service*/
        ctx2[1]
      ].auto_translate_interval)) {
        input.value = input_value_value;
      }
      if (dirty[0] & /*$settings, service*/
      66 && input_aria_label_value !== (input_aria_label_value = /*$settings*/
      ctx2[6].service_settings[
        /*service*/
        ctx2[1]
      ].auto_translate_interval ? (
        /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].auto_translate_interval + "ms"
      ) : "Instant")) {
        attr(input, "aria-label", input_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_control_slot_73(ctx) {
  let div;
  let buttonlist;
  let t_1;
  let dropdown;
  let div_transition;
  let current;
  buttonlist = new ButtonList_default({
    props: {
      items: (
        /*filtered_languages*/
        ctx[9]
      ),
      icon: "cross",
      onClick: (
        /*func_13*/
        ctx[34]
      )
    }
  });
  dropdown = new Dropdown_default({
    props: {
      options: (
        /*selectable_languages*/
        ctx[8]
      ),
      value: "",
      onChange: (
        /*func_14*/
        ctx[35]
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(buttonlist.$$.fragment);
      t_1 = space();
      create_component(dropdown.$$.fragment);
      attr(div, "slot", "control");
      attr(div, "class", "setting-item-control");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(buttonlist, div, null);
      append(div, t_1);
      mount_component(dropdown, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const buttonlist_changes = {};
      if (dirty[0] & /*filtered_languages*/
      512)
        buttonlist_changes.items = /*filtered_languages*/
        ctx2[9];
      if (dirty[0] & /*$settings, service, current_available_languages*/
      70)
        buttonlist_changes.onClick = /*func_13*/
        ctx2[34];
      buttonlist.$set(buttonlist_changes);
      const dropdown_changes = {};
      if (dirty[0] & /*selectable_languages*/
      256)
        dropdown_changes.options = /*selectable_languages*/
        ctx2[8];
      if (dirty[0] & /*$settings, service, current_available_languages*/
      70)
        dropdown_changes.onChange = /*func_14*/
        ctx2[35];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(buttonlist.$$.fragment, local);
      transition_in(dropdown.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, {}, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(buttonlist.$$.fragment, local);
      transition_out(dropdown.$$.fragment, local);
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, {}, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(buttonlist);
      destroy_component(dropdown);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function create_control_slot_63(ctx) {
  let button;
  let current;
  button = new Button_default({
    props: {
      slot: "control",
      icon: "switch",
      tooltip: "Update languages",
      onClick: (
        /*func_15*/
        ctx[36]
      )
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty[0] & /*translator, plugin, $bergamot_data, bergamot_update_available, $settings, service*/
      1251)
        button_changes.onClick = /*func_15*/
        ctx2[36];
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Update Glossary Languages",
      description: "Update the list of languages that can be used for the server-side glossary",
      $$slots: { control: [create_control_slot_54] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*translator, plugin, $settings, service*/
      195 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_54(ctx) {
  let button;
  let current;
  button = new Button_default({
    props: {
      slot: "control",
      icon: "switch",
      tooltip: "Update languages",
      onClick: (
        /*func_16*/
        ctx[37]
      )
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const button_changes = {};
      if (dirty[0] & /*translator, plugin, $settings, service*/
      195)
        button_changes.onClick = /*func_16*/
        ctx2[37];
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_if_block11(ctx) {
  let settingitem;
  let t0;
  let t1;
  let t2;
  let t3;
  let if_block3_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Service-specific options",
      type: "heading"
    }
  });
  let if_block0 = (
    /*info*/
    ctx[12].options.split_sentences && create_if_block_52(ctx)
  );
  let if_block1 = (
    /*info*/
    ctx[12].options.preserve_formatting && create_if_block_43(ctx)
  );
  let if_block2 = (
    /*info*/
    ctx[12].options.formality && create_if_block_33(ctx)
  );
  let if_block3 = (
    /*info*/
    ctx[12].options.profanity_filter && create_if_block_110(ctx)
  );
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      if (if_block2)
        if_block2.c();
      t3 = space();
      if (if_block3)
        if_block3.c();
      if_block3_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, if_block3_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*info*/
        ctx2[12].options.split_sentences
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_52(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].options.preserve_formatting
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_43(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t2.parentNode, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].options.formality
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_33(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t3.parentNode, t3);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].options.profanity_filter
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_110(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(if_block3_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
      if (if_block3)
        if_block3.d(detaching);
    }
  };
}
function create_if_block_52(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Split sentences",
      description: "Determine if sentences should be split into separate lines",
      type: "dropdown",
      $$slots: { control: [create_control_slot_44] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_44(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].split_sentences ?? "none"
      ),
      options: [
        {
          value: "none",
          text: "Do not split sentences"
        },
        {
          value: "punctuation",
          text: "Split sentences on punctuation"
        },
        {
          value: "newline",
          text: "Split sentences on newlines"
        },
        {
          value: "both",
          text: "Split sentences on both"
        }
      ],
      onChange: (
        /*func_17*/
        ctx[38]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].split_sentences ?? "none";
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_17*/
        ctx2[38];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block_43(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Preserve formatting",
      description: "Do not change the formatting of the source text",
      type: "toggle",
      $$slots: { control: [create_control_slot_34] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_34(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].preserve_formatting
      ),
      onChange: (
        /*func_18*/
        ctx[39]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        toggle_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].preserve_formatting;
      if (dirty[0] & /*$settings, service, translator*/
      194)
        toggle_changes.onChange = /*func_18*/
        ctx2[39];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_if_block_33(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Formality",
      description: "How formal should the translation be",
      type: "dropdown",
      notices: [
        {
          type: "info",
          text: "Not all languages support formality",
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot_24] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot_24(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].formality ?? "default"
      ),
      options: [
        { value: "default", text: "Default" },
        { value: "formal", text: "More formal" },
        { value: "informal", text: "Less formal" }
      ],
      onChange: (
        /*func_19*/
        ctx[40]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].formality ?? "default";
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_19*/
        ctx2[40];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block_110(ctx) {
  let settingitem;
  let t_1;
  let if_block_anchor;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Profanity filter",
      description: "If profanity should be filtered out of the translation",
      type: "dropdown",
      $$slots: { control: [create_control_slot_19] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*$settings*/
    ctx[6].service_settings[
      /*service*/
      ctx[1]
    ].profanity_filter?.action === "mark" && create_if_block_23(ctx)
  );
  return {
    c() {
      create_component(settingitem.$$.fragment);
      t_1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      insert(target, t_1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
      if (
        /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].profanity_filter?.action === "mark"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$settings, service*/
          66) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_23(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t_1);
        detach(if_block_anchor);
      }
      destroy_component(settingitem, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_control_slot_19(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].profanity_filter?.action ?? "none"
      ),
      options: [
        {
          value: "none",
          text: "Do not filter profanity"
        },
        {
          value: "mark",
          text: "Mask profanity with marker"
        },
        {
          value: "delete",
          text: "Remove profanity"
        }
      ],
      onChange: (
        /*func_20*/
        ctx[41]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].profanity_filter?.action ?? "none";
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_20*/
        ctx2[41];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_if_block_23(ctx) {
  let settingitem;
  let current;
  settingitem = new SettingItem_default({
    props: {
      name: "Profanity marker",
      description: "The type of marker to use when masking profanity",
      type: "dropdown",
      class: "translator-setting-subsetting",
      $$slots: { control: [create_control_slot7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(settingitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const settingitem_changes = {};
      if (dirty[0] & /*$settings, service, translator*/
      194 | dirty[1] & /*$$scope*/
      65536) {
        settingitem_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem.$set(settingitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(settingitem, detaching);
    }
  };
}
function create_control_slot7(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      value: (
        /*$settings*/
        ctx[6].service_settings[
          /*service*/
          ctx[1]
        ].profanity_filter?.marker ?? "mask"
      ),
      options: [{ value: "mask", text: "Mask" }, { value: "html-tag", text: "HTML tag" }],
      onChange: (
        /*func_21*/
        ctx[42]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty[0] & /*$settings, service*/
      66)
        dropdown_changes.value = /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].profanity_filter?.marker ?? "mask";
      if (dirty[0] & /*$settings, service, translator*/
      194)
        dropdown_changes.onChange = /*func_21*/
        ctx2[42];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_fragment23(ctx) {
  let show_if = UNTESTED_SERVICES.includes(
    /*service*/
    ctx[1]
  );
  let t0;
  let settingitem0;
  let t1;
  let t2;
  let t3;
  let t4;
  let t5;
  let t6;
  let settingitem1;
  let t7;
  let settingitem2;
  let t8;
  let t9;
  let settingitem3;
  let t10;
  let settingitem4;
  let t11;
  let t12;
  let if_block8_anchor;
  let current;
  let if_block0 = show_if && create_if_block_20(ctx);
  settingitem0 = new SettingItem_default({
    props: { name: "Service set-up", type: "heading" }
  });
  let if_block1 = (
    /*service*/
    ctx[1] === "bergamot" && create_if_block_172(ctx)
  );
  let if_block2 = (
    /*info*/
    ctx[12].requires_api_key !== void 0 && create_if_block_142(ctx)
  );
  let if_block3 = (
    /*info*/
    ctx[12].requires_host && create_if_block_11(ctx)
  );
  let if_block4 = (
    /*service*/
    ctx[1] === "openai_translator" && /*translator*/
    ctx[7]?.requires_api_key && create_if_block_9(ctx)
  );
  let if_block5 = (
    /*service*/
    ctx[1] !== "bergamot" && create_if_block_8(ctx)
  );
  settingitem1 = new SettingItem_default({
    props: {
      name: "Translator settings",
      type: "heading"
    }
  });
  settingitem2 = new SettingItem_default({
    props: {
      name: "Automatic translate",
      description: "Translate text as it is being typed",
      type: "toggle",
      notices: (
        /*service*/
        ctx[1] === "bergamot" ? [] : [
          {
            text: "May result in the character quota of the service being spent more quickly",
            style: "translator-warning-text"
          }
        ]
      ),
      $$slots: { control: [create_control_slot_9] },
      $$scope: { ctx }
    }
  });
  let if_block6 = (
    /*$settings*/
    ctx[6].service_settings[
      /*service*/
      ctx[1]
    ].auto_translate && create_if_block_7(ctx)
  );
  settingitem3 = new SettingItem_default({
    props: {
      name: "Language selection",
      description: "Languages available when using the 'Selection Mode' filter",
      $$slots: { control: [create_control_slot_73] },
      $$scope: { ctx }
    }
  });
  settingitem4 = new SettingItem_default({
    props: {
      name: "Update Languages",
      description: "Update the list of available languages",
      $$slots: { control: [create_control_slot_63] },
      $$scope: { ctx }
    }
  });
  let if_block7 = (
    /*info*/
    ctx[12].online_glossary && create_if_block_6(ctx)
  );
  let if_block8 = (
    /*info*/
    ctx[12].options && create_if_block11(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      create_component(settingitem0.$$.fragment);
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      if (if_block2)
        if_block2.c();
      t3 = space();
      if (if_block3)
        if_block3.c();
      t4 = space();
      if (if_block4)
        if_block4.c();
      t5 = space();
      if (if_block5)
        if_block5.c();
      t6 = space();
      create_component(settingitem1.$$.fragment);
      t7 = space();
      create_component(settingitem2.$$.fragment);
      t8 = space();
      if (if_block6)
        if_block6.c();
      t9 = space();
      create_component(settingitem3.$$.fragment);
      t10 = space();
      create_component(settingitem4.$$.fragment);
      t11 = space();
      if (if_block7)
        if_block7.c();
      t12 = space();
      if (if_block8)
        if_block8.c();
      if_block8_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      mount_component(settingitem0, target, anchor);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, t4, anchor);
      if (if_block4)
        if_block4.m(target, anchor);
      insert(target, t5, anchor);
      if (if_block5)
        if_block5.m(target, anchor);
      insert(target, t6, anchor);
      mount_component(settingitem1, target, anchor);
      insert(target, t7, anchor);
      mount_component(settingitem2, target, anchor);
      insert(target, t8, anchor);
      if (if_block6)
        if_block6.m(target, anchor);
      insert(target, t9, anchor);
      mount_component(settingitem3, target, anchor);
      insert(target, t10, anchor);
      mount_component(settingitem4, target, anchor);
      insert(target, t11, anchor);
      if (if_block7)
        if_block7.m(target, anchor);
      insert(target, t12, anchor);
      if (if_block8)
        if_block8.m(target, anchor);
      insert(target, if_block8_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*service*/
      2)
        show_if = UNTESTED_SERVICES.includes(
          /*service*/
          ctx2[1]
        );
      if (show_if) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*service*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_20(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*service*/
        ctx2[1] === "bergamot"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*service*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_172(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t2.parentNode, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].requires_api_key !== void 0
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_142(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t3.parentNode, t3);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].requires_host
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_11(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(t4.parentNode, t4);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (
        /*service*/
        ctx2[1] === "openai_translator" && /*translator*/
        ctx2[7]?.requires_api_key
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
          if (dirty[0] & /*service, translator*/
          130) {
            transition_in(if_block4, 1);
          }
        } else {
          if_block4 = create_if_block_9(ctx2);
          if_block4.c();
          transition_in(if_block4, 1);
          if_block4.m(t5.parentNode, t5);
        }
      } else if (if_block4) {
        group_outros();
        transition_out(if_block4, 1, 1, () => {
          if_block4 = null;
        });
        check_outros();
      }
      if (
        /*service*/
        ctx2[1] !== "bergamot"
      ) {
        if (if_block5) {
          if_block5.p(ctx2, dirty);
          if (dirty[0] & /*service*/
          2) {
            transition_in(if_block5, 1);
          }
        } else {
          if_block5 = create_if_block_8(ctx2);
          if_block5.c();
          transition_in(if_block5, 1);
          if_block5.m(t6.parentNode, t6);
        }
      } else if (if_block5) {
        group_outros();
        transition_out(if_block5, 1, 1, () => {
          if_block5 = null;
        });
        check_outros();
      }
      const settingitem2_changes = {};
      if (dirty[0] & /*service*/
      2)
        settingitem2_changes.notices = /*service*/
        ctx2[1] === "bergamot" ? [] : [
          {
            text: "May result in the character quota of the service being spent more quickly",
            style: "translator-warning-text"
          }
        ];
      if (dirty[0] & /*$settings, service*/
      66 | dirty[1] & /*$$scope*/
      65536) {
        settingitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem2.$set(settingitem2_changes);
      if (
        /*$settings*/
        ctx2[6].service_settings[
          /*service*/
          ctx2[1]
        ].auto_translate
      ) {
        if (if_block6) {
          if_block6.p(ctx2, dirty);
          if (dirty[0] & /*$settings, service*/
          66) {
            transition_in(if_block6, 1);
          }
        } else {
          if_block6 = create_if_block_7(ctx2);
          if_block6.c();
          transition_in(if_block6, 1);
          if_block6.m(t9.parentNode, t9);
        }
      } else if (if_block6) {
        group_outros();
        transition_out(if_block6, 1, 1, () => {
          if_block6 = null;
        });
        check_outros();
      }
      const settingitem3_changes = {};
      if (dirty[0] & /*selectable_languages, $settings, service, current_available_languages, filtered_languages*/
      838 | dirty[1] & /*$$scope*/
      65536) {
        settingitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem3.$set(settingitem3_changes);
      const settingitem4_changes = {};
      if (dirty[0] & /*translator, plugin, $bergamot_data, bergamot_update_available, $settings, service*/
      1251 | dirty[1] & /*$$scope*/
      65536) {
        settingitem4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem4.$set(settingitem4_changes);
      if (
        /*info*/
        ctx2[12].online_glossary
      ) {
        if (if_block7) {
          if_block7.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block7, 1);
          }
        } else {
          if_block7 = create_if_block_6(ctx2);
          if_block7.c();
          transition_in(if_block7, 1);
          if_block7.m(t12.parentNode, t12);
        }
      } else if (if_block7) {
        group_outros();
        transition_out(if_block7, 1, 1, () => {
          if_block7 = null;
        });
        check_outros();
      }
      if (
        /*info*/
        ctx2[12].options
      ) {
        if (if_block8) {
          if_block8.p(ctx2, dirty);
          if (dirty[0] & /*info*/
          4096) {
            transition_in(if_block8, 1);
          }
        } else {
          if_block8 = create_if_block11(ctx2);
          if_block8.c();
          transition_in(if_block8, 1);
          if_block8.m(if_block8_anchor.parentNode, if_block8_anchor);
        }
      } else if (if_block8) {
        group_outros();
        transition_out(if_block8, 1, 1, () => {
          if_block8 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(settingitem0.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(if_block4);
      transition_in(if_block5);
      transition_in(settingitem1.$$.fragment, local);
      transition_in(settingitem2.$$.fragment, local);
      transition_in(if_block6);
      transition_in(settingitem3.$$.fragment, local);
      transition_in(settingitem4.$$.fragment, local);
      transition_in(if_block7);
      transition_in(if_block8);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(settingitem0.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(if_block4);
      transition_out(if_block5);
      transition_out(settingitem1.$$.fragment, local);
      transition_out(settingitem2.$$.fragment, local);
      transition_out(if_block6);
      transition_out(settingitem3.$$.fragment, local);
      transition_out(settingitem4.$$.fragment, local);
      transition_out(if_block7);
      transition_out(if_block8);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(t4);
        detach(t5);
        detach(t6);
        detach(t7);
        detach(t8);
        detach(t9);
        detach(t10);
        detach(t11);
        detach(t12);
        detach(if_block8_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      destroy_component(settingitem0, detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
      if (if_block3)
        if_block3.d(detaching);
      if (if_block4)
        if_block4.d(detaching);
      if (if_block5)
        if_block5.d(detaching);
      destroy_component(settingitem1, detaching);
      destroy_component(settingitem2, detaching);
      if (if_block6)
        if_block6.d(detaching);
      destroy_component(settingitem3, detaching);
      destroy_component(settingitem4, detaching);
      if (if_block7)
        if_block7.d(detaching);
      if (if_block8)
        if_block8.d(detaching);
    }
  };
}
function instance23($$self, $$props, $$invalidate) {
  let $all_languages;
  let $bergamot_data;
  let $settings;
  let $available_languages;
  let $spellcheck_languages;
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(4, $all_languages = $$value));
  component_subscribe($$self, bergamot_data, ($$value) => $$invalidate(5, $bergamot_data = $$value));
  component_subscribe($$self, settings, ($$value) => $$invalidate(6, $settings = $$value));
  component_subscribe($$self, available_languages, ($$value) => $$invalidate(44, $available_languages = $$value));
  component_subscribe($$self, spellcheck_languages, ($$value) => $$invalidate(45, $spellcheck_languages = $$value));
  let { plugin } = $$props;
  let { service } = $$props;
  let translator;
  let old_service = "";
  let current_available_languages = [];
  let selectable_languages;
  let filtered_languages;
  let downloadable_models;
  let bergamot_update_available = $bergamot_data.models && $bergamot_data.version < $settings.service_settings.bergamot?.version;
  let api_key = null;
  let info = {};
  let obfuscate_api_key = app.loadLocalStorage("obfuscate_keys") || false;
  async function changedService() {
    $$invalidate(7, translator = await plugin.reactivity.getTranslationService(service, old_service));
    $$invalidate(12, info = SERVICES_INFO[service]);
    if (info?.requires_api_key)
      $$invalidate(11, api_key = await plugin.reactivity.getAPIKey(service, $settings.security_setting));
    $$invalidate(2, current_available_languages = translator.available_languages || $settings.service_settings[service].available_languages);
    old_service = service;
  }
  async function updateBergamot() {
    let updatable_models = $settings.service_settings.bergamot.downloadable_models.filter((model) => {
      const other = $bergamot_data.models.find((x) => x.locale === model.locale);
      return other && model.size !== other.size;
    });
    let binary_path = `${app.vault.configDir}/plugins/translate/models/bergamot/bergamot-translator-worker.wasm`;
    let binary_result = await (0, import_obsidian30.requestUrl)({
      url: "https://github.com/mozilla/firefox-translations/blob/main/extension/model/static/translation/bergamot-translator-worker.wasm?raw=true"
    });
    await writeRecursive(binary_path, binary_result.arrayBuffer);
    const rootURL = "https://storage.googleapis.com/bergamot-models-sandbox";
    let current_models = $bergamot_data.models;
    for (let model of updatable_models) {
      for (let modelfile of model.files) {
        const path = `${app.vault.configDir}/plugins/translate/models/bergamot/${model.locale}/${modelfile.name}`;
        const stats = await app.vault.adapter.stat(path);
        if (!stats || stats.size !== modelfile.size) {
          const file = await (0, import_obsidian30.requestUrl)({
            url: `${rootURL}/${$settings.service_settings.bergamot.version}/${modelfile.usage === "from" ? `${model.locale}en` : `en${model.locale}`}/${modelfile.name}`
          });
          if (file.status !== 200) {
            plugin.message_queue(`Failed to update ${t(model.locale)} language model, aborting update`);
            return;
          }
          await app.vault.adapter.writeBinary(path, file.arrayBuffer);
        }
      }
      const model_index = current_models.findIndex((x) => x.locale === model.locale);
      let to_remove = current_models[model_index].files.filter((x) => !model.files.find((y) => y.name === x.name));
      for (let file of to_remove)
        await app.vault.adapter.remove(`${app.vault.configDir}/plugins/translate/models/bergamot/${model.locale}/${file.name}`);
      current_models[model_index] = model;
    }
    set_store_value(
      bergamot_data,
      $bergamot_data = {
        binary: $bergamot_data.binary,
        version: $settings.service_settings.bergamot.version,
        models: current_models
      },
      $bergamot_data
    );
    $$invalidate(10, bergamot_update_available = false);
    plugin.message_queue(`Bergamot language models updated successfully`);
  }
  function invalidateService() {
    set_store_value(settings, $settings.service_settings[service].validated = null, $settings);
    $$invalidate(7, translator.valid = null, translator);
  }
  function filterLanguages(languages) {
    if (service in SERVICES_INFO && SERVICES_INFO[service].type === "translation") {
      $$invalidate(8, selectable_languages = languages.filter((locale2) => {
        return !$settings.service_settings[service].selected_languages.includes(locale2);
      }).map((locale2) => {
        return {
          "value": locale2,
          "text": $all_languages.get(locale2) || locale2
        };
      }).sort((a, b) => {
        return a.text.localeCompare(b.text);
      }));
      selectable_languages.unshift({ "value": "", "text": "+" });
      $$invalidate(9, filtered_languages = $settings.service_settings[service].selected_languages.filter((locale2) => languages.includes(locale2)).map((locale2) => {
        return {
          "value": locale2,
          "text": $all_languages.get(locale2) || locale2
        };
      }).sort((a, b) => a.text.localeCompare(b.text)));
      if (service === $settings.translation_service) {
        if ($settings.filter_mode === "0")
          set_store_value(available_languages, $available_languages = languages, $available_languages);
        else if ($settings.filter_mode === "1")
          set_store_value(
            available_languages,
            $available_languages = languages.filter((locale2) => {
              return $spellcheck_languages.includes(locale2);
            }),
            $available_languages
          );
        else if ($settings.filter_mode === "2")
          set_store_value(
            available_languages,
            $available_languages = languages.filter((locale2) => {
              return $settings.service_settings[service].selected_languages.includes(locale2);
            }),
            $available_languages
          );
      }
    }
  }
  const func = (x) => x.value === $settings.service_settings[service].host;
  const click_handler = () => {
    openGithubIssueLink(info.display_name, {});
  };
  const click_handler_1 = async () => {
    if (bergamot_update_available) {
      await updateBergamot();
      translator.update_data($bergamot_data);
    } else {
      let binary_path = `${app.vault.configDir}/plugins/translate/models/bergamot/bergamot-translator-worker.wasm`;
      let binary_result = await (0, import_obsidian30.requestUrl)({
        url: "https://github.com/mozilla/firefox-translations/blob/main/extension/model/static/translation/bergamot-translator-worker.wasm?raw=true"
      });
      await writeRecursive(binary_path, binary_result.arrayBuffer);
      if (!$bergamot_data.models)
        set_store_value(
          bergamot_data,
          $bergamot_data = {
            binary: {},
            models: [],
            version: $settings.service_settings.bergamot.version
          },
          $bergamot_data
        );
      set_store_value(
        bergamot_data,
        $bergamot_data.binary = {
          name: "bergamot-translator-worker.wasm",
          size: binary_result.arrayBuffer.byteLength
        },
        $bergamot_data
      );
      translator.setup_service($bergamot_data);
      plugin.message_queue("Successfully installed Bergamot binary");
    }
  };
  const click_handler_2 = async (e) => {
    new PasswordModal3(
      plugin,
      "Confirm uninstallation of Bergamot",
      "Are you sure you want to uninstall Bergamot?<br><div class='translator-warning-text'>This will also remove all local models you've installed.</div>",
      async () => {
        if (await app.vault.adapter.exists(`${app.vault.configDir}/plugins/translate/models/bergamot`))
          await app.vault.adapter.rmdir(`${app.vault.configDir}/plugins/translate/models/bergamot`, true);
        set_store_value(
          bergamot_data,
          $bergamot_data = {
            binary: void 0,
            models: void 0,
            version: void 0
          },
          $bergamot_data
        );
        set_store_value(settings, $settings.service_settings[service].validated = null, $settings);
        plugin.message_queue("Successfully uninstalled Bergamot and its language models");
        $$invalidate(7, translator.valid = false, translator);
        $$invalidate(2, current_available_languages = []);
      }
    ).open();
  };
  const func_1 = (model) => {
    return {
      "value": model.locale,
      "text": `${$all_languages.get(model.locale)} (${humanFileSize(model.size, false)})${model.dev ? " [DEV]" : ""}`
    };
  };
  const func_2 = async (e) => {
    const model = $bergamot_data.models.find((x) => x.locale === e);
    const model_dir = `${app.vault.configDir}/plugins/translate/models/bergamot/${model.locale}/`;
    if (await app.vault.adapter.exists(model_dir))
      await app.vault.adapter.rmdir(model_dir, true);
    const model_idx = $bergamot_data.models.findIndex((x) => x.locale === model.locale);
    $bergamot_data.models.splice(model_idx, 1);
    translator.update_data($bergamot_data);
    bergamot_data.set($bergamot_data);
    $$invalidate(2, current_available_languages = translator.available_languages);
    plugin.message_queue(`Successfully removed ${t(model.locale)} language model`);
  };
  const func_3 = async (e) => {
    if (e.target.value) {
      const model = $settings.service_settings[service].downloadable_models.find((x) => x.locale === e.target.value);
      const rootURL = "https://storage.googleapis.com/bergamot-models-sandbox";
      const version = $bergamot_data.models ? $bergamot_data.version : $settings.service_settings.bergamot.version;
      let avg_download_speed = navigator.connection.downlink * 1e6;
      let total_size = model.files.reduce((acc, cur) => acc + cur.size, 0);
      const progress_bar_length = 10;
      let progress_bar = new import_obsidian30.Notice(`Downloading ${model.files.length} files
Progress:		   [${"\u2001".repeat(progress_bar_length)}]
Remaining time: ???s`, 0);
      try {
        for (const [index, modelfile] of model.files.sort((a, b) => {
          return b.size - a.size;
        }).entries()) {
          const start_time = Date.now();
          const path = `${app.vault.configDir}/plugins/translate/models/bergamot/${model.locale}/${modelfile.name}`;
          const stats = await app.vault.adapter.stat(path);
          if (stats && stats.size === modelfile.size)
            continue;
          const file = await (0, import_obsidian30.requestUrl)({
            url: `${rootURL}/${version}/${modelfile.usage === "from" ? `${model.locale}en` : `en${model.locale}`}/${modelfile.name}`
          });
          let execution_time = (Date.now() - start_time) / 1e3;
          if (!index)
            avg_download_speed = modelfile.size / execution_time;
          else
            avg_download_speed = avg_download_speed * index / (index + 1) + modelfile.size / execution_time / (index + 1);
          if (file.status !== 200) {
            progress_bar.hide();
            plugin.message_queue(`Failed to download ${t(model.locale)} language model`);
            return;
          }
          await writeRecursive(path, file.arrayBuffer);
          if (progress_bar.noticeEl.isConnected) {
            const progress = Math.round(index / model.files.length * progress_bar_length);
            const remaining_time = (total_size / avg_download_speed * 1.2).toFixed(2);
            total_size -= modelfile.size;
            progress_bar.setMessage(`Downloading ${model.files.length} files
Progress:		   [${"\u2588".repeat(progress) + "\u2001".repeat(progress_bar_length - progress)}]
Remaining time: ${remaining_time}s [${humanFileSize(avg_download_speed, true) + "/s"}]`);
          }
        }
        const model_idx = $bergamot_data.models.findIndex((x) => x.locale === model.locale);
        if (model_idx !== -1)
          $bergamot_data.models.splice(model_idx, 1);
        set_store_value(bergamot_data, $bergamot_data.models = [...$bergamot_data.models, model], $bergamot_data);
        translator.update_data($bergamot_data);
        $$invalidate(2, current_available_languages = translator.available_languages);
        if (progress_bar.noticeEl.isConnected) {
          progress_bar.setMessage(`Successfully installed ${t(model.locale)} model
Progress:		   [${"\u2588".repeat(progress_bar_length)}]
Remaining time: Finished!`);
          setTimeout(() => progress_bar.hide(), 4e3);
        } else {
          plugin.message_queue(`Successfully installed ${t(model.locale)} model`, 4e3);
        }
      } catch (e2) {
        console.log("Installing language model failed: ", e2);
        if (progress_bar.noticeEl.isConnected) {
          progress_bar.setMessage(`Installation of ${t(model.locale)} model failed
Progress:		   [${"\u21AF".repeat(progress_bar_length)}]
Remaining time:		   Failed!
$Reason: ${e2.message}`);
        } else {
          plugin.message_queue(`Installation of ${t(model.locale)} model failed
Reason: ${e2.message}`, 0);
        }
      }
    }
  };
  const func_4 = (e) => {
    $$invalidate(11, api_key = e.target.value);
    translator.update_settings({ api_key: e.target.value });
    plugin.reactivity.setAPIKey(service, $settings.security_setting, e.target.value);
    invalidateService();
  };
  const func_5 = (e) => {
    set_store_value(settings, $settings.service_settings[service].app_id = e.target.value, $settings);
    translator.update_settings({ app_id: e.target.value });
    invalidateService();
  };
  const func_62 = (e) => {
    set_store_value(settings, $settings.service_settings[service].region = e.target.value, $settings);
    translator.update_settings({ region: e.target.value });
    invalidateService();
  };
  const func_72 = (e) => {
    set_store_value(settings, $settings.service_settings[service].host = e.target.value, $settings);
    translator.update_settings({ host: e.target.value });
    invalidateService();
  };
  const func_82 = (e) => {
    set_store_value(settings, $settings.service_settings[service].host = e.target.value, $settings);
    translator.update_settings({ host: e.target.value });
    invalidateService();
  };
  const func_92 = (e) => {
    set_store_value(settings, $settings.service_settings[service].host = e.target.value, $settings);
    translator.update_settings({ host: e.target.value });
    invalidateService();
  };
  const func_10 = (e) => {
    set_store_value(settings, $settings.service_settings[service].model = e.target.value, $settings);
    translator.update_settings({ model: e.target.value });
    invalidateService();
  };
  const func_11 = async () => {
    let validation_results = await translator.validate();
    if (validation_results.message)
      plugin.message_queue(validation_results.message, !validation_results.valid ? 5e3 : 3e3);
    if (validation_results.host)
      set_store_value(settings, $settings.service_settings[service].host = validation_results.host, $settings);
    if (validation_results.valid && info.standard_languages) {
      set_store_value(settings, $settings.service_settings[service].premium = validation_results.premium, $settings);
      set_store_value(settings, $settings.service_settings[service].available_languages = (await translator.languages()).languages, $settings);
      plugin.reactivity.updateAvailableLocales();
    }
    set_store_value(settings, $settings.service_settings[service].validated = validation_results.valid, $settings);
    return validation_results.valid;
  };
  const func_12 = (val) => {
    set_store_value(settings, $settings.service_settings[service].auto_translate = val, $settings);
  };
  const change_handler = (e) => {
    set_store_value(settings, $settings.service_settings[service].auto_translate_interval = parseInt(e.target.value), $settings);
  };
  const func_13 = (locale2) => {
    set_store_value(settings, $settings.service_settings[service].selected_languages = $settings.service_settings[service].selected_languages.filter((l) => l !== locale2), $settings);
    filterLanguages(current_available_languages);
  };
  const func_14 = (e) => {
    set_store_value(settings, $settings.service_settings[service].selected_languages = [...$settings.service_settings[service].selected_languages, e.target.value], $settings);
    filterLanguages(current_available_languages);
    e.target.value = "";
  };
  const func_15 = async () => {
    let return_values = await translator.languages();
    if (return_values.message)
      plugin.message_queue(return_values.message);
    if (return_values.languages) {
      if (return_values.data) {
        if (return_values.data > $bergamot_data?.version)
          $$invalidate(10, bergamot_update_available = true);
        set_store_value(settings, $settings.service_settings[service].downloadable_models = return_values.languages, $settings);
        set_store_value(settings, $settings.service_settings[service].version = return_values.data, $settings);
      } else {
        set_store_value(settings, $settings.service_settings[service].available_languages = return_values.languages, $settings);
      }
      plugin.reactivity.updateAvailableLocales();
      plugin.message_queue("Languages updated");
    }
  };
  const func_16 = async () => {
    const output = await translator.glossary_languages();
    if (output.message)
      plugin.message_queue(output.message);
    if (output.languages) {
      set_store_value(settings, $settings.service_settings[service].glossary_languages = output.languages, $settings);
      plugin.message_queue("Glossary languages updated");
    }
  };
  const func_17 = (e) => {
    set_store_value(settings, $settings.service_settings[service].split_sentences = e.target.value, $settings);
    $$invalidate(7, translator.options.split_sentences = e.target.value, translator);
  };
  const func_18 = (val) => {
    set_store_value(settings, $settings.service_settings[service].preserve_formatting = val, $settings);
    $$invalidate(7, translator.options.preserve_formatting = val, translator);
  };
  const func_19 = (e) => {
    set_store_value(settings, $settings.service_settings[service].formality = e.target.value, $settings);
    $$invalidate(7, translator.options.formality = e.target.value, translator);
  };
  const func_20 = (val) => {
    let profanity = $settings.service_settings[service].profanity_filter ?? {};
    profanity.action = val.target.value;
    set_store_value(settings, $settings.service_settings[service].profanity_filter = profanity, $settings);
    $$invalidate(7, translator.options.profanity_filter = profanity, translator);
  };
  const func_21 = (val) => {
    set_store_value(settings, $settings.service_settings[service].profanity_filter.marker = val.target.value, $settings);
    $$invalidate(7, translator.options.profanity_filter.marker = val.target.value, translator);
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("service" in $$props2)
      $$invalidate(1, service = $$props2.service);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*service*/
    2) {
      $:
        service, changedService();
    }
    if ($$self.$$.dirty[0] & /*current_available_languages*/
    4) {
      $:
        filterLanguages(current_available_languages);
    }
    if ($$self.$$.dirty[0] & /*service, $bergamot_data, $settings, $all_languages, downloadable_models*/
    122) {
      $: {
        if (service === "bergamot" && $bergamot_data) {
          let models = $settings.service_settings[service].downloadable_models;
          if (models) {
            $$invalidate(3, downloadable_models = Array.from(models).filter((model) => {
              return !$bergamot_data.models?.some((other) => {
                return other.locale === model.locale;
              });
            }).map((model) => {
              return {
                "value": model.locale,
                "text": `${$all_languages.get(model.locale)} (${humanFileSize(model.size, false)})${model.dev ? " [DEV]" : ""}`
              };
            }).sort((a, b) => {
              return a.text.localeCompare(b.text);
            }));
            downloadable_models.unshift({ "value": "", "text": "+" });
          }
        }
      }
    }
  };
  return [
    plugin,
    service,
    current_available_languages,
    downloadable_models,
    $all_languages,
    $bergamot_data,
    $settings,
    translator,
    selectable_languages,
    filtered_languages,
    bergamot_update_available,
    api_key,
    info,
    obfuscate_api_key,
    updateBergamot,
    invalidateService,
    filterLanguages,
    func,
    click_handler,
    click_handler_1,
    click_handler_2,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    func_62,
    func_72,
    func_82,
    func_92,
    func_10,
    func_11,
    func_12,
    change_handler,
    func_13,
    func_14,
    func_15,
    func_16,
    func_17,
    func_18,
    func_19,
    func_20,
    func_21
  ];
}
var TranslatorSettings = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment23, safe_not_equal, { plugin: 0, service: 1 }, null, [-1, -1]);
  }
};
var TranslatorSettings_default = TranslatorSettings;

// src/ui/translator-components/SettingsPage.svelte
var import_obsidian31 = require("obsidian");
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i].id;
  child_ctx[15] = list[i].name;
  child_ctx[16] = list[i].icon;
  child_ctx[18] = i;
  return child_ctx;
}
function create_each_block7(ctx) {
  let div2;
  let div0;
  let icon;
  let t0;
  let div1;
  let t1_value = (
    /*name*/
    ctx[15] + ""
  );
  let t1;
  let t2;
  let div2_aria_label_value;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: {
      icon: (
        /*icon*/
        ctx[16]
      ),
      class: (
        /*id*/
        ctx[14] === /*$settings*/
        ctx[4].translation_service ? "translator-selected-element" : ""
      )
    }
  });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[9](
        /*index*/
        ctx[18]
      )
    );
  }
  function contextmenu_handler(...args) {
    return (
      /*contextmenu_handler*/
      ctx[10](
        /*id*/
        ctx[14],
        ...args
      )
    );
  }
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      create_component(icon.$$.fragment);
      t0 = space();
      div1 = element("div");
      t1 = text(t1_value);
      t2 = space();
      set_style(div0, "display", "flex");
      attr(div1, "class", "translator-navigation-item-text");
      toggle_class(
        div1,
        "translator-navigation-selected-item-text",
        /*$settings_tab*/
        ctx[3] !== /*id*/
        ctx[14]
      );
      attr(div2, "class", "translator-navigation-item");
      attr(div2, "aria-label", div2_aria_label_value = `${/*name*/
      ctx[15]} settings`);
      toggle_class(
        div2,
        "translator-navigation-item-selected",
        /*$settings_tab*/
        ctx[3] === /*id*/
        ctx[14]
      );
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      mount_component(icon, div0, null);
      append(div2, t0);
      append(div2, div1);
      append(div1, t1);
      append(div2, t2);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div2, "click", click_handler),
          listen(div2, "contextmenu", contextmenu_handler)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty & /*tabs*/
      2)
        icon_changes.icon = /*icon*/
        ctx[16];
      if (dirty & /*tabs, $settings*/
      18)
        icon_changes.class = /*id*/
        ctx[14] === /*$settings*/
        ctx[4].translation_service ? "translator-selected-element" : "";
      icon.$set(icon_changes);
      if ((!current || dirty & /*tabs*/
      2) && t1_value !== (t1_value = /*name*/
      ctx[15] + ""))
        set_data(t1, t1_value);
      if (!current || dirty & /*$settings_tab, tabs*/
      10) {
        toggle_class(
          div1,
          "translator-navigation-selected-item-text",
          /*$settings_tab*/
          ctx[3] !== /*id*/
          ctx[14]
        );
      }
      if (!current || dirty & /*tabs*/
      2 && div2_aria_label_value !== (div2_aria_label_value = `${/*name*/
      ctx[15]} settings`)) {
        attr(div2, "aria-label", div2_aria_label_value);
      }
      if (!current || dirty & /*$settings_tab, tabs*/
      10) {
        toggle_class(
          div2,
          "translator-navigation-item-selected",
          /*$settings_tab*/
          ctx[3] === /*id*/
          ctx[14]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      destroy_component(icon);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_key_block(ctx) {
  let div;
  let switch_instance;
  let div_intro;
  let div_outro;
  let current;
  var switch_value = (
    /*getComponent*/
    ctx[5]()
  );
  function switch_props(ctx2) {
    return {
      props: {
        plugin: (
          /*plugin*/
          ctx2[0]
        ),
        settings,
        service: (
          /*$settings_tab*/
          ctx2[3]
        )
      }
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
  }
  return {
    c() {
      div = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (switch_instance)
        mount_component(switch_instance, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty & /*plugin*/
      1)
        switch_instance_changes.plugin = /*plugin*/
        ctx2[0];
      if (dirty & /*$settings_tab*/
      8)
        switch_instance_changes.service = /*$settings_tab*/
        ctx2[3];
      if (switch_value !== (switch_value = /*getComponent*/
      ctx2[5]())) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (div_outro)
            div_outro.end(1);
          div_intro = create_in_transition(div, horizontalSlide, { duration: 400, delay: 400 });
          div_intro.start();
        });
      }
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      if (div_intro)
        div_intro.invalidate();
      if (local) {
        div_outro = create_out_transition(div, slide, { duration: 400 });
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (switch_instance)
        destroy_component(switch_instance);
      if (detaching && div_outro)
        div_outro.end();
    }
  };
}
function create_fragment24(ctx) {
  let div;
  let nav;
  let t2;
  let previous_key = (
    /*$settings_tab*/
    ctx[3]
  );
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*tabs*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let key_block = create_key_block(ctx);
  return {
    c() {
      div = element("div");
      nav = element("nav");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      key_block.c();
      attr(nav, "class", "translator-navigation-bar");
      attr(nav, "tabindex", "0");
      toggle_class(div, "disable-animations", !/*$settings*/
      ctx[4].enable_animations);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, nav);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(nav, null);
        }
      }
      append(div, t2);
      key_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          nav,
          "keydown",
          /*keydown_handler*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*tabs, $settings_tab, changedTabs, ALL_SERVICES, Menu, ALL_TRANSLATOR_SERVICES, $settings, plugin, tab_idx*/
      95) {
        each_value = ensure_array_like(
          /*tabs*/
          ctx2[1]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(nav, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty & /*$settings_tab*/
      8 && safe_not_equal(previous_key, previous_key = /*$settings_tab*/
      ctx2[3])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(div, null);
      } else {
        key_block.p(ctx2, dirty);
      }
      if (!current || dirty & /*$settings*/
      16) {
        toggle_class(div, "disable-animations", !/*$settings*/
        ctx2[4].enable_animations);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(key_block);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
      key_block.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function instance24($$self, $$props, $$invalidate) {
  let $settings_tab;
  let $available_detector_services;
  let $available_translator_services;
  let $settings;
  component_subscribe($$self, settings_tab, ($$value) => $$invalidate(3, $settings_tab = $$value));
  component_subscribe($$self, available_detector_services, ($$value) => $$invalidate(7, $available_detector_services = $$value));
  component_subscribe($$self, available_translator_services, ($$value) => $$invalidate(8, $available_translator_services = $$value));
  component_subscribe($$self, settings, ($$value) => $$invalidate(4, $settings = $$value));
  let { plugin } = $$props;
  let tabs = generateTabs();
  let tab_idx = tabs.findIndex((t2) => t2.id === $settings_tab);
  function generateTabs() {
    return [
      ...SETTINGS_TABS,
      ...$available_translator_services.map((service) => ({
        id: service,
        name: SERVICES_INFO[service].display_name,
        icon: service
      })),
      ...$available_detector_services.map((service) => ({
        id: service,
        name: SERVICES_INFO[service].display_name,
        icon: service
      }))
    ];
  }
  let translator;
  function getComponent() {
    switch ($settings_tab) {
      case "general":
        return GeneralSettings_default;
      case "functionality":
        return FunctionalitySettings_default;
      case "glossary":
        return GlossarySettings_default;
      case "hotkeys":
        return HotkeySettings_default;
      case "appearance":
        return AppearanceSettings_default;
      case "fasttext":
        return DetectorSettings_default;
      default:
        return TranslatorSettings_default;
    }
  }
  async function changedTabs(index) {
    $$invalidate(2, tab_idx = index);
    const new_tab = tabs[index].id;
    set_store_value(settings_tab, $settings_tab = new_tab, $settings_tab);
  }
  const click_handler = (index) => {
    changedTabs(index);
  };
  const contextmenu_handler = (id, e) => {
    if (ALL_SERVICES.includes(id)) {
      let menu = new import_obsidian31.Menu();
      if (ALL_TRANSLATOR_SERVICES.contains(id)) {
        menu.addItem((item) => {
          item.setTitle("Set as default").setIcon("translate").onClick((e2) => {
            set_store_value(settings, $settings.translation_service = id, $settings);
          });
        });
      }
      menu.addItem((item) => {
        item.setTitle("Hide service").setIcon("eye-off").onClick((e2) => {
          if (!$settings.filtered_services.length) {
            set_store_value(settings, $settings.filtered_services = ALL_SERVICES.filter((s) => s !== id), $settings);
          } else {
            set_store_value(settings, $settings.filtered_services = $settings.filtered_services.filter((s) => s !== id), $settings);
          }
          plugin.reactivity.filterAvailableServices();
          if ($settings_tab === id) {
            $$invalidate(2, tab_idx -= 1);
            set_store_value(settings_tab, $settings_tab = tabs[tab_idx].id, $settings_tab);
          }
        });
      });
      menu.showAtMouseEvent(e);
    }
  };
  const keydown_handler = (e) => {
    if (e.key === "Tab") {
      if (e.metaKey || e.ctrlKey)
        return true;
      else if (e.shiftKey)
        changedTabs(((tab_idx - 1) % tabs.length + tabs.length) % tabs.length);
      else
        changedTabs((tab_idx + 1) % tabs.length);
      e.preventDefault();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$available_translator_services, $available_detector_services*/
    384) {
      $:
        $available_translator_services, $available_detector_services, $$invalidate(1, tabs = generateTabs());
    }
  };
  return [
    plugin,
    tabs,
    tab_idx,
    $settings_tab,
    $settings,
    getComponent,
    changedTabs,
    $available_detector_services,
    $available_translator_services,
    click_handler,
    contextmenu_handler,
    keydown_handler
  ];
}
var SettingsPage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment24, safe_not_equal, { plugin: 0 });
  }
};
var SettingsPage_default = SettingsPage;

// src/ui/translator-components/ViewPage.svelte
var import_obsidian32 = require("obsidian");
function get_each_context_22(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[76] = list[i];
  return child_ctx;
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[71] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[71] = list[i];
  return child_ctx;
}
function create_if_block_62(ctx) {
  let div1;
  let div0;
  let current;
  let each_value_2 = ensure_array_like(
    /*top_buttons*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_22(get_each_context_22(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "nav-buttons-container");
      attr(div1, "class", "nav-header");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*top_buttons, top_button_states, top_button_actions, top_button_disabled*/
      9445440) {
        each_value_2 = ensure_array_like(
          /*top_buttons*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_22(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_22(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_72(ctx) {
  let div;
  let icon;
  let t_1;
  let div_aria_label_value;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: {
      icon: QUICK_SETTINGS[
        /*button*/
        ctx[76]
      ].icon[
        /*top_button_states*/
        ctx[13][
          /*button*/
          ctx[76]
        ]
      ]
    }
  });
  return {
    c() {
      div = element("div");
      create_component(icon.$$.fragment);
      t_1 = space();
      attr(div, "aria-label", div_aria_label_value = QUICK_SETTINGS[
        /*button*/
        ctx[76]
      ].tooltip[
        /*top_button_states*/
        ctx[13][
          /*button*/
          ctx[76]
        ]
      ]);
      attr(div, "class", "nav-action-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(icon, div, null);
      append(div, t_1);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", function() {
          if (is_function(
            /*top_button_actions*/
            ctx[23][
              /*button*/
              ctx[76]
            ]
          ))
            ctx[23][
              /*button*/
              ctx[76]
            ].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty[0] & /*top_buttons, top_button_states*/
      8256)
        icon_changes.icon = QUICK_SETTINGS[
          /*button*/
          ctx[76]
        ].icon[
          /*top_button_states*/
          ctx[13][
            /*button*/
            ctx[76]
          ]
        ];
      icon.$set(icon_changes);
      if (!current || dirty[0] & /*top_buttons, top_button_states*/
      8256 && div_aria_label_value !== (div_aria_label_value = QUICK_SETTINGS[
        /*button*/
        ctx[76]
      ].tooltip[
        /*top_button_states*/
        ctx[13][
          /*button*/
          ctx[76]
        ]
      ])) {
        attr(div, "aria-label", div_aria_label_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(icon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_22(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !/*top_button_disabled*/
  ctx[20][
    /*button*/
    ctx[76]
  ] && create_if_block_72(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (!/*top_button_disabled*/
      ctx2[20][
        /*button*/
        ctx2[76]
      ]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*top_button_disabled, top_buttons*/
          1048640) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_72(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_header_slot(ctx) {
  let div;
  let current;
  let if_block = (
    /*top_buttons*/
    ctx[6].length && create_if_block_62(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "slot", "header");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*top_buttons*/
        ctx2[6].length
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*top_buttons*/
          64) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_62(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
    }
  };
}
function create_if_block_53(ctx) {
  let div;
  let current;
  let each_value_1 = ensure_array_like(
    /*left_buttons*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "translator-textarea-quickbuttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*left_buttons, $hide_shortcut_tooltips, $settings, left_button_actions*/
      20973696) {
        each_value_1 = ensure_array_like(
          /*left_buttons*/
          ctx2[7]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_13(ctx) {
  let button;
  let current;
  function func_3(...args) {
    return (
      /*func_3*/
      ctx[47](
        /*quick_button*/
        ctx[71],
        ...args
      )
    );
  }
  function func_4(...args) {
    return (
      /*func_4*/
      ctx[48](
        /*quick_button*/
        ctx[71],
        ...args
      )
    );
  }
  function func_5() {
    return (
      /*func_5*/
      ctx[49](
        /*quick_button*/
        ctx[71]
      )
    );
  }
  button = new Button_default({
    props: {
      class: "translator-rounded-button clickable-icon",
      icon: QUICK_ACTIONS[
        /*quick_button*/
        ctx[71]
      ].icon[0],
      tooltip: QUICK_ACTIONS[
        /*quick_button*/
        ctx[71]
      ].tooltip[0] + /*$hide_shortcut_tooltips*/
      (ctx[22] || !/*$settings*/
      ctx[11].hotkeys.find(func_3).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx[11].hotkeys.find(func_4)
      )}]`),
      onClick: func_5
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const button_changes = {};
      if (dirty[0] & /*left_buttons*/
      128)
        button_changes.icon = QUICK_ACTIONS[
          /*quick_button*/
          ctx[71]
        ].icon[0];
      if (dirty[0] & /*left_buttons, $hide_shortcut_tooltips, $settings*/
      4196480)
        button_changes.tooltip = QUICK_ACTIONS[
          /*quick_button*/
          ctx[71]
        ].tooltip[0] + /*$hide_shortcut_tooltips*/
        (ctx[22] || !/*$settings*/
        ctx[11].hotkeys.find(func_3).key ? "" : `
[${getHotKeyString(
          /*$settings*/
          ctx[11].hotkeys.find(func_4)
        )}]`);
      if (dirty[0] & /*left_buttons*/
      128)
        button_changes.onClick = func_5;
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_if_block_44(ctx) {
  let button;
  let icon;
  let button_aria_label_value;
  let button_transition;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({ props: { icon: "translate", size: 20 } });
  return {
    c() {
      button = element("button");
      create_component(icon.$$.fragment);
      attr(button, "class", "translator-button");
      attr(button, "aria-label", button_aria_label_value = `Translate${/*$hide_shortcut_tooltips*/
      ctx[22] || !/*$settings*/
      ctx[11].hotkeys.find(func_8).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx[11].hotkeys.find(func_9)
      )}]`}`);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(icon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[53]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty[0] & /*$hide_shortcut_tooltips, $settings*/
      4196352 && button_aria_label_value !== (button_aria_label_value = `Translate${/*$hide_shortcut_tooltips*/
      ctx2[22] || !/*$settings*/
      ctx2[11].hotkeys.find(func_8).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx2[11].hotkeys.find(func_9)
      )}]`}`)) {
        attr(button, "aria-label", button_aria_label_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!button_transition)
            button_transition = create_bidirectional_transition(button, horizontalSlide, { duration: 300 }, true);
          button_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      if (local) {
        if (!button_transition)
          button_transition = create_bidirectional_transition(button, horizontalSlide, { duration: 300 }, false);
        button_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      destroy_component(icon);
      if (detaching && button_transition)
        button_transition.end();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_34(ctx) {
  let div;
  let current;
  let each_value = ensure_array_like(
    /*right_buttons*/
    ctx[8]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "translator-textarea-quickbuttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*right_buttons, $hide_shortcut_tooltips, $settings, right_button_actions*/
      37751040) {
        each_value = ensure_array_like(
          /*right_buttons*/
          ctx2[8]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block8(ctx) {
  let button;
  let current;
  function func_12(...args) {
    return (
      /*func_12*/
      ctx[56](
        /*quick_button*/
        ctx[71],
        ...args
      )
    );
  }
  function func_13(...args) {
    return (
      /*func_13*/
      ctx[57](
        /*quick_button*/
        ctx[71],
        ...args
      )
    );
  }
  function func_14() {
    return (
      /*func_14*/
      ctx[58](
        /*quick_button*/
        ctx[71]
      )
    );
  }
  button = new Button_default({
    props: {
      class: "translator-rounded-button clickable-icon",
      icon: QUICK_ACTIONS[
        /*quick_button*/
        ctx[71]
      ].icon[0],
      tooltip: QUICK_ACTIONS[
        /*quick_button*/
        ctx[71]
      ].tooltip[0] + /*$hide_shortcut_tooltips*/
      (ctx[22] || !/*$settings*/
      ctx[11].hotkeys.find(func_12).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx[11].hotkeys.find(func_13)
      )}]`),
      onClick: func_14
    }
  });
  return {
    c() {
      create_component(button.$$.fragment);
    },
    m(target, anchor) {
      mount_component(button, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const button_changes = {};
      if (dirty[0] & /*right_buttons*/
      256)
        button_changes.icon = QUICK_ACTIONS[
          /*quick_button*/
          ctx[71]
        ].icon[0];
      if (dirty[0] & /*right_buttons, $hide_shortcut_tooltips, $settings*/
      4196608)
        button_changes.tooltip = QUICK_ACTIONS[
          /*quick_button*/
          ctx[71]
        ].tooltip[0] + /*$hide_shortcut_tooltips*/
        (ctx[22] || !/*$settings*/
        ctx[11].hotkeys.find(func_12).key ? "" : `
[${getHotKeyString(
          /*$settings*/
          ctx[11].hotkeys.find(func_13)
        )}]`);
      if (dirty[0] & /*right_buttons*/
      256)
        button_changes.onClick = func_14;
      button.$set(button_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(button, detaching);
    }
  };
}
function create_if_block12(ctx) {
  let div1;
  let div0;
  let t0;
  let a;
  let icon;
  let t1;
  let t2_value = SERVICES_INFO[
    /*$translation_service*/
    ctx[10]
  ].display_name + "";
  let t2;
  let a_href_value;
  let t3;
  let t4;
  let current;
  icon = new Icon_default({
    props: { icon: (
      /*$translation_service*/
      ctx[10]
    ) }
  });
  let if_block0 = (
    /*plugin*/
    ctx[3].detector && /*$translation_service*/
    ctx[10] === "bergamot" && create_if_block_24(ctx)
  );
  let if_block1 = (
    /*services*/
    ctx[26][
      /*$translation_service*/
      ctx[10]
    ].attribution !== void 0 && create_if_block_111(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text("Using\n					");
      a = element("a");
      create_component(icon.$$.fragment);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      attr(a, "href", a_href_value = /*services*/
      ctx[26][
        /*$translation_service*/
        ctx[10]
      ].url);
      attr(a, "target", "_blank");
      attr(a, "class", "translator-icon-text translator-service-text");
      attr(div0, "class", "translator-attribution-column-text");
      attr(div1, "class", "translator-attribution-column");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div0, a);
      mount_component(icon, a, null);
      append(a, t1);
      append(a, t2);
      append(div0, t3);
      if (if_block0)
        if_block0.m(div0, null);
      append(div1, t4);
      if (if_block1)
        if_block1.m(div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*$translation_service*/
      1024)
        icon_changes.icon = /*$translation_service*/
        ctx2[10];
      icon.$set(icon_changes);
      if ((!current || dirty[0] & /*$translation_service*/
      1024) && t2_value !== (t2_value = SERVICES_INFO[
        /*$translation_service*/
        ctx2[10]
      ].display_name + ""))
        set_data(t2, t2_value);
      if (!current || dirty[0] & /*$translation_service*/
      1024 && a_href_value !== (a_href_value = /*services*/
      ctx2[26][
        /*$translation_service*/
        ctx2[10]
      ].url)) {
        attr(a, "href", a_href_value);
      }
      if (
        /*plugin*/
        ctx2[3].detector && /*$translation_service*/
        ctx2[10] === "bergamot"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*plugin, $translation_service*/
          1032) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_24(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*services*/
        ctx2[26][
          /*$translation_service*/
          ctx2[10]
        ].attribution !== void 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*$translation_service*/
          1024) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_111(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(icon);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
}
function create_if_block_24(ctx) {
  let t0;
  let a;
  let icon;
  let t1;
  let a_href_value;
  let current;
  icon = new Icon_default({ props: { icon: "fasttext" } });
  return {
    c() {
      t0 = text("with\n						");
      a = element("a");
      create_component(icon.$$.fragment);
      t1 = text("\n							FastText");
      attr(a, "href", a_href_value = /*services*/
      ctx[26]["fasttext"].url);
      attr(a, "target", "_blank");
      attr(a, "class", "translator-icon-text translator-service-text");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, a, anchor);
      mount_component(icon, a, null);
      append(a, t1);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(a);
      }
      destroy_component(icon);
    }
  };
}
function create_if_block_111(ctx) {
  let icon;
  let current;
  icon = new Icon_default({
    props: {
      icon: ICONS[
        /*$translation_service*/
        ctx[10] + "_attribution"
      ]
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*$translation_service*/
      1024)
        icon_changes.icon = ICONS[
          /*$translation_service*/
          ctx2[10] + "_attribution"
        ];
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_view_slot(ctx) {
  let div5;
  let div1;
  let dropdown0;
  let t0;
  let div0;
  let textarea0;
  let t1;
  let t2;
  let div2;
  let button;
  let icon;
  let button_aria_label_value;
  let t3;
  let t4;
  let div4;
  let dropdown1;
  let t5;
  let div3;
  let textarea1;
  let t6;
  let t7;
  let div5_class_value;
  let current;
  let mounted;
  let dispose;
  dropdown0 = new Dropdown_default({
    props: {
      class: "translator-select",
      value: (
        /*language_from*/
        ctx[0]
      ),
      options: (
        /*autodetect_capability*/
        ctx[15] ? [
          /*detected_language*/
          ctx[18] ? {
            value: "auto",
            text: `Detect Language (${t(
              /*detected_language*/
              ctx[18]
            )})`
          } : { value: "auto", text: "Detect Language" },
          .../*selectable_languages*/
          ctx[19]
        ] : (
          /*selectable_languages*/
          ctx[19]
        )
      ),
      onChange: (
        /*func*/
        ctx[44]
      )
    }
  });
  textarea0 = new TextArea_default({
    props: {
      placeholder: "Type here...",
      class: "translator-textarea",
      text: (
        /*text_from*/
        ctx[16]
      ),
      typingdelay: (
        /*auto_translate*/
        ctx[2] && /*$settings*/
        ctx[11].service_settings[
          /*$translation_service*/
          ctx[10]
        ]?.auto_translate_interval
      ),
      onChange: (
        /*func_1*/
        ctx[45]
      ),
      onContextmenu: (
        /*func_2*/
        ctx[46]
      )
    }
  });
  let if_block0 = (
    /*left_buttons*/
    ctx[7]?.length && create_if_block_53(ctx)
  );
  icon = new Icon_default({ props: { icon: "switch", size: 20 } });
  let if_block1 = !/*auto_translate*/
  ctx[2] && create_if_block_44(ctx);
  dropdown1 = new Dropdown_default({
    props: {
      class: "translator-select",
      value: (
        /*language_to*/
        ctx[1]
      ),
      options: (
        /*selectable_languages*/
        ctx[19]
      ),
      onChange: (
        /*func_10*/
        ctx[54]
      )
    }
  });
  textarea1 = new TextArea_default({
    props: {
      placeholder: "Translation",
      class: "translator-textarea",
      text: (
        /*text_to*/
        ctx[17]
      ),
      onContextmenu: (
        /*func_11*/
        ctx[55]
      )
    }
  });
  let if_block2 = (
    /*right_buttons*/
    ctx[8]?.length && create_if_block_34(ctx)
  );
  let if_block3 = (
    /*show_attribution*/
    ctx[5] && create_if_block12(ctx)
  );
  return {
    c() {
      div5 = element("div");
      div1 = element("div");
      create_component(dropdown0.$$.fragment);
      t0 = space();
      div0 = element("div");
      create_component(textarea0.$$.fragment);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      div2 = element("div");
      button = element("button");
      create_component(icon.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      t4 = space();
      div4 = element("div");
      create_component(dropdown1.$$.fragment);
      t5 = space();
      div3 = element("div");
      create_component(textarea1.$$.fragment);
      t6 = space();
      if (if_block2)
        if_block2.c();
      t7 = space();
      if (if_block3)
        if_block3.c();
      attr(div0, "class", "translator-textarea-column");
      attr(div1, "class", "translator-column translator-left-column");
      attr(button, "class", "translator-button");
      attr(button, "aria-label", button_aria_label_value = `Switch languages around${/*$hide_shortcut_tooltips*/
      ctx[22] || !/*$settings*/
      ctx[11].hotkeys.find(func_6).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx[11].hotkeys.find(func_7)
      )}]`}`);
      attr(div2, "class", "translator-button-container translator-center-column");
      attr(div3, "class", "translator-textarea-column");
      attr(div4, "class", "translator-column translator-right-column");
      attr(div5, "slot", "view");
      attr(div5, "class", div5_class_value = "translator-view translator-" + /*current_layout*/
      ctx[14] + "-layout");
      toggle_class(div5, "disable-animations", !/*$settings*/
      ctx[11].enable_animations);
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div1);
      mount_component(dropdown0, div1, null);
      append(div1, t0);
      append(div1, div0);
      mount_component(textarea0, div0, null);
      append(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append(div5, t2);
      append(div5, div2);
      append(div2, button);
      mount_component(icon, button, null);
      append(div2, t3);
      if (if_block1)
        if_block1.m(div2, null);
      append(div5, t4);
      append(div5, div4);
      mount_component(dropdown1, div4, null);
      append(div4, t5);
      append(div4, div3);
      mount_component(textarea1, div3, null);
      append(div3, t6);
      if (if_block2)
        if_block2.m(div3, null);
      append(div5, t7);
      if (if_block3)
        if_block3.m(div5, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div1,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[50]
          ),
          listen(
            div1,
            "mouseleave",
            /*mouseleave_handler*/
            ctx[51]
          ),
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[52]
          ),
          listen(
            div4,
            "mouseenter",
            /*mouseenter_handler_1*/
            ctx[59]
          ),
          listen(
            div4,
            "mouseleave",
            /*mouseleave_handler_1*/
            ctx[60]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      const dropdown0_changes = {};
      if (dirty[0] & /*language_from*/
      1)
        dropdown0_changes.value = /*language_from*/
        ctx2[0];
      if (dirty[0] & /*autodetect_capability, detected_language, selectable_languages*/
      819200)
        dropdown0_changes.options = /*autodetect_capability*/
        ctx2[15] ? [
          /*detected_language*/
          ctx2[18] ? {
            value: "auto",
            text: `Detect Language (${t(
              /*detected_language*/
              ctx2[18]
            )})`
          } : { value: "auto", text: "Detect Language" },
          .../*selectable_languages*/
          ctx2[19]
        ] : (
          /*selectable_languages*/
          ctx2[19]
        );
      if (dirty[0] & /*language_from, detected_language*/
      262145)
        dropdown0_changes.onChange = /*func*/
        ctx2[44];
      dropdown0.$set(dropdown0_changes);
      const textarea0_changes = {};
      if (dirty[0] & /*text_from*/
      65536)
        textarea0_changes.text = /*text_from*/
        ctx2[16];
      if (dirty[0] & /*auto_translate, $settings, $translation_service*/
      3076)
        textarea0_changes.typingdelay = /*auto_translate*/
        ctx2[2] && /*$settings*/
        ctx2[11].service_settings[
          /*$translation_service*/
          ctx2[10]
        ]?.auto_translate_interval;
      if (dirty[0] & /*text_from, text_to, detected_language, auto_translate*/
      458756)
        textarea0_changes.onChange = /*func_1*/
        ctx2[45];
      if (dirty[0] & /*text_from, text_to, $settings_tab, language_from, detected_language, glossary, plugin, language_to*/
      2560011)
        textarea0_changes.onContextmenu = /*func_2*/
        ctx2[46];
      textarea0.$set(textarea0_changes);
      if (
        /*left_buttons*/
        ctx2[7]?.length
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*left_buttons*/
          128) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_53(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*$hide_shortcut_tooltips, $settings*/
      4196352 && button_aria_label_value !== (button_aria_label_value = `Switch languages around${/*$hide_shortcut_tooltips*/
      ctx2[22] || !/*$settings*/
      ctx2[11].hotkeys.find(func_6).key ? "" : `
[${getHotKeyString(
        /*$settings*/
        ctx2[11].hotkeys.find(func_7)
      )}]`}`)) {
        attr(button, "aria-label", button_aria_label_value);
      }
      if (!/*auto_translate*/
      ctx2[2]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*auto_translate*/
          4) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_44(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const dropdown1_changes = {};
      if (dirty[0] & /*language_to*/
      2)
        dropdown1_changes.value = /*language_to*/
        ctx2[1];
      if (dirty[0] & /*selectable_languages*/
      524288)
        dropdown1_changes.options = /*selectable_languages*/
        ctx2[19];
      if (dirty[0] & /*language_to*/
      2)
        dropdown1_changes.onChange = /*func_10*/
        ctx2[54];
      dropdown1.$set(dropdown1_changes);
      const textarea1_changes = {};
      if (dirty[0] & /*text_to*/
      131072)
        textarea1_changes.text = /*text_to*/
        ctx2[17];
      if (dirty[0] & /*text_to, $settings_tab, language_from, detected_language, glossary, plugin, text_from, language_to*/
      2560011)
        textarea1_changes.onContextmenu = /*func_11*/
        ctx2[55];
      textarea1.$set(textarea1_changes);
      if (
        /*right_buttons*/
        ctx2[8]?.length
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*right_buttons*/
          256) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_34(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*show_attribution*/
        ctx2[5]
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty[0] & /*show_attribution*/
          32) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block12(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div5, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*current_layout*/
      16384 && div5_class_value !== (div5_class_value = "translator-view translator-" + /*current_layout*/
      ctx2[14] + "-layout")) {
        attr(div5, "class", div5_class_value);
      }
      if (!current || dirty[0] & /*current_layout, $settings*/
      18432) {
        toggle_class(div5, "disable-animations", !/*$settings*/
        ctx2[11].enable_animations);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown0.$$.fragment, local);
      transition_in(textarea0.$$.fragment, local);
      transition_in(if_block0);
      transition_in(icon.$$.fragment, local);
      transition_in(if_block1);
      transition_in(dropdown1.$$.fragment, local);
      transition_in(textarea1.$$.fragment, local);
      transition_in(if_block2);
      transition_in(if_block3);
      current = true;
    },
    o(local) {
      transition_out(dropdown0.$$.fragment, local);
      transition_out(textarea0.$$.fragment, local);
      transition_out(if_block0);
      transition_out(icon.$$.fragment, local);
      transition_out(if_block1);
      transition_out(dropdown1.$$.fragment, local);
      transition_out(textarea1.$$.fragment, local);
      transition_out(if_block2);
      transition_out(if_block3);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div5);
      }
      destroy_component(dropdown0);
      destroy_component(textarea0);
      if (if_block0)
        if_block0.d();
      destroy_component(icon);
      if (if_block1)
        if_block1.d();
      destroy_component(dropdown1);
      destroy_component(textarea1);
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment25(ctx) {
  let view;
  let current;
  let view_props = {
    $$slots: {
      view: [create_view_slot],
      header: [create_header_slot]
    },
    $$scope: { ctx }
  };
  view = new View_default({ props: view_props });
  ctx[61](view);
  return {
    c() {
      create_component(view.$$.fragment);
    },
    m(target, anchor) {
      mount_component(view, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const view_changes = {};
      if (dirty[0] & /*current_layout, $settings, $translation_service, plugin, show_attribution, right_buttons, $hide_shortcut_tooltips, text_to, $settings_tab, language_from, detected_language, glossary, text_from, language_to, selectable_languages, auto_translate, left_buttons, autodetect_capability, top_buttons, top_button_states, top_button_disabled*/
      8388079 | dirty[2] & /*$$scope*/
      131072) {
        view_changes.$$scope = { dirty, ctx: ctx2 };
      }
      view.$set(view_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(view.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(view.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      ctx[61](null);
      destroy_component(view, detaching);
    }
  };
}
var func_6 = (x) => x.id === "view-language-switch";
var func_7 = (x) => x.id === "view-language-switch";
var func_8 = (x) => x.id === "view-language-switch";
var func_9 = (x) => x.id === "view-translate";
function instance25($$self, $$props, $$invalidate) {
  let top_button_disabled;
  let available_language_observer;
  let selected_languages_observer;
  let display_language_observer;
  let $translation_service, $$unsubscribe_translation_service = noop, $$subscribe_translation_service = () => ($$unsubscribe_translation_service(), $$unsubscribe_translation_service = subscribe(translation_service, ($$value) => $$invalidate(10, $translation_service = $$value)), translation_service);
  let $settings;
  let $available_translator_services;
  let $all_languages;
  let $spellcheck_languages;
  let $fasttext_data;
  let $bergamot_data;
  let $settings_tab;
  let $hide_shortcut_tooltips;
  component_subscribe($$self, settings, ($$value) => $$invalidate(11, $settings = $$value));
  component_subscribe($$self, available_translator_services, ($$value) => $$invalidate(63, $available_translator_services = $$value));
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(64, $all_languages = $$value));
  component_subscribe($$self, spellcheck_languages, ($$value) => $$invalidate(65, $spellcheck_languages = $$value));
  component_subscribe($$self, fasttext_data, ($$value) => $$invalidate(42, $fasttext_data = $$value));
  component_subscribe($$self, bergamot_data, ($$value) => $$invalidate(43, $bergamot_data = $$value));
  component_subscribe($$self, settings_tab, ($$value) => $$invalidate(21, $settings_tab = $$value));
  component_subscribe($$self, hide_shortcut_tooltips, ($$value) => $$invalidate(22, $hide_shortcut_tooltips = $$value));
  $$self.$$.on_destroy.push(() => $$unsubscribe_translation_service());
  let { plugin } = $$props;
  let { id } = $$props;
  let { language_from } = $$props;
  let { language_to } = $$props;
  let { translation_service } = $$props;
  $$subscribe_translation_service();
  let { auto_translate } = $$props;
  let { apply_glossary } = $$props;
  let { view_mode } = $$props;
  let { filter_mode } = $$props;
  let { show_attribution } = $$props;
  let { top_buttons } = $$props;
  let { left_buttons } = $$props;
  let { right_buttons } = $$props;
  let parent_view;
  let top_button_states = {};
  const top_button_actions = {
    "change-service": () => {
      new SwitchService(
        plugin.app,
        plugin,
        async (service) => {
          previous_service = $translation_service;
          set_store_value(translation_service, $translation_service = service, $translation_service);
        }
      ).open();
    },
    "automatic-translation": () => {
      $$invalidate(2, auto_translate = !auto_translate);
      $$invalidate(13, top_button_states["automatic-translation"] = auto_translate ? 1 : 0, top_button_states);
    },
    "apply-glossary": () => {
      $$invalidate(31, apply_glossary = !apply_glossary);
      $$invalidate(13, top_button_states["apply-glossary"] = apply_glossary ? 1 : 0, top_button_states);
    },
    "change-layout": () => {
      $$invalidate(32, view_mode = (view_mode + 1) % 4);
      $$invalidate(13, top_button_states["change-layout"] = view_mode, top_button_states);
    },
    "apply-filter": () => {
      $$invalidate(33, filter_mode = (filter_mode + 1) % 3);
      $$invalidate(13, top_button_states["apply-filter"] = filter_mode, top_button_states);
    },
    "open-settings": () => {
      set_store_value(settings_tab, $settings_tab = $translation_service, $settings_tab);
      openSettingTab();
    }
  };
  const left_button_actions = {
    "copy": () => {
      navigator.clipboard.writeText(text_from);
    },
    "paste": () => {
      navigator.clipboard.readText().then((clipboard_contents) => {
        $$invalidate(16, text_from = clipboard_contents);
        if (auto_translate)
          translate();
      });
    },
    "clear": () => {
      $$invalidate(16, text_from = "");
    }
  };
  const right_button_actions = {
    "copy": () => {
      navigator.clipboard.writeText(text_to);
    },
    "paste": () => {
      navigator.clipboard.readText().then((clipboard_contents) => {
        $$invalidate(17, text_to = clipboard_contents);
      });
    },
    "clear": () => {
      $$invalidate(17, text_to = "");
    }
  };
  const services = SERVICES_INFO;
  let current_layout = "vertical";
  let previous_service = "";
  let translator;
  let autodetect_capability = false;
  let text_from = "";
  let text_to = "";
  let detected_language;
  let available_languages2 = [];
  let selectable_languages;
  const view_scope = new import_obsidian32.Scope(app.scope);
  const left_view_scope = new import_obsidian32.Scope(view_scope);
  const right_view_scope = new import_obsidian32.Scope(view_scope);
  function reloadHotkeys() {
    $$invalidate(38, view_scope.keys = [], view_scope);
    for (const hotkey of $settings.hotkeys) {
      if (hotkey.key) {
        if (hotkey.id === "view-translate") {
          view_scope.register(hotkey.modifiers, hotkey.key, () => {
            translate();
            return false;
          });
        } else if (hotkey.id === "view-language-switch") {
          view_scope.register(hotkey.modifiers, hotkey.key, () => {
            switchLanguages();
            return false;
          });
        } else {
          const action = hotkey.id.split("-").at(-1);
          if (left_buttons.find((button) => button.id === action)) {
            left_view_scope.register(hotkey.modifiers, hotkey.key, () => {
              left_button_actions[action]();
              return false;
            });
          }
          if (right_buttons.find((button) => button.id === action)) {
            right_view_scope.register(hotkey.modifiers, hotkey.key, () => {
              right_button_actions[action]();
              return false;
            });
          }
        }
      }
    }
  }
  function updateAvailableLanguages() {
    if (translator) {
      $$invalidate(37, available_languages2 = translator.available_languages);
      filterLanguages();
    }
  }
  ;
  function autoTranslate() {
    if (text_from)
      translate();
  }
  function updateService() {
    plugin.reactivity.getTranslationService($translation_service, previous_service).then((service) => {
      $$invalidate(15, autodetect_capability = service.has_autodetect_capability());
      $$invalidate(36, translator = service);
      previous_service = $translation_service;
      $$invalidate(37, available_languages2 = translator.available_languages || $settings.service_settings[$translation_service].available_languages);
    });
    $$invalidate(2, auto_translate = auto_translate && $settings.service_settings[$translation_service].auto_translate);
  }
  function filterLanguages() {
    let languages = available_languages2;
    if (filter_mode === 1)
      languages = languages.filter((x) => $spellcheck_languages.includes(x));
    else if (filter_mode === 2)
      languages = languages.filter((x) => $settings.service_settings[$translation_service].selected_languages.includes(x));
    $$invalidate(19, selectable_languages = Array.from(languages).map((locale2) => {
      return {
        "value": locale2,
        "text": $all_languages.get(locale2) || locale2
      };
    }).sort((a, b) => a.text.localeCompare(b.text)));
  }
  async function translate() {
    if (!selectable_languages.some((x) => x.value === language_from))
      $$invalidate(0, language_from = "auto");
    let return_values = await translator.translate(
      text_from,
      language_from,
      selectable_languages.some((x) => x.value === language_to) ? language_to : "",
      { apply_glossary }
    );
    if (return_values.message && !plugin.settings_open)
      plugin.message_queue(return_values.message);
    if (return_values.translation) {
      $$invalidate(18, detected_language = return_values.detected_language);
      $$invalidate(17, text_to = return_values.translation);
    }
  }
  async function switchLanguages() {
    if ($settings.switch_button_action === "switch-both" || $settings.switch_button_action === "switch-language") {
      if (language_from === "auto") {
        if (detected_language) {
          $$invalidate(0, [language_from, language_to] = [language_to, detected_language], language_from, $$invalidate(1, language_to));
          $$invalidate(18, detected_language = void 0);
        } else
          $$invalidate(0, [language_from, language_to] = [language_to, null], language_from, $$invalidate(1, language_to));
      } else {
        $$invalidate(0, [language_from, language_to] = [language_to, language_from], language_from, $$invalidate(1, language_to));
      }
    }
    if ($settings.switch_button_action === "switch-both" || $settings.switch_button_action === "switch-text") {
      $$invalidate(16, [text_from, text_to] = [text_to, text_from], text_from, $$invalidate(17, text_to));
    }
  }
  async function onResize(width, height) {
    if (view_mode) {
      $$invalidate(14, current_layout = VIEW_MODES[view_mode].id);
    } else {
      let element2 = document.getElementById(id);
      if (!width || !height)
        return;
      const width_ratio = width / height;
      let new_layout = "vertical";
      if (width_ratio > 1.4)
        new_layout = "horizontal";
      else if (width_ratio > 1.2)
        new_layout = "mixed";
      else
        new_layout = "vertical";
      $$invalidate(14, current_layout = new_layout);
    }
  }
  onMount(() => {
    if (!$available_translator_services.includes($translation_service))
      set_store_value(translation_service, $translation_service = $settings.translation_service, $translation_service);
  });
  onDestroy(() => {
    app.keymap.popScope(view_scope);
    plugin.reactivity.unloadService($translation_service);
  });
  const func = (e) => {
    $$invalidate(0, language_from = e.target.value);
    $$invalidate(18, detected_language = void 0);
  };
  const func_1 = async (e) => {
    $$invalidate(16, text_from = e.target.value);
    if (!text_from) {
      $$invalidate(17, text_to = "");
      $$invalidate(18, detected_language = void 0);
    } else if (auto_translate) {
      await translate();
    }
  };
  const func_2 = async (e) => {
    let selection = e.target.value.substring(e.target.selectionStart, e.target.selectionEnd).trim();
    const all_text = selection || text_from;
    let has_selection = selection.length > 0;
    let menu = new import_obsidian32.Menu();
    menu.addItem((item) => {
      item.setTitle("Cut").setIcon("scissors").setSection("general").setDisabled(!has_selection).onClick((e2) => {
        navigator.clipboard.writeText(all_text);
        $$invalidate(17, text_to = "");
      });
    });
    menu.addItem((item) => {
      item.setTitle("Copy").setIcon("copy").setSection("general").setDisabled(!has_selection).onClick((e2) => {
        navigator.clipboard.writeText(all_text);
      });
    });
    menu.addItem((item) => {
      item.setTitle("Paste").setIcon("clipboard-type").setSection("general").onClick((e2) => {
        navigator.clipboard.readText().then((text2) => {
          $$invalidate(16, text_from = text2);
        });
      });
    });
    if (selection) {
      menu.addItem((item) => {
        item.setTitle("Add to glossary").setIcon("book-open").setSection("translate").setDisabled(!has_selection).onClick(async (e2) => {
          set_store_value(settings_tab, $settings_tab = "glossary", $settings_tab);
          if (language_from === "auto") {
            if (detected_language) {
              $$invalidate(12, glossary.source_language = detected_language, glossary);
            } else if (plugin.detector && plugin.detector.valid) {
              const output = await plugin.detector.detect(text_from);
              if (output.detected_languages)
                $$invalidate(12, glossary.source_language = output.detected_languages[0], glossary);
              else
                $$invalidate(12, glossary.source_language = plugin.current_language, glossary);
            }
          } else {
            $$invalidate(12, glossary.source_language = language_from, glossary);
          }
          $$invalidate(12, glossary.target_language = language_to, glossary);
          $$invalidate(12, glossary.text = [selection, ""], glossary);
          openSettingTab();
        });
      });
    }
    menu.showAtMouseEvent(e);
  };
  const func_3 = (quick_button, x) => x.id.endsWith(quick_button);
  const func_4 = (quick_button, x) => x.id.endsWith(quick_button);
  const func_5 = (quick_button) => left_button_actions[quick_button]();
  const mouseenter_handler = () => app.keymap.pushScope(left_view_scope);
  const mouseleave_handler = () => app.keymap.popScope(left_view_scope);
  const click_handler = async () => {
    await switchLanguages();
  };
  const click_handler_1 = async () => {
    await translate();
  };
  const func_10 = (e) => {
    $$invalidate(1, language_to = e.target.value);
  };
  const func_11 = async (e) => {
    const selection = e.target.value.substring(e.target.selectionStart, e.target.selectionEnd).trim();
    const all_text = selection || text_to;
    let menu = new import_obsidian32.Menu();
    menu.addItem((item) => {
      item.setTitle("Cut").setIcon("scissors").setSection("general").onClick((e2) => {
        navigator.clipboard.writeText(all_text);
        $$invalidate(17, text_to = "");
      });
    });
    menu.addItem((item) => {
      item.setTitle("Copy").setIcon("copy").setSection("general").onClick((e2) => {
        navigator.clipboard.writeText(all_text);
      });
    });
    if (selection) {
      menu.addItem((item) => {
        item.setTitle("Add to glossary").setIcon("book-open").setSection("translate").onClick(async (e2) => {
          set_store_value(settings_tab, $settings_tab = "glossary", $settings_tab);
          if (language_from === "auto") {
            if (detected_language) {
              $$invalidate(12, glossary.source_language = detected_language, glossary);
            } else if (plugin.detector && plugin.detector.valid) {
              const output = await plugin.detector.detect(text_from);
              if (output.detected_languages)
                $$invalidate(12, glossary.source_language = output.detected_languages[0], glossary);
              else
                $$invalidate(12, glossary.source_language = plugin.current_language, glossary);
            }
          } else {
            $$invalidate(12, glossary.source_language = language_from, glossary);
          }
          $$invalidate(12, glossary.target_language = language_to, glossary);
          $$invalidate(12, glossary.text = ["", selection], glossary);
          openSettingTab();
        });
      });
    }
    menu.showAtMouseEvent(e);
  };
  const func_12 = (quick_button, x) => x.id.endsWith(quick_button);
  const func_13 = (quick_button, x) => x.id.endsWith(quick_button);
  const func_14 = (quick_button) => right_button_actions[quick_button]();
  const mouseenter_handler_1 = () => app.keymap.pushScope(right_view_scope);
  const mouseleave_handler_1 = () => app.keymap.popScope(right_view_scope);
  function view_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      parent_view = $$value;
      $$invalidate(9, parent_view);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(3, plugin = $$props2.plugin);
    if ("id" in $$props2)
      $$invalidate(34, id = $$props2.id);
    if ("language_from" in $$props2)
      $$invalidate(0, language_from = $$props2.language_from);
    if ("language_to" in $$props2)
      $$invalidate(1, language_to = $$props2.language_to);
    if ("translation_service" in $$props2)
      $$subscribe_translation_service($$invalidate(4, translation_service = $$props2.translation_service));
    if ("auto_translate" in $$props2)
      $$invalidate(2, auto_translate = $$props2.auto_translate);
    if ("apply_glossary" in $$props2)
      $$invalidate(31, apply_glossary = $$props2.apply_glossary);
    if ("view_mode" in $$props2)
      $$invalidate(32, view_mode = $$props2.view_mode);
    if ("filter_mode" in $$props2)
      $$invalidate(33, filter_mode = $$props2.filter_mode);
    if ("show_attribution" in $$props2)
      $$invalidate(5, show_attribution = $$props2.show_attribution);
    if ("top_buttons" in $$props2)
      $$invalidate(6, top_buttons = $$props2.top_buttons);
    if ("left_buttons" in $$props2)
      $$invalidate(7, left_buttons = $$props2.left_buttons);
    if ("right_buttons" in $$props2)
      $$invalidate(8, right_buttons = $$props2.right_buttons);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*$translation_service*/
    1024) {
      $:
        $translation_service, updateService();
    }
    if ($$self.$$.dirty[0] & /*parent_view*/
    512 | $$self.$$.dirty[1] & /*view_scope*/
    128) {
      $: {
        if (parent_view) {
          parent_view?.$$.root.parentNode.addEventListener("mouseenter", () => {
            app.keymap.pushScope(view_scope);
          });
          parent_view?.$$.root.parentNode.addEventListener("mouseleave", () => {
            app.keymap.popScope(view_scope);
          });
        }
      }
    }
    if ($$self.$$.dirty[0] & /*$settings, $translation_service*/
    3072) {
      $:
        $$invalidate(20, top_button_disabled = {
          "automatic-translation": !$settings.service_settings[$translation_service].auto_translate,
          "apply-glossary": !$settings.apply_glossary
        });
    }
    if ($$self.$$.dirty[0] & /*auto_translate*/
    4 | $$self.$$.dirty[1] & /*apply_glossary, view_mode, filter_mode*/
    7) {
      $:
        $$invalidate(13, top_button_states = {
          "change-service": 0,
          "automatic-translation": auto_translate | 0,
          "apply-glossary": apply_glossary | 0,
          "change-layout": view_mode,
          "apply-filter": filter_mode,
          "open-settings": 0
        });
    }
    if ($$self.$$.dirty[0] & /*$settings*/
    2048) {
      $:
        $settings.hotkeys, reloadHotkeys();
    }
    if ($$self.$$.dirty[0] & /*$settings, $translation_service*/
    3072) {
      $:
        $$invalidate(39, available_language_observer = $settings.service_settings[$translation_service].available_languages.length);
    }
    if ($$self.$$.dirty[0] & /*$settings, $translation_service*/
    3072) {
      $:
        $$invalidate(41, selected_languages_observer = $settings.service_settings[$translation_service].selected_languages.length);
    }
    if ($$self.$$.dirty[0] & /*$settings*/
    2048) {
      $:
        $$invalidate(40, display_language_observer = $settings.display_language);
    }
    if ($$self.$$.dirty[1] & /*selected_languages_observer, available_languages, filter_mode, display_language_observer*/
    1604) {
      $:
        spellcheck_languages, selected_languages_observer, available_languages2, filter_mode, display_language_observer, filterLanguages();
    }
    if ($$self.$$.dirty[1] & /*available_language_observer, $bergamot_data*/
    4352) {
      $:
        available_language_observer, $bergamot_data, updateAvailableLanguages();
    }
    if ($$self.$$.dirty[1] & /*$fasttext_data, translator*/
    2080) {
      $:
        $fasttext_data, $$invalidate(15, autodetect_capability = translator && translator.has_autodetect_capability());
    }
    if ($$self.$$.dirty[0] & /*language_from, language_to, $translation_service, auto_translate, show_attribution, top_buttons, left_buttons, right_buttons*/
    1511 | $$self.$$.dirty[1] & /*apply_glossary, view_mode, filter_mode*/
    7) {
      $:
        language_from, language_to, $translation_service, auto_translate, apply_glossary, view_mode, filter_mode, show_attribution, top_buttons, left_buttons, right_buttons, app.workspace.requestSaveLayout();
    }
    if ($$self.$$.dirty[0] & /*language_from, language_to, auto_translate*/
    7 | $$self.$$.dirty[1] & /*apply_glossary*/
    1) {
      $: {
        apply_glossary;
        language_from;
        language_to;
        if (auto_translate)
          autoTranslate();
      }
    }
    if ($$self.$$.dirty[1] & /*view_mode, id*/
    10) {
      $: {
        view_mode;
        const rectangle = document.getElementById(id)?.getBoundingClientRect();
        onResize(rectangle?.width || 0, rectangle?.height || 0);
      }
    }
  };
  return [
    language_from,
    language_to,
    auto_translate,
    plugin,
    translation_service,
    show_attribution,
    top_buttons,
    left_buttons,
    right_buttons,
    parent_view,
    $translation_service,
    $settings,
    glossary,
    top_button_states,
    current_layout,
    autodetect_capability,
    text_from,
    text_to,
    detected_language,
    selectable_languages,
    top_button_disabled,
    $settings_tab,
    $hide_shortcut_tooltips,
    top_button_actions,
    left_button_actions,
    right_button_actions,
    services,
    left_view_scope,
    right_view_scope,
    translate,
    switchLanguages,
    apply_glossary,
    view_mode,
    filter_mode,
    id,
    onResize,
    translator,
    available_languages2,
    view_scope,
    available_language_observer,
    display_language_observer,
    selected_languages_observer,
    $fasttext_data,
    $bergamot_data,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    func_5,
    mouseenter_handler,
    mouseleave_handler,
    click_handler,
    click_handler_1,
    func_10,
    func_11,
    func_12,
    func_13,
    func_14,
    mouseenter_handler_1,
    mouseleave_handler_1,
    view_binding
  ];
}
var ViewPage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance25,
      create_fragment25,
      safe_not_equal,
      {
        plugin: 3,
        id: 34,
        language_from: 0,
        language_to: 1,
        translation_service: 4,
        auto_translate: 2,
        apply_glossary: 31,
        view_mode: 32,
        filter_mode: 33,
        show_attribution: 5,
        top_buttons: 6,
        left_buttons: 7,
        right_buttons: 8,
        onResize: 35
      },
      null,
      [-1, -1, -1]
    );
  }
  get onResize() {
    return this.$$.ctx[35];
  }
};
var ViewPage_default = ViewPage;

// src/ui/translator-components/Reactivity.svelte
var import_obsidian33 = require("obsidian");

// node_modules/iso-639-1/src/data.js
var LANGUAGES_LIST = {
  aa: {
    name: "Afar",
    nativeName: "Afaraf"
  },
  ab: {
    name: "Abkhaz",
    nativeName: "\u0430\u04A7\u0441\u0443\u0430 \u0431\u044B\u0437\u0448\u04D9\u0430"
  },
  ae: {
    name: "Avestan",
    nativeName: "avesta"
  },
  af: {
    name: "Afrikaans",
    nativeName: "Afrikaans"
  },
  ak: {
    name: "Akan",
    nativeName: "Akan"
  },
  am: {
    name: "Amharic",
    nativeName: "\u12A0\u121B\u122D\u129B"
  },
  an: {
    name: "Aragonese",
    nativeName: "aragon\xE9s"
  },
  ar: {
    name: "Arabic",
    nativeName: "\u0627\u064E\u0644\u0652\u0639\u064E\u0631\u064E\u0628\u0650\u064A\u064E\u0651\u0629\u064F"
  },
  as: {
    name: "Assamese",
    nativeName: "\u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE"
  },
  av: {
    name: "Avaric",
    nativeName: "\u0430\u0432\u0430\u0440 \u043C\u0430\u0446\u04C0"
  },
  ay: {
    name: "Aymara",
    nativeName: "aymar aru"
  },
  az: {
    name: "Azerbaijani",
    nativeName: "az\u0259rbaycan dili"
  },
  ba: {
    name: "Bashkir",
    nativeName: "\u0431\u0430\u0448\u04A1\u043E\u0440\u0442 \u0442\u0435\u043B\u0435"
  },
  be: {
    name: "Belarusian",
    nativeName: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F \u043C\u043E\u0432\u0430"
  },
  bg: {
    name: "Bulgarian",
    nativeName: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 \u0435\u0437\u0438\u043A"
  },
  bi: {
    name: "Bislama",
    nativeName: "Bislama"
  },
  bm: {
    name: "Bambara",
    nativeName: "bamanankan"
  },
  bn: {
    name: "Bengali",
    nativeName: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  bo: {
    name: "Tibetan",
    nativeName: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  br: {
    name: "Breton",
    nativeName: "brezhoneg"
  },
  bs: {
    name: "Bosnian",
    nativeName: "bosanski jezik"
  },
  ca: {
    name: "Catalan",
    nativeName: "Catal\xE0"
  },
  ce: {
    name: "Chechen",
    nativeName: "\u043D\u043E\u0445\u0447\u0438\u0439\u043D \u043C\u043E\u0442\u0442"
  },
  ch: {
    name: "Chamorro",
    nativeName: "Chamoru"
  },
  co: {
    name: "Corsican",
    nativeName: "corsu"
  },
  cr: {
    name: "Cree",
    nativeName: "\u14C0\u1426\u1403\u152D\u140D\u140F\u1423"
  },
  cs: {
    name: "Czech",
    nativeName: "\u010De\u0161tina"
  },
  cu: {
    name: "Old Church Slavonic",
    nativeName: "\u0469\u0437\u044B\u043A\u044A \u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A"
  },
  cv: {
    name: "Chuvash",
    nativeName: "\u0447\u04D1\u0432\u0430\u0448 \u0447\u04D7\u043B\u0445\u0438"
  },
  cy: {
    name: "Welsh",
    nativeName: "Cymraeg"
  },
  da: {
    name: "Danish",
    nativeName: "dansk"
  },
  de: {
    name: "German",
    nativeName: "Deutsch"
  },
  dv: {
    name: "Divehi",
    nativeName: "\u078B\u07A8\u0788\u07AC\u0780\u07A8"
  },
  dz: {
    name: "Dzongkha",
    nativeName: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41"
  },
  ee: {
    name: "Ewe",
    nativeName: "E\u028Begbe"
  },
  el: {
    name: "Greek",
    nativeName: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  en: {
    name: "English",
    nativeName: "English"
  },
  eo: {
    name: "Esperanto",
    nativeName: "Esperanto"
  },
  es: {
    name: "Spanish",
    nativeName: "Espa\xF1ol"
  },
  et: {
    name: "Estonian",
    nativeName: "eesti"
  },
  eu: {
    name: "Basque",
    nativeName: "euskara"
  },
  fa: {
    name: "Persian",
    nativeName: "\u0641\u0627\u0631\u0633\u06CC"
  },
  ff: {
    name: "Fula",
    nativeName: "Fulfulde"
  },
  fi: {
    name: "Finnish",
    nativeName: "suomi"
  },
  fj: {
    name: "Fijian",
    nativeName: "vosa Vakaviti"
  },
  fo: {
    name: "Faroese",
    nativeName: "f\xF8royskt"
  },
  fr: {
    name: "French",
    nativeName: "Fran\xE7ais"
  },
  fy: {
    name: "Western Frisian",
    nativeName: "Frysk"
  },
  ga: {
    name: "Irish",
    nativeName: "Gaeilge"
  },
  gd: {
    name: "Scottish Gaelic",
    nativeName: "G\xE0idhlig"
  },
  gl: {
    name: "Galician",
    nativeName: "galego"
  },
  gn: {
    name: "Guaran\xED",
    nativeName: "Ava\xF1e'\u1EBD"
  },
  gu: {
    name: "Gujarati",
    nativeName: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  gv: {
    name: "Manx",
    nativeName: "Gaelg"
  },
  ha: {
    name: "Hausa",
    nativeName: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  he: {
    name: "Hebrew",
    nativeName: "\u05E2\u05D1\u05E8\u05D9\u05EA"
  },
  hi: {
    name: "Hindi",
    nativeName: "\u0939\u093F\u0928\u094D\u0926\u0940"
  },
  ho: {
    name: "Hiri Motu",
    nativeName: "Hiri Motu"
  },
  hr: {
    name: "Croatian",
    nativeName: "Hrvatski"
  },
  ht: {
    name: "Haitian",
    nativeName: "Krey\xF2l ayisyen"
  },
  hu: {
    name: "Hungarian",
    nativeName: "magyar"
  },
  hy: {
    name: "Armenian",
    nativeName: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  hz: {
    name: "Herero",
    nativeName: "Otjiherero"
  },
  ia: {
    name: "Interlingua",
    nativeName: "Interlingua"
  },
  id: {
    name: "Indonesian",
    nativeName: "Bahasa Indonesia"
  },
  ie: {
    name: "Interlingue",
    nativeName: "Interlingue"
  },
  ig: {
    name: "Igbo",
    nativeName: "As\u1EE5s\u1EE5 Igbo"
  },
  ii: {
    name: "Nuosu",
    nativeName: "\uA188\uA320\uA4BF Nuosuhxop"
  },
  ik: {
    name: "Inupiaq",
    nativeName: "I\xF1upiaq"
  },
  io: {
    name: "Ido",
    nativeName: "Ido"
  },
  is: {
    name: "Icelandic",
    nativeName: "\xCDslenska"
  },
  it: {
    name: "Italian",
    nativeName: "Italiano"
  },
  iu: {
    name: "Inuktitut",
    nativeName: "\u1403\u14C4\u1483\u144E\u1450\u1466"
  },
  ja: {
    name: "Japanese",
    nativeName: "\u65E5\u672C\u8A9E"
  },
  jv: {
    name: "Javanese",
    nativeName: "basa Jawa"
  },
  ka: {
    name: "Georgian",
    nativeName: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  kg: {
    name: "Kongo",
    nativeName: "Kikongo"
  },
  ki: {
    name: "Kikuyu",
    nativeName: "G\u0129k\u0169y\u0169"
  },
  kj: {
    name: "Kwanyama",
    nativeName: "Kuanyama"
  },
  kk: {
    name: "Kazakh",
    nativeName: "\u049B\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  kl: {
    name: "Kalaallisut",
    nativeName: "kalaallisut"
  },
  km: {
    name: "Khmer",
    nativeName: "\u1781\u17C1\u1798\u179A\u1797\u17B6\u179F\u17B6"
  },
  kn: {
    name: "Kannada",
    nativeName: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  ko: {
    name: "Korean",
    nativeName: "\uD55C\uAD6D\uC5B4"
  },
  kr: {
    name: "Kanuri",
    nativeName: "Kanuri"
  },
  ks: {
    name: "Kashmiri",
    nativeName: "\u0915\u0936\u094D\u092E\u0940\u0930\u0940"
  },
  ku: {
    name: "Kurdish",
    nativeName: "Kurd\xEE"
  },
  kv: {
    name: "Komi",
    nativeName: "\u043A\u043E\u043C\u0438 \u043A\u044B\u0432"
  },
  kw: {
    name: "Cornish",
    nativeName: "Kernewek"
  },
  ky: {
    name: "Kyrgyz",
    nativeName: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  la: {
    name: "Latin",
    nativeName: "latine"
  },
  lb: {
    name: "Luxembourgish",
    nativeName: "L\xEBtzebuergesch"
  },
  lg: {
    name: "Ganda",
    nativeName: "Luganda"
  },
  li: {
    name: "Limburgish",
    nativeName: "Limburgs"
  },
  ln: {
    name: "Lingala",
    nativeName: "Ling\xE1la"
  },
  lo: {
    name: "Lao",
    nativeName: "\u0E9E\u0EB2\u0EAA\u0EB2\u0EA5\u0EB2\u0EA7"
  },
  lt: {
    name: "Lithuanian",
    nativeName: "lietuvi\u0173 kalba"
  },
  lu: {
    name: "Luba-Katanga",
    nativeName: "Kiluba"
  },
  lv: {
    name: "Latvian",
    nativeName: "latvie\u0161u valoda"
  },
  mg: {
    name: "Malagasy",
    nativeName: "fiteny malagasy"
  },
  mh: {
    name: "Marshallese",
    nativeName: "Kajin M\u0327aje\u013C"
  },
  mi: {
    name: "M\u0101ori",
    nativeName: "te reo M\u0101ori"
  },
  mk: {
    name: "Macedonian",
    nativeName: "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 \u0458\u0430\u0437\u0438\u043A"
  },
  ml: {
    name: "Malayalam",
    nativeName: "\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02"
  },
  mn: {
    name: "Mongolian",
    nativeName: "\u041C\u043E\u043D\u0433\u043E\u043B \u0445\u044D\u043B"
  },
  mr: {
    name: "Marathi",
    nativeName: "\u092E\u0930\u093E\u0920\u0940"
  },
  ms: {
    name: "Malay",
    nativeName: "Bahasa Melayu"
  },
  mt: {
    name: "Maltese",
    nativeName: "Malti"
  },
  my: {
    name: "Burmese",
    nativeName: "\u1017\u1019\u102C\u1005\u102C"
  },
  na: {
    name: "Nauru",
    nativeName: "Dorerin Naoero"
  },
  nb: {
    name: "Norwegian Bokm\xE5l",
    nativeName: "Norsk bokm\xE5l"
  },
  nd: {
    name: "Northern Ndebele",
    nativeName: "isiNdebele"
  },
  ne: {
    name: "Nepali",
    nativeName: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  ng: {
    name: "Ndonga",
    nativeName: "Owambo"
  },
  nl: {
    name: "Dutch",
    nativeName: "Nederlands"
  },
  nn: {
    name: "Norwegian Nynorsk",
    nativeName: "Norsk nynorsk"
  },
  no: {
    name: "Norwegian",
    nativeName: "Norsk"
  },
  nr: {
    name: "Southern Ndebele",
    nativeName: "isiNdebele"
  },
  nv: {
    name: "Navajo",
    nativeName: "Din\xE9 bizaad"
  },
  ny: {
    name: "Chichewa",
    nativeName: "chiChe\u0175a"
  },
  oc: {
    name: "Occitan",
    nativeName: "occitan"
  },
  oj: {
    name: "Ojibwe",
    nativeName: "\u140A\u14C2\u1511\u14C8\u142F\u14A7\u140E\u14D0"
  },
  om: {
    name: "Oromo",
    nativeName: "Afaan Oromoo"
  },
  or: {
    name: "Oriya",
    nativeName: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  os: {
    name: "Ossetian",
    nativeName: "\u0438\u0440\u043E\u043D \xE6\u0432\u0437\u0430\u0433"
  },
  pa: {
    name: "Panjabi",
    nativeName: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  pi: {
    name: "P\u0101li",
    nativeName: "\u092A\u093E\u0934\u093F"
  },
  pl: {
    name: "Polish",
    nativeName: "Polski"
  },
  ps: {
    name: "Pashto",
    nativeName: "\u067E\u069A\u062A\u0648"
  },
  pt: {
    name: "Portuguese",
    nativeName: "Portugu\xEAs"
  },
  qu: {
    name: "Quechua",
    nativeName: "Runa Simi"
  },
  rm: {
    name: "Romansh",
    nativeName: "rumantsch grischun"
  },
  rn: {
    name: "Kirundi",
    nativeName: "Ikirundi"
  },
  ro: {
    name: "Romanian",
    nativeName: "Rom\xE2n\u0103"
  },
  ru: {
    name: "Russian",
    nativeName: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  rw: {
    name: "Kinyarwanda",
    nativeName: "Ikinyarwanda"
  },
  sa: {
    name: "Sanskrit",
    nativeName: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  sc: {
    name: "Sardinian",
    nativeName: "sardu"
  },
  sd: {
    name: "Sindhi",
    nativeName: "\u0938\u093F\u0928\u094D\u0927\u0940"
  },
  se: {
    name: "Northern Sami",
    nativeName: "Davvis\xE1megiella"
  },
  sg: {
    name: "Sango",
    nativeName: "y\xE2ng\xE2 t\xEE s\xE4ng\xF6"
  },
  si: {
    name: "Sinhala",
    nativeName: "\u0DC3\u0DD2\u0D82\u0DC4\u0DBD"
  },
  sk: {
    name: "Slovak",
    nativeName: "sloven\u010Dina"
  },
  sl: {
    name: "Slovenian",
    nativeName: "sloven\u0161\u010Dina"
  },
  sm: {
    name: "Samoan",
    nativeName: "gagana fa'a Samoa"
  },
  sn: {
    name: "Shona",
    nativeName: "chiShona"
  },
  so: {
    name: "Somali",
    nativeName: "Soomaaliga"
  },
  sq: {
    name: "Albanian",
    nativeName: "Shqip"
  },
  sr: {
    name: "Serbian",
    nativeName: "\u0441\u0440\u043F\u0441\u043A\u0438 \u0458\u0435\u0437\u0438\u043A"
  },
  ss: {
    name: "Swati",
    nativeName: "SiSwati"
  },
  st: {
    name: "Southern Sotho",
    nativeName: "Sesotho"
  },
  su: {
    name: "Sundanese",
    nativeName: "Basa Sunda"
  },
  sv: {
    name: "Swedish",
    nativeName: "Svenska"
  },
  sw: {
    name: "Swahili",
    nativeName: "Kiswahili"
  },
  ta: {
    name: "Tamil",
    nativeName: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  te: {
    name: "Telugu",
    nativeName: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  tg: {
    name: "Tajik",
    nativeName: "\u0442\u043E\u04B7\u0438\u043A\u04E3"
  },
  th: {
    name: "Thai",
    nativeName: "\u0E44\u0E17\u0E22"
  },
  ti: {
    name: "Tigrinya",
    nativeName: "\u1275\u130D\u122D\u129B"
  },
  tk: {
    name: "Turkmen",
    nativeName: "T\xFCrkmen\xE7e"
  },
  tl: {
    name: "Tagalog",
    nativeName: "Wikang Tagalog"
  },
  tn: {
    name: "Tswana",
    nativeName: "Setswana"
  },
  to: {
    name: "Tonga",
    nativeName: "faka Tonga"
  },
  tr: {
    name: "Turkish",
    nativeName: "T\xFCrk\xE7e"
  },
  ts: {
    name: "Tsonga",
    nativeName: "Xitsonga"
  },
  tt: {
    name: "Tatar",
    nativeName: "\u0442\u0430\u0442\u0430\u0440 \u0442\u0435\u043B\u0435"
  },
  tw: {
    name: "Twi",
    nativeName: "Twi"
  },
  ty: {
    name: "Tahitian",
    nativeName: "Reo Tahiti"
  },
  ug: {
    name: "Uyghur",
    nativeName: "\u0626\u06C7\u064A\u063A\u06C7\u0631\u0686\u06D5\u200E"
  },
  uk: {
    name: "Ukrainian",
    nativeName: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  ur: {
    name: "Urdu",
    nativeName: "\u0627\u0631\u062F\u0648"
  },
  uz: {
    name: "Uzbek",
    nativeName: "\u040E\u0437\u0431\u0435\u043A"
  },
  ve: {
    name: "Venda",
    nativeName: "Tshiven\u1E13a"
  },
  vi: {
    name: "Vietnamese",
    nativeName: "Ti\u1EBFng Vi\u1EC7t"
  },
  vo: {
    name: "Volap\xFCk",
    nativeName: "Volap\xFCk"
  },
  wa: {
    name: "Walloon",
    nativeName: "walon"
  },
  wo: {
    name: "Wolof",
    nativeName: "Wollof"
  },
  xh: {
    name: "Xhosa",
    nativeName: "isiXhosa"
  },
  yi: {
    name: "Yiddish",
    nativeName: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9"
  },
  yo: {
    name: "Yoruba",
    nativeName: "Yor\xF9b\xE1"
  },
  za: {
    name: "Zhuang",
    nativeName: "Sa\u026F cue\u014B\u0185"
  },
  zh: {
    name: "Chinese",
    nativeName: "\u4E2D\u6587"
  },
  zu: {
    name: "Zulu",
    nativeName: "isiZulu"
  }
};
var data_default = LANGUAGES_LIST;

// node_modules/iso-639-1/src/index.js
var ISO6391 = class _ISO6391 {
  static getLanguages(codes = []) {
    return codes.map((code) => ({
      code,
      name: _ISO6391.getName(code),
      nativeName: _ISO6391.getNativeName(code)
    }));
  }
  static getName(code) {
    return _ISO6391.validate(code) ? data_default[code].name : "";
  }
  static getAllNames() {
    return Object.values(data_default).map((l) => l.name);
  }
  static getNativeName(code) {
    return _ISO6391.validate(code) ? data_default[code].nativeName : "";
  }
  static getAllNativeNames() {
    return Object.values(data_default).map((l) => l.nativeName);
  }
  static getCode(name) {
    const code = Object.keys(data_default).find((code2) => {
      const language = data_default[code2];
      return language.name.toLowerCase() === name.toLowerCase() || language.nativeName.toLowerCase() === name.toLowerCase();
    });
    return code || "";
  }
  static getAllCodes() {
    return Object.keys(data_default);
  }
  static validate(code) {
    return data_default.hasOwnProperty(code);
  }
};

// src/ui/translator-components/Reactivity.svelte
function instance26($$self, $$props, $$invalidate) {
  let filter_mode_observer;
  let $settings;
  let $available_detector_services;
  let $passwords_are_encrypted;
  let $password;
  let $spellcheck_languages;
  let $available_translator_services;
  let $fasttext_data;
  let $bergamot_data;
  let $all_languages;
  let $available_languages;
  component_subscribe($$self, settings, ($$value) => $$invalidate(13, $settings = $$value));
  component_subscribe($$self, available_detector_services, ($$value) => $$invalidate(20, $available_detector_services = $$value));
  component_subscribe($$self, passwords_are_encrypted, ($$value) => $$invalidate(21, $passwords_are_encrypted = $$value));
  component_subscribe($$self, password, ($$value) => $$invalidate(22, $password = $$value));
  component_subscribe($$self, spellcheck_languages, ($$value) => $$invalidate(23, $spellcheck_languages = $$value));
  component_subscribe($$self, available_translator_services, ($$value) => $$invalidate(24, $available_translator_services = $$value));
  component_subscribe($$self, fasttext_data, ($$value) => $$invalidate(14, $fasttext_data = $$value));
  component_subscribe($$self, bergamot_data, ($$value) => $$invalidate(15, $bergamot_data = $$value));
  component_subscribe($$self, all_languages, ($$value) => $$invalidate(25, $all_languages = $$value));
  component_subscribe($$self, available_languages, ($$value) => $$invalidate(26, $available_languages = $$value));
  let { plugin } = $$props;
  let service_observer;
  let previous_service;
  let display_language_observer;
  let active_services = /* @__PURE__ */ new Map();
  let service_uses = /* @__PURE__ */ new Map();
  function setAvailableLanguages(translation_service, filter_mode) {
    const languages = plugin.translator.available_languages || $settings.service_settings[translation_service].available_languages;
    if (filter_mode === "1")
      set_store_value(available_languages, $available_languages = languages.filter((x) => $spellcheck_languages.includes(x)), $available_languages);
    else if (filter_mode === "2")
      set_store_value(available_languages, $available_languages = languages.filter((x) => $settings.service_settings[translation_service].selected_languages.includes(x)), $available_languages);
    else
      set_store_value(available_languages, $available_languages = languages, $available_languages);
  }
  function setTranslationService(translation_service, filter_mode) {
    getTranslationService(translation_service, previous_service).then((service) => {
      $$invalidate(0, plugin.translator = service, plugin);
      previous_service = translation_service;
      setAvailableLanguages(translation_service, filter_mode);
    });
  }
  function updateLocales() {
    $all_languages.forEach((language, locale2) => $all_languages.set(locale2, formatLocale(locale2)));
  }
  function formatLocale(locale2) {
    let language = locale2, extra = "";
    if (language.contains("-")) {
      [language, extra] = language.split("-");
      extra = t(extra.toUpperCase());
      extra = extra ? ` (${extra})` : "";
    }
    if ($settings.display_language === "local")
      language = ISO6391.getNativeName(language) || t(language);
    else if ($settings.display_language === "display")
      language = t(language);
    return language + extra;
  }
  async function getAPIKey(service, mode) {
    if (mode === "password")
      return await aesGcmDecrypt($settings.service_settings[service].api_key, $password);
    else if (mode === "local_only")
      return app.loadLocalStorage(`${service}_api_key`);
    else if (mode === "dont_save")
      return sessionStorage.getItem(`${service}_api_key`);
    else
      return $settings.service_settings[service].api_key;
  }
  async function setAPIKey(service, mode, key) {
    if (mode === "password")
      set_store_value(settings, $settings.service_settings[service].api_key = await aesGcmEncrypt(key, $password), $settings);
    else if (mode === "local_only")
      app.saveLocalStorage(service + "_api_key", key);
    else if (mode === "dont_save")
      sessionStorage.setItem(service + "_api_key", key);
    else
      set_store_value(settings, $settings.service_settings[service].api_key = key, $settings);
  }
  function getExistingService(service) {
    return active_services[service];
  }
  function getAllServices() {
    return active_services;
  }
  function unloadService(service) {
    service_uses[service] -= 1;
    if (service_uses[service] === 0) {
      delete active_services[service];
    }
  }
  function updateAvailableLocales() {
    for (const service in active_services) {
      $settings.service_settings[service].available_languages.filter((locale2) => !$all_languages.has(locale2)).forEach((locale2) => {
        $all_languages.set(locale2, formatLocale(locale2));
      });
    }
  }
  async function getTranslationService(service, old_service = "") {
    if (!service || !(service in SERVICES_INFO) || $settings.filtered_services.length && !$settings.filtered_services.contains(service)) {
      return null;
    }
    let translator;
    if (service in active_services) {
      translator = active_services[service];
      service_uses[service] += 1;
    } else {
      if (!$settings.service_settings[service])
        set_store_value(settings, $settings.service_settings[service] = DEFAULT_SETTINGS.service_settings[service], $settings);
      const service_settings = $settings.service_settings[service];
      if ($settings.security_setting !== "none" && SERVICES_INFO[service].requires_api_key)
        service_settings.api_key = await getAPIKey(service, $settings.security_setting);
      let translation_service = null;
      if (service === "google_translate")
        translation_service = new GoogleTranslate(service_settings);
      else if (service === "azure_translator")
        translation_service = new AzureTranslator(service_settings);
      else if (service === "yandex_translate")
        translation_service = new YandexTranslate(service_settings);
      else if (service === "deepl")
        translation_service = new Deepl(service_settings);
      else if (service === "libre_translate")
        translation_service = new LibreTranslate(service_settings);
      else if (service === "bergamot")
        translation_service = new BergamotTranslate(
          "fasttext" in active_services ? active_services["fasttext"] : await getTranslationService("fasttext", ""),
          plugin,
          $bergamot_data
        );
      else if (service === "amazon_translate")
        translation_service = new AmazonTranslate(service_settings);
      else if (service === "lingva_translate")
        translation_service = new LingvaTranslate(service_settings);
      else if (service === "fasttext")
        translation_service = new FastTextDetector($fasttext_data);
      else if (service === "fanyi_youdao")
        translation_service = new FanyiYoudao(service_settings);
      else if (service === "fanyi_qq")
        translation_service = new FanyiQq(service_settings);
      else if (service === "fanyi_baidu")
        translation_service = new FanyiBaidu(service_settings);
      else if (service === "openai_translator")
        translation_service = new OpenaiTranslator(service_settings);
      if (service !== "bergamot" && service !== "fasttext") {
        translation_service.valid &&= $settings.service_settings[service].validated;
        translation_service.failure_count_watcher.subscribe((failure_count) => {
          if (failure_count >= 5) {
            set_store_value(settings, $settings.service_settings[service].validated = false, $settings);
            translation_service.valid = false;
            plugin.message_queue(`Too many failures: please revalidate ${SERVICES_INFO[service].display_name}`, 5e3, true);
          }
        });
      }
      if (service === "bergamot") {
        $all_languages.set("en", formatLocale("en"));
        $settings.service_settings["bergamot"].downloadable_models.map((m) => m.locale).forEach((locale2) => {
          $all_languages.set(locale2, formatLocale(locale2));
        });
        translation_service.available_languages = $bergamot_data.models ? ["en", ...$bergamot_data.models.map((m) => m.locale)] : ["en"];
      } else if ($settings.service_settings[service]?.available_languages) {
        $settings.service_settings[service].available_languages.filter((locale2) => !$all_languages.has(locale2)).forEach((locale2) => {
          $all_languages.set(locale2, formatLocale(locale2));
        });
        translation_service.available_languages = $settings.service_settings[service].available_languages;
      }
      translation_service.options = {
        split_sentences: service_settings.split_sentences,
        preserve_formatting: service_settings.preserve_formatting,
        formality: service_settings.formality,
        profanity_filter: service_settings.profanity_filter
      };
      active_services[service] = translation_service;
      translator = translation_service;
      service_uses[service] = 1;
    }
    if (old_service)
      service_uses[old_service] -= 1;
    if (old_service && old_service !== service && !service_uses[old_service]) {
      delete active_services[old_service];
    }
    return translator;
  }
  function updateSpellcheckerLanguages() {
    set_store_value(
      spellcheck_languages,
      $spellcheck_languages = [
        ...new Set(app.vault.config.spellcheckLanguages.map((x) => {
          return x.split("-")[0];
        }))
      ],
      $spellcheck_languages
    );
  }
  function filterAvailableServices() {
    let new_available_services = ALL_SERVICES;
    if (import_obsidian33.Platform.isMobile)
      new_available_services = new_available_services.filter((service) => !SERVICES_INFO[service].desktop_only);
    if ($settings.filtered_services.length)
      new_available_services = new_available_services.filter((service) => $settings.filtered_services.includes(service));
    set_store_value(available_translator_services, $available_translator_services = new_available_services.filter((service) => SERVICES_INFO[service].type === "translation"), $available_translator_services);
    set_store_value(available_detector_services, $available_detector_services = new_available_services.filter((service) => SERVICES_INFO[service].type === "detection"), $available_detector_services);
    if (!$available_translator_services.includes($settings.translation_service))
      set_store_value(settings, $settings.translation_service = $available_translator_services[0], $settings);
  }
  onMount(async () => {
    if (app.vault.config.spellcheckLanguages)
      set_store_value(spellcheck_languages, $spellcheck_languages = [...new Set(app.vault.config.spellcheckLanguages.map((x) => x.split("-")[0]))], $spellcheck_languages);
    else
      set_store_value(spellcheck_languages, $spellcheck_languages = [plugin.current_language], $spellcheck_languages);
    plugin.registerEvent(app.vault.on("config-changed", () => {
      if (app.vault.config.spellcheckLanguages) {
        updateSpellcheckerLanguages();
        if ($settings.filter_mode === "1")
          setAvailableLanguages(service_observer, filter_mode_observer);
      }
    }));
    if ($spellcheck_languages.length) {
      for (let service in $settings.service_settings) {
        if ($settings.service_settings[service].selected_languages !== void 0 && !$settings.service_settings[service].selected_languages.length) {
          set_store_value(settings, $settings.service_settings[service].selected_languages = $spellcheck_languages, $settings);
        }
      }
    }
    if ($settings.security_setting === "password") {
      for (const [service, service_settings] of Object.entries($settings.service_settings)) {
        if (SERVICES_INFO[service].requires_api_key && service_settings.api_key) {
          if ((await aesGcmDecrypt(service_settings.api_key, $password)).endsWith("==")) {
            set_store_value(passwords_are_encrypted, $passwords_are_encrypted = true, $passwords_are_encrypted);
            new PasswordModal2(plugin).open();
            break;
          }
        }
      }
    } else if ($settings.security_setting === "dont_save") {
      for (let service in $settings.service_settings) {
        if (!sessionStorage.getItem(service + "_api_key"))
          set_store_value(settings, $settings.service_settings[service].validated = null, $settings);
      }
    }
    if (import_obsidian33.Platform.isMobile && SERVICES_INFO[$settings.translation_service].desktop_only) {
      plugin.message_queue(`${toTitleCase($settings.translation_service)} is currently not supported on mobile devices, defaulting to first available service`, 5e3, true);
    }
    filterAvailableServices();
    if ($available_detector_services.contains("fasttext") && !plugin.detector && ($settings.apply_glossary || $settings.service_settings?.fasttext?.default_usage)) {
      $$invalidate(0, plugin.detector = await getTranslationService("fasttext"), plugin);
      if ($settings.service_settings?.fasttext?.default_usage)
        $$invalidate(0, plugin.detector.default = true, plugin);
    }
    let loaded_glossaries = null;
    if (await app.vault.adapter.exists(`${app.vault.configDir}/plugins/translate/glossary.json`))
      loaded_glossaries = await app.vault.adapter.read(`${app.vault.configDir}/plugins/translate/glossary.json`);
    if (loaded_glossaries) {
      glossary.dicts = JSON.parse(loaded_glossaries);
      for (let key in glossary.dicts) {
        glossary.replacements[key] = new RegExp(glossary.dicts[key].map((item) => item[0]).join("|"), $settings.case_insensitive_glossary ? "gi" : "g");
      }
    }
    glossary.source_language = plugin.current_language;
    glossary.target_language = $settings.default_target_language;
  });
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$settings*/
    8192) {
      $:
        $$invalidate(10, service_observer = $settings.translation_service);
    }
    if ($$self.$$.dirty & /*$settings*/
    8192) {
      $:
        $$invalidate(12, filter_mode_observer = $settings.filter_mode);
    }
    if ($$self.$$.dirty & /*$settings*/
    8192) {
      $:
        $$invalidate(11, display_language_observer = $settings.display_language);
    }
    if ($$self.$$.dirty & /*display_language_observer*/
    2048) {
      $:
        display_language_observer, updateLocales();
    }
    if ($$self.$$.dirty & /*service_observer, filter_mode_observer*/
    5120) {
      $: {
        if (service_observer) {
          setTranslationService(service_observer, filter_mode_observer);
        }
      }
    }
    if ($$self.$$.dirty & /*$bergamot_data*/
    32768) {
      $: {
        if ($bergamot_data && Object.values($bergamot_data).some((v) => !(v == null)))
          app.saveLocalStorage("bergamot", JSON.stringify($bergamot_data));
        else
          localStorage.removeItem(`${app.appId}-bergamot`);
      }
    }
    if ($$self.$$.dirty & /*$fasttext_data*/
    16384) {
      $: {
        if ($fasttext_data && Object.values($fasttext_data).some((v) => !(v == null)))
          app.saveLocalStorage("fasttext", JSON.stringify($fasttext_data));
        else
          localStorage.removeItem(`${app.appId}-fasttext`);
      }
    }
  };
  return [
    plugin,
    setTranslationService,
    getAPIKey,
    setAPIKey,
    getExistingService,
    getAllServices,
    unloadService,
    updateAvailableLocales,
    getTranslationService,
    filterAvailableServices,
    service_observer,
    display_language_observer,
    filter_mode_observer,
    $settings,
    $fasttext_data,
    $bergamot_data
  ];
}
var Reactivity = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, null, safe_not_equal, {
      plugin: 0,
      setTranslationService: 1,
      getAPIKey: 2,
      setAPIKey: 3,
      getExistingService: 4,
      getAllServices: 5,
      unloadService: 6,
      updateAvailableLocales: 7,
      getTranslationService: 8,
      filterAvailableServices: 9
    });
  }
  get setTranslationService() {
    return this.$$.ctx[1];
  }
  get getAPIKey() {
    return this.$$.ctx[2];
  }
  get setAPIKey() {
    return this.$$.ctx[3];
  }
  get getExistingService() {
    return this.$$.ctx[4];
  }
  get getAllServices() {
    return this.$$.ctx[5];
  }
  get unloadService() {
    return this.$$.ctx[6];
  }
  get updateAvailableLocales() {
    return this.$$.ctx[7];
  }
  get getTranslationService() {
    return this.$$.ctx[8];
  }
  get filterAvailableServices() {
    return this.$$.ctx[9];
  }
};
var Reactivity_default = Reactivity;

// src/settings.ts
var import_obsidian34 = require("obsidian");
var TranslatorSettingsTab = class extends import_obsidian34.PluginSettingTab {
  plugin;
  view;
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    this.plugin.settings_open = true;
    const { containerEl } = this;
    containerEl.empty();
    this.view = new SettingsPage_default({
      target: containerEl,
      props: {
        plugin: this.plugin
      }
    });
  }
  hide() {
    super.hide();
    this.plugin.settings_open = false;
    this.view.$destroy();
  }
};

// src/view.ts
var import_obsidian36 = require("obsidian");

// src/ui/modals/view_functionality_modal.ts
var import_obsidian35 = require("obsidian");

// src/ui/modals/ViewFunctionalityModalView.svelte
function create_control_slot_35(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: (
        /*$available_translator_services*/
        ctx[4].map(
          /*func*/
          ctx[7]
        )
      ),
      value: (
        /*translation_service*/
        ctx[0]
      ),
      onChange: (
        /*func_1*/
        ctx[8]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*$available_translator_services*/
      16)
        dropdown_changes.options = /*$available_translator_services*/
        ctx2[4].map(
          /*func*/
          ctx2[7]
        );
      if (dirty & /*translation_service*/
      1)
        dropdown_changes.value = /*translation_service*/
        ctx2[0];
      if (dirty & /*translation_service*/
      1)
        dropdown_changes.onChange = /*func_1*/
        ctx2[8];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_control_slot_25(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      value: (
        /*auto_translate*/
        ctx[1]
      ),
      disabled: !/*$settings*/
      ctx[5].service_settings[
        /*translation_service*/
        ctx[0]
      ]?.auto_translate,
      onChange: (
        /*func_2*/
        ctx[9]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*auto_translate*/
      2)
        toggle_changes.value = /*auto_translate*/
        ctx2[1];
      if (dirty & /*$settings, translation_service*/
      33)
        toggle_changes.disabled = !/*$settings*/
        ctx2[5].service_settings[
          /*translation_service*/
          ctx2[0]
        ]?.auto_translate;
      if (dirty & /*auto_translate*/
      2)
        toggle_changes.onChange = /*func_2*/
        ctx2[9];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot_110(ctx) {
  let toggle;
  let current;
  toggle = new Toggle_default({
    props: {
      slot: "control",
      disabled: !/*$settings*/
      ctx[5].apply_glossary,
      value: (
        /*apply_glossary*/
        ctx[2]
      ),
      onChange: (
        /*func_3*/
        ctx[10]
      )
    }
  });
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const toggle_changes = {};
      if (dirty & /*$settings*/
      32)
        toggle_changes.disabled = !/*$settings*/
        ctx2[5].apply_glossary;
      if (dirty & /*apply_glossary*/
      4)
        toggle_changes.value = /*apply_glossary*/
        ctx2[2];
      if (dirty & /*apply_glossary*/
      4)
        toggle_changes.onChange = /*func_3*/
        ctx2[10];
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_control_slot8(ctx) {
  let dropdown;
  let current;
  dropdown = new Dropdown_default({
    props: {
      slot: "control",
      options: [
        { "value": 0, "text": "All languages" },
        {
          "value": 1,
          "text": "Spellchecker languages"
        },
        {
          "value": 2,
          "text": "Manually selected languages"
        }
      ],
      value: (
        /*filter_mode*/
        ctx[3]
      ),
      onChange: (
        /*func_4*/
        ctx[11]
      )
    }
  });
  return {
    c() {
      create_component(dropdown.$$.fragment);
    },
    m(target, anchor) {
      mount_component(dropdown, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const dropdown_changes = {};
      if (dirty & /*filter_mode*/
      8)
        dropdown_changes.value = /*filter_mode*/
        ctx2[3];
      if (dirty & /*filter_mode*/
      8)
        dropdown_changes.onChange = /*func_4*/
        ctx2[11];
      dropdown.$set(dropdown_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(dropdown.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(dropdown.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(dropdown, detaching);
    }
  };
}
function create_fragment26(ctx) {
  let settingitem0;
  let t0;
  let settingitem1;
  let t1;
  let settingitem2;
  let t2;
  let settingitem3;
  let t3;
  let div;
  let button0;
  let t5;
  let button1;
  let current;
  let mounted;
  let dispose;
  settingitem0 = new SettingItem_default({
    props: {
      name: "Translation Service",
      description: "Set the service used for <i>this</i> view",
      type: "dropdown",
      $$slots: { control: [create_control_slot_35] },
      $$scope: { ctx }
    }
  });
  settingitem1 = new SettingItem_default({
    props: {
      name: "Automatic translate",
      description: "Translate text as it is being typed",
      type: "toggle",
      notices: [
        .../*$settings*/
        ctx[5].service_settings[
          /*translation_service*/
          ctx[0]
        ]?.auto_translate ? [] : [
          {
            text: `The 'automatic translation' setting for ${SERVICES_INFO[
              /*translation_service*/
              ctx[0]
            ].display_name} is not activated, enable it via the service's settings tab`,
            style: "translator-warning-text"
          }
        ],
        {
          text: "The delay for the automatic translation can be set in the global translation service settings",
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot_25] },
      $$scope: { ctx }
    }
  });
  settingitem2 = new SettingItem_default({
    props: {
      name: "Apply glossary",
      description: "Replace words with their glossary translation",
      type: "toggle",
      notices: (
        /*$settings*/
        ctx[5].apply_glossary ? [] : [
          {
            text: "Global 'glossary' option has not been activated yet, you can enable it in the 'Functionality' settings tab",
            style: "translator-warning-text"
          }
        ]
      ),
      $$slots: { control: [create_control_slot_110] },
      $$scope: { ctx }
    }
  });
  settingitem3 = new SettingItem_default({
    props: {
      name: "Filter mode",
      description: "Set which languages are visible for this view",
      type: "dropdown",
      notices: [
        {
          text: "Manual language selection can be set in the service's settings",
          style: "translator-info-text"
        }
      ],
      $$slots: { control: [create_control_slot8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(settingitem0.$$.fragment);
      t0 = space();
      create_component(settingitem1.$$.fragment);
      t1 = space();
      create_component(settingitem2.$$.fragment);
      t2 = space();
      create_component(settingitem3.$$.fragment);
      t3 = space();
      div = element("div");
      button0 = element("button");
      button0.textContent = "Cancel";
      t5 = space();
      button1 = element("button");
      button1.textContent = "Confirm";
      attr(button1, "class", "translator-success");
      attr(div, "class", "translator-confirmation-buttons");
    },
    m(target, anchor) {
      mount_component(settingitem0, target, anchor);
      insert(target, t0, anchor);
      mount_component(settingitem1, target, anchor);
      insert(target, t1, anchor);
      mount_component(settingitem2, target, anchor);
      insert(target, t2, anchor);
      mount_component(settingitem3, target, anchor);
      insert(target, t3, anchor);
      insert(target, div, anchor);
      append(div, button0);
      append(div, t5);
      append(div, button1);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[12]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[13]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const settingitem0_changes = {};
      if (dirty & /*$$scope, $available_translator_services, translation_service*/
      16401) {
        settingitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem0.$set(settingitem0_changes);
      const settingitem1_changes = {};
      if (dirty & /*$settings, translation_service*/
      33)
        settingitem1_changes.notices = [
          .../*$settings*/
          ctx2[5].service_settings[
            /*translation_service*/
            ctx2[0]
          ]?.auto_translate ? [] : [
            {
              text: `The 'automatic translation' setting for ${SERVICES_INFO[
                /*translation_service*/
                ctx2[0]
              ].display_name} is not activated, enable it via the service's settings tab`,
              style: "translator-warning-text"
            }
          ],
          {
            text: "The delay for the automatic translation can be set in the global translation service settings",
            style: "translator-info-text"
          }
        ];
      if (dirty & /*$$scope, auto_translate, $settings, translation_service*/
      16419) {
        settingitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem1.$set(settingitem1_changes);
      const settingitem2_changes = {};
      if (dirty & /*$settings*/
      32)
        settingitem2_changes.notices = /*$settings*/
        ctx2[5].apply_glossary ? [] : [
          {
            text: "Global 'glossary' option has not been activated yet, you can enable it in the 'Functionality' settings tab",
            style: "translator-warning-text"
          }
        ];
      if (dirty & /*$$scope, $settings, apply_glossary*/
      16420) {
        settingitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem2.$set(settingitem2_changes);
      const settingitem3_changes = {};
      if (dirty & /*$$scope, filter_mode*/
      16392) {
        settingitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      settingitem3.$set(settingitem3_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(settingitem0.$$.fragment, local);
      transition_in(settingitem1.$$.fragment, local);
      transition_in(settingitem2.$$.fragment, local);
      transition_in(settingitem3.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(settingitem0.$$.fragment, local);
      transition_out(settingitem1.$$.fragment, local);
      transition_out(settingitem2.$$.fragment, local);
      transition_out(settingitem3.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(div);
      }
      destroy_component(settingitem0, detaching);
      destroy_component(settingitem1, detaching);
      destroy_component(settingitem2, detaching);
      destroy_component(settingitem3, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  let $available_translator_services;
  let $settings;
  component_subscribe($$self, available_translator_services, ($$value) => $$invalidate(4, $available_translator_services = $$value));
  component_subscribe($$self, settings, ($$value) => $$invalidate(5, $settings = $$value));
  const dispatch2 = createEventDispatcher();
  let { translation_service = "" } = $$props;
  let { auto_translate = false } = $$props;
  let { apply_glossary = false } = $$props;
  let { filter_mode = 0 } = $$props;
  const func = (service) => {
    return {
      "value": service,
      "text": SERVICES_INFO[service].display_name
    };
  };
  const func_1 = (e) => {
    $$invalidate(0, translation_service = e.target.value);
  };
  const func_2 = (val) => {
    $$invalidate(1, auto_translate = val);
  };
  const func_3 = (val) => {
    $$invalidate(2, apply_glossary = val);
  };
  const func_4 = (e) => {
    $$invalidate(3, filter_mode = parseInt(e.target.value));
  };
  const click_handler = async () => dispatch2("close");
  const click_handler_1 = async () => {
    dispatch2("close", {
      translation_service,
      auto_translate,
      apply_glossary,
      filter_mode
    });
  };
  $$self.$$set = ($$props2) => {
    if ("translation_service" in $$props2)
      $$invalidate(0, translation_service = $$props2.translation_service);
    if ("auto_translate" in $$props2)
      $$invalidate(1, auto_translate = $$props2.auto_translate);
    if ("apply_glossary" in $$props2)
      $$invalidate(2, apply_glossary = $$props2.apply_glossary);
    if ("filter_mode" in $$props2)
      $$invalidate(3, filter_mode = $$props2.filter_mode);
  };
  return [
    translation_service,
    auto_translate,
    apply_glossary,
    filter_mode,
    $available_translator_services,
    $settings,
    dispatch2,
    func,
    func_1,
    func_2,
    func_3,
    func_4,
    click_handler,
    click_handler_1
  ];
}
var ViewFunctionalityModalView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment26, safe_not_equal, {
      translation_service: 0,
      auto_translate: 1,
      apply_glossary: 2,
      filter_mode: 3
    });
  }
};
var ViewFunctionalityModalView_default = ViewFunctionalityModalView;

// src/ui/modals/view_functionality_modal.ts
var ViewFunctionalityModal = class extends import_obsidian35.Modal {
  view;
  translator_view;
  constructor(app2, translator_view) {
    super(app2);
    this.translator_view = translator_view;
    this.titleEl.innerText = "Alter translation view functionality";
  }
  async onOpen() {
    const state = this.translator_view.getState();
    this.view = new ViewFunctionalityModalView_default({
      target: this.contentEl,
      props: state
    });
    this.view.$on("close", async (e) => {
      if (e.detail)
        await this.translator_view.setState(Object.assign(state, e.detail), {});
      super.close();
    });
  }
  onClose() {
    this.view.$destroy();
  }
};

// src/view.ts
var TranslatorView = class extends import_obsidian36.ItemView {
  plugin;
  view;
  // Translation service store is shared with the View component
  translation_service = writable("dummy");
  // TODO: navigation causes notes to be replaced
  // navigation = true;
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.addAction("palette", "Change the view's appearance", () => {
      new ViewAppearanceModal(app, this).open();
    });
    this.addAction("wrench", "Alter the view's functionality", () => {
      new ViewFunctionalityModal(app, this).open();
    });
  }
  getViewType() {
    return TRANSLATOR_VIEW_ID;
  }
  getDisplayText() {
    return SERVICES_INFO[get_store_value(this.translation_service)].display_name;
  }
  getIcon() {
    return get_store_value(this.translation_service);
  }
  async onOpen() {
    this.contentEl.id = this.leaf.id;
    this.contentEl.style.display = "flex";
    this.contentEl.style.flexDirection = "column";
  }
  getState() {
    let state = super.getState();
    if (this.view) {
      state.language_from = this.view.$$.ctx[this.view.$$.props.language_from];
      state.language_to = this.view.$$.ctx[this.view.$$.props.language_to];
      state.translation_service = get_store_value(this.translation_service);
      state.auto_translate = this.view.$$.ctx[this.view.$$.props.auto_translate];
      state.apply_glossary = this.view.$$.ctx[this.view.$$.props.apply_glossary];
      state.view_mode = this.view.$$.ctx[this.view.$$.props.view_mode];
      state.filter_mode = this.view.$$.ctx[this.view.$$.props.filter_mode];
      state.show_attribution = this.view.$$.ctx[this.view.$$.props.show_attribution];
      state.top_buttons = this.view.$$.ctx[this.view.$$.props.top_buttons];
      state.left_buttons = this.view.$$.ctx[this.view.$$.props.left_buttons];
      state.right_buttons = this.view.$$.ctx[this.view.$$.props.right_buttons];
    }
    return state;
  }
  async updateState(props) {
    this.view.$set(props);
  }
  async setState(state, result) {
    const current_settings = get_store_value(settings);
    if (!this.view) {
      this.translation_service.subscribe((value) => {
        (0, import_obsidian36.setIcon)(this.leaf.tabHeaderInnerIconEl, value);
        const title = SERVICES_INFO[value].display_name;
        this.leaf.tabHeaderEl.ariaLabel = title;
        this.leaf.tabHeaderInnerTitleEl.innerText = title;
        this.leaf.view.titleEl.innerText = title;
      });
      this.translation_service.set(state.translation_service || current_settings.translation_service);
      this.view = new ViewPage_default({
        target: this.contentEl,
        props: {
          plugin: this.plugin,
          id: this.contentEl.id,
          translation_service: this.translation_service,
          // Get either the stored state settings, or use the default settings
          language_from: state.language_from ?? current_settings.default_source_language,
          language_to: state.language_to ?? current_settings.default_target_language,
          auto_translate: state.auto_translate || false,
          apply_glossary: state.apply_glossary ?? current_settings.apply_glossary,
          view_mode: state.view_mode ?? current_settings.layout_default,
          filter_mode: state.filter_mode || 0,
          show_attribution: state.show_attribution ?? current_settings.hide_attribution_default,
          top_buttons: state.top_buttons ?? [...current_settings.quicksettings_default],
          left_buttons: state.left_buttons ?? [...current_settings.left_quickactions_default],
          right_buttons: state.right_buttons ?? [...current_settings.right_quickactions_default]
        }
      });
    } else {
      this.translation_service.set(state.translation_service || current_settings.translation_service);
      this.view.$set({
        language_from: state.language_from || current_settings.default_source_language,
        language_to: state.language_to || current_settings.default_target_language,
        auto_translate: state.auto_translate || false,
        apply_glossary: state.apply_glossary || false,
        view_mode: state.view_mode || 0,
        filter_mode: state.filter_mode || 0,
        show_attribution: state.show_attribution !== void 0 ? state.show_attribution : true,
        top_buttons: state.top_buttons || [],
        left_buttons: state.left_buttons || [],
        right_buttons: state.right_buttons || []
      });
    }
    await super.setState(state, result);
  }
  async setEphemeralState(state) {
    if (state.receive_focus) {
      this.containerEl.find(".translator-left-column").children[1].children[0].focus();
    }
  }
  async onClose() {
    this.view.$destroy();
    this.containerEl.detach();
  }
  onResize() {
    const rectangle = this.contentEl.getBoundingClientRect();
    this.view.onResize(rectangle.width, rectangle.height);
  }
};

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/main.ts
var TranslatorPlugin = class extends import_obsidian37.Plugin {
  /**
   * Svelte component that handles all reactive interactions within the plugin
   */
  reactivity;
  /**
   * Current display language of Obsidian
   */
  current_language;
  /**
   * This is a callback function that will be called on uninstallation of the plugin,
   * using monkey-around to execute additional code after the Obsidian uninstallation process has finished.
   */
  uninstall;
  /**
   * Plugin's default (global) translator, is used for all commands (translate file, ...)
   * @public
   * */
  translator;
  /**
   * Plugin's default (global) language detector, is used for language detection commands and for glossary language determination
   * @public
   */
  detector;
  /**
   * Used to prevent Translation View messages from appearing while settings are being changed
   */
  settings_open = false;
  /**
   * Notice queue for the plugin, it can be configured to only show one message at a time, only show unique messages, etc.
   * @param limitCount - The number of messages that can be queued at a time, other messages will be discarded
   * @param interval - The time in milliseconds between each message
   * @param unique - Whether to only show unique messages (identical content)
   * @param defaultTimeout - The default time each message will be shown
   * @param fn - Message constructor: (text: string, timeout?: number, priority?: boolean) => { new Notice }, can be customized
   */
  message_queue;
  async onload() {
    this.current_language = import_obsidian37.moment.locale();
    const default_timeout = 4e3;
    this.message_queue = rateLimit(5, 3e3, true, default_timeout, (text2, timeout = default_timeout, priority = false) => {
      new import_obsidian37.Notice(text2, timeout);
    });
    const models_data = app.loadLocalStorage("models");
    if (models_data) {
      localStorage.removeItem(`${app.appId}-models`);
      const models = JSON.parse(models_data) || {};
      fasttext_data.set(models.fasttext || {
        binary: void 0,
        models: void 0,
        version: void 0
      });
      bergamot_data.set(models.bergamot || {
        binary: void 0,
        models: void 0,
        version: void 0
      });
    } else {
      fasttext_data.set(JSON.parse(app.loadLocalStorage("fasttext")) || {
        binary: void 0,
        models: void 0,
        version: void 0
      });
      bergamot_data.set(JSON.parse(app.loadLocalStorage("bergamot")) || {
        binary: void 0,
        models: void 0,
        version: void 0
      });
    }
    password.set(app.loadLocalStorage("password") || "");
    let loaded_settings = await this.loadData();
    const translation_service = loaded_settings?.translation_service || DEFAULT_SETTINGS.translation_service;
    const set_if_exists = Object.keys(SERVICES_INFO).filter((key) => translation_service !== key);
    if (loaded_settings && !loaded_settings?.version && loaded_settings.filtered_services?.length) {
      loaded_settings.filtered_services = [...loaded_settings.filtered_services, "fasttext"];
    }
    loaded_settings = nested_object_assign(DEFAULT_SETTINGS, loaded_settings ? loaded_settings : {}, new Set(set_if_exists));
    if (loaded_settings.translation_service === "bing_translator")
      loaded_settings.translation_service = "azure_translator";
    if (loaded_settings?.service_settings["bing_translator"]) {
      loaded_settings.service_settings["azure_translator"] = loaded_settings.service_settings["bing_translator"];
      delete loaded_settings.service_settings["bing_translator"];
    }
    if (loaded_settings.local_glossary !== void 0) {
      loaded_settings.glossary_preference = loaded_settings.local_glossary ? "both" : "online";
      loaded_settings.local_glossary = void 0;
    }
    loaded_settings.version = DEFAULT_SETTINGS.version;
    if (loaded_settings.storage_path) {
      try {
        await app.vault.adapter.rename(`${app.vault.configDir}/${loaded_settings.storage_path}`, `${app.vault.configDir}/plugins/translate/models`);
      } catch (e) {
        console.error(e);
      }
      delete loaded_settings.storage_path;
    }
    for (const [key, value] of Object.entries(loaded_settings.service_settings)) {
      if (value.version < DEFAULT_SETTINGS.service_settings[key].version) {
        loaded_settings.service_settings[key].available_languages = DEFAULT_SETTINGS.service_settings[key].available_languages;
        loaded_settings.service_settings[key].downloadable_models = DEFAULT_SETTINGS.service_settings[key].downloadable_models;
        loaded_settings.service_settings[key].glossary_languages = DEFAULT_SETTINGS.service_settings[key].glossary_languages;
        loaded_settings.service_settings[key].version = DEFAULT_SETTINGS.service_settings[key].version;
      }
    }
    settings.set(loaded_settings);
    this.register(settings.subscribe((settings_data) => {
      this.saveSettings(settings_data);
    }));
    this.addSettingTab(new TranslatorSettingsTab(this.app, this));
    this.registerView(
      TRANSLATOR_VIEW_ID,
      (leaf) => new TranslatorView(leaf, this)
    );
    globals2.plugin = this;
    for (const [id, icon] of Object.entries(ICONS))
      (0, import_obsidian37.addIcon)(id, icon);
    this.reactivity = new Reactivity_default({
      target: document.body,
      props: {
        plugin: this
      }
    });
    this.uninstall = around(app.plugins, {
      uninstallPlugin: (oldMethod) => {
        return async (...args) => {
          const result = oldMethod && oldMethod.apply(app.plugins, args);
          if (args[0] === "translate") {
            localStorage.removeItem(`${app.appId}-password`);
            localStorage.removeItem(`${app.appId}-fasttext`);
            localStorage.removeItem(`${app.appId}-bergamot`);
            localStorage.removeItem(`${app.appId}-obfuscate_keys`);
            localStorage.removeItem(`${app.appId}-hide_shortcut_tooltips_toggle`);
            const loaded_settings2 = get_store_value(settings);
            if (loaded_settings2.security_setting === "local_only") {
              for (const service of Object.keys(SERVICES_INFO)) {
                localStorage.removeItem(`${app.appId}-${service}_api_key`);
              }
            }
          }
        };
      }
    });
    this.addRibbonIcon("translate", "Open translation view", async () => {
      await this.activateTranslatorView();
    });
    const commands = [
      {
        id: "translator-open-view",
        name: "Open translation view",
        icon: "translate",
        callback: async () => {
          await this.activateTranslatorView();
        }
      },
      {
        id: "translator-change-service",
        name: "Change Translator Service",
        icon: "cloud",
        callback: () => {
          new SwitchService(this.app, this, (service) => {
            this.setTranslationService(service);
          }).open();
        }
      },
      {
        id: "translator-to-new-file",
        name: "Translate note to new file",
        icon: "translate-file-new",
        editor_context: true,
        callback: () => {
          new TranslateModal(this.app, this, "file-new").open();
        }
      },
      {
        id: "translator-to-curr-file",
        name: "Translate note and replace current file",
        icon: "translate-file-new",
        editor_context: true,
        callback: () => {
          new TranslateModal(this.app, this, "file-current").open();
        }
      },
      {
        id: "translator-selection",
        name: "Translate selection (choose language)",
        icon: "translate-selection-filled",
        editor_context: true,
        callback: () => {
          new TranslateModal(this.app, this, "selection").open();
        }
      },
      {
        id: "translator-selection-default",
        name: "Translate selection (default language)",
        icon: "translate-selection-filled",
        editor_context: true,
        callback: async (editor, view) => {
          const loaded_settings2 = get_store_value(settings);
          let language = this.current_language;
          if (loaded_settings2.target_language_preference === "last") {
            language = loaded_settings2.last_used_target_languages?.first();
            if (!language) {
              this.message_queue("No last language found, select language manually");
              new TranslateModal(this.app, this, "selection").open();
              return;
            }
          } else if (loaded_settings2.target_language_preference === "specific")
            language = loaded_settings2.default_target_language;
          await translate_selection(this, editor, language, {
            apply_glossary: loaded_settings2.apply_glossary
          }, loaded_settings2.translation_command_action);
        }
      },
      {
        id: "translator-detection",
        name: "Detect language of selection",
        icon: "detect-selection",
        editor_context: true,
        callback: async (editor, view) => {
          await detect_selection(this, editor);
        }
      },
      {
        id: "translator-focus-view",
        name: "Focus on translation view",
        icon: "search",
        callback: () => {
          const translator_views = this.app.workspace.getLeavesOfType("translator-view");
          if (!translator_views.length)
            return;
          let most_recent_view = translator_views.reduce(
            (prev, curr) => curr.activeTime > prev.activeTime ? curr : prev
          );
          if (!most_recent_view)
            return;
          if (most_recent_view.parent?.parent === this.app.workspace.rightSplit)
            this.app.workspace.rightSplit.expand();
          else if (most_recent_view.parent?.parent === this.app.workspace.leftSplit)
            this.app.workspace.leftSplit.expand();
          this.app.workspace.setActiveLeaf(most_recent_view);
          most_recent_view.view.containerEl.find(".translator-left-column").children[1].children[0].focus();
        }
      }
    ];
    for (let command of commands) {
      if (import_obsidian37.Platform.isMobile || command.editor_context) {
        command.editorCallback = command.callback;
        delete command.callback;
      }
      this.addCommand(command);
    }
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file, source, leaf) => {
        if (!(file instanceof import_obsidian37.TFolder)) {
          menu.addItem((item) => {
            item.setTitle("Translate note to new file").setIcon("translate").onClick(async (a) => {
              await new TranslateModal(this.app, this, "file-new", file).open();
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        if (this.translator.has_autodetect_capability()) {
          const languages = get_store_value(available_languages);
          const languages_dict = get_store_value(all_languages);
          if (languages.length) {
            menu.addItem((item) => {
              const translation_callback = async (language) => {
                const output = await translate_selection(this, editor, language, {
                  apply_glossary: loaded_settings2.apply_glossary
                }, loaded_settings2.translation_command_action);
                if (output.status_code === 200) {
                  settings.update((x) => {
                    if (!x.last_used_target_languages.contains(language)) {
                      x.last_used_target_languages = [language, ...x.last_used_target_languages].slice(0, 3);
                    } else {
                      x.last_used_target_languages = x.last_used_target_languages.filter((x2) => x2 !== language);
                      x.last_used_target_languages = [language, ...x.last_used_target_languages];
                    }
                    return x;
                  });
                } else if (output.message) {
                  this.message_queue(output.message);
                }
              };
              const loaded_settings2 = get_store_value(settings);
              let pinned_languages = [];
              if (loaded_settings2.target_language_preference === "last")
                pinned_languages = loaded_settings2.last_used_target_languages;
              else if (loaded_settings2.target_language_preference === "specific")
                pinned_languages = [loaded_settings2.default_target_language];
              else if (loaded_settings2.target_language_preference === "display")
                pinned_languages = [this.current_language];
              pinned_languages = pinned_languages.filter((x) => languages.includes(x));
              item.setTitle("Translate").setIcon("translate").setDisabled(!this.translator.valid || !editor.getSelection()).setSection("translate");
              item.callback = async () => {
                menu.hide();
                if (pinned_languages)
                  await translation_callback(pinned_languages.first());
                else
                  await translation_callback(this.current_language);
              };
              let dropdown_menu_items = Array.from(languages).map((locale2) => {
                return [locale2, languages_dict.get(locale2)];
              }).sort((a, b) => a[1].localeCompare(b[1]));
              const subMenu = item.setSubmenu();
              if (pinned_languages) {
                for (const locale2 of pinned_languages) {
                  subMenu.addItem((item2) => {
                    item2.setTitle(languages_dict.get(locale2)).onClick(async (e) => {
                      await translation_callback(locale2);
                    });
                  });
                }
                subMenu.addSeparator();
              }
              for (let [locale2, name] of dropdown_menu_items) {
                subMenu.addItem((item2) => {
                  item2.setTitle(name).onClick(async (e) => {
                    await translation_callback(locale2);
                  });
                });
              }
            });
          }
        }
        if (this.translator?.has_autodetect_capability()) {
          menu.addItem((item) => {
            item.setTitle("Detect Language").setIcon("detect-selection").setDisabled(!this.translator.valid || !editor.getSelection()).onClick(async () => {
              await detect_selection(this, editor);
            });
            item.setSection("translate");
          });
        }
      })
    );
  }
  async onunload() {
    this.reactivity.$destroy();
    this.uninstall();
  }
  async activateTranslatorView() {
    const loaded_settings = get_store_value(settings);
    const translation_service = loaded_settings.translation_service;
    let target_language = this.current_language;
    if (loaded_settings.target_language_preference === "last")
      target_language = loaded_settings.last_used_target_languages.last() || loaded_settings.default_target_language;
    else if (loaded_settings.target_language_preference === "specific")
      target_language = loaded_settings.default_target_language;
    const view_state = {
      type: TRANSLATOR_VIEW_ID,
      active: true,
      state: {
        language_from: loaded_settings.default_source_language || "auto",
        language_to: target_language,
        translation_service
      }
    };
    const empheral_state = {
      receive_focus: true
    };
    let translation_leaf;
    if (!(this.app.workspace.activeLeaf == null) && this.app.workspace.activeLeaf.getRoot() == this.app.workspace.rootSplit) {
      translation_leaf = await this.app.workspace.getLeaf("split", "vertical");
    } else {
      translation_leaf = this.app.workspace.getRightLeaf(false);
      this.app.workspace.revealLeaf(translation_leaf);
    }
    await translation_leaf.setViewState(view_state);
    await translation_leaf.setEphemeralState(empheral_state);
  }
  // --------------------------------------------------------------
  async saveSettings(updatedSettings) {
    await this.saveData(updatedSettings);
  }
  // ------------------------- External Interface -------------------------
  async setTranslationService(service) {
    if (service in SERVICES_INFO) {
      settings.update((x) => {
        x.translation_service = service;
        return x;
      });
    } else {
      console.error(`Service ${service} not found`);
    }
  }
};
